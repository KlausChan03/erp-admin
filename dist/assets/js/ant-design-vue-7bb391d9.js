import { _ as _typeof, a as _toConsumableArray, b as _extends, c as _slicedToArray, d as _objectSpread2, e as _defineProperty, f as _toArray$1, g as _createClass, h as _classCallCheck, r as regenerator, i as _createForOfIteratorHelper } from "./@babel-2ac7e3e5.js";
import { z } from "./vue-types-e39ece55.js";
import { o as omit } from "./omit.js-8aeb4109.js";
import { i as index$k } from "./resize-observer-polyfill-41c23942.js";
import { i as isPlainObject, o as omit$1, u as uniq, a as isNil, d as debounce$1, b as indexOf, c as isEqual$1, e as cloneDeep, f as find, g as intersection, h as isNumber, p as padEnd, j as padStart, k as get, m as merge, t as throttle, l as partition, n as findIndex, q as uniqBy } from "./lodash-es-23e4464f.js";
import { C as Comment$1, F as Fragment, T as Text$2, i as isVNode, d as defineComponent, c as reactive, o as onMounted, e as onUpdated, f as onUnmounted, w as watch, g as getCurrentInstance, h as inject, j as computed, k as createVNode, p as provide, l as ref, n as nextTick, m as onBeforeUnmount, q as cloneVNode, s as watchEffect, t as withDirectives, u as createTextVNode, v as onBeforeUpdate, x as Transition$2, y as TransitionGroup$1, z as vShow, A as Teleport, B as onActivated, D as onDeactivated, E as toRaw, G as toRef, H as unref, I as createApp, J as render, K as onBeforeMount, L as markRaw } from "./@vue-39dade2e.js";
import { h as hooks } from "./moment-f39140d2.js";
import { a as alignElement, b as alignPoint } from "./dom-align-9919c820.js";
import { C as CloseCircleFilled, L as LoadingOutlined, a as CheckOutlined, b as CloseOutlined, S as SearchOutlined, D as DownOutlined, E as EyeOutlined, c as EyeInvisibleOutlined, d as CheckCircleFilled, I as InfoCircleFilled, e as ExclamationCircleFilled, f as CheckCircleOutlined, g as InfoCircleOutlined, h as CloseCircleOutlined, i as ExclamationCircleOutlined, V as VerticalAlignTopOutlined, j as EllipsisOutlined, R as RightOutlined, U as UpOutlined, k as LeftOutlined, P as PlusOutlined, l as RedoOutlined, m as CalendarOutlined, n as ClockCircleOutlined, Z as ZoomInOutlined, o as ZoomOutOutlined, p as RotateRightOutlined, q as RotateLeftOutlined, B as BarsOutlined, r as DoubleLeftOutlined, s as DoubleRightOutlined, A as ArrowRightOutlined, t as ArrowLeftOutlined, u as StarFilled, W as WarningFilled, F as FilterFilled, v as CaretUpFilled, w as CaretDownFilled, x as FileTwoTone, M as MinusSquareOutlined, y as PlusSquareOutlined, z as FolderOpenOutlined, G as FolderOutlined, H as CaretDownOutlined, J as EnterOutlined, K as EditOutlined, N as CopyOutlined, O as PaperClipOutlined, Q as PictureTwoTone, T as DeleteOutlined, X as DownloadOutlined } from "./@ant-design-9aa5e5ec.js";
import { a as arrayTreeFilter } from "./array-tree-filter-7da04b0d.js";
import { s as shallowEqualArrays } from "./shallow-equal-751ba107.js";
import { S as Schema } from "./async-validator-f2a6c09d.js";
import { s as scrollIntoView } from "./scroll-into-view-if-needed-c253da67.js";
import { w as warning_1 } from "./warning-cc941e3b.js";
import { s as scrollIntoView$1 } from "./dom-scroll-into-view-5e57096f.js";
var PropTypes = z({
  func: void 0,
  bool: void 0,
  string: void 0,
  number: void 0,
  array: void 0,
  object: void 0,
  integer: void 0
});
PropTypes.extend([{
  name: "looseBool",
  getter: true,
  type: Boolean,
  default: void 0
}, {
  name: "style",
  getter: true,
  type: [String, Object],
  default: void 0
}, {
  name: "VNodeChild",
  getter: true,
  type: null
}]);
function withUndefined(type2) {
  type2.default = void 0;
  return type2;
}
var PropsTypes = PropTypes;
var isFunction = function isFunction2(val) {
  return typeof val === "function";
};
var isArray = Array.isArray;
var isString$1 = function isString(val) {
  return typeof val === "string";
};
var isObject$1 = function isObject(val) {
  return val !== null && _typeof(val) === "object";
};
var onRE = /^on[^a-z]/;
var isOn = function isOn2(key2) {
  return onRE.test(key2);
};
var cacheStringFunction = function cacheStringFunction2(fn) {
  var cache = Object.create(null);
  return function(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction(function(str) {
  return str.replace(camelizeRE, function(_, c) {
    return c ? c.toUpperCase() : "";
  });
});
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cacheStringFunction(function(str) {
  return str.replace(hyphenateRE, "-$1").toLowerCase();
});
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = function hasOwn2(val, key2) {
  return hasOwnProperty.call(val, key2);
};
function resolvePropValue(options2, props2, key2, value26) {
  var opt = options2[key2];
  if (opt != null) {
    var hasDefault = hasOwn(opt, "default");
    if (hasDefault && value26 === void 0) {
      var defaultValue = opt.default;
      value26 = opt.type !== Function && isFunction(defaultValue) ? defaultValue() : defaultValue;
    }
    if (opt.type === Boolean) {
      if (!hasOwn(props2, key2) && !hasDefault) {
        value26 = false;
      } else if (value26 === "") {
        value26 = true;
      }
    }
  }
  return value26;
}
function getDataAndAriaProps$1(props2) {
  return Object.keys(props2).reduce(function(memo, key2) {
    if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-") {
      memo[key2] = props2[key2];
    }
    return memo;
  }, {});
}
function classNames() {
  var classes4 = [];
  for (var i = 0; i < arguments.length; i++) {
    var value26 = i < 0 || arguments.length <= i ? void 0 : arguments[i];
    if (!value26)
      continue;
    if (isString$1(value26)) {
      classes4.push(value26);
    } else if (isArray(value26)) {
      for (var _i = 0; _i < value26.length; _i++) {
        var inner = classNames(value26[_i]);
        if (inner) {
          classes4.push(inner);
        }
      }
    } else if (isObject$1(value26)) {
      for (var name2 in value26) {
        if (value26[name2]) {
          classes4.push(name2);
        }
      }
    }
  }
  return classes4.join(" ");
}
var isValid = function isValid2(value26) {
  return value26 !== void 0 && value26 !== null && value26 !== "";
};
var isValid$1 = isValid;
var splitAttrs = function splitAttrs2(attrs) {
  var allAttrs = Object.keys(attrs);
  var eventAttrs = {};
  var onEvents = {};
  var extraAttrs = {};
  for (var i = 0, l = allAttrs.length; i < l; i++) {
    var key2 = allAttrs[i];
    if (isOn(key2)) {
      eventAttrs[key2[2].toLowerCase() + key2.slice(3)] = attrs[key2];
      onEvents[key2] = attrs[key2];
    } else {
      extraAttrs[key2] = attrs[key2];
    }
  }
  return {
    onEvents,
    events: eventAttrs,
    extraAttrs
  };
};
var parseStyleText = function parseStyleText2() {
  var cssText = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var camel = arguments.length > 1 ? arguments[1] : void 0;
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function(item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      if (tmp.length > 1) {
        var k = camel ? camelize(tmp[0].trim()) : tmp[0].trim();
        res[k] = tmp[1].trim();
      }
    }
  });
  return res;
};
var hasProp = function hasProp2(instance, prop) {
  return prop in getOptionProps(instance);
};
var flattenChildren = function flattenChildren2() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var filterEmpty2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var temp = Array.isArray(children) ? children : [children];
  var res = [];
  temp.forEach(function(child) {
    if (Array.isArray(child)) {
      res.push.apply(res, _toConsumableArray(flattenChildren2(child, filterEmpty2)));
    } else if (child && child.type === Fragment) {
      res.push.apply(res, _toConsumableArray(flattenChildren2(child.children, filterEmpty2)));
    } else if (child && isVNode(child)) {
      if (filterEmpty2 && !isEmptyElement(child)) {
        res.push(child);
      } else if (!filterEmpty2) {
        res.push(child);
      }
    } else if (isValid$1(child)) {
      res.push(child);
    }
  });
  return res;
};
var getSlot = function getSlot2(self) {
  var name2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default";
  var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (isVNode(self)) {
    if (self.type === Fragment) {
      return name2 === "default" ? flattenChildren(self.children) : [];
    } else if (self.children && self.children[name2]) {
      return flattenChildren(self.children[name2](options2));
    } else {
      return [];
    }
  } else {
    var res = self.$slots[name2] && self.$slots[name2](options2);
    return flattenChildren(res);
  }
};
var findDOMNode = function findDOMNode2(instance) {
  var _a;
  var node = ((_a = instance === null || instance === void 0 ? void 0 : instance.vnode) === null || _a === void 0 ? void 0 : _a.el) || instance && (instance.$el || instance);
  while (node && !node.tagName) {
    node = node.nextSibling;
  }
  return node;
};
var getOptionProps = function getOptionProps2(instance) {
  var res = {};
  if (instance.$ && instance.$.vnode) {
    var props2 = instance.$.vnode.props || {};
    Object.keys(instance.$props).forEach(function(k) {
      var v = instance.$props[k];
      var hyphenateKey = hyphenate(k);
      if (v !== void 0 || hyphenateKey in props2) {
        res[k] = v;
      }
    });
  } else if (isVNode(instance) && _typeof(instance.type) === "object") {
    var originProps = instance.props || {};
    var _props = {};
    Object.keys(originProps).forEach(function(key2) {
      _props[camelize(key2)] = originProps[key2];
    });
    var options2 = instance.type.props || {};
    Object.keys(options2).forEach(function(k) {
      var v = resolvePropValue(options2, _props, k, _props[k]);
      if (v !== void 0 || k in _props) {
        res[k] = v;
      }
    });
  }
  return res;
};
var getComponent = function getComponent2(instance) {
  var prop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default";
  var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : instance;
  var execute = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var com = void 0;
  if (instance.$) {
    var temp = instance[prop];
    if (temp !== void 0) {
      return typeof temp === "function" && execute ? temp(options2) : temp;
    } else {
      com = instance.$slots[prop];
      com = execute && com ? com(options2) : com;
    }
  } else if (isVNode(instance)) {
    var _temp = instance.props && instance.props[prop];
    if (_temp !== void 0 && instance.props !== null) {
      return typeof _temp === "function" && execute ? _temp(options2) : _temp;
    } else if (instance.type === Fragment) {
      com = instance.children;
    } else if (instance.children && instance.children[prop]) {
      com = instance.children[prop];
      com = execute && com ? com(options2) : com;
    }
  }
  if (Array.isArray(com)) {
    com = flattenChildren(com);
    com = com.length === 1 ? com[0] : com;
    com = com.length === 0 ? void 0 : com;
  }
  return com;
};
var getPropsData = function getPropsData2(ins) {
  var vnode = ins.$ ? ins.$ : ins;
  var res = {};
  var originProps = vnode.props || {};
  var props2 = {};
  Object.keys(originProps).forEach(function(key2) {
    props2[camelize(key2)] = originProps[key2];
  });
  var options2 = isPlainObject(vnode.type) ? vnode.type.props : {};
  options2 && Object.keys(options2).forEach(function(k) {
    var v = resolvePropValue(options2, props2, k, props2[k]);
    if (k in props2) {
      res[k] = v;
    }
  });
  return _extends(_extends({}, props2), res);
};
var getKey$2 = function getKey(ele) {
  var key2 = ele.key;
  return key2;
};
function getEvents() {
  var ele = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var on = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var props2 = {};
  if (ele.$) {
    props2 = _extends(_extends({}, props2), ele.$attrs);
  } else {
    props2 = _extends(_extends({}, props2), ele.props);
  }
  return splitAttrs(props2)[on ? "onEvents" : "events"];
}
function getClass(ele) {
  var props2 = (isVNode(ele) ? ele.props : ele.$attrs) || {};
  var tempCls = props2.class || {};
  var cls = {};
  if (typeof tempCls === "string") {
    tempCls.split(" ").forEach(function(c) {
      cls[c.trim()] = true;
    });
  } else if (Array.isArray(tempCls)) {
    classNames(tempCls).split(" ").forEach(function(c) {
      cls[c.trim()] = true;
    });
  } else {
    cls = _extends(_extends({}, cls), tempCls);
  }
  return cls;
}
function getStyle$1(ele, camel) {
  var props2 = (isVNode(ele) ? ele.props : ele.$attrs) || {};
  var style3 = props2.style || {};
  if (typeof style3 === "string") {
    style3 = parseStyleText(style3, camel);
  } else if (camel && style3) {
    var res = {};
    Object.keys(style3).forEach(function(k) {
      return res[camelize(k)] = style3[k];
    });
    return res;
  }
  return style3;
}
function isEmptyContent(c) {
  return c === void 0 || c === null || c === "" || Array.isArray(c) && c.length === 0;
}
function isEmptyElement(c) {
  return c && (c.type === Comment$1 || c.type === Fragment && c.children.length === 0 || c.type === Text$2 && c.children.trim() === "");
}
function isEmptySlot(c) {
  return !c || c().every(isEmptyElement);
}
function isStringElement(c) {
  return c && c.type === Text$2;
}
function filterEmpty() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var res = [];
  children.forEach(function(child) {
    if (Array.isArray(child)) {
      res.push.apply(res, _toConsumableArray(child));
    } else if (child.type === Fragment) {
      res.push.apply(res, _toConsumableArray(child.children));
    } else {
      res.push(child);
    }
  });
  return res.filter(function(c) {
    return !isEmptyElement(c);
  });
}
var initDefaultProps$2 = function initDefaultProps(propTypes2, defaultProps2) {
  Object.keys(defaultProps2).forEach(function(k) {
    if (propTypes2[k]) {
      propTypes2[k].def && (propTypes2[k] = propTypes2[k].def(defaultProps2[k]));
    } else {
      throw new Error("not have ".concat(k, " prop"));
    }
  });
  return propTypes2;
};
function mergeProps() {
  var args = [].slice.call(arguments, 0);
  var props2 = {};
  args.forEach(function() {
    var p = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    for (var _i = 0, _Object$entries = Object.entries(p); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), k = _Object$entries$_i[0], v = _Object$entries$_i[1];
      props2[k] = props2[k] || {};
      if (isPlainObject(v)) {
        _extends(props2[k], v);
      } else {
        props2[k] = v;
      }
    }
  });
  return props2;
}
function isValidElement(element) {
  return element && element.__v_isVNode && _typeof(element.type) !== "symbol";
}
function getPropsSlot(slots, props2) {
  var prop = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "default";
  var _a, _b;
  return (_a = props2[prop]) !== null && _a !== void 0 ? _a : (_b = slots[prop]) === null || _b === void 0 ? void 0 : _b.call(slots);
}
var hasProp$1 = hasProp;
var ResizeObserver = defineComponent({
  name: "ResizeObserver",
  props: {
    disabled: Boolean,
    onResize: Function
  },
  emits: ["resize"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var state = reactive({
      width: 0,
      height: 0,
      offsetHeight: 0,
      offsetWidth: 0
    });
    var currentElement = null;
    var resizeObserver = null;
    var destroyObserver = function destroyObserver2() {
      if (resizeObserver) {
        resizeObserver.disconnect();
        resizeObserver = null;
      }
    };
    var onResize = function onResize2(entries) {
      var onResize3 = props2.onResize;
      var target = entries[0].target;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (state.width !== fixedWidth || state.height !== fixedHeight || state.offsetWidth !== offsetWidth || state.offsetHeight !== offsetHeight) {
        var size = {
          width: fixedWidth,
          height: fixedHeight,
          offsetWidth,
          offsetHeight
        };
        _extends(state, size);
        if (onResize3) {
          Promise.resolve().then(function() {
            onResize3(_extends(_extends({}, size), {
              offsetWidth,
              offsetHeight
            }), target);
          });
        }
      }
    };
    var instance = getCurrentInstance();
    var registerObserver = function registerObserver2() {
      var disabled = props2.disabled;
      if (disabled) {
        destroyObserver();
        return;
      }
      var element = findDOMNode(instance);
      var elementChanged = element !== currentElement;
      if (elementChanged) {
        destroyObserver();
        currentElement = element;
      }
      if (!resizeObserver && element) {
        resizeObserver = new index$k(onResize);
        resizeObserver.observe(element);
      }
    };
    onMounted(function() {
      registerObserver();
    });
    onUpdated(function() {
      registerObserver();
    });
    onUnmounted(function() {
      destroyObserver();
    });
    watch(function() {
      return props2.disabled;
    }, function() {
      registerObserver();
    }, {
      flush: "post"
    });
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)[0];
    };
  }
});
function throttleByAnimationFrame(fn) {
  var requestId;
  var later = function later2(args) {
    return function() {
      requestId = null;
      fn.apply(void 0, _toConsumableArray(args));
    };
  };
  var throttled = function throttled2() {
    if (requestId == null) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      requestId = requestAnimationFrame(later(args));
    }
  };
  throttled.cancel = function() {
    return cancelAnimationFrame(requestId);
  };
  return throttled;
}
var tuple = function tuple2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args;
};
var tupleNum = function tupleNum2() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return args;
};
var withInstall = function withInstall2(comp) {
  var c = comp;
  c.install = function(app) {
    app.component(c.displayName || c.name, comp);
  };
  return comp;
};
var supportsPassive = false;
try {
  var opts = Object.defineProperty({}, "passive", {
    get: function get2() {
      supportsPassive = true;
    }
  });
  window.addEventListener("testPassive", null, opts);
  window.removeEventListener("testPassive", null, opts);
} catch (e) {
}
var supportsPassive$1 = supportsPassive;
function addEventListenerWrap(target, eventType, cb, option) {
  if (target.addEventListener) {
    var opt = option;
    if (opt === void 0 && supportsPassive$1 && (eventType === "touchstart" || eventType === "touchmove" || eventType === "wheel")) {
      opt = {
        passive: false
      };
    }
    target.addEventListener(eventType, cb, opt);
  }
  return {
    remove: function remove3() {
      if (target.removeEventListener) {
        target.removeEventListener(eventType, cb);
      }
    }
  };
}
function getTargetRect(target) {
  return target !== window ? target.getBoundingClientRect() : {
    top: 0,
    bottom: window.innerHeight
  };
}
function getFixedTop(placeholderReact, targetRect, offsetTop) {
  if (offsetTop !== void 0 && targetRect.top > placeholderReact.top - offsetTop) {
    return "".concat(offsetTop + targetRect.top, "px");
  }
  return void 0;
}
function getFixedBottom(placeholderReact, targetRect, offsetBottom) {
  if (offsetBottom !== void 0 && targetRect.bottom < placeholderReact.bottom + offsetBottom) {
    var targetBottomOffset = window.innerHeight - targetRect.bottom;
    return "".concat(offsetBottom + targetBottomOffset, "px");
  }
  return void 0;
}
var TRIGGER_EVENTS = ["resize", "scroll", "touchstart", "touchmove", "touchend", "pageshow", "load"];
var observerEntities = [];
function addObserveTarget(target, affix) {
  if (!target)
    return;
  var entity = observerEntities.find(function(item) {
    return item.target === target;
  });
  if (entity) {
    entity.affixList.push(affix);
  } else {
    entity = {
      target,
      affixList: [affix],
      eventHandlers: {}
    };
    observerEntities.push(entity);
    TRIGGER_EVENTS.forEach(function(eventName) {
      entity.eventHandlers[eventName] = addEventListenerWrap(target, eventName, function() {
        entity.affixList.forEach(function(targetAffix) {
          var lazyUpdatePosition = targetAffix.exposed.lazyUpdatePosition;
          lazyUpdatePosition();
        }, (eventName === "touchstart" || eventName === "touchmove") && supportsPassive$1 ? {
          passive: true
        } : false);
      });
    });
  }
}
function removeObserveTarget(affix) {
  var observerEntity = observerEntities.find(function(oriObserverEntity) {
    var hasAffix = oriObserverEntity.affixList.some(function(item) {
      return item === affix;
    });
    if (hasAffix) {
      oriObserverEntity.affixList = oriObserverEntity.affixList.filter(function(item) {
        return item !== affix;
      });
    }
    return hasAffix;
  });
  if (observerEntity && observerEntity.affixList.length === 0) {
    observerEntities = observerEntities.filter(function(item) {
      return item !== observerEntity;
    });
    TRIGGER_EVENTS.forEach(function(eventName) {
      var handler8 = observerEntity.eventHandlers[eventName];
      if (handler8 && handler8.remove) {
        handler8.remove();
      }
    });
  }
}
var enUS$2 = {
  items_per_page: "/ page",
  jump_to: "Go to",
  jump_to_confirm: "confirm",
  page: "",
  prev_page: "Previous Page",
  next_page: "Next Page",
  prev_5: "Previous 5 Pages",
  next_5: "Next 5 Pages",
  prev_3: "Previous 3 Pages",
  next_3: "Next 3 Pages"
};
var enUs = {
  today: "Today",
  now: "Now",
  backToToday: "Back to today",
  ok: "Ok",
  clear: "Clear",
  month: "Month",
  year: "Year",
  timeSelect: "select time",
  dateSelect: "select date",
  weekSelect: "Choose a week",
  monthSelect: "Choose a month",
  yearSelect: "Choose a year",
  decadeSelect: "Choose a decade",
  yearFormat: "YYYY",
  dateFormat: "M/D/YYYY",
  dayFormat: "D",
  dateTimeFormat: "M/D/YYYY HH:mm:ss",
  monthBeforeYear: true,
  previousMonth: "Previous month (PageUp)",
  nextMonth: "Next month (PageDown)",
  previousYear: "Last year (Control + left)",
  nextYear: "Next year (Control + right)",
  previousDecade: "Last decade",
  nextDecade: "Next decade",
  previousCentury: "Last century",
  nextCentury: "Next century"
};
var locale$1 = {
  placeholder: "Select time"
};
var enUS$1 = locale$1;
var locale = {
  lang: _extends({
    placeholder: "Select date",
    rangePlaceholder: ["Start date", "End date"]
  }, enUs),
  timePickerLocale: _extends({}, enUS$1)
};
var enUS = locale;
var typeTemplate$1 = "${label} is not a valid ${type}";
var defaultLocale = {
  locale: "en",
  Pagination: enUS$2,
  DatePicker: enUS,
  TimePicker: enUS$1,
  Calendar: enUS,
  global: {
    placeholder: "Please select"
  },
  Table: {
    filterTitle: "Filter menu",
    filterConfirm: "OK",
    filterReset: "Reset",
    filterEmptyText: "No filters",
    emptyText: "No data",
    selectAll: "Select current page",
    selectInvert: "Invert current page",
    selectNone: "Clear all data",
    selectionAll: "Select all data",
    sortTitle: "Sort",
    expand: "Expand row",
    collapse: "Collapse row",
    triggerDesc: "Click to sort descending",
    triggerAsc: "Click to sort ascending",
    cancelSort: "Click to cancel sorting"
  },
  Modal: {
    okText: "OK",
    cancelText: "Cancel",
    justOkText: "OK"
  },
  Popconfirm: {
    okText: "OK",
    cancelText: "Cancel"
  },
  Transfer: {
    titles: ["", ""],
    searchPlaceholder: "Search here",
    itemUnit: "item",
    itemsUnit: "items",
    remove: "Remove",
    selectCurrent: "Select current page",
    removeCurrent: "Remove current page",
    selectAll: "Select all data",
    removeAll: "Remove all data",
    selectInvert: "Invert current page"
  },
  Upload: {
    uploading: "Uploading...",
    removeFile: "Remove file",
    uploadError: "Upload error",
    previewFile: "Preview file",
    downloadFile: "Download file"
  },
  Empty: {
    description: "No Data"
  },
  Icon: {
    icon: "icon"
  },
  Text: {
    edit: "Edit",
    copy: "Copy",
    copied: "Copied",
    expand: "Expand"
  },
  PageHeader: {
    back: "Back"
  },
  Form: {
    optional: "(optional)",
    defaultValidateMessages: {
      default: "Field validation error for ${label}",
      required: "Please enter ${label}",
      enum: "${label} must be one of [${enum}]",
      whitespace: "${label} cannot be a blank character",
      date: {
        format: "${label} date format is invalid",
        parse: "${label} cannot be converted to a date",
        invalid: "${label} is an invalid date"
      },
      types: {
        string: typeTemplate$1,
        method: typeTemplate$1,
        array: typeTemplate$1,
        object: typeTemplate$1,
        number: typeTemplate$1,
        date: typeTemplate$1,
        boolean: typeTemplate$1,
        integer: typeTemplate$1,
        float: typeTemplate$1,
        regexp: typeTemplate$1,
        email: typeTemplate$1,
        url: typeTemplate$1,
        hex: typeTemplate$1
      },
      string: {
        len: "${label} must be ${len} characters",
        min: "${label} must be at least ${min} characters",
        max: "${label} must be up to ${max} characters",
        range: "${label} must be between ${min}-${max} characters"
      },
      number: {
        len: "${label} must be equal to ${len}",
        min: "${label} must be minimum ${min}",
        max: "${label} must be maximum ${max}",
        range: "${label} must be between ${min}-${max}"
      },
      array: {
        len: "Must be ${len} ${label}",
        min: "At least ${min} ${label}",
        max: "At most ${max} ${label}",
        range: "The amount of ${label} must be between ${min}-${max}"
      },
      pattern: {
        mismatch: "${label} does not match the pattern ${pattern}"
      }
    }
  },
  Image: {
    preview: "Preview"
  }
};
var LocaleReceiver = defineComponent({
  name: "LocaleReceiver",
  props: {
    componentName: PropsTypes.string,
    defaultLocale: {
      type: [Object, Function]
    },
    children: {
      type: Function
    }
  },
  setup: function setup2(props2, _ref) {
    var slots = _ref.slots;
    var localeData = inject("localeData", {});
    var locale2 = computed(function() {
      var _props$componentName = props2.componentName, componentName = _props$componentName === void 0 ? "global" : _props$componentName, defaultLocale$1 = props2.defaultLocale;
      var locale3 = defaultLocale$1 || defaultLocale[componentName || "global"];
      var antLocale = localeData.antLocale;
      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
      return _extends(_extends({}, typeof locale3 === "function" ? locale3() : locale3), localeFromContext || {});
    });
    var localeCode = computed(function() {
      var antLocale = localeData.antLocale;
      var localeCode2 = antLocale && antLocale.locale;
      if (antLocale && antLocale.exist && !localeCode2) {
        return defaultLocale.locale;
      }
      return localeCode2;
    });
    return function() {
      var children = props2.children || slots.default;
      var antLocale = localeData.antLocale;
      return children === null || children === void 0 ? void 0 : children(locale2.value, localeCode.value, antLocale);
    };
  }
});
function useLocaleReceiver(componentName, defaultLocale$1) {
  var localeData = inject("localeData", {});
  var componentLocale = computed(function() {
    var antLocale = localeData.antLocale;
    var locale2 = defaultLocale$1 || defaultLocale[componentName || "global"];
    var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
    return _extends(_extends({}, typeof locale2 === "function" ? locale2() : locale2), localeFromContext || {});
  });
  return [componentLocale];
}
var Empty$2 = function Empty() {
  var _inject = inject("configProvider", defaultConfigProvider), getPrefixCls2 = _inject.getPrefixCls;
  var prefixCls2 = getPrefixCls2("empty-img-default");
  return createVNode("svg", {
    "class": prefixCls2,
    "width": "184",
    "height": "152",
    "viewBox": "0 0 184 152"
  }, [createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("g", {
    "transform": "translate(24 31.67)"
  }, [createVNode("ellipse", {
    "class": "".concat(prefixCls2, "-ellipse"),
    "cx": "67.797",
    "cy": "106.89",
    "rx": "67.797",
    "ry": "12.668"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-1"),
    "d": "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-2"),
    "d": "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
    "transform": "translate(13.56)"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-3"),
    "d": "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-4"),
    "d": "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
  }, null)]), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-5"),
    "d": "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
  }, null), createVNode("g", {
    "class": "".concat(prefixCls2, "-g"),
    "transform": "translate(149.65 15.383)"
  }, [createVNode("ellipse", {
    "cx": "20.654",
    "cy": "3.167",
    "rx": "2.849",
    "ry": "2.815"
  }, null), createVNode("path", {
    "d": "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
  }, null)])])]);
};
Empty$2.PRESENTED_IMAGE_DEFAULT = true;
var DefaultEmptyImg = Empty$2;
var Simple = function Simple2() {
  var _inject = inject("configProvider", defaultConfigProvider), getPrefixCls2 = _inject.getPrefixCls;
  var prefixCls2 = getPrefixCls2("empty-img-simple");
  return createVNode("svg", {
    "class": prefixCls2,
    "width": "64",
    "height": "41",
    "viewBox": "0 0 64 41"
  }, [createVNode("g", {
    "transform": "translate(0 1)",
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("ellipse", {
    "class": "".concat(prefixCls2, "-ellipse"),
    "fill": "#F5F5F5",
    "cx": "32",
    "cy": "33",
    "rx": "32",
    "ry": "7"
  }, null), createVNode("g", {
    "class": "".concat(prefixCls2, "-g"),
    "fill-rule": "nonzero",
    "stroke": "#D9D9D9"
  }, [createVNode("path", {
    "d": "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
  }, null), createVNode("path", {
    "d": "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
    "fill": "#FAFAFA",
    "class": "".concat(prefixCls2, "-path")
  }, null)])])]);
};
Simple.PRESENTED_IMAGE_SIMPLE = true;
var SimpleEmptyImg = Simple;
var __rest$X = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var defaultEmptyImg = createVNode(DefaultEmptyImg, null, null);
var simpleEmptyImg = createVNode(SimpleEmptyImg, null, null);
var Empty2 = function Empty3(props2, _ref) {
  var _ref$slots = _ref.slots, slots = _ref$slots === void 0 ? {} : _ref$slots, attrs = _ref.attrs;
  var _a;
  var configProvider = inject("configProvider", defaultConfigProvider);
  var getPrefixCls2 = configProvider.getPrefixCls, direction = configProvider.direction;
  var _b = _extends(_extends({}, props2), attrs), customizePrefixCls = _b.prefixCls, _b$image = _b.image, image = _b$image === void 0 ? defaultEmptyImg : _b$image, _b$description = _b.description, description2 = _b$description === void 0 ? ((_a = slots.description) === null || _a === void 0 ? void 0 : _a.call(slots)) || void 0 : _b$description, imageStyle = _b.imageStyle, _b$class = _b.class, className = _b$class === void 0 ? "" : _b$class, restProps = __rest$X(_b, ["prefixCls", "image", "description", "imageStyle", "class"]);
  return createVNode(LocaleReceiver, {
    "componentName": "Empty",
    "children": function children(locale2) {
      var _classNames;
      var prefixCls2 = getPrefixCls2("empty", customizePrefixCls);
      var des = typeof description2 !== "undefined" ? description2 : locale2.description;
      var alt = typeof des === "string" ? des : "empty";
      var imageNode = null;
      if (typeof image === "string") {
        imageNode = createVNode("img", {
          "alt": alt,
          "src": image
        }, null);
      } else {
        imageNode = image;
      }
      return createVNode("div", _objectSpread2({
        "class": classNames(prefixCls2, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-normal"), image === simpleEmptyImg), _defineProperty(_classNames, "".concat(prefixCls2, "-rtl"), direction === "rtl"), _classNames))
      }, restProps), [createVNode("div", {
        "class": "".concat(prefixCls2, "-image"),
        "style": imageStyle
      }, [imageNode]), des && createVNode("p", {
        "class": "".concat(prefixCls2, "-description")
      }, [des]), slots.default && createVNode("div", {
        "class": "".concat(prefixCls2, "-footer")
      }, [filterEmpty(slots.default())])]);
    }
  }, null);
};
Empty2.displayName = "AEmpty";
Empty2.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
Empty2.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
Empty2.inheritAttrs = false;
Empty2.props = {
  prefixCls: PropsTypes.string,
  image: PropsTypes.any,
  description: PropsTypes.any,
  imageStyle: PropsTypes.object
};
var Empty$1 = withInstall(Empty2);
var RenderEmpty = function RenderEmpty2(props2) {
  var configProvider = inject("configProvider", defaultConfigProvider);
  var renderHtml = function renderHtml2(componentName) {
    var getPrefixCls2 = configProvider.getPrefixCls;
    var prefix = getPrefixCls2("empty");
    switch (componentName) {
      case "Table":
      case "List":
        return createVNode(Empty$1, {
          "image": Empty$1.PRESENTED_IMAGE_SIMPLE
        }, null);
      case "Select":
      case "TreeSelect":
      case "Cascader":
      case "Transfer":
      case "Mentions":
        return createVNode(Empty$1, {
          "image": Empty$1.PRESENTED_IMAGE_SIMPLE,
          "class": "".concat(prefix, "-small")
        }, null);
      default:
        return createVNode(Empty$1, null, null);
    }
  };
  return renderHtml(props2.componentName);
};
function renderEmpty(componentName) {
  return createVNode(RenderEmpty, {
    "componentName": componentName
  }, null);
}
function interopDefault(m) {
  return m.default || m;
}
var runtimeLocale = _extends({}, defaultLocale.Modal);
function changeConfirmLocale(newLocale) {
  if (newLocale) {
    runtimeLocale = _extends(_extends({}, runtimeLocale), newLocale);
  } else {
    runtimeLocale = _extends({}, defaultLocale.Modal);
  }
}
function getConfirmLocale() {
  return runtimeLocale;
}
var warned = {};
function warning$2(valid, message2) {
}
function note(valid, message2) {
}
function call(method, valid, message2) {
  if (!valid && !warned[message2]) {
    method(false, message2);
    warned[message2] = true;
  }
}
function warningOnce(valid, message2) {
  call(warning$2, valid, message2);
}
function noteOnce(valid, message2) {
  call(note, valid, message2);
}
var warning$1 = function(valid, component) {
  var message2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  warningOnce(valid, "[antdv: ".concat(component, "] ").concat(message2));
};
var ANT_MARK = "internalMark";
function setMomentLocale(locale2) {
  if (locale2 && locale2.locale) {
    interopDefault(hooks).locale(locale2.locale);
  } else {
    interopDefault(hooks).locale("en");
  }
}
var LocaleProvider = defineComponent({
  name: "ALocaleProvider",
  props: {
    locale: {
      type: Object
    },
    ANT_MARK__: PropsTypes.string
  },
  setup: function setup3(props2, _ref) {
    var slots = _ref.slots;
    warning$1(props2.ANT_MARK__ === ANT_MARK, "LocaleProvider", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead");
    var state = reactive({
      antLocale: _extends(_extends({}, props2.locale), {
        exist: true
      }),
      ANT_MARK__: ANT_MARK
    });
    provide("localeData", state);
    watch(function() {
      return props2.locale;
    }, function(val) {
      state.antLocale = _extends(_extends({}, val), {
        exist: true
      });
      setMomentLocale(val);
      changeConfirmLocale(val && val.Modal);
    }, {
      immediate: true
    });
    onUnmounted(function() {
      changeConfirmLocale();
    });
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
LocaleProvider.install = function(app) {
  app.component(LocaleProvider.name, LocaleProvider);
  return app;
};
var LocaleProvider$1 = withInstall(LocaleProvider);
var configProviderProps = {
  getTargetContainer: {
    type: Function
  },
  getPopupContainer: {
    type: Function
  },
  prefixCls: String,
  getPrefixCls: {
    type: Function
  },
  renderEmpty: {
    type: Function
  },
  transformCellText: {
    type: Function
  },
  csp: {
    type: Object
  },
  autoInsertSpaceInButton: PropsTypes.looseBool,
  locale: {
    type: Object
  },
  pageHeader: {
    type: Object
  },
  componentSize: {
    type: String
  },
  direction: {
    type: String
  },
  space: {
    type: Object
  },
  virtual: PropsTypes.looseBool,
  dropdownMatchSelectWidth: PropsTypes.looseBool,
  form: {
    type: Object
  }
};
var ConfigProvider = defineComponent({
  name: "AConfigProvider",
  props: configProviderProps,
  setup: function setup4(props2, _ref) {
    var slots = _ref.slots;
    var getPrefixCls2 = function getPrefixCls3(suffixCls, customizePrefixCls) {
      var _props$prefixCls = props2.prefixCls, prefixCls2 = _props$prefixCls === void 0 ? "ant" : _props$prefixCls;
      if (customizePrefixCls)
        return customizePrefixCls;
      return suffixCls ? "".concat(prefixCls2, "-").concat(suffixCls) : prefixCls2;
    };
    var renderEmptyComponent = function renderEmptyComponent2(name2) {
      var renderEmpty$1 = props2.renderEmpty || slots.renderEmpty || renderEmpty;
      return renderEmpty$1(name2);
    };
    var getPrefixClsWrapper = function getPrefixClsWrapper2(suffixCls, customizePrefixCls) {
      var prefixCls2 = props2.prefixCls;
      if (customizePrefixCls)
        return customizePrefixCls;
      var mergedPrefixCls = prefixCls2 || getPrefixCls2("");
      return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    };
    var configProvider = reactive(_extends(_extends({}, props2), {
      getPrefixCls: getPrefixClsWrapper,
      renderEmpty: renderEmptyComponent
    }));
    Object.keys(props2).forEach(function(key2) {
      watch(function() {
        return props2[key2];
      }, function() {
        configProvider[key2] = props2[key2];
      });
    });
    provide("configProvider", configProvider);
    var renderProvider = function renderProvider2(legacyLocale) {
      var _a;
      return createVNode(LocaleProvider$1, {
        "locale": props2.locale || legacyLocale,
        "ANT_MARK__": ANT_MARK
      }, {
        default: function _default8() {
          return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
        }
      });
    };
    return function() {
      return createVNode(LocaleReceiver, {
        "children": function children(_, __, legacyLocale) {
          return renderProvider(legacyLocale);
        }
      }, null);
    };
  }
});
var defaultConfigProvider = reactive({
  getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls)
      return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : "ant";
  },
  renderEmpty,
  direction: "ltr"
});
var index$j = withInstall(ConfigProvider);
var useConfigInject = function(name2, props2) {
  var configProvider = inject("configProvider", defaultConfigProvider);
  var prefixCls2 = computed(function() {
    return configProvider.getPrefixCls(name2, props2.prefixCls);
  });
  var direction = computed(function() {
    return configProvider.direction;
  });
  var autoInsertSpaceInButton = computed(function() {
    return configProvider.autoInsertSpaceInButton;
  });
  var renderEmpty2 = computed(function() {
    return configProvider.renderEmpty;
  });
  var space = computed(function() {
    return configProvider.space;
  });
  var pageHeader = computed(function() {
    return configProvider.pageHeader;
  });
  var form = computed(function() {
    return configProvider.form;
  });
  var size = computed(function() {
    return props2.size || configProvider.componentSize;
  });
  var getTargetContainer = computed(function() {
    return props2.getTargetContainer;
  });
  return {
    configProvider,
    prefixCls: prefixCls2,
    direction,
    size,
    getTargetContainer,
    space,
    pageHeader,
    form,
    autoInsertSpaceInButton,
    renderEmpty: renderEmpty2
  };
};
function getDefaultTarget() {
  return typeof window !== "undefined" ? window : null;
}
var AffixStatus;
(function(AffixStatus2) {
  AffixStatus2[AffixStatus2["None"] = 0] = "None";
  AffixStatus2[AffixStatus2["Prepare"] = 1] = "Prepare";
})(AffixStatus || (AffixStatus = {}));
var affixProps = {
  offsetTop: PropsTypes.number,
  offset: PropsTypes.number,
  offsetBottom: PropsTypes.number,
  target: PropsTypes.func.def(getDefaultTarget),
  prefixCls: PropsTypes.string,
  onChange: PropsTypes.func,
  onTestUpdatePosition: PropsTypes.func
};
var Affix = defineComponent({
  name: "AAffix",
  props: affixProps,
  emits: ["change", "testUpdatePosition"],
  setup: function setup5(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, expose = _ref.expose;
    var placeholderNode = ref();
    var fixedNode = ref();
    var state = reactive({
      affixStyle: void 0,
      placeholderStyle: void 0,
      status: AffixStatus.None,
      lastAffix: false,
      prevTarget: null,
      timeout: null
    });
    var currentInstance = getCurrentInstance();
    var offsetTop = computed(function() {
      return props2.offsetBottom === void 0 && props2.offsetTop === void 0 ? 0 : props2.offsetTop;
    });
    var offsetBottom = computed(function() {
      return props2.offsetBottom;
    });
    var measure2 = function measure3() {
      var status = state.status, lastAffix = state.lastAffix;
      var target = props2.target;
      if (status !== AffixStatus.Prepare || !fixedNode.value || !placeholderNode.value || !target) {
        return;
      }
      var targetNode = target();
      if (!targetNode) {
        return;
      }
      var newState = {
        status: AffixStatus.None
      };
      var targetRect = getTargetRect(targetNode);
      var placeholderReact = getTargetRect(placeholderNode.value);
      var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop.value);
      var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom.value);
      if (fixedTop !== void 0) {
        newState.affixStyle = {
          position: "fixed",
          top: fixedTop,
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
        newState.placeholderStyle = {
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
      } else if (fixedBottom !== void 0) {
        newState.affixStyle = {
          position: "fixed",
          bottom: fixedBottom,
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
        newState.placeholderStyle = {
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
      }
      newState.lastAffix = !!newState.affixStyle;
      if (lastAffix !== newState.lastAffix) {
        emit("change", newState.lastAffix);
      }
      _extends(state, newState);
    };
    var prepareMeasure = function prepareMeasure2() {
      _extends(state, {
        status: AffixStatus.Prepare,
        affixStyle: void 0,
        placeholderStyle: void 0
      });
      currentInstance.update();
    };
    var updatePosition = throttleByAnimationFrame(function() {
      prepareMeasure();
    });
    var lazyUpdatePosition = throttleByAnimationFrame(function() {
      var target = props2.target;
      var affixStyle = state.affixStyle;
      if (target && affixStyle) {
        var targetNode = target();
        if (targetNode && placeholderNode.value) {
          var targetRect = getTargetRect(targetNode);
          var placeholderReact = getTargetRect(placeholderNode.value);
          var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop.value);
          var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom.value);
          if (fixedTop !== void 0 && affixStyle.top === fixedTop || fixedBottom !== void 0 && affixStyle.bottom === fixedBottom) {
            return;
          }
        }
      }
      prepareMeasure();
    });
    expose({
      updatePosition,
      lazyUpdatePosition
    });
    watch(function() {
      return props2.target;
    }, function(val) {
      var newTarget = null;
      if (val) {
        newTarget = val() || null;
      }
      if (state.prevTarget !== newTarget) {
        removeObserveTarget(currentInstance);
        if (newTarget) {
          addObserveTarget(newTarget, currentInstance);
          updatePosition();
        }
        state.prevTarget = newTarget;
      }
    });
    watch(function() {
      return [props2.offsetTop, props2.offsetBottom];
    }, updatePosition);
    onMounted(function() {
      var target = props2.target;
      if (target) {
        state.timeout = setTimeout(function() {
          addObserveTarget(target(), currentInstance);
          updatePosition();
        });
      }
    });
    onUpdated(function() {
      measure2();
    });
    onUnmounted(function() {
      clearTimeout(state.timeout);
      removeObserveTarget(currentInstance);
      updatePosition.cancel();
      lazyUpdatePosition.cancel();
    });
    var _useConfigInject = useConfigInject("affix", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      var affixStyle = state.affixStyle, placeholderStyle = state.placeholderStyle;
      var className = classNames(_defineProperty({}, prefixCls2.value, affixStyle));
      var restProps = omit(props2, ["prefixCls", "offsetTop", "offsetBottom", "target"]);
      return createVNode(ResizeObserver, {
        "onResize": updatePosition
      }, {
        default: function _default8() {
          return [createVNode("div", _objectSpread2(_objectSpread2({}, restProps), {}, {
            "style": placeholderStyle,
            "ref": placeholderNode
          }), [createVNode("div", {
            "class": className,
            "ref": fixedNode,
            "style": affixStyle
          }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])])];
        }
      });
    };
  }
});
var Affix$1 = withInstall(Affix);
var id = 0;
var ids = {};
function wrapperRaf(callback) {
  var delayFrames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var myId = id++;
  var restFrames = delayFrames;
  function internalCallback() {
    restFrames -= 1;
    if (restFrames <= 0) {
      callback();
      delete ids[myId];
    } else {
      ids[myId] = requestAnimationFrame(internalCallback);
    }
  }
  ids[myId] = requestAnimationFrame(internalCallback);
  return myId;
}
wrapperRaf.cancel = function cancel(pid) {
  if (pid === void 0)
    return;
  cancelAnimationFrame(ids[pid]);
  delete ids[pid];
};
wrapperRaf.ids = ids;
function isWindow(obj) {
  return obj !== null && obj !== void 0 && obj === obj.window;
}
function getScroll$2(target, top) {
  var _a;
  if (typeof window === "undefined") {
    return 0;
  }
  var method = top ? "scrollTop" : "scrollLeft";
  var result = 0;
  if (isWindow(target)) {
    result = target[top ? "pageYOffset" : "pageXOffset"];
  } else if (target instanceof Document) {
    result = target.documentElement[method];
  } else if (target) {
    result = target[method];
  }
  if (target && !isWindow(target) && typeof result !== "number") {
    result = (_a = (target.ownerDocument || target).documentElement) === null || _a === void 0 ? void 0 : _a[method];
  }
  return result;
}
function easeInOutCubic(t, b, c, d) {
  var cc = c - b;
  t /= d / 2;
  if (t < 1) {
    return cc / 2 * t * t * t + b;
  }
  return cc / 2 * ((t -= 2) * t * t + 2) + b;
}
function scrollTo$1(y) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _options$getContainer = options2.getContainer, getContainer5 = _options$getContainer === void 0 ? function() {
    return window;
  } : _options$getContainer, callback = options2.callback, _options$duration = options2.duration, duration2 = _options$duration === void 0 ? 450 : _options$duration;
  var container = getContainer5();
  var scrollTop = getScroll$2(container, true);
  var startTime = Date.now();
  var frameFunc = function frameFunc2() {
    var timestamp = Date.now();
    var time = timestamp - startTime;
    var nextScrollTop = easeInOutCubic(time > duration2 ? duration2 : time, scrollTop, y, duration2);
    if (isWindow(container)) {
      container.scrollTo(window.pageXOffset, nextScrollTop);
    } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
      container.documentElement.scrollTop = nextScrollTop;
    } else {
      container.scrollTop = nextScrollTop;
    }
    if (time < duration2) {
      wrapperRaf(frameFunc2);
    } else if (typeof callback === "function") {
      callback();
    }
  };
  wrapperRaf(frameFunc);
}
function noop$H() {
}
var AnchorContextKey = Symbol("anchorContextKey");
var useProvideAnchor = function useProvideAnchor2(state) {
  provide(AnchorContextKey, state);
};
var useInjectAnchor = function useInjectAnchor2() {
  return inject(AnchorContextKey, {
    registerLink: noop$H,
    unregisterLink: noop$H,
    scrollTo: noop$H,
    activeLink: computed(function() {
      return "";
    }),
    handleClick: noop$H
  });
};
var useProvideAnchor$1 = useProvideAnchor;
function getDefaultContainer() {
  return window;
}
function getOffsetTop(element, container) {
  if (!element.getClientRects().length) {
    return 0;
  }
  var rect = element.getBoundingClientRect();
  if (rect.width || rect.height) {
    if (container === window) {
      container = element.ownerDocument.documentElement;
      return rect.top - container.clientTop;
    }
    return rect.top - container.getBoundingClientRect().top;
  }
  return rect.top;
}
var sharpMatcherRegx = /#(\S+)$/;
var anchorProps = {
  prefixCls: PropsTypes.string,
  offsetTop: PropsTypes.number,
  bounds: PropsTypes.number,
  affix: PropsTypes.looseBool.def(true),
  showInkInFixed: PropsTypes.looseBool.def(false),
  getContainer: PropsTypes.func.def(getDefaultContainer),
  wrapperClass: PropsTypes.string,
  wrapperStyle: PropsTypes.style,
  getCurrentAnchor: PropsTypes.func,
  targetOffset: PropsTypes.number,
  onChange: PropsTypes.func,
  onClick: PropsTypes.func
};
var Anchor = defineComponent({
  name: "AAnchor",
  inheritAttrs: false,
  props: anchorProps,
  emits: ["change", "click"],
  setup: function setup6(props2, _ref) {
    var emit = _ref.emit, attrs = _ref.attrs, slots = _ref.slots, expose = _ref.expose;
    var _useConfigInject = useConfigInject("anchor", props2), prefixCls2 = _useConfigInject.prefixCls, getTargetContainer = _useConfigInject.getTargetContainer, direction = _useConfigInject.direction;
    var inkNodeRef = ref();
    var anchorRef = ref();
    var state = reactive({
      links: [],
      scrollContainer: null,
      scrollEvent: null,
      animating: false
    });
    var activeLink = ref(null);
    var getContainer5 = computed(function() {
      var getContainer6 = props2.getContainer;
      return getContainer6 || getTargetContainer.value || getDefaultContainer;
    });
    var getCurrentAnchor = function getCurrentAnchor2() {
      var offsetTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var bounds = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      var linkSections = [];
      var container = getContainer5.value();
      state.links.forEach(function(link) {
        var sharpLinkMatch = sharpMatcherRegx.exec(link.toString());
        if (!sharpLinkMatch) {
          return;
        }
        var target = document.getElementById(sharpLinkMatch[1]);
        if (target) {
          var top = getOffsetTop(target, container);
          if (top < offsetTop + bounds) {
            linkSections.push({
              link,
              top
            });
          }
        }
      });
      if (linkSections.length) {
        var maxSection = linkSections.reduce(function(prev3, curr) {
          return curr.top > prev3.top ? curr : prev3;
        });
        return maxSection.link;
      }
      return "";
    };
    var setCurrentActiveLink = function setCurrentActiveLink2(link) {
      var getCurrentAnchor2 = props2.getCurrentAnchor;
      if (activeLink.value === link) {
        return;
      }
      activeLink.value = typeof getCurrentAnchor2 === "function" ? getCurrentAnchor2() : link;
      emit("change", link);
    };
    var handleScrollTo = function handleScrollTo2(link) {
      var offsetTop = props2.offsetTop, getContainer6 = props2.getContainer, targetOffset2 = props2.targetOffset;
      setCurrentActiveLink(link);
      var container = getContainer6();
      var scrollTop = getScroll$2(container, true);
      var sharpLinkMatch = sharpMatcherRegx.exec(link);
      if (!sharpLinkMatch) {
        return;
      }
      var targetElement = document.getElementById(sharpLinkMatch[1]);
      if (!targetElement) {
        return;
      }
      var eleOffsetTop = getOffsetTop(targetElement, container);
      var y = scrollTop + eleOffsetTop;
      y -= targetOffset2 !== void 0 ? targetOffset2 : offsetTop || 0;
      state.animating = true;
      scrollTo$1(y, {
        callback: function callback() {
          state.animating = false;
        },
        getContainer: getContainer6
      });
    };
    expose({
      scrollTo: handleScrollTo
    });
    var handleScroll4 = function handleScroll5() {
      if (state.animating) {
        return;
      }
      var offsetTop = props2.offsetTop, bounds = props2.bounds, targetOffset2 = props2.targetOffset;
      var currentActiveLink = getCurrentAnchor(targetOffset2 !== void 0 ? targetOffset2 : offsetTop || 0, bounds);
      setCurrentActiveLink(currentActiveLink);
    };
    var updateInk = function updateInk2() {
      var linkNode = anchorRef.value.getElementsByClassName("".concat(prefixCls2.value, "-link-title-active"))[0];
      if (linkNode) {
        inkNodeRef.value.style.top = "".concat(linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5, "px");
      }
    };
    useProvideAnchor$1({
      registerLink: function registerLink(link) {
        if (!state.links.includes(link)) {
          state.links.push(link);
        }
      },
      unregisterLink: function unregisterLink(link) {
        var index2 = state.links.indexOf(link);
        if (index2 !== -1) {
          state.links.splice(index2, 1);
        }
      },
      activeLink,
      scrollTo: handleScrollTo,
      handleClick: function handleClick5(e, info3) {
        emit("click", e, info3);
      }
    });
    onMounted(function() {
      nextTick(function() {
        var container = getContainer5.value();
        state.scrollContainer = container;
        state.scrollEvent = addEventListenerWrap(state.scrollContainer, "scroll", handleScroll4);
        handleScroll4();
      });
    });
    onBeforeUnmount(function() {
      if (state.scrollEvent) {
        state.scrollEvent.remove();
      }
    });
    onUpdated(function() {
      if (state.scrollEvent) {
        var currentContainer = getContainer5.value();
        if (state.scrollContainer !== currentContainer) {
          state.scrollContainer = currentContainer;
          state.scrollEvent.remove();
          state.scrollEvent = addEventListenerWrap(state.scrollContainer, "scroll", handleScroll4);
          handleScroll4();
        }
      }
      updateInk();
    });
    return function() {
      var _a;
      var offsetTop = props2.offsetTop, affix = props2.affix, showInkInFixed = props2.showInkInFixed;
      var pre = prefixCls2.value;
      var inkClass = classNames("".concat(pre, "-ink-ball"), {
        visible: activeLink.value
      });
      var wrapperClass = classNames(props2.wrapperClass, "".concat(pre, "-wrapper"), _defineProperty({}, "".concat(pre, "-rtl"), direction.value === "rtl"));
      var anchorClass = classNames(pre, {
        fixed: !affix && !showInkInFixed
      });
      var wrapperStyle2 = _extends({
        maxHeight: offsetTop ? "calc(100vh - ".concat(offsetTop, "px)") : "100vh"
      }, props2.wrapperStyle);
      var anchorContent = createVNode("div", {
        "class": wrapperClass,
        "style": wrapperStyle2,
        "ref": anchorRef
      }, [createVNode("div", {
        "class": anchorClass
      }, [createVNode("div", {
        "class": "".concat(pre, "-ink")
      }, [createVNode("span", {
        "class": inkClass,
        "ref": inkNodeRef
      }, null)]), (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])]);
      return !affix ? anchorContent : createVNode(Affix$1, _objectSpread2(_objectSpread2({}, attrs), {}, {
        "offsetTop": offsetTop,
        "target": getContainer5.value
      }), {
        default: function _default8() {
          return [anchorContent];
        }
      });
    };
  }
});
var anchorLinkProps = {
  prefixCls: PropsTypes.string,
  href: PropsTypes.string.def("#"),
  title: PropsTypes.VNodeChild,
  target: PropsTypes.string
};
var AnchorLink = defineComponent({
  name: "AAnchorLink",
  props: anchorLinkProps,
  slots: ["title"],
  setup: function setup7(props2, _ref) {
    var slots = _ref.slots;
    var mergedTitle = null;
    var _useInjectAnchor = useInjectAnchor(), contextHandleClick = _useInjectAnchor.handleClick, scrollTo3 = _useInjectAnchor.scrollTo, unregisterLink = _useInjectAnchor.unregisterLink, registerLink = _useInjectAnchor.registerLink, activeLink = _useInjectAnchor.activeLink;
    var _useConfigInject = useConfigInject("anchor", props2), prefixCls2 = _useConfigInject.prefixCls;
    var handleClick5 = function handleClick6(e) {
      var href = props2.href;
      contextHandleClick(e, {
        title: mergedTitle,
        href
      });
      scrollTo3(href);
    };
    watch(function() {
      return props2.href;
    }, function(val, oldVal) {
      nextTick(function() {
        unregisterLink(oldVal);
        registerLink(val);
      });
    });
    onMounted(function() {
      registerLink(props2.href);
    });
    onBeforeUnmount(function() {
      unregisterLink(props2.href);
    });
    return function() {
      var _a;
      var href = props2.href, target = props2.target;
      var pre = prefixCls2.value;
      var title2 = getPropsSlot(slots, props2, "title");
      mergedTitle = title2;
      var active = activeLink.value === href;
      var wrapperClassName = classNames("".concat(pre, "-link"), _defineProperty({}, "".concat(pre, "-link-active"), active));
      var titleClassName = classNames("".concat(pre, "-link-title"), _defineProperty({}, "".concat(pre, "-link-title-active"), active));
      return createVNode("div", {
        "class": wrapperClassName
      }, [createVNode("a", {
        "class": titleClassName,
        "href": href,
        "title": typeof title2 === "string" ? title2 : "",
        "target": target,
        "onClick": handleClick5
      }, [title2]), (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
Anchor.Link = AnchorLink;
Anchor.install = function(app) {
  app.component(Anchor.name, Anchor);
  app.component(Anchor.Link.name, Anchor.Link);
  return app;
};
var TransBtn = function TransBtn2(props2, _ref) {
  var slots = _ref.slots;
  var _a;
  var className = props2.class, customizeIcon = props2.customizeIcon, customizeIconProps = props2.customizeIconProps, _onMousedown = props2.onMousedown, onClick7 = props2.onClick;
  var icon;
  if (typeof customizeIcon === "function") {
    icon = customizeIcon(customizeIconProps);
  } else {
    icon = customizeIcon;
  }
  return createVNode("span", {
    "class": className,
    "onMousedown": function onMousedown2(event) {
      event.preventDefault();
      if (_onMousedown) {
        _onMousedown(event);
      }
    },
    "style": {
      userSelect: "none",
      WebkitUserSelect: "none"
    },
    "unselectable": "on",
    "onClick": onClick7,
    "aria-hidden": true
  }, [icon !== void 0 ? icon : createVNode("span", {
    "class": className.split(/\s+/).map(function(cls) {
      return "".concat(cls, "-icon");
    })
  }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])]);
};
TransBtn.inheritAttrs = false;
TransBtn.displayName = "TransBtn";
TransBtn.props = {
  class: PropsTypes.string,
  customizeIcon: PropsTypes.any,
  customizeIconProps: PropsTypes.any,
  onMousedown: PropsTypes.func,
  onClick: PropsTypes.func
};
var TransBtn$1 = TransBtn;
var KeyCode$1 = {
  MAC_ENTER: 3,
  BACKSPACE: 8,
  TAB: 9,
  NUM_CENTER: 12,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAUSE: 19,
  CAPS_LOCK: 20,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  PRINT_SCREEN: 44,
  INSERT: 45,
  DELETE: 46,
  ZERO: 48,
  ONE: 49,
  TWO: 50,
  THREE: 51,
  FOUR: 52,
  FIVE: 53,
  SIX: 54,
  SEVEN: 55,
  EIGHT: 56,
  NINE: 57,
  QUESTION_MARK: 63,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  META: 91,
  WIN_KEY_RIGHT: 92,
  CONTEXT_MENU: 93,
  NUM_ZERO: 96,
  NUM_ONE: 97,
  NUM_TWO: 98,
  NUM_THREE: 99,
  NUM_FOUR: 100,
  NUM_FIVE: 101,
  NUM_SIX: 102,
  NUM_SEVEN: 103,
  NUM_EIGHT: 104,
  NUM_NINE: 105,
  NUM_MULTIPLY: 106,
  NUM_PLUS: 107,
  NUM_MINUS: 109,
  NUM_PERIOD: 110,
  NUM_DIVISION: 111,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  NUMLOCK: 144,
  SEMICOLON: 186,
  DASH: 189,
  EQUALS: 187,
  COMMA: 188,
  PERIOD: 190,
  SLASH: 191,
  APOSTROPHE: 192,
  SINGLE_QUOTE: 222,
  OPEN_SQUARE_BRACKET: 219,
  BACKSLASH: 220,
  CLOSE_SQUARE_BRACKET: 221,
  WIN_KEY: 224,
  MAC_FF_META: 224,
  WIN_IME: 229,
  isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
    var keyCode = e.keyCode;
    if (e.altKey && !e.ctrlKey || e.metaKey || keyCode >= KeyCode$1.F1 && keyCode <= KeyCode$1.F12) {
      return false;
    }
    switch (keyCode) {
      case KeyCode$1.ALT:
      case KeyCode$1.CAPS_LOCK:
      case KeyCode$1.CONTEXT_MENU:
      case KeyCode$1.CTRL:
      case KeyCode$1.DOWN:
      case KeyCode$1.END:
      case KeyCode$1.ESC:
      case KeyCode$1.HOME:
      case KeyCode$1.INSERT:
      case KeyCode$1.LEFT:
      case KeyCode$1.MAC_FF_META:
      case KeyCode$1.META:
      case KeyCode$1.NUMLOCK:
      case KeyCode$1.NUM_CENTER:
      case KeyCode$1.PAGE_DOWN:
      case KeyCode$1.PAGE_UP:
      case KeyCode$1.PAUSE:
      case KeyCode$1.PRINT_SCREEN:
      case KeyCode$1.RIGHT:
      case KeyCode$1.SHIFT:
      case KeyCode$1.UP:
      case KeyCode$1.WIN_KEY:
      case KeyCode$1.WIN_KEY_RIGHT:
        return false;
      default:
        return true;
    }
  },
  isCharacterKey: function isCharacterKey(keyCode) {
    if (keyCode >= KeyCode$1.ZERO && keyCode <= KeyCode$1.NINE) {
      return true;
    }
    if (keyCode >= KeyCode$1.NUM_ZERO && keyCode <= KeyCode$1.NUM_MULTIPLY) {
      return true;
    }
    if (keyCode >= KeyCode$1.A && keyCode <= KeyCode$1.Z) {
      return true;
    }
    if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
      return true;
    }
    switch (keyCode) {
      case KeyCode$1.SPACE:
      case KeyCode$1.QUESTION_MARK:
      case KeyCode$1.NUM_PLUS:
      case KeyCode$1.NUM_MINUS:
      case KeyCode$1.NUM_PERIOD:
      case KeyCode$1.NUM_DIVISION:
      case KeyCode$1.SEMICOLON:
      case KeyCode$1.DASH:
      case KeyCode$1.EQUALS:
      case KeyCode$1.COMMA:
      case KeyCode$1.PERIOD:
      case KeyCode$1.SLASH:
      case KeyCode$1.APOSTROPHE:
      case KeyCode$1.SINGLE_QUOTE:
      case KeyCode$1.OPEN_SQUARE_BRACKET:
      case KeyCode$1.BACKSLASH:
      case KeyCode$1.CLOSE_SQUARE_BRACKET:
        return true;
      default:
        return false;
    }
  }
};
var KeyCode$2 = KeyCode$1;
var attributes = "accept acceptcharset accesskey action allowfullscreen allowtransparency\nalt async autocomplete autofocus autoplay capture cellpadding cellspacing challenge\ncharset checked classid classname colspan cols content contenteditable contextmenu\ncontrols coords crossorigin data datetime default defer dir disabled download draggable\nenctype form formaction formenctype formmethod formnovalidate formtarget frameborder\nheaders height hidden high href hreflang htmlfor httpequiv icon id inputmode integrity\nis keyparams keytype kind label lang list loop low manifest marginheight marginwidth max maxlength media\nmediagroup method min minlength multiple muted name novalidate nonce open\noptimum pattern placeholder poster preload radiogroup readonly rel required\nreversed role rowspan rows sandbox scope scoped scrolling seamless selected\nshape size sizes span spellcheck src srcdoc srclang srcset start step style\nsummary tabindex target title type usemap value width wmode wrap";
var eventsName = "onCopy onCut onPaste onCompositionend onCompositionstart onCompositionupdate onKeydown\n    onKeypress onKeyup onFocus onBlur onChange onInput onSubmit onClick onContextmenu onDoubleclick onDblclick\n    onDrag onDragend onDragenter onDragexit onDragleave onDragover onDragstart onDrop onMousedown\n    onMouseenter onMouseleave onMousemove onMouseout onMouseover onMouseup onSelect onTouchcancel\n    onTouchend onTouchmove onTouchstart onTouchstartPassive onTouchmovePassive onScroll onWheel onAbort onCanplay onCanplaythrough\n    onDurationchange onEmptied onEncrypted onEnded onError onLoadeddata onLoadedmetadata\n    onLoadstart onPause onPlay onPlaying onProgress onRatechange onSeeked onSeeking onStalled onSuspend onTimeupdate onVolumechange onWaiting onLoad onError";
var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
var ariaPrefix = "aria-";
var dataPrefix = "data-";
function match$1(key2, prefix) {
  return key2.indexOf(prefix) === 0;
}
function pickAttrs(props2) {
  var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var mergedConfig;
  if (ariaOnly === false) {
    mergedConfig = {
      aria: true,
      data: true,
      attr: true
    };
  } else if (ariaOnly === true) {
    mergedConfig = {
      aria: true
    };
  } else {
    mergedConfig = _extends({}, ariaOnly);
  }
  var attrs = {};
  Object.keys(props2).forEach(function(key2) {
    if (mergedConfig.aria && (key2 === "role" || match$1(key2, ariaPrefix)) || mergedConfig.data && match$1(key2, dataPrefix) || mergedConfig.attr && (propList.includes(key2) || propList.includes(key2.toLowerCase()))) {
      attrs[key2] = props2[key2];
    }
  });
  return attrs;
}
function createRef$1() {
  var func = function func2(node) {
    func2.current = node;
  };
  return func;
}
var Filter = function Filter2(_ref, _ref2) {
  var height = _ref.height, offset2 = _ref.offset, prefixCls2 = _ref.prefixCls, onInnerResize = _ref.onInnerResize;
  var slots = _ref2.slots;
  var _a;
  var outerStyle = {};
  var innerStyle = {
    display: "flex",
    flexDirection: "column"
  };
  if (offset2 !== void 0) {
    outerStyle = {
      height: "".concat(height, "px"),
      position: "relative",
      overflow: "hidden"
    };
    innerStyle = _extends(_extends({}, innerStyle), {
      transform: "translateY(".concat(offset2, "px)"),
      position: "absolute",
      left: 0,
      right: 0,
      top: 0
    });
  }
  return createVNode("div", {
    "style": outerStyle
  }, [createVNode(ResizeObserver, {
    "onResize": function onResize(_ref3) {
      var offsetHeight = _ref3.offsetHeight;
      if (offsetHeight && onInnerResize) {
        onInnerResize();
      }
    }
  }, {
    default: function _default8() {
      return [createVNode("div", {
        "style": innerStyle,
        "class": classNames(_defineProperty({}, "".concat(prefixCls2, "-holder-inner"), prefixCls2))
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])];
    }
  })]);
};
Filter.displayName = "Filter";
Filter.inheritAttrs = false;
Filter.props = {
  prefixCls: String,
  height: Number,
  offset: Number,
  onInnerResize: Function
};
var Filler = Filter;
var Item$2 = function Item(_ref, _ref2) {
  var setRef = _ref.setRef;
  var slots = _ref2.slots;
  var _a;
  var children = (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
  return children && children.length ? cloneVNode(children[0], {
    ref: setRef
  }) : children;
};
Item$2.props = {
  setRef: {
    type: Function,
    default: function _default() {
    }
  }
};
var Item$3 = Item$2;
var MIN_SIZE = 20;
function getPageY(e) {
  return "touches" in e ? e.touches[0].pageY : e.pageY;
}
var ScrollBar = defineComponent({
  name: "ScrollBar",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    scrollTop: PropsTypes.number,
    scrollHeight: PropsTypes.number,
    height: PropsTypes.number,
    count: PropsTypes.number,
    onScroll: {
      type: Function
    },
    onStartMove: {
      type: Function
    },
    onStopMove: {
      type: Function
    }
  },
  setup: function setup8() {
    return {
      moveRaf: null,
      scrollbarRef: createRef$1(),
      thumbRef: createRef$1(),
      visibleTimeout: null,
      state: reactive({
        dragging: false,
        pageY: null,
        startTop: null,
        visible: false
      })
    };
  },
  watch: {
    scrollTop: {
      handler: function handler() {
        this.delayHidden();
      },
      flush: "post"
    }
  },
  mounted: function mounted() {
    this.scrollbarRef.current.addEventListener("touchstart", this.onScrollbarTouchStart, supportsPassive$1 ? {
      passive: false
    } : false);
    this.thumbRef.current.addEventListener("touchstart", this.onMouseDown, supportsPassive$1 ? {
      passive: false
    } : false);
  },
  beforeUnmount: function beforeUnmount() {
    this.removeEvents();
    clearTimeout(this.visibleTimeout);
  },
  methods: {
    delayHidden: function delayHidden() {
      var _this = this;
      clearTimeout(this.visibleTimeout);
      this.state.visible = true;
      this.visibleTimeout = setTimeout(function() {
        _this.state.visible = false;
      }, 2e3);
    },
    onScrollbarTouchStart: function onScrollbarTouchStart(e) {
      e.preventDefault();
    },
    onContainerMouseDown: function onContainerMouseDown(e) {
      e.stopPropagation();
      e.preventDefault();
    },
    patchEvents: function patchEvents() {
      window.addEventListener("mousemove", this.onMouseMove);
      window.addEventListener("mouseup", this.onMouseUp);
      this.thumbRef.current.addEventListener("touchmove", this.onMouseMove, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.addEventListener("touchend", this.onMouseUp);
    },
    removeEvents: function removeEvents() {
      window.removeEventListener("mousemove", this.onMouseMove);
      window.removeEventListener("mouseup", this.onMouseUp);
      this.scrollbarRef.current.removeEventListener("touchstart", this.onScrollbarTouchStart, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.removeEventListener("touchstart", this.onMouseDown, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.removeEventListener("touchmove", this.onMouseMove, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.removeEventListener("touchend", this.onMouseUp);
      wrapperRaf.cancel(this.moveRaf);
    },
    onMouseDown: function onMouseDown(e) {
      var onStartMove = this.$props.onStartMove;
      _extends(this.state, {
        dragging: true,
        pageY: getPageY(e),
        startTop: this.getTop()
      });
      onStartMove();
      this.patchEvents();
      e.stopPropagation();
      e.preventDefault();
    },
    onMouseMove: function onMouseMove(e) {
      var _this$state = this.state, dragging = _this$state.dragging, pageY = _this$state.pageY, startTop = _this$state.startTop;
      var onScroll2 = this.$props.onScroll;
      wrapperRaf.cancel(this.moveRaf);
      if (dragging) {
        var offsetY = getPageY(e) - pageY;
        var newTop = startTop + offsetY;
        var enableScrollRange = this.getEnableScrollRange();
        var enableHeightRange = this.getEnableHeightRange();
        var ptg = enableHeightRange ? newTop / enableHeightRange : 0;
        var newScrollTop = Math.ceil(ptg * enableScrollRange);
        this.moveRaf = wrapperRaf(function() {
          onScroll2(newScrollTop);
        });
      }
    },
    onMouseUp: function onMouseUp() {
      var onStopMove = this.$props.onStopMove;
      this.state.dragging = false;
      onStopMove();
      this.removeEvents();
    },
    getSpinHeight: function getSpinHeight() {
      var _this$$props = this.$props, height = _this$$props.height, count = _this$$props.count;
      var baseHeight = height / count * 10;
      baseHeight = Math.max(baseHeight, MIN_SIZE);
      baseHeight = Math.min(baseHeight, height / 2);
      return Math.floor(baseHeight);
    },
    getEnableScrollRange: function getEnableScrollRange() {
      var _this$$props2 = this.$props, scrollHeight = _this$$props2.scrollHeight, height = _this$$props2.height;
      return scrollHeight - height || 0;
    },
    getEnableHeightRange: function getEnableHeightRange() {
      var height = this.$props.height;
      var spinHeight = this.getSpinHeight();
      return height - spinHeight || 0;
    },
    getTop: function getTop() {
      var scrollTop = this.$props.scrollTop;
      var enableScrollRange = this.getEnableScrollRange();
      var enableHeightRange = this.getEnableHeightRange();
      if (scrollTop === 0 || enableScrollRange === 0) {
        return 0;
      }
      var ptg = scrollTop / enableScrollRange;
      return ptg * enableHeightRange;
    },
    showScroll: function showScroll() {
      var _this$$props3 = this.$props, height = _this$$props3.height, scrollHeight = _this$$props3.scrollHeight;
      return scrollHeight > height;
    }
  },
  render: function render2() {
    var _this$state2 = this.state, dragging = _this$state2.dragging, visible9 = _this$state2.visible;
    var prefixCls2 = this.$props.prefixCls;
    var spinHeight = this.getSpinHeight() + "px";
    var top = this.getTop() + "px";
    var canScroll = this.showScroll();
    var mergedVisible = canScroll && visible9;
    return createVNode("div", {
      "ref": this.scrollbarRef,
      "class": classNames("".concat(prefixCls2, "-scrollbar"), _defineProperty({}, "".concat(prefixCls2, "-scrollbar-show"), canScroll)),
      "style": {
        width: "8px",
        top: 0,
        bottom: 0,
        right: 0,
        position: "absolute",
        display: mergedVisible ? void 0 : "none"
      },
      "onMousedown": this.onContainerMouseDown,
      "onMousemove": this.delayHidden
    }, [createVNode("div", {
      "ref": this.thumbRef,
      "class": classNames("".concat(prefixCls2, "-scrollbar-thumb"), _defineProperty({}, "".concat(prefixCls2, "-scrollbar-thumb-moving"), dragging)),
      "style": {
        width: "100%",
        height: spinHeight,
        top,
        left: 0,
        position: "absolute",
        background: "rgba(0, 0, 0, 0.5)",
        borderRadius: "99px",
        cursor: "pointer",
        userSelect: "none"
      },
      "onMousedown": this.onMouseDown
    }, null)]);
  }
});
function useHeights(getKey4, onItemAdd, onItemRemove) {
  var instance = new Map();
  var heights = reactive({});
  var heightUpdateId = 0;
  function collectHeight() {
    heightUpdateId += 1;
    var currentId = heightUpdateId;
    Promise.resolve().then(function() {
      if (currentId !== heightUpdateId)
        return;
      instance.forEach(function(element, key2) {
        if (element && element.offsetParent) {
          var offsetHeight = element.offsetHeight;
          if (heights[key2] !== offsetHeight) {
            heights[key2] = element.offsetHeight;
          }
        }
      });
    });
  }
  function setInstance(item, ins) {
    var key2 = getKey4(item);
    var origin = instance.get(key2);
    if (ins) {
      instance.set(key2, ins);
      collectHeight();
    } else {
      instance.delete(key2);
    }
    if (!origin !== !ins) {
      if (ins) {
        onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
      } else {
        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
      }
    }
  }
  return [setInstance, collectHeight, heights];
}
function useScrollTo(containerRef, mergedData, heights, props2, getKey4, collectHeight, syncScrollTop, triggerFlash) {
  var scroll = null;
  return function(arg) {
    if (arg === null || arg === void 0) {
      triggerFlash();
      return;
    }
    wrapperRaf.cancel(scroll);
    var data79 = mergedData.value;
    var itemHeight = props2.itemHeight;
    if (typeof arg === "number") {
      syncScrollTop(arg);
    } else if (arg && _typeof(arg) === "object") {
      var index2;
      var align = arg.align;
      if ("index" in arg) {
        index2 = arg.index;
      } else {
        index2 = data79.findIndex(function(item) {
          return getKey4(item) === arg.key;
        });
      }
      var _arg$offset = arg.offset, offset2 = _arg$offset === void 0 ? 0 : _arg$offset;
      var syncScroll = function syncScroll2(times, targetAlign) {
        if (times < 0 || !containerRef.value)
          return;
        var height = containerRef.value.clientHeight;
        var needCollectHeight = false;
        var newTargetAlign = targetAlign;
        if (height) {
          var mergedAlign = targetAlign || align;
          var stackTop = 0;
          var itemTop = 0;
          var itemBottom = 0;
          var maxLen = Math.min(data79.length, index2);
          for (var i = 0; i <= maxLen; i += 1) {
            var key2 = getKey4(data79[i]);
            itemTop = stackTop;
            var cacheHeight = heights[key2];
            itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
            stackTop = itemBottom;
            if (i === index2 && cacheHeight === void 0) {
              needCollectHeight = true;
            }
          }
          var targetTop = null;
          switch (mergedAlign) {
            case "top":
              targetTop = itemTop - offset2;
              break;
            case "bottom":
              targetTop = itemBottom - height + offset2;
              break;
            default: {
              var scrollTop = containerRef.value.scrollTop;
              var scrollBottom = scrollTop + height;
              if (itemTop < scrollTop) {
                newTargetAlign = "top";
              } else if (itemBottom > scrollBottom) {
                newTargetAlign = "bottom";
              }
            }
          }
          if (targetTop !== null && targetTop !== containerRef.value.scrollTop) {
            syncScrollTop(targetTop);
          }
        }
        scroll = wrapperRaf(function() {
          if (needCollectHeight) {
            collectHeight();
          }
          syncScroll2(times - 1, newTargetAlign);
        });
      };
      syncScroll(3);
    }
  };
}
var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
var isFF$1 = isFF;
var useOriginScroll = function(isScrollAtTop, isScrollAtBottom) {
  var lock = false;
  var lockTimeout = null;
  function lockScroll() {
    clearTimeout(lockTimeout);
    lock = true;
    lockTimeout = setTimeout(function() {
      lock = false;
    }, 50);
  }
  return function(deltaY) {
    var smoothOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var originScroll = deltaY < 0 && isScrollAtTop.value || deltaY > 0 && isScrollAtBottom.value;
    if (smoothOffset && originScroll) {
      clearTimeout(lockTimeout);
      lock = false;
    } else if (!originScroll || lock) {
      lockScroll();
    }
    return !lock && originScroll;
  };
};
function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, onWheelDelta) {
  var offsetRef = 0;
  var nextFrame = null;
  var wheelValue = null;
  var isMouseScroll = false;
  var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);
  function onWheel(event) {
    if (!inVirtual.value)
      return;
    wrapperRaf.cancel(nextFrame);
    var deltaY = event.deltaY;
    offsetRef += deltaY;
    wheelValue = deltaY;
    if (originScroll(deltaY))
      return;
    if (!isFF$1) {
      event.preventDefault();
    }
    nextFrame = wrapperRaf(function() {
      var patchMultiple = isMouseScroll ? 10 : 1;
      onWheelDelta(offsetRef * patchMultiple);
      offsetRef = 0;
    });
  }
  function onFireFoxScroll(event) {
    if (!inVirtual.value)
      return;
    isMouseScroll = event.detail === wheelValue;
  }
  return [onWheel, onFireFoxScroll];
}
var SMOOTH_PTG = 14 / 15;
function useMobileTouchMove(inVirtual, listRef, callback) {
  var touched = false;
  var touchY = 0;
  var element = null;
  var interval = null;
  var cleanUpEvents = function cleanUpEvents2() {
    if (element) {
      element.removeEventListener("touchmove", onTouchMove2, supportsPassive$1 ? {
        passive: false
      } : false);
      element.removeEventListener("touchend", onTouchEnd3);
    }
  };
  var onTouchMove2 = function onTouchMove3(e) {
    if (touched) {
      var currentY = Math.ceil(e.touches[0].pageY);
      var offsetY = touchY - currentY;
      touchY = currentY;
      if (callback(offsetY)) {
        e.preventDefault();
      }
      clearInterval(interval);
      interval = setInterval(function() {
        offsetY *= SMOOTH_PTG;
        if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
          clearInterval(interval);
        }
      }, 16);
    }
  };
  var onTouchEnd3 = function onTouchEnd4() {
    touched = false;
    cleanUpEvents();
  };
  var onTouchStart2 = function onTouchStart3(e) {
    cleanUpEvents();
    if (e.touches.length === 1 && !touched) {
      touched = true;
      touchY = Math.ceil(e.touches[0].pageY);
      element = e.target;
      element.addEventListener("touchmove", onTouchMove2, supportsPassive$1 ? {
        passive: false
      } : false);
      element.addEventListener("touchend", onTouchEnd3);
    }
  };
  onMounted(function() {
    watch(inVirtual, function(val) {
      listRef.value.removeEventListener("touchstart", onTouchStart2, supportsPassive$1 ? {
        passive: false
      } : false);
      cleanUpEvents();
      clearInterval(interval);
      if (val) {
        listRef.value.addEventListener("touchstart", onTouchStart2, supportsPassive$1 ? {
          passive: false
        } : false);
      }
    }, {
      immediate: true
    });
  });
}
var __rest$W = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var EMPTY_DATA = [];
var ScrollStyle = {
  overflowY: "auto",
  overflowAnchor: "none"
};
function renderChildren(list, startIndex, endIndex, setNodeRef, renderFunc, _ref) {
  var getKey4 = _ref.getKey;
  return list.slice(startIndex, endIndex + 1).map(function(item, index2) {
    var eleIndex = startIndex + index2;
    var node = renderFunc(item, eleIndex, {});
    var key2 = getKey4(item);
    return createVNode(Item$3, {
      "key": key2,
      "setRef": function setRef(ele) {
        return setNodeRef(item, ele);
      }
    }, {
      default: function _default8() {
        return [node];
      }
    });
  });
}
var List$3 = defineComponent({
  name: "List",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    data: PropsTypes.array,
    height: PropsTypes.number,
    itemHeight: PropsTypes.number,
    fullHeight: PropsTypes.looseBool,
    itemKey: {
      type: [String, Number, Function],
      required: true
    },
    component: {
      type: [String, Object]
    },
    virtual: PropsTypes.looseBool,
    children: PropsTypes.func,
    onScroll: PropsTypes.func,
    onMousedown: PropsTypes.func,
    onMouseenter: PropsTypes.func
  },
  setup: function setup9(props2) {
    var useVirtual = computed(function() {
      var height = props2.height, itemHeight = props2.itemHeight, virtual = props2.virtual;
      return !!(virtual !== false && height && itemHeight);
    });
    var inVirtual = computed(function() {
      var height = props2.height, itemHeight = props2.itemHeight, data79 = props2.data;
      return useVirtual.value && data79 && itemHeight * data79.length > height;
    });
    var state = reactive({
      scrollTop: 0,
      scrollMoving: false
    });
    var mergedData = computed(function() {
      return props2.data || EMPTY_DATA;
    });
    var componentRef = ref();
    var fillerInnerRef = ref();
    var scrollBarRef = ref();
    var getKey4 = function getKey5(item) {
      if (typeof props2.itemKey === "function") {
        return props2.itemKey(item);
      }
      return item === null || item === void 0 ? void 0 : item[props2.itemKey];
    };
    var sharedConfig = {
      getKey: getKey4
    };
    function syncScrollTop(newTop) {
      var value26;
      if (typeof newTop === "function") {
        value26 = newTop(state.scrollTop);
      } else {
        value26 = newTop;
      }
      var alignedTop = keepInRange(value26);
      if (componentRef.value) {
        componentRef.value.scrollTop = alignedTop;
      }
      state.scrollTop = alignedTop;
    }
    var _useHeights = useHeights(getKey4, null, null), _useHeights2 = _slicedToArray(_useHeights, 3), setInstance = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2];
    var calRes = ref({});
    watch([inVirtual, useVirtual, function() {
      return state.scrollTop;
    }, mergedData, heights, function() {
      return props2.height;
    }], function() {
      nextTick(function() {
        var _a;
        if (!useVirtual.value) {
          calRes.value = {
            scrollHeight: void 0,
            start: 0,
            end: mergedData.value.length - 1,
            offset: void 0
          };
          return;
        }
        if (!inVirtual.value) {
          calRes.value = {
            scrollHeight: ((_a = fillerInnerRef.value) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0,
            start: 0,
            end: mergedData.value.length - 1,
            offset: void 0
          };
          return;
        }
        var itemTop = 0;
        var startIndex;
        var startOffset;
        var endIndex;
        var dataLen3 = mergedData.value.length;
        var data79 = mergedData.value;
        for (var i = 0; i < dataLen3; i += 1) {
          var item = data79[i];
          var key2 = getKey4(item);
          var cacheHeight = heights[key2];
          var currentItemBottom = itemTop + (cacheHeight === void 0 ? props2.itemHeight : cacheHeight);
          if (currentItemBottom >= state.scrollTop && startIndex === void 0) {
            startIndex = i;
            startOffset = itemTop;
          }
          if (currentItemBottom > state.scrollTop + props2.height && endIndex === void 0) {
            endIndex = i;
          }
          itemTop = currentItemBottom;
        }
        if (startIndex === void 0) {
          startIndex = 0;
          startOffset = 0;
        }
        if (endIndex === void 0) {
          endIndex = dataLen3 - 1;
        }
        endIndex = Math.min(endIndex + 1, dataLen3);
        calRes.value = {
          scrollHeight: itemTop,
          start: startIndex,
          end: endIndex,
          offset: startOffset
        };
      });
    }, {
      immediate: true,
      flush: "post"
    });
    var maxScrollHeight = computed(function() {
      return calRes.value.scrollHeight - props2.height;
    });
    function keepInRange(newScrollTop) {
      var newTop = newScrollTop;
      if (!Number.isNaN(maxScrollHeight.value)) {
        newTop = Math.min(newTop, maxScrollHeight.value);
      }
      newTop = Math.max(newTop, 0);
      return newTop;
    }
    var isScrollAtTop = computed(function() {
      return state.scrollTop <= 0;
    });
    var isScrollAtBottom = computed(function() {
      return state.scrollTop >= maxScrollHeight.value;
    });
    var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);
    function onScrollBar(newScrollTop) {
      var newTop = newScrollTop;
      syncScrollTop(newTop);
    }
    function onFallbackScroll(e) {
      var _a;
      var newScrollTop = e.currentTarget.scrollTop;
      if (Math.abs(newScrollTop - state.scrollTop) >= 1) {
        syncScrollTop(newScrollTop);
      }
      (_a = props2.onScroll) === null || _a === void 0 ? void 0 : _a.call(props2, e);
    }
    var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, function(offsetY) {
      syncScrollTop(function(top) {
        var newTop = top + offsetY;
        return newTop;
      });
    }), _useFrameWheel2 = _slicedToArray(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
    useMobileTouchMove(useVirtual, componentRef, function(deltaY, smoothOffset) {
      if (originScroll(deltaY, smoothOffset)) {
        return false;
      }
      onRawWheel({
        preventDefault: function preventDefault2() {
        },
        deltaY
      });
      return true;
    });
    function onMozMousePixelScroll(e) {
      if (useVirtual.value) {
        e.preventDefault();
      }
    }
    var removeEventListener2 = function removeEventListener3() {
      if (componentRef.value) {
        componentRef.value.removeEventListener("wheel", onRawWheel, supportsPassive$1 ? {
          passive: false
        } : false);
        componentRef.value.removeEventListener("DOMMouseScroll", onFireFoxScroll);
        componentRef.value.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      }
    };
    watchEffect(function() {
      nextTick(function() {
        if (componentRef.value) {
          removeEventListener2();
          componentRef.value.addEventListener("wheel", onRawWheel, supportsPassive$1 ? {
            passive: false
          } : false);
          componentRef.value.addEventListener("DOMMouseScroll", onFireFoxScroll);
          componentRef.value.addEventListener("MozMousePixelScroll", onMozMousePixelScroll);
        }
      });
    });
    onBeforeUnmount(function() {
      removeEventListener2();
    });
    var scrollTo3 = useScrollTo(componentRef, mergedData, heights, props2, getKey4, collectHeight, syncScrollTop, function() {
      var _a;
      (_a = scrollBarRef.value) === null || _a === void 0 ? void 0 : _a.delayHidden();
    });
    var componentStyle = computed(function() {
      var cs = null;
      if (props2.height) {
        cs = _extends(_defineProperty({}, props2.fullHeight ? "height" : "maxHeight", props2.height + "px"), ScrollStyle);
        if (useVirtual.value) {
          cs.overflowY = "hidden";
          if (state.scrollMoving) {
            cs.pointerEvents = "none";
          }
        }
      }
      return cs;
    });
    return {
      state,
      mergedData,
      componentStyle,
      scrollTo: scrollTo3,
      onFallbackScroll,
      onScrollBar,
      componentRef,
      useVirtual,
      calRes,
      collectHeight,
      setInstance,
      sharedConfig,
      scrollBarRef,
      fillerInnerRef
    };
  },
  render: function render3() {
    var _this = this;
    var _a = _extends(_extends({}, this.$props), this.$attrs), _a$prefixCls = _a.prefixCls, prefixCls2 = _a$prefixCls === void 0 ? "rc-virtual-list" : _a$prefixCls, height = _a.height;
    _a.itemHeight;
    _a.fullHeight;
    _a.data;
    _a.itemKey;
    _a.virtual;
    var _a$component = _a.component, Component = _a$component === void 0 ? "div" : _a$component;
    _a.onScroll;
    var children = _a.children, style3 = _a.style, className = _a.class, restProps = __rest$W(_a, ["prefixCls", "height", "itemHeight", "fullHeight", "data", "itemKey", "virtual", "component", "onScroll", "children", "style", "class"]);
    var mergedClassName = classNames(prefixCls2, className);
    var scrollTop = this.state.scrollTop;
    var _this$calRes = this.calRes, scrollHeight = _this$calRes.scrollHeight, offset2 = _this$calRes.offset, start = _this$calRes.start, end = _this$calRes.end;
    var componentStyle = this.componentStyle, onFallbackScroll = this.onFallbackScroll, onScrollBar = this.onScrollBar, useVirtual = this.useVirtual, collectHeight = this.collectHeight, sharedConfig = this.sharedConfig, setInstance = this.setInstance, mergedData = this.mergedData;
    var listChildren = renderChildren(mergedData, start, end, setInstance, children, sharedConfig);
    return createVNode("div", _objectSpread2({
      "style": _extends(_extends({}, style3), {
        position: "relative"
      }),
      "class": mergedClassName
    }, restProps), [createVNode(Component, {
      "class": "".concat(prefixCls2, "-holder"),
      "style": componentStyle,
      "ref": "componentRef",
      "onScroll": onFallbackScroll
    }, {
      default: function _default8() {
        return [createVNode(Filler, {
          "prefixCls": prefixCls2,
          "height": scrollHeight,
          "offset": offset2,
          "onInnerResize": collectHeight,
          "ref": "fillerInnerRef"
        }, {
          default: function _default9() {
            return [listChildren];
          }
        })];
      }
    }), useVirtual && createVNode(ScrollBar, {
      "ref": "scrollBarRef",
      "prefixCls": prefixCls2,
      "scrollTop": scrollTop,
      "height": height,
      "scrollHeight": scrollHeight,
      "count": mergedData.length,
      "onScroll": onScrollBar,
      "onStartMove": function onStartMove() {
        _this.state.scrollMoving = true;
      },
      "onStopMove": function onStopMove() {
        _this.state.scrollMoving = false;
      }
    }, null)]);
  }
});
var List$4 = List$3;
function useMemo(getValue, condition, shouldUpdate) {
  var cacheRef = ref(getValue());
  watch(condition, function(next3, pre) {
    if (shouldUpdate) {
      if (shouldUpdate(next3, pre)) {
        cacheRef.value = getValue();
      }
    } else {
      cacheRef.value = getValue();
    }
  });
  return cacheRef;
}
var __rest$V = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var OptionListProps = {
  prefixCls: PropsTypes.string,
  id: PropsTypes.string,
  options: PropsTypes.array,
  flattenOptions: PropsTypes.array,
  height: PropsTypes.number,
  itemHeight: PropsTypes.number,
  values: PropsTypes.any,
  multiple: PropsTypes.looseBool,
  open: PropsTypes.looseBool,
  defaultActiveFirstOption: PropsTypes.looseBool,
  notFoundContent: PropsTypes.any,
  menuItemSelectedIcon: PropsTypes.any,
  childrenAsData: PropsTypes.looseBool,
  searchValue: PropsTypes.string,
  virtual: PropsTypes.looseBool,
  onSelect: PropsTypes.func,
  onToggleOpen: {
    type: Function
  },
  onActiveValue: PropsTypes.func,
  onScroll: PropsTypes.func,
  onMouseenter: PropsTypes.func
};
var OptionList = defineComponent({
  name: "OptionList",
  inheritAttrs: false,
  slots: ["option"],
  setup: function setup10(props2) {
    var itemPrefixCls = computed(function() {
      return "".concat(props2.prefixCls, "-item");
    });
    var memoFlattenOptions = useMemo(function() {
      return props2.flattenOptions;
    }, [function() {
      return props2.open;
    }, function() {
      return props2.flattenOptions;
    }], function(next3) {
      return next3[0];
    });
    var listRef = createRef$1();
    var onListMouseDown = function onListMouseDown2(event) {
      event.preventDefault();
    };
    var scrollIntoView2 = function scrollIntoView3(index2) {
      if (listRef.current) {
        listRef.current.scrollTo({
          index: index2
        });
      }
    };
    var getEnabledActiveIndex = function getEnabledActiveIndex2(index2) {
      var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var len = memoFlattenOptions.value.length;
      for (var i = 0; i < len; i += 1) {
        var current2 = (index2 + i * offset2 + len) % len;
        var _memoFlattenOptions$v = memoFlattenOptions.value[current2], group = _memoFlattenOptions$v.group, data79 = _memoFlattenOptions$v.data;
        if (!group && !data79.disabled) {
          return current2;
        }
      }
      return -1;
    };
    var state = reactive({
      activeIndex: getEnabledActiveIndex(0)
    });
    var setActive = function setActive2(index2) {
      var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      state.activeIndex = index2;
      var info3 = {
        source: fromKeyboard ? "keyboard" : "mouse"
      };
      var flattenItem = memoFlattenOptions.value[index2];
      if (!flattenItem) {
        props2.onActiveValue(null, -1, info3);
        return;
      }
      props2.onActiveValue(flattenItem.data.value, index2, info3);
    };
    watch([function() {
      return memoFlattenOptions.value.length;
    }, function() {
      return props2.searchValue;
    }], function() {
      setActive(props2.defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
    }, {
      immediate: true
    });
    watch(function() {
      return props2.open;
    }, function() {
      if (!props2.multiple && props2.open && props2.values.size === 1) {
        var value26 = Array.from(props2.values)[0];
        var index2 = memoFlattenOptions.value.findIndex(function(_ref) {
          var data79 = _ref.data;
          return data79.value === value26;
        });
        setActive(index2);
        nextTick(function() {
          scrollIntoView2(index2);
        });
      }
      if (props2.open) {
        nextTick(function() {
          var _a;
          (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.scrollTo(void 0);
        });
      }
    }, {
      immediate: true,
      flush: "post"
    });
    var onSelectValue = function onSelectValue2(value26) {
      if (value26 !== void 0) {
        props2.onSelect(value26, {
          selected: !props2.values.has(value26)
        });
      }
      if (!props2.multiple) {
        props2.onToggleOpen(false);
      }
    };
    function renderItem(index2) {
      var item = memoFlattenOptions.value[index2];
      if (!item)
        return null;
      var itemData = item.data || {};
      var value26 = itemData.value, label = itemData.label, children = itemData.children;
      var attrs = pickAttrs(itemData, true);
      var mergedLabel = props2.childrenAsData ? children : label;
      return item ? createVNode("div", _objectSpread2(_objectSpread2({
        "aria-label": typeof mergedLabel === "string" ? mergedLabel : void 0
      }, attrs), {}, {
        "key": index2,
        "role": "option",
        "id": "".concat(props2.id, "_list_").concat(index2),
        "aria-selected": props2.values.has(value26)
      }), [value26]) : null;
    }
    return {
      memoFlattenOptions,
      renderItem,
      listRef,
      state,
      onListMouseDown,
      itemPrefixCls,
      setActive,
      onSelectValue,
      onKeydown: function onKeydown2(event) {
        var which = event.which;
        switch (which) {
          case KeyCode$2.UP:
          case KeyCode$2.DOWN: {
            var offset2 = 0;
            if (which === KeyCode$2.UP) {
              offset2 = -1;
            } else if (which === KeyCode$2.DOWN) {
              offset2 = 1;
            }
            if (offset2 !== 0) {
              var nextActiveIndex = getEnabledActiveIndex(state.activeIndex + offset2, offset2);
              scrollIntoView2(nextActiveIndex);
              setActive(nextActiveIndex, true);
            }
            break;
          }
          case KeyCode$2.ENTER: {
            var item = memoFlattenOptions.value[state.activeIndex];
            if (item && !item.data.disabled) {
              onSelectValue(item.data.value);
            } else {
              onSelectValue(void 0);
            }
            if (props2.open) {
              event.preventDefault();
            }
            break;
          }
          case KeyCode$2.ESC: {
            props2.onToggleOpen(false);
            if (props2.open) {
              event.stopPropagation();
            }
          }
        }
      },
      onKeyup: function onKeyup() {
      },
      scrollTo: function scrollTo3(index2) {
        scrollIntoView2(index2);
      }
    };
  },
  render: function render4() {
    var renderItem = this.renderItem, listRef = this.listRef, onListMouseDown = this.onListMouseDown, itemPrefixCls = this.itemPrefixCls, setActive = this.setActive, onSelectValue = this.onSelectValue, memoFlattenOptions = this.memoFlattenOptions, $slots = this.$slots;
    var _this$$props = this.$props, id2 = _this$$props.id, childrenAsData = _this$$props.childrenAsData, values = _this$$props.values, height = _this$$props.height, itemHeight = _this$$props.itemHeight, menuItemSelectedIcon = _this$$props.menuItemSelectedIcon, notFoundContent = _this$$props.notFoundContent, virtual = _this$$props.virtual, onScroll2 = _this$$props.onScroll, onMouseenter2 = _this$$props.onMouseenter;
    var renderOption = $slots.option;
    var activeIndex = this.state.activeIndex;
    if (memoFlattenOptions.length === 0) {
      return createVNode("div", {
        "role": "listbox",
        "id": "".concat(id2, "_list"),
        "class": "".concat(itemPrefixCls, "-empty"),
        "onMousedown": onListMouseDown
      }, [notFoundContent]);
    }
    return createVNode(Fragment, null, [createVNode("div", {
      "role": "listbox",
      "id": "".concat(id2, "_list"),
      "style": {
        height: 0,
        width: 0,
        overflow: "hidden"
      }
    }, [renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)]), createVNode(List$4, {
      "itemKey": "key",
      "ref": listRef,
      "data": memoFlattenOptions,
      "height": height,
      "itemHeight": itemHeight,
      "fullHeight": false,
      "onMousedown": onListMouseDown,
      "onScroll": onScroll2,
      "virtual": virtual,
      "onMouseenter": onMouseenter2,
      "children": function children(_ref2, itemIndex) {
        var _classNames;
        var group = _ref2.group, groupOption = _ref2.groupOption, data79 = _ref2.data;
        var label = data79.label, key2 = data79.key;
        if (group) {
          return createVNode("div", {
            "class": classNames(itemPrefixCls, "".concat(itemPrefixCls, "-group"))
          }, [renderOption ? renderOption(data79) : label !== void 0 ? label : key2]);
        }
        var disabled = data79.disabled, value26 = data79.value, title2 = data79.title, children2 = data79.children, style3 = data79.style, cls = data79.class, className = data79.className, otherProps = __rest$V(data79, ["disabled", "value", "title", "children", "style", "class", "className"]);
        var selected = values.has(value26);
        var optionPrefixCls = "".concat(itemPrefixCls, "-option");
        var optionClassName = classNames(itemPrefixCls, optionPrefixCls, cls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !disabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
        var mergedLabel = childrenAsData ? children2 : label;
        var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
        var content = mergedLabel || value26;
        var optionTitle = typeof content === "string" || typeof content === "number" ? content.toString() : void 0;
        if (title2 !== void 0) {
          optionTitle = title2;
        }
        return createVNode("div", _objectSpread2(_objectSpread2({}, otherProps), {}, {
          "aria-selected": selected,
          "class": optionClassName,
          "title": optionTitle,
          "onMousemove": function onMousemove(e) {
            if (otherProps.onMousemove) {
              otherProps.onMousemove(e);
            }
            if (activeIndex === itemIndex || disabled) {
              return;
            }
            setActive(itemIndex);
          },
          "onClick": function onClick7(e) {
            if (!disabled) {
              onSelectValue(value26);
            }
            if (otherProps.onClick) {
              otherProps.onClick(e);
            }
          },
          "style": style3
        }), [createVNode("div", {
          "class": "".concat(optionPrefixCls, "-content")
        }, [renderOption ? renderOption(data79) : content]), isValidElement(menuItemSelectedIcon) || selected, iconVisible && createVNode(TransBtn$1, {
          "class": "".concat(itemPrefixCls, "-option-state"),
          "customizeIcon": menuItemSelectedIcon,
          "customizeIconProps": {
            isSelected: selected
          }
        }, {
          default: function _default8() {
            return [selected ? "\u2713" : null];
          }
        })]);
      }
    }, null)]);
  }
});
OptionList.props = OptionListProps;
var SelectOptionList = OptionList;
var Option$4 = function Option() {
  return null;
};
Option$4.isSelectOption = true;
Option$4.displayName = "ASelectOption";
var Option$5 = Option$4;
var OptGroup$2 = function OptGroup() {
  return null;
};
OptGroup$2.isSelectOptGroup = true;
OptGroup$2.displayName = "ASelectOptGroup";
var OptGroup$3 = OptGroup$2;
var __rest$U = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function convertNodeToOption(node) {
  var _a = node, key2 = _a.key, children = _a.children, _b = _a.props, value26 = _b.value, disabled = _b.disabled, restProps = __rest$U(_b, ["value", "disabled"]);
  var child = children && children.default ? children.default() : void 0;
  return _extends({
    key: key2,
    value: value26 !== void 0 ? value26 : key2,
    children: child,
    disabled: disabled || disabled === ""
  }, restProps);
}
function convertChildrenToData$1(nodes) {
  var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var dd = flattenChildren(nodes).map(function(node, index2) {
    var _a;
    if (!isValidElement(node) || !node.type) {
      return null;
    }
    var isSelectOptGroup = node.type.isSelectOptGroup, key2 = node.key, children = node.children, props2 = node.props;
    if (optionOnly || !isSelectOptGroup) {
      return convertNodeToOption(node);
    }
    var child = children && children.default ? children.default() : void 0;
    var label = (props2 === null || props2 === void 0 ? void 0 : props2.label) || ((_a = children.label) === null || _a === void 0 ? void 0 : _a.call(children)) || key2;
    return _extends(_extends({
      key: "__RC_SELECT_GRP__".concat(key2 === null ? index2 : String(key2), "__")
    }, props2), {
      label,
      options: convertChildrenToData$1(child || [])
    });
  }).filter(function(data79) {
    return data79;
  });
  return dd;
}
function toArray$5(value26) {
  if (Array.isArray(value26)) {
    return value26;
  }
  return value26 !== void 0 ? [value26] : [];
}
function toInnerValue(value26, _ref) {
  var labelInValue = _ref.labelInValue, combobox = _ref.combobox;
  var valueMap = new Map();
  if (value26 === void 0 || value26 === "" && combobox) {
    return [[], valueMap];
  }
  var values = Array.isArray(value26) ? value26 : [value26];
  var rawValues = values;
  if (labelInValue) {
    rawValues = values.filter(function(item) {
      return item !== null;
    }).map(function(itemValue) {
      var key2 = itemValue.key, val = itemValue.value;
      var finalVal = val !== void 0 ? val : key2;
      valueMap.set(finalVal, itemValue);
      return finalVal;
    });
  }
  return [rawValues, valueMap];
}
function toOuterValues(valueList, _ref2) {
  var optionLabelProp = _ref2.optionLabelProp, labelInValue = _ref2.labelInValue, prevValueMap = _ref2.prevValueMap, options2 = _ref2.options, getLabeledValue3 = _ref2.getLabeledValue;
  var values = valueList;
  if (labelInValue) {
    values = values.map(function(val) {
      return getLabeledValue3(val, {
        options: options2,
        prevValueMap,
        labelInValue,
        optionLabelProp
      });
    });
  }
  return values;
}
function removeLastEnabledValue(measureValues, values) {
  var newValues = _toConsumableArray(values);
  var removeIndex;
  for (removeIndex = measureValues.length - 1; removeIndex >= 0; removeIndex -= 1) {
    if (!measureValues[removeIndex].disabled) {
      break;
    }
  }
  var removedValue = null;
  if (removeIndex !== -1) {
    removedValue = newValues[removeIndex];
    newValues.splice(removeIndex, 1);
  }
  return {
    values: newValues,
    removedValue
  };
}
var isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
var isBrowserClient = isClient;
var uuid$2 = 0;
function getUUID() {
  var retId;
  if (isBrowserClient) {
    retId = uuid$2;
    uuid$2 += 1;
  } else {
    retId = "TEST_OR_SSR";
  }
  return retId;
}
function getKey$1(data79, index2) {
  var key2 = data79.key;
  var value26;
  if ("value" in data79) {
    value26 = data79.value;
  }
  if (key2 !== null && key2 !== void 0) {
    return key2;
  }
  if (value26 !== void 0) {
    return value26;
  }
  return "rc-index-key-".concat(index2);
}
function flattenOptions(options2) {
  var flattenList = [];
  function dig(list, isGroupOption) {
    list.forEach(function(data79) {
      if (isGroupOption || !("options" in data79)) {
        flattenList.push({
          key: getKey$1(data79, flattenList.length),
          groupOption: isGroupOption,
          data: data79
        });
      } else {
        flattenList.push({
          key: getKey$1(data79, flattenList.length),
          group: true,
          data: data79
        });
        dig(data79.options, true);
      }
    });
  }
  dig(options2, false);
  return flattenList;
}
function injectPropsWithOption(option) {
  var newOption = _extends({}, option);
  if (!("props" in newOption)) {
    Object.defineProperty(newOption, "props", {
      get: function get2() {
        return newOption;
      }
    });
  }
  return newOption;
}
function findValueOption(values, options2) {
  var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$prevValueOptions = _ref.prevValueOptions, prevValueOptions = _ref$prevValueOptions === void 0 ? [] : _ref$prevValueOptions;
  var optionMap = new Map();
  options2.forEach(function(flattenItem) {
    if (!flattenItem.group) {
      var data79 = flattenItem.data;
      optionMap.set(data79.value, data79);
    }
  });
  return values.map(function(val) {
    var option = optionMap.get(val);
    if (!option) {
      option = _extends({}, prevValueOptions.find(function(opt) {
        return opt._INTERNAL_OPTION_VALUE_ === val;
      }));
    }
    return injectPropsWithOption(option);
  });
}
var getLabeledValue = function getLabeledValue2(value26, _ref2) {
  var options2 = _ref2.options, prevValueMap = _ref2.prevValueMap, labelInValue = _ref2.labelInValue, optionLabelProp = _ref2.optionLabelProp;
  var item = findValueOption([value26], options2)[0];
  var result = {
    value: value26
  };
  var prevValItem = labelInValue ? prevValueMap.get(value26) : void 0;
  if (prevValItem && _typeof(prevValItem) === "object" && "label" in prevValItem) {
    result.label = prevValItem.label;
    if (item && typeof prevValItem.label === "string" && typeof item[optionLabelProp] === "string" && prevValItem.label.trim() !== item[optionLabelProp].trim())
      ;
  } else if (item && optionLabelProp in item) {
    if (Array.isArray(item[optionLabelProp])) {
      result.label = isVNode(item[optionLabelProp][0]) ? cloneVNode(item[optionLabelProp][0]) : item[optionLabelProp];
    } else {
      result.label = item[optionLabelProp];
    }
  } else {
    result.label = value26;
    result.isCacheable = true;
  }
  result.key = result.value;
  return result;
};
function toRawString(content) {
  return toArray$5(content).map(function(item) {
    var _a, _b;
    if (isVNode(item)) {
      return ((_a = item === null || item === void 0 ? void 0 : item.el) === null || _a === void 0 ? void 0 : _a.innerText) || ((_b = item === null || item === void 0 ? void 0 : item.el) === null || _b === void 0 ? void 0 : _b.wholeText);
    } else {
      return item;
    }
  }).join("");
}
function getFilterFunction(optionFilterProp) {
  return function(searchValue2, option) {
    var lowerSearchText = searchValue2.toLowerCase();
    if ("options" in option) {
      return toRawString(option.label).toLowerCase().includes(lowerSearchText);
    }
    var rawValue = option[optionFilterProp];
    var value26 = toRawString(rawValue).toLowerCase();
    return value26.includes(lowerSearchText);
  };
}
function filterOptions(searchValue2, options2, _ref3) {
  var optionFilterProp = _ref3.optionFilterProp, filterOption2 = _ref3.filterOption;
  var filteredOptions = [];
  var filterFunc;
  if (filterOption2 === false) {
    return _toConsumableArray(options2);
  }
  if (typeof filterOption2 === "function") {
    filterFunc = filterOption2;
  } else {
    filterFunc = getFilterFunction(optionFilterProp);
  }
  options2.forEach(function(item) {
    if ("options" in item) {
      var matchGroup = filterFunc(searchValue2, item);
      if (matchGroup) {
        filteredOptions.push(item);
      } else {
        var subOptions = item.options.filter(function(subItem) {
          return filterFunc(searchValue2, subItem);
        });
        if (subOptions.length) {
          filteredOptions.push(_extends(_extends({}, item), {
            options: subOptions
          }));
        }
      }
      return;
    }
    if (filterFunc(searchValue2, injectPropsWithOption(item))) {
      filteredOptions.push(item);
    }
  });
  return filteredOptions;
}
function getSeparatedContent(text, tokens) {
  if (!tokens || !tokens.length) {
    return null;
  }
  var match2 = false;
  function separate(str, _ref4) {
    var _ref5 = _toArray$1(_ref4), token = _ref5[0], restTokens = _ref5.slice(1);
    if (!token) {
      return [str];
    }
    var list2 = str.split(token);
    match2 = match2 || list2.length > 1;
    return list2.reduce(function(prevList, unitStr) {
      return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate(unitStr, restTokens)));
    }, []).filter(function(unit) {
      return unit;
    });
  }
  var list = separate(text, tokens);
  return match2 ? list : null;
}
function isValueDisabled(value26, options2) {
  var option = findValueOption([value26], options2)[0];
  return option.disabled;
}
function fillOptionsWithMissingValue(options2, value26, optionLabelProp, labelInValue) {
  var values = toArray$5(value26).slice().sort();
  var cloneOptions = _toConsumableArray(options2);
  var optionValues = new Set();
  options2.forEach(function(opt) {
    if (opt.options) {
      opt.options.forEach(function(subOpt) {
        optionValues.add(subOpt.value);
      });
    } else {
      optionValues.add(opt.value);
    }
  });
  values.forEach(function(item) {
    var val = labelInValue ? item.value : item;
    if (!optionValues.has(val)) {
      var _ref6;
      cloneOptions.push(labelInValue ? (_ref6 = {}, _defineProperty(_ref6, optionLabelProp, item.label), _defineProperty(_ref6, "value", val), _ref6) : {
        value: val
      });
    }
  });
  return cloneOptions;
}
function cloneElement(vnode) {
  var nodeProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var override = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var mergeRef = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var ele = vnode;
  if (Array.isArray(vnode)) {
    ele = filterEmpty(vnode)[0];
  }
  if (!ele) {
    return null;
  }
  var node = cloneVNode(ele, nodeProps, mergeRef);
  node.props = override ? _extends(_extends({}, node.props), nodeProps) : node.props;
  warning$1(_typeof(node.props.class) !== "object", "class must be string");
  return node;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  if (!e.target.composing)
    return;
  e.target.composing = false;
  trigger(e.target, "input");
}
function trigger(el, type2) {
  var e = document.createEvent("HTMLEvents");
  e.initEvent(type2, true, true);
  el.dispatchEvent(e);
}
function addEventListener$2(el, event, handler8, options2) {
  el.addEventListener(event, handler8, options2);
}
var antInput = {
  created: function created(el, binding) {
    if (!binding.modifiers || !binding.modifiers.lazy) {
      addEventListener$2(el, "compositionstart", onCompositionStart);
      addEventListener$2(el, "compositionend", onCompositionEnd);
      addEventListener$2(el, "change", onCompositionEnd);
    }
  }
};
var antInput$1 = antInput;
var Input$1 = defineComponent({
  name: "Input",
  inheritAttrs: false,
  props: {
    inputRef: PropsTypes.any,
    prefixCls: PropsTypes.string,
    id: PropsTypes.string,
    inputElement: PropsTypes.any,
    disabled: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    autocomplete: PropsTypes.string,
    editable: PropsTypes.looseBool,
    accessibilityIndex: PropsTypes.number,
    value: PropsTypes.string,
    open: PropsTypes.looseBool,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    attrs: PropsTypes.object,
    onKeydown: PropsTypes.func,
    onMousedown: PropsTypes.func,
    onChange: PropsTypes.func,
    onPaste: PropsTypes.func,
    onCompositionstart: PropsTypes.func,
    onCompositionend: PropsTypes.func,
    onFocus: PropsTypes.func,
    onBlur: PropsTypes.func
  },
  setup: function setup11(props2) {
    return {
      blurTimeout: null,
      VCSelectContainerEvent: inject("VCSelectContainerEvent")
    };
  },
  render: function render5() {
    var _this = this;
    var _a;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, id2 = _this$$props.id, inputElement = _this$$props.inputElement, disabled = _this$$props.disabled, tabindex = _this$$props.tabindex, autofocus = _this$$props.autofocus, autocomplete = _this$$props.autocomplete, editable = _this$$props.editable, accessibilityIndex = _this$$props.accessibilityIndex, value26 = _this$$props.value, _onKeydown = _this$$props.onKeydown, _onMousedown = _this$$props.onMousedown, onChange9 = _this$$props.onChange, onPaste = _this$$props.onPaste, _onCompositionstart = _this$$props.onCompositionstart, _onCompositionend = _this$$props.onCompositionend, _onFocus = _this$$props.onFocus, _onBlur = _this$$props.onBlur, open6 = _this$$props.open, inputRef = _this$$props.inputRef, attrs = _this$$props.attrs;
    var inputNode = inputElement || withDirectives(createVNode("input", null, null), [[antInput$1]]);
    var inputProps2 = inputNode.props || {};
    var onOriginKeyDown = inputProps2.onKeydown, onOriginInput = inputProps2.onInput, onOriginFocus = inputProps2.onFocus, onOriginBlur = inputProps2.onBlur, onOriginMouseDown = inputProps2.onMousedown, onOriginCompositionStart = inputProps2.onCompositionstart, onOriginCompositionEnd = inputProps2.onCompositionend, style3 = inputProps2.style;
    inputNode = cloneElement(inputNode, _extends(_extends(_extends({
      id: id2,
      ref: inputRef,
      disabled,
      tabindex,
      autocomplete: autocomplete || "off",
      autofocus,
      class: classNames("".concat(prefixCls2, "-selection-search-input"), (_a = inputNode === null || inputNode === void 0 ? void 0 : inputNode.props) === null || _a === void 0 ? void 0 : _a.className),
      style: _extends(_extends({}, style3), {
        opacity: editable ? null : 0
      }),
      role: "combobox",
      "aria-expanded": open6,
      "aria-haspopup": "listbox",
      "aria-owns": "".concat(id2, "_list"),
      "aria-autocomplete": "list",
      "aria-controls": "".concat(id2, "_list"),
      "aria-activedescendant": "".concat(id2, "_list_").concat(accessibilityIndex)
    }, attrs), {
      value: editable ? value26 : "",
      readonly: !editable,
      unselectable: !editable ? "on" : null,
      onKeydown: function onKeydown2(event) {
        _onKeydown(event);
        if (onOriginKeyDown) {
          onOriginKeyDown(event);
        }
      },
      onMousedown: function onMousedown2(event) {
        _onMousedown(event);
        if (onOriginMouseDown) {
          onOriginMouseDown(event);
        }
      },
      onInput: function onInput(event) {
        onChange9(event);
        if (onOriginInput) {
          onOriginInput(event);
        }
      },
      onCompositionstart: function onCompositionstart2(event) {
        _onCompositionstart(event);
        if (onOriginCompositionStart) {
          onOriginCompositionStart(event);
        }
      },
      onCompositionend: function onCompositionend2(event) {
        _onCompositionend(event);
        if (onOriginCompositionEnd) {
          onOriginCompositionEnd(event);
        }
      },
      onPaste,
      onFocus: function onFocus6() {
        var _a2;
        clearTimeout(_this.blurTimeout);
        onOriginFocus && onOriginFocus(arguments.length <= 0 ? void 0 : arguments[0]);
        _onFocus && _onFocus(arguments.length <= 0 ? void 0 : arguments[0]);
        (_a2 = _this.VCSelectContainerEvent) === null || _a2 === void 0 ? void 0 : _a2.focus(arguments.length <= 0 ? void 0 : arguments[0]);
      },
      onBlur: function onBlur7() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this.blurTimeout = setTimeout(function() {
          var _a2;
          onOriginBlur && onOriginBlur(args[0]);
          _onBlur && _onBlur(args[0]);
          (_a2 = _this.VCSelectContainerEvent) === null || _a2 === void 0 ? void 0 : _a2.blur(args[0]);
        }, 200);
      }
    }), inputNode.type === "textarea" ? {} : {
      type: "search"
    }), true, true);
    return inputNode;
  }
});
var Input$2 = Input$1;
var OverflowContextProviderKey = Symbol("OverflowContextProviderKey");
var OverflowContextProvider = defineComponent({
  name: "OverflowContextProvider",
  inheritAttrs: false,
  props: {
    value: {
      type: Object
    }
  },
  setup: function setup12(props2, _ref) {
    var slots = _ref.slots;
    provide(OverflowContextProviderKey, computed(function() {
      return props2.value;
    }));
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var useInjectOverflowContext = function useInjectOverflowContext2() {
  return inject(OverflowContextProviderKey, computed(function() {
    return null;
  }));
};
var __rest$T = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var UNDEFINED = void 0;
var Item$1 = defineComponent({
  name: "Item",
  props: {
    prefixCls: String,
    item: PropsTypes.any,
    renderItem: Function,
    responsive: Boolean,
    itemKey: {
      type: [String, Number]
    },
    registerSize: Function,
    display: Boolean,
    order: Number,
    component: PropsTypes.any,
    invalidate: Boolean
  },
  setup: function setup13(props2, _ref) {
    var slots = _ref.slots, expose = _ref.expose;
    var mergedHidden = computed(function() {
      return props2.responsive && !props2.display;
    });
    var itemNodeRef = ref();
    expose({
      itemNodeRef
    });
    function internalRegisterSize(width) {
      props2.registerSize(props2.itemKey, width);
    }
    onUnmounted(function() {
      internalRegisterSize(null);
    });
    return function() {
      var _a;
      var prefixCls2 = props2.prefixCls, invalidate = props2.invalidate, item = props2.item, renderItem = props2.renderItem, responsive = props2.responsive;
      props2.registerSize;
      props2.itemKey;
      props2.display;
      var order = props2.order, _props$component = props2.component, Component = _props$component === void 0 ? "div" : _props$component, restProps = __rest$T(props2, ["prefixCls", "invalidate", "item", "renderItem", "responsive", "registerSize", "itemKey", "display", "order", "component"]);
      var children = (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
      var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
      var overflowStyle;
      if (!invalidate) {
        overflowStyle = {
          opacity: mergedHidden.value ? 0 : 1,
          height: mergedHidden.value ? 0 : UNDEFINED,
          overflowY: mergedHidden.value ? "hidden" : UNDEFINED,
          order: responsive ? order : UNDEFINED,
          pointerEvents: mergedHidden.value ? "none" : UNDEFINED,
          position: mergedHidden.value ? "absolute" : UNDEFINED
        };
      }
      var overflowProps = {};
      if (mergedHidden.value) {
        overflowProps["aria-hidden"] = true;
      }
      var itemNode = createVNode(Component, _objectSpread2(_objectSpread2(_objectSpread2({
        "class": classNames(!invalidate && prefixCls2),
        "style": overflowStyle
      }, overflowProps), restProps), {}, {
        "ref": itemNodeRef
      }), {
        default: function _default8() {
          return [childNode];
        }
      });
      return createVNode(ResizeObserver, {
        "disabled": !responsive,
        "onResize": function onResize(_ref2) {
          var offsetWidth = _ref2.offsetWidth;
          internalRegisterSize(offsetWidth);
        }
      }, {
        default: function _default8() {
          return [itemNode];
        }
      });
    };
  }
});
var __rest$S = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var RawItem = defineComponent({
  name: "RawItem",
  inheritAttrs: false,
  props: {
    component: PropsTypes.any,
    title: PropsTypes.any
  },
  setup: function setup14(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var context2 = useInjectOverflowContext();
    return function() {
      var _a, _b;
      if (!context2.value) {
        var _props$component = props2.component, Component = _props$component === void 0 ? "div" : _props$component, _restProps = __rest$S(props2, ["component"]);
        return createVNode(Component, _objectSpread2(_objectSpread2({}, _restProps), attrs), {
          default: function _default8() {
            return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
          }
        });
      }
      var _c = context2.value, contextClassName = _c.className, restContext = __rest$S(_c, ["className"]);
      var className = attrs.class, restProps = __rest$S(attrs, ["class"]);
      return createVNode(OverflowContextProvider, {
        "value": null
      }, {
        default: function _default8() {
          return [createVNode(Item$1, _objectSpread2(_objectSpread2(_objectSpread2({
            "class": classNames(contextClassName, className)
          }, restContext), restProps), props2), {
            default: function _default9() {
              return [(_b = slots.default) === null || _b === void 0 ? void 0 : _b.call(slots)];
            }
          })];
        }
      });
    };
  }
});
var __rest$R = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var RESPONSIVE = "responsive";
var INVALIDATE = "invalidate";
function defaultRenderRest(omittedItems) {
  return "+ ".concat(omittedItems.length, " ...");
}
var Overflow = defineComponent({
  name: "Overflow",
  inheritAttrs: false,
  props: {
    prefixCls: String,
    data: Array,
    itemKey: [String, Number, Function],
    itemWidth: {
      type: Number,
      default: 10
    },
    renderItem: Function,
    renderRawItem: Function,
    maxCount: [Number, String],
    renderRest: Function,
    renderRawRest: Function,
    suffix: PropsTypes.any,
    component: String,
    itemComponent: PropsTypes.any,
    onVisibleChange: Function,
    ssr: String
  },
  emits: ["visibleChange"],
  setup: function setup15(props2, _ref) {
    var attrs = _ref.attrs, emit = _ref.emit;
    var fullySSR = computed(function() {
      return props2.ssr === "full";
    });
    var containerWidth = ref(null);
    var mergedContainerWidth = computed(function() {
      return containerWidth.value || 0;
    });
    var itemWidths = ref(new Map());
    var prevRestWidth = ref(0);
    var restWidth = ref(0);
    var suffixWidth = ref(0);
    var suffixFixedStart = ref(null);
    var displayCount = ref(null);
    var mergedDisplayCount = computed(function() {
      if (displayCount.value === null && fullySSR.value) {
        return Number.MAX_SAFE_INTEGER;
      }
      return displayCount.value || 0;
    });
    var restReady = ref(false);
    var itemPrefixCls = computed(function() {
      return "".concat(props2.prefixCls, "-item");
    });
    var mergedRestWidth = computed(function() {
      return Math.max(prevRestWidth.value, restWidth.value);
    });
    var isResponsive = computed(function() {
      return !!(props2.data.length && props2.maxCount === RESPONSIVE);
    });
    var invalidate = computed(function() {
      return props2.maxCount === INVALIDATE;
    });
    var showRest = computed(function() {
      return isResponsive.value || typeof props2.maxCount === "number" && props2.data.length > props2.maxCount;
    });
    var mergedData = computed(function() {
      var items = props2.data;
      if (isResponsive.value) {
        if (containerWidth.value === null && fullySSR.value) {
          items = props2.data;
        } else {
          items = props2.data.slice(0, Math.min(props2.data.length, mergedContainerWidth.value / props2.itemWidth));
        }
      } else if (typeof props2.maxCount === "number") {
        items = props2.data.slice(0, props2.maxCount);
      }
      return items;
    });
    var omittedItems = computed(function() {
      if (isResponsive.value) {
        return props2.data.slice(mergedDisplayCount.value + 1);
      }
      return props2.data.slice(mergedData.value.length);
    });
    var getKey4 = function getKey5(item, index2) {
      var _a, _b;
      if (typeof props2.itemKey === "function") {
        return props2.itemKey(item);
      }
      return (_b = props2.itemKey && ((_a = item) === null || _a === void 0 ? void 0 : _a[props2.itemKey])) !== null && _b !== void 0 ? _b : index2;
    };
    var mergedRenderItem = computed(function() {
      return props2.renderItem || function(item) {
        return item;
      };
    });
    var updateDisplayCount = function updateDisplayCount2(count, notReady) {
      displayCount.value = count;
      if (!notReady) {
        restReady.value = count < props2.data.length - 1;
        emit("visibleChange", count);
      }
    };
    var onOverflowResize = function onOverflowResize2(_, element) {
      containerWidth.value = element.clientWidth;
    };
    var registerSize = function registerSize2(key2, width) {
      var clone = new Map(itemWidths.value);
      if (width === null) {
        clone.delete(key2);
      } else {
        clone.set(key2, width);
      }
      itemWidths.value = clone;
    };
    var registerOverflowSize = function registerOverflowSize2(_, width) {
      prevRestWidth.value = restWidth.value;
      restWidth.value = width;
    };
    var registerSuffixSize = function registerSuffixSize2(_, width) {
      suffixWidth.value = width;
    };
    var getItemWidth = function getItemWidth2(index2) {
      return itemWidths.value.get(getKey4(mergedData.value[index2], index2));
    };
    watch([mergedContainerWidth, itemWidths, restWidth, suffixWidth, function() {
      return props2.itemKey;
    }, mergedData], function() {
      if (mergedContainerWidth.value && mergedRestWidth.value && mergedData.value) {
        var totalWidth = suffixWidth.value;
        var len = mergedData.value.length;
        var lastIndex = len - 1;
        if (!len) {
          updateDisplayCount(0);
          suffixFixedStart.value = null;
          return;
        }
        for (var i = 0; i < len; i += 1) {
          var currentItemWidth = getItemWidth(i);
          if (currentItemWidth === void 0) {
            updateDisplayCount(i - 1, true);
            break;
          }
          totalWidth += currentItemWidth;
          if (lastIndex === 0 && totalWidth <= mergedContainerWidth.value || i === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth.value) {
            updateDisplayCount(lastIndex);
            suffixFixedStart.value = null;
            break;
          } else if (totalWidth + mergedRestWidth.value > mergedContainerWidth.value) {
            updateDisplayCount(i - 1);
            suffixFixedStart.value = totalWidth - currentItemWidth - suffixWidth.value + restWidth.value;
            break;
          }
        }
        if (props2.suffix && getItemWidth(0) + suffixWidth.value > mergedContainerWidth.value) {
          suffixFixedStart.value = null;
        }
      }
    });
    return function() {
      var displayRest = restReady.value && !!omittedItems.value.length;
      var itemComponent = props2.itemComponent, renderRawItem = props2.renderRawItem, renderRawRest = props2.renderRawRest, renderRest = props2.renderRest, _props$prefixCls = props2.prefixCls, prefixCls2 = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, suffix = props2.suffix, _props$component = props2.component, Component = _props$component === void 0 ? "div" : _props$component;
      var className = attrs.class, style3 = attrs.style, restAttrs = __rest$R(attrs, ["class", "style"]);
      var suffixStyle = {};
      if (suffixFixedStart.value !== null && isResponsive.value) {
        suffixStyle = {
          position: "absolute",
          left: "".concat(suffixFixedStart.value, "px"),
          top: 0
        };
      }
      var itemSharedProps = {
        prefixCls: itemPrefixCls.value,
        responsive: isResponsive.value,
        component: itemComponent,
        invalidate: invalidate.value
      };
      var internalRenderItemNode = renderRawItem ? function(item, index2) {
        var key2 = getKey4(item, index2);
        return createVNode(OverflowContextProvider, {
          "key": key2,
          "value": _extends(_extends({}, itemSharedProps), {
            order: index2,
            item,
            itemKey: key2,
            registerSize,
            display: index2 <= mergedDisplayCount.value
          })
        }, {
          default: function _default8() {
            return [renderRawItem(item, index2)];
          }
        });
      } : function(item, index2) {
        var key2 = getKey4(item, index2);
        return createVNode(Item$1, _objectSpread2(_objectSpread2({}, itemSharedProps), {}, {
          "order": index2,
          "key": key2,
          "item": item,
          "renderItem": mergedRenderItem.value,
          "itemKey": key2,
          "registerSize": registerSize,
          "display": index2 <= mergedDisplayCount.value
        }), null);
      };
      var restNode;
      var restContextProps = {
        order: displayRest ? mergedDisplayCount.value : Number.MAX_SAFE_INTEGER,
        className: "".concat(itemPrefixCls.value, "-rest"),
        registerSize: registerOverflowSize,
        display: displayRest
      };
      if (!renderRawRest) {
        var mergedRenderRest = renderRest || defaultRenderRest;
        restNode = createVNode(Item$1, _objectSpread2(_objectSpread2({}, itemSharedProps), restContextProps), {
          default: function _default8() {
            return [typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems.value) : mergedRenderRest];
          }
        });
      } else if (renderRawRest) {
        restNode = createVNode(OverflowContextProvider, {
          "value": _extends(_extends({}, itemSharedProps), restContextProps)
        }, {
          default: function _default8() {
            return [renderRawRest(omittedItems.value)];
          }
        });
      }
      var overflowNode = createVNode(Component, _objectSpread2({
        "class": classNames(!invalidate.value && prefixCls2, className),
        "style": style3
      }, restAttrs), {
        default: function _default8() {
          return [mergedData.value.map(internalRenderItemNode), showRest.value ? restNode : null, suffix && createVNode(Item$1, _objectSpread2(_objectSpread2({}, itemSharedProps), {}, {
            "order": mergedDisplayCount.value,
            "class": "".concat(itemPrefixCls.value, "-suffix"),
            "registerSize": registerSuffixSize,
            "display": true,
            "style": suffixStyle
          }), {
            default: function _default9() {
              return [suffix];
            }
          })];
        }
      });
      return createVNode(ResizeObserver, {
        "disabled": !isResponsive.value,
        "onResize": onOverflowResize
      }, {
        default: function _default8() {
          return [overflowNode];
        }
      });
    };
  }
});
Overflow.Item = RawItem;
Overflow.RESPONSIVE = RESPONSIVE;
Overflow.INVALIDATE = INVALIDATE;
var Overflow$1 = Overflow;
var props$4 = {
  id: PropsTypes.string,
  prefixCls: PropsTypes.string,
  values: PropsTypes.array,
  open: PropsTypes.looseBool,
  searchValue: PropsTypes.string,
  inputRef: PropsTypes.any,
  placeholder: PropsTypes.any,
  disabled: PropsTypes.looseBool,
  mode: PropsTypes.string,
  showSearch: PropsTypes.looseBool,
  autofocus: PropsTypes.looseBool,
  autocomplete: PropsTypes.string,
  accessibilityIndex: PropsTypes.number,
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  removeIcon: PropsTypes.VNodeChild,
  choiceTransitionName: PropsTypes.string,
  maxTagCount: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  maxTagTextLength: PropsTypes.number,
  maxTagPlaceholder: PropsTypes.any.def(function() {
    return function(omittedValues) {
      return "+ ".concat(omittedValues.length, " ...");
    };
  }),
  tagRender: PropsTypes.func,
  onToggleOpen: {
    type: Function
  },
  onSelect: PropsTypes.func,
  onInputChange: PropsTypes.func,
  onInputPaste: PropsTypes.func,
  onInputKeyDown: PropsTypes.func,
  onInputMouseDown: PropsTypes.func,
  onInputCompositionStart: PropsTypes.func,
  onInputCompositionEnd: PropsTypes.func
};
var onPreventMouseDown = function onPreventMouseDown2(event) {
  event.preventDefault();
  event.stopPropagation();
};
var SelectSelector = defineComponent({
  name: "MultipleSelectSelector",
  inheritAttrs: false,
  props: props$4,
  setup: function setup16(props2) {
    var measureRef = ref();
    var inputWidth = ref(0);
    var focused = ref(false);
    var selectionPrefixCls = computed(function() {
      return "".concat(props2.prefixCls, "-selection");
    });
    var inputValue = computed(function() {
      return props2.open || props2.mode === "tags" ? props2.searchValue : "";
    });
    var inputEditable = computed(function() {
      return props2.mode === "tags" || props2.showSearch && (props2.open || focused.value);
    });
    onMounted(function() {
      watch(inputValue, function() {
        inputWidth.value = measureRef.value.scrollWidth;
      }, {
        flush: "post",
        immediate: true
      });
    });
    function defaultRenderSelector(content, itemDisabled, closable, onClose) {
      return createVNode("span", {
        "class": classNames("".concat(selectionPrefixCls.value, "-item"), _defineProperty({}, "".concat(selectionPrefixCls.value, "-item-disabled"), itemDisabled))
      }, [createVNode("span", {
        "class": "".concat(selectionPrefixCls.value, "-item-content")
      }, [content]), closable && createVNode(TransBtn$1, {
        "class": "".concat(selectionPrefixCls.value, "-item-remove"),
        "onMousedown": onPreventMouseDown,
        "onClick": onClose,
        "customizeIcon": props2.removeIcon
      }, {
        default: function _default8() {
          return [createTextVNode("\xD7")];
        }
      })]);
    }
    function customizeRenderSelector(value26, content, itemDisabled, closable, onClose) {
      var onMouseDown3 = function onMouseDown4(e) {
        onPreventMouseDown(e);
        props2.onToggleOpen(!open);
      };
      return createVNode("span", {
        "onMousedown": onMouseDown3
      }, [props2.tagRender({
        label: content,
        value: value26,
        disabled: itemDisabled,
        closable,
        onClose
      })]);
    }
    function renderItem(_ref) {
      var itemDisabled = _ref.disabled, label = _ref.label, value26 = _ref.value;
      var closable = !props2.disabled && !itemDisabled;
      var displayLabel = label;
      if (typeof props2.maxTagTextLength === "number") {
        if (typeof label === "string" || typeof label === "number") {
          var strLabel = String(displayLabel);
          if (strLabel.length > props2.maxTagTextLength) {
            displayLabel = "".concat(strLabel.slice(0, props2.maxTagTextLength), "...");
          }
        }
      }
      var onClose = function onClose2(event) {
        if (event)
          event.stopPropagation();
        props2.onSelect(value26, {
          selected: false
        });
      };
      return typeof props2.tagRender === "function" ? customizeRenderSelector(value26, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(displayLabel, itemDisabled, closable, onClose);
    }
    function renderRest(omittedValues) {
      var _props$maxTagPlacehol = props2.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues2) {
        return "+ ".concat(omittedValues2.length, " ...");
      } : _props$maxTagPlacehol;
      var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
      return defaultRenderSelector(content, false);
    }
    return function() {
      var id2 = props2.id, prefixCls2 = props2.prefixCls, values = props2.values, open6 = props2.open, inputRef = props2.inputRef, placeholder = props2.placeholder, disabled = props2.disabled, autofocus = props2.autofocus, autocomplete = props2.autocomplete, accessibilityIndex = props2.accessibilityIndex, tabindex = props2.tabindex, onInputChange3 = props2.onInputChange, onInputPaste = props2.onInputPaste, onInputKeyDown = props2.onInputKeyDown, onInputMouseDown = props2.onInputMouseDown, onInputCompositionStart = props2.onInputCompositionStart, onInputCompositionEnd = props2.onInputCompositionEnd;
      var inputNode = createVNode("div", {
        "class": "".concat(selectionPrefixCls.value, "-search"),
        "style": {
          width: inputWidth.value + "px"
        },
        "key": "input"
      }, [createVNode(Input$2, {
        "inputRef": inputRef,
        "open": open6,
        "prefixCls": prefixCls2,
        "id": id2,
        "inputElement": null,
        "disabled": disabled,
        "autofocus": autofocus,
        "autocomplete": autocomplete,
        "editable": inputEditable.value,
        "accessibilityIndex": accessibilityIndex,
        "value": inputValue.value,
        "onKeydown": onInputKeyDown,
        "onMousedown": onInputMouseDown,
        "onChange": onInputChange3,
        "onPaste": onInputPaste,
        "onCompositionstart": onInputCompositionStart,
        "onCompositionend": onInputCompositionEnd,
        "tabindex": tabindex,
        "attrs": pickAttrs(props2, true),
        "onFocus": function onFocus6() {
          return focused.value = true;
        },
        "onBlur": function onBlur7() {
          return focused.value = false;
        }
      }, null), createVNode("span", {
        "ref": measureRef,
        "class": "".concat(selectionPrefixCls.value, "-search-mirror"),
        "aria-hidden": true
      }, [inputValue.value, createTextVNode("\xA0")])]);
      var selectionNode = createVNode(Overflow$1, {
        "prefixCls": "".concat(selectionPrefixCls.value, "-overflow"),
        "data": values,
        "renderItem": renderItem,
        "renderRest": renderRest,
        "suffix": inputNode,
        "itemKey": "key",
        "maxCount": props2.maxTagCount,
        "key": "overflow"
      }, null);
      return createVNode(Fragment, null, [selectionNode, !values.length && !inputValue.value && createVNode("span", {
        "class": "".concat(selectionPrefixCls.value, "-placeholder")
      }, [placeholder])]);
    };
  }
});
var MultipleSelector$2 = SelectSelector;
var props$3 = {
  inputElement: PropsTypes.any,
  id: PropsTypes.string,
  prefixCls: PropsTypes.string,
  values: PropsTypes.array,
  open: PropsTypes.looseBool,
  searchValue: PropsTypes.string,
  inputRef: PropsTypes.any,
  placeholder: PropsTypes.any,
  disabled: PropsTypes.looseBool,
  mode: PropsTypes.string,
  showSearch: PropsTypes.looseBool,
  autofocus: PropsTypes.looseBool,
  autocomplete: PropsTypes.string,
  accessibilityIndex: PropsTypes.number,
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  activeValue: PropsTypes.string,
  backfill: PropsTypes.looseBool,
  onInputChange: PropsTypes.func,
  onInputPaste: PropsTypes.func,
  onInputKeyDown: PropsTypes.func,
  onInputMouseDown: PropsTypes.func,
  onInputCompositionStart: PropsTypes.func,
  onInputCompositionEnd: PropsTypes.func
};
var SingleSelector$2 = defineComponent({
  name: "SingleSelector",
  setup: function setup17(props2) {
    var inputChanged = ref(false);
    var combobox = computed(function() {
      return props2.mode === "combobox";
    });
    var inputEditable = computed(function() {
      return combobox.value || props2.showSearch;
    });
    var inputValue = computed(function() {
      var inputValue2 = props2.searchValue || "";
      if (combobox.value && props2.activeValue && !inputChanged.value) {
        inputValue2 = props2.activeValue;
      }
      return inputValue2;
    });
    watch([combobox, function() {
      return props2.activeValue;
    }], function() {
      if (combobox.value) {
        inputChanged.value = false;
      }
    }, {
      immediate: true
    });
    var hasTextInput = computed(function() {
      return props2.mode !== "combobox" && !props2.open ? false : !!inputValue.value;
    });
    var title2 = computed(function() {
      var item = props2.values[0];
      return item && (typeof item.label === "string" || typeof item.label === "number") ? item.label.toString() : void 0;
    });
    return function() {
      var inputElement = props2.inputElement, prefixCls2 = props2.prefixCls, id2 = props2.id, values = props2.values, inputRef = props2.inputRef, disabled = props2.disabled, autofocus = props2.autofocus, autocomplete = props2.autocomplete, accessibilityIndex = props2.accessibilityIndex, open6 = props2.open, placeholder = props2.placeholder, tabindex = props2.tabindex, onInputKeyDown = props2.onInputKeyDown, onInputMouseDown = props2.onInputMouseDown, onInputChange3 = props2.onInputChange, onInputPaste = props2.onInputPaste, onInputCompositionStart = props2.onInputCompositionStart, onInputCompositionEnd = props2.onInputCompositionEnd;
      var item = values[0];
      return createVNode(Fragment, null, [createVNode("span", {
        "class": "".concat(prefixCls2, "-selection-search")
      }, [createVNode(Input$2, {
        "inputRef": inputRef,
        "prefixCls": prefixCls2,
        "id": id2,
        "open": open6,
        "inputElement": inputElement,
        "disabled": disabled,
        "autofocus": autofocus,
        "autocomplete": autocomplete,
        "editable": inputEditable.value,
        "accessibilityIndex": accessibilityIndex,
        "value": inputValue.value,
        "onKeydown": onInputKeyDown,
        "onMousedown": onInputMouseDown,
        "onChange": function onChange9(e) {
          inputChanged.value = true;
          onInputChange3(e);
        },
        "onPaste": onInputPaste,
        "onCompositionstart": onInputCompositionStart,
        "onCompositionend": onInputCompositionEnd,
        "tabindex": tabindex,
        "attrs": pickAttrs(props2, true)
      }, null)]), !combobox.value && item && !hasTextInput.value && createVNode("span", {
        "class": "".concat(prefixCls2, "-selection-item"),
        "title": title2.value
      }, [createVNode(Fragment, {
        "key": item.key || item.value
      }, [item.label])]), !item && !hasTextInput.value && createVNode("span", {
        "class": "".concat(prefixCls2, "-selection-placeholder")
      }, [placeholder])]);
    };
  }
});
SingleSelector$2.props = props$3;
SingleSelector$2.inheritAttrs = false;
var SingleSelector$3 = SingleSelector$2;
function useLock() {
  var duration2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
  var lock = null;
  var timeout;
  onBeforeUpdate(function() {
    window.clearTimeout(timeout);
  });
  function doLock(locked) {
    if (locked || lock === null) {
      lock = locked;
    }
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      lock = null;
    }, duration2);
  }
  return [function() {
    return lock;
  }, doLock];
}
var Selector$2 = defineComponent({
  name: "Selector",
  inheritAttrs: false,
  props: {
    id: PropsTypes.string,
    prefixCls: PropsTypes.string,
    showSearch: PropsTypes.looseBool,
    open: PropsTypes.looseBool,
    values: PropsTypes.array,
    multiple: PropsTypes.looseBool,
    mode: PropsTypes.string,
    searchValue: PropsTypes.string,
    activeValue: PropsTypes.string,
    inputElement: PropsTypes.any,
    autofocus: PropsTypes.looseBool,
    accessibilityIndex: PropsTypes.number,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    disabled: PropsTypes.looseBool,
    placeholder: PropsTypes.any,
    removeIcon: PropsTypes.any,
    maxTagCount: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    maxTagTextLength: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.any,
    tagRender: PropsTypes.func,
    tokenWithEnter: PropsTypes.looseBool,
    choiceTransitionName: PropsTypes.string,
    onToggleOpen: {
      type: Function
    },
    onSearch: PropsTypes.func,
    onSearchSubmit: PropsTypes.func,
    onSelect: PropsTypes.func,
    onInputKeyDown: {
      type: Function
    },
    domRef: PropsTypes.func
  },
  setup: function setup18(props2) {
    var inputRef = createRef$1();
    var compositionStatus = false;
    var _useLock = useLock(0), _useLock2 = _slicedToArray(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
    var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
      var which = event.which;
      if (which === KeyCode$2.UP || which === KeyCode$2.DOWN) {
        event.preventDefault();
      }
      if (props2.onInputKeyDown) {
        props2.onInputKeyDown(event);
      }
      if (which === KeyCode$2.ENTER && props2.mode === "tags" && !compositionStatus && !props2.open) {
        props2.onSearchSubmit(event.target.value);
      }
      if (![KeyCode$2.SHIFT, KeyCode$2.TAB, KeyCode$2.BACKSPACE, KeyCode$2.ESC].includes(which)) {
        props2.onToggleOpen(true);
      }
    };
    var onInternalInputMouseDown = function onInternalInputMouseDown2() {
      setInputMouseDown(true);
    };
    var pastedText = null;
    var triggerOnSearch = function triggerOnSearch2(value26) {
      if (props2.onSearch(value26, true, compositionStatus) !== false) {
        props2.onToggleOpen(true);
      }
    };
    var onInputCompositionStart = function onInputCompositionStart2() {
      compositionStatus = true;
    };
    var onInputCompositionEnd = function onInputCompositionEnd2(e) {
      compositionStatus = false;
      if (props2.mode !== "combobox") {
        triggerOnSearch(e.target.value);
      }
    };
    var onInputChange3 = function onInputChange4(event) {
      var value26 = event.target.value;
      if (props2.tokenWithEnter && pastedText && /[\r\n]/.test(pastedText)) {
        var replacedText = pastedText.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
        value26 = value26.replace(replacedText, pastedText);
      }
      pastedText = null;
      triggerOnSearch(value26);
    };
    var onInputPaste = function onInputPaste2(e) {
      var clipboardData = e.clipboardData;
      var value26 = clipboardData.getData("text");
      pastedText = value26;
    };
    var onClick7 = function onClick8(_ref) {
      var target = _ref.target;
      if (target !== inputRef.current) {
        var isIE = document.body.style.msTouchAction !== void 0;
        if (isIE) {
          setTimeout(function() {
            inputRef.current.focus();
          });
        } else {
          inputRef.current.focus();
        }
      }
    };
    var onMousedown2 = function onMousedown3(event) {
      var inputMouseDown = getInputMouseDown();
      if (event.target !== inputRef.current && !inputMouseDown) {
        event.preventDefault();
      }
      if (props2.mode !== "combobox" && (!props2.showSearch || !inputMouseDown) || !props2.open) {
        if (props2.open) {
          props2.onSearch("", true, false);
        }
        props2.onToggleOpen();
      }
    };
    return {
      focus: function focus27() {
        inputRef.current.focus();
      },
      blur: function blur24() {
        inputRef.current.blur();
      },
      onMousedown: onMousedown2,
      onClick: onClick7,
      onInputPaste,
      inputRef,
      onInternalInputKeyDown,
      onInternalInputMouseDown,
      onInputChange: onInputChange3,
      onInputCompositionEnd,
      onInputCompositionStart
    };
  },
  render: function render6() {
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, domRef = _this$$props.domRef, multiple = _this$$props.multiple;
    var onMousedown2 = this.onMousedown, onClick7 = this.onClick, inputRef = this.inputRef, onInputPaste = this.onInputPaste, onInternalInputKeyDown = this.onInternalInputKeyDown, onInternalInputMouseDown = this.onInternalInputMouseDown, onInputChange3 = this.onInputChange, onInputCompositionStart = this.onInputCompositionStart, onInputCompositionEnd = this.onInputCompositionEnd;
    var sharedProps = {
      inputRef,
      onInputKeyDown: onInternalInputKeyDown,
      onInputMouseDown: onInternalInputMouseDown,
      onInputChange: onInputChange3,
      onInputPaste,
      onInputCompositionStart,
      onInputCompositionEnd
    };
    var selectNode = multiple ? createVNode(MultipleSelector$2, _objectSpread2(_objectSpread2({}, this.$props), sharedProps), null) : createVNode(SingleSelector$3, _objectSpread2(_objectSpread2({}, this.$props), sharedProps), null);
    return createVNode("div", {
      "ref": domRef,
      "class": "".concat(prefixCls2, "-selector"),
      "onClick": onClick7,
      "onMousedown": onMousedown2
    }, [selectNode]);
  }
});
var Selector$3 = Selector$2;
function contains(root, n) {
  if (!root) {
    return false;
  }
  return root.contains(n);
}
var availablePrefixs = ["moz", "ms", "webkit"];
function requestAnimationFramePolyfill() {
  var lastTime = 0;
  return function(callback) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id2 = window.setTimeout(function() {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id2;
  };
}
function getRequestAnimationFrame() {
  if (typeof window === "undefined") {
    return function() {
    };
  }
  if (window.requestAnimationFrame) {
    return window.requestAnimationFrame.bind(window);
  }
  var prefix = availablePrefixs.filter(function(key2) {
    return "".concat(key2, "RequestAnimationFrame") in window;
  })[0];
  return prefix ? window["".concat(prefix, "RequestAnimationFrame")] : requestAnimationFramePolyfill();
}
function cancelRequestAnimationFrame(id2) {
  if (typeof window === "undefined") {
    return null;
  }
  if (window.cancelAnimationFrame) {
    return window.cancelAnimationFrame(id2);
  }
  var prefix = availablePrefixs.filter(function(key2) {
    return "".concat(key2, "CancelAnimationFrame") in window || "".concat(key2, "CancelRequestAnimationFrame") in window;
  })[0];
  return prefix ? (window["".concat(prefix, "CancelAnimationFrame")] || window["".concat(prefix, "CancelRequestAnimationFrame")]).call(this, id2) : clearTimeout(id2);
}
var raf = getRequestAnimationFrame();
var cancelAnimationTimeout = function cancelAnimationTimeout2(frame) {
  return cancelRequestAnimationFrame(frame.id);
};
var requestAnimationTimeout = function requestAnimationTimeout2(callback, delay) {
  var start = Date.now();
  function timeout() {
    if (Date.now() - start >= delay) {
      callback.call();
    } else {
      frame.id = raf(timeout);
    }
  }
  var frame = {
    id: raf(timeout)
  };
  return frame;
};
var isVisible = function(element) {
  if (!element) {
    return false;
  }
  if (element.offsetParent) {
    return true;
  }
  if (element.getBBox) {
    var box = element.getBBox();
    if (box.width || box.height) {
      return true;
    }
  }
  if (element.getBoundingClientRect) {
    var _box = element.getBoundingClientRect();
    if (_box.width || _box.height) {
      return true;
    }
  }
  return false;
};
function isSamePoint(prev3, next3) {
  if (prev3 === next3)
    return true;
  if (!prev3 || !next3)
    return false;
  if ("pageX" in next3 && "pageY" in next3) {
    return prev3.pageX === next3.pageX && prev3.pageY === next3.pageY;
  }
  if ("clientX" in next3 && "clientY" in next3) {
    return prev3.clientX === next3.clientX && prev3.clientY === next3.clientY;
  }
  return false;
}
function restoreFocus(activeElement, container) {
  if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === "function") {
    activeElement.focus();
  }
}
function monitorResize(element, callback) {
  var prevWidth = null;
  var prevHeight = null;
  function onResize(_ref) {
    var _ref2 = _slicedToArray(_ref, 1), target = _ref2[0].target;
    if (!document.documentElement.contains(target))
      return;
    var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
    var fixedWidth = Math.floor(width);
    var fixedHeight = Math.floor(height);
    if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
      Promise.resolve().then(function() {
        callback({
          width: fixedWidth,
          height: fixedHeight
        });
      });
    }
    prevWidth = fixedWidth;
    prevHeight = fixedHeight;
  }
  var resizeObserver = new index$k(onResize);
  if (element) {
    resizeObserver.observe(element);
  }
  return function() {
    resizeObserver.disconnect();
  };
}
var useBuffer = function(callback, buffer) {
  var called = false;
  var timeout = null;
  function cancelTrigger() {
    window.clearTimeout(timeout);
  }
  function trigger2(force) {
    if (!called || force === true) {
      if (callback() === false) {
        return;
      }
      called = true;
      cancelTrigger();
      timeout = window.setTimeout(function() {
        called = false;
      }, buffer.value);
    } else {
      cancelTrigger();
      timeout = window.setTimeout(function() {
        called = false;
        trigger2();
      }, buffer.value);
    }
  }
  return [trigger2, function() {
    called = false;
    cancelTrigger();
  }];
};
var alignProps = {
  align: Object,
  target: [Object, Function],
  onAlign: Function,
  monitorBufferTime: Number,
  monitorWindowResize: Boolean,
  disabled: Boolean
};
function getElement(func) {
  if (typeof func !== "function")
    return null;
  return func();
}
function getPoint(point) {
  if (_typeof(point) !== "object" || !point)
    return null;
  return point;
}
var Align = defineComponent({
  name: "Align",
  props: alignProps,
  emits: ["align"],
  setup: function setup19(props2, _ref) {
    var expose = _ref.expose, slots = _ref.slots;
    var cacheRef = ref({});
    var nodeRef = ref();
    var forceAlignPropsRef = computed(function() {
      return {
        disabled: props2.disabled,
        target: props2.target,
        onAlign: props2.onAlign
      };
    });
    var _useBuffer = useBuffer(function() {
      var _forceAlignPropsRef$v = forceAlignPropsRef.value, latestDisabled = _forceAlignPropsRef$v.disabled, latestTarget = _forceAlignPropsRef$v.target, latestOnAlign = _forceAlignPropsRef$v.onAlign;
      if (!latestDisabled && latestTarget && nodeRef.value && nodeRef.value.$el) {
        var source = nodeRef.value.$el;
        var result;
        var element = getElement(latestTarget);
        var point = getPoint(latestTarget);
        cacheRef.value.element = element;
        cacheRef.value.point = point;
        var _document = document, activeElement = _document.activeElement;
        if (element && isVisible(element)) {
          result = alignElement(source, element, props2.align);
        } else if (point) {
          result = alignPoint(source, point, props2.align);
        }
        restoreFocus(activeElement, source);
        if (latestOnAlign && result) {
          latestOnAlign(source, result);
        }
        return true;
      }
      return false;
    }, computed(function() {
      return props2.monitorBufferTime;
    })), _useBuffer2 = _slicedToArray(_useBuffer, 2), _forceAlign = _useBuffer2[0], cancelForceAlign = _useBuffer2[1];
    var resizeMonitor = ref({
      cancel: function cancel2() {
      }
    });
    var sourceResizeMonitor = ref({
      cancel: function cancel2() {
      }
    });
    var goAlign = function goAlign2() {
      var target = props2.target;
      var element = getElement(target);
      var point = getPoint(target);
      if (nodeRef.value && nodeRef.value.$el !== sourceResizeMonitor.value.element) {
        sourceResizeMonitor.value.cancel();
        sourceResizeMonitor.value.element = nodeRef.value.$el;
        sourceResizeMonitor.value.cancel = monitorResize(nodeRef.value.$el, _forceAlign);
      }
      if (cacheRef.value.element !== element || !isSamePoint(cacheRef.value.point, point)) {
        _forceAlign();
        if (resizeMonitor.value.element !== element) {
          resizeMonitor.value.cancel();
          resizeMonitor.value.element = element;
          resizeMonitor.value.cancel = monitorResize(element, _forceAlign);
        }
      }
    };
    onMounted(function() {
      goAlign();
    });
    onUpdated(function() {
      goAlign();
    });
    watch(function() {
      return props2.disabled;
    }, function(disabled) {
      if (!disabled) {
        _forceAlign();
      } else {
        cancelForceAlign();
      }
    }, {
      flush: "post"
    });
    var winResizeRef = ref(null);
    watch(function() {
      return props2.monitorWindowResize;
    }, function(monitorWindowResize) {
      if (monitorWindowResize) {
        if (!winResizeRef.value) {
          winResizeRef.value = addEventListenerWrap(window, "resize", _forceAlign);
        }
      } else if (winResizeRef.value) {
        winResizeRef.value.remove();
        winResizeRef.value = null;
      }
    }, {
      flush: "post"
    });
    onUnmounted(function() {
      resizeMonitor.value.cancel();
      sourceResizeMonitor.value.cancel();
      if (winResizeRef.value)
        winResizeRef.value.remove();
      cancelForceAlign();
    });
    expose({
      forceAlign: function forceAlign() {
        return _forceAlign(true);
      }
    });
    return function() {
      var child = slots === null || slots === void 0 ? void 0 : slots.default();
      if (child) {
        return cloneElement(child[0], {
          ref: nodeRef
        }, true, true);
      }
      return child && child[0];
    };
  }
});
var LazyRenderBox$1 = {
  name: "LazyRenderBox",
  props: {
    visible: PropsTypes.looseBool,
    hiddenClassName: PropsTypes.string
  },
  render: function render7() {
    var hiddenClassName = this.$props.hiddenClassName;
    var child = getSlot(this);
    if (hiddenClassName || child && child.length > 1 || child && child[0] && child[0].type === Text$2) {
      return createVNode("div", null, [child]);
    }
    return child && child[0];
  }
};
var PopupInner = {
  props: {
    hiddenClassName: PropsTypes.string.def(""),
    prefixCls: PropsTypes.string,
    visible: PropsTypes.looseBool
  },
  render: function render8() {
    var _this = this;
    var _a, _b;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, visible9 = _this$$props.visible, hiddenClassName = _this$$props.hiddenClassName;
    return createVNode("div", {
      "class": !visible9 ? hiddenClassName : ""
    }, [createVNode(LazyRenderBox$1, {
      "class": "".concat(prefixCls2, "-content"),
      "visible": visible9
    }, {
      default: function _default8() {
        return [(_b = (_a = _this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)];
      }
    })]);
  }
};
var BaseMixin = {
  methods: {
    setState: function setState() {
      var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      var newState = typeof state === "function" ? state(this.$data, this.$props) : state;
      if (this.getDerivedStateFromProps) {
        var s = this.getDerivedStateFromProps(getOptionProps(this), _extends(_extends({}, this.$data), newState));
        if (s === null) {
          return;
        } else {
          newState = _extends(_extends({}, newState), s || {});
        }
      }
      _extends(this.$data, newState);
      if (this._.isMounted) {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    __emit: function __emit() {
      var args = [].slice.call(arguments, 0);
      var eventName = args[0];
      eventName = "on".concat(eventName[0].toUpperCase()).concat(eventName.substring(1));
      var event = this.$props[eventName] || this.$attrs[eventName];
      if (args.length && event) {
        if (Array.isArray(event)) {
          for (var i = 0, l = event.length; i < l; i++) {
            event[i].apply(event, _toConsumableArray(args.slice(1)));
          }
        } else {
          event.apply(void 0, _toConsumableArray(args.slice(1)));
        }
      }
    }
  }
};
function isPointsEq(a1, a2, isAlignPoint) {
  if (isAlignPoint) {
    return a1[0] === a2[0];
  }
  return a1[0] === a2[0] && a1[1] === a2[1];
}
function getAlignFromPlacement(builtinPlacements, placementStr, align) {
  var baseAlign = builtinPlacements[placementStr] || {};
  return _extends(_extends({}, baseAlign), align);
}
function getAlignPopupClassName(builtinPlacements, prefixCls2, align, isAlignPoint) {
  var points = align.points;
  for (var placement2 in builtinPlacements) {
    if (builtinPlacements.hasOwnProperty(placement2)) {
      if (isPointsEq(builtinPlacements[placement2].points, points, isAlignPoint)) {
        return "".concat(prefixCls2, "-placement-").concat(placement2);
      }
    }
  }
  return "";
}
function noop$G() {
}
function saveRef(name2, component) {
  this[name2] = component;
}
(function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
});
var getTransitionProps = function getTransitionProps2(transitionName2) {
  var opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var transitionProps = transitionName2 ? _extends({
    appear: true,
    appearToClass: "".concat(transitionName2, "-appear ").concat(transitionName2, "-appear-active"),
    enterFromClass: "".concat(transitionName2, "-enter ").concat(transitionName2, "-enter-prepare"),
    enterToClass: "".concat(transitionName2, "-enter ").concat(transitionName2, "-enter-active"),
    leaveFromClass: " ".concat(transitionName2, "-leave"),
    leaveActiveClass: "".concat(transitionName2, "-leave ").concat(transitionName2, "-leave-active"),
    leaveToClass: "".concat(transitionName2, "-leave ").concat(transitionName2, "-leave-active")
  }, opt) : _extends({
    css: false
  }, opt);
  return transitionProps;
};
var getTransitionGroupProps = function getTransitionGroupProps2(transitionName2) {
  var opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var transitionProps = transitionName2 ? _extends({
    appear: true,
    appearActiveClass: "".concat(transitionName2),
    appearToClass: "".concat(transitionName2, "-appear ").concat(transitionName2, "-appear-active"),
    enterFromClass: "".concat(transitionName2, "-appear ").concat(transitionName2, "-enter ").concat(transitionName2, "-appear-prepare ").concat(transitionName2, "-enter-prepare"),
    enterActiveClass: "".concat(transitionName2),
    enterToClass: "".concat(transitionName2, "-enter ").concat(transitionName2, "-appear ").concat(transitionName2, "-appear-active ").concat(transitionName2, "-enter-active"),
    leaveActiveClass: "".concat(transitionName2, " ").concat(transitionName2, "-leave"),
    leaveToClass: "".concat(transitionName2, "-leave-active")
  }, opt) : _extends({
    css: false
  }, opt);
  return transitionProps;
};
var Transition = Transition$2;
var TransitionGroup = TransitionGroup$1;
var getCollapsedHeight = function getCollapsedHeight2() {
  return {
    height: 0,
    opacity: 0
  };
};
var getRealHeight = function getRealHeight2(node) {
  return {
    height: "".concat(node.scrollHeight, "px"),
    opacity: 1
  };
};
var getCurrentHeight = function getCurrentHeight2(node) {
  return {
    height: "".concat(node.offsetHeight, "px")
  };
};
var collapseMotion = function collapseMotion2(style3, className) {
  return {
    name: "ant-motion-collapse",
    appear: true,
    css: true,
    onBeforeEnter: function onBeforeEnter(node) {
      className.value = "ant-motion-collapse";
      style3.value = getCollapsedHeight();
    },
    onEnter: function onEnter2(node) {
      nextTick(function() {
        style3.value = getRealHeight(node);
      });
    },
    onAfterEnter: function onAfterEnter() {
      className.value = "";
      style3.value = {};
    },
    onBeforeLeave: function onBeforeLeave(node) {
      className.value = "ant-motion-collapse";
      style3.value = getCurrentHeight(node);
    },
    onLeave: function onLeave2(node) {
      window.setTimeout(function() {
        style3.value = getCollapsedHeight();
      });
    },
    onAfterLeave: function onAfterLeave() {
      className.value = "";
      style3.value = {};
    }
  };
};
var Transition$1 = Transition;
var Popup = {
  name: "VCTriggerPopup",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    visible: PropsTypes.looseBool,
    getClassNameFromAlign: PropsTypes.func,
    getRootDomNode: PropsTypes.func,
    align: PropsTypes.any,
    destroyPopupOnHide: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    getContainer: PropsTypes.func,
    transitionName: PropsTypes.string,
    animation: PropsTypes.any,
    maskAnimation: PropsTypes.string,
    maskTransitionName: PropsTypes.string,
    mask: PropsTypes.looseBool,
    zIndex: PropsTypes.number,
    popupClassName: PropsTypes.any,
    popupStyle: PropsTypes.object.def(function() {
      return {};
    }),
    stretch: PropsTypes.string,
    point: PropsTypes.shape({
      pageX: PropsTypes.number,
      pageY: PropsTypes.number
    }).loose
  },
  data: function data() {
    this.domEl = null;
    this.currentAlignClassName = void 0;
    this.transitionProps = {};
    this.savePopupRef = saveRef.bind(this, "popupInstance");
    this.saveAlignRef = saveRef.bind(this, "alignInstance");
    return {
      stretchChecked: false,
      targetWidth: void 0,
      targetHeight: void 0
    };
  },
  mounted: function mounted2() {
    var _this = this;
    this.$nextTick(function() {
      _this.rootNode = _this.getPopupDomNode();
      _this.setStretchSize();
    });
  },
  updated: function updated() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.setStretchSize();
    });
  },
  methods: {
    onAlign: function onAlign(popupDomNode, align) {
      var props2 = this.$props;
      var currentAlignClassName = props2.getClassNameFromAlign(align);
      if (this.currentAlignClassName !== currentAlignClassName) {
        this.currentAlignClassName = currentAlignClassName;
        popupDomNode.className = this.getClassName(currentAlignClassName, popupDomNode.className);
      }
      var onaAlign = this.$attrs.onaAlign;
      onaAlign && onaAlign(popupDomNode, align);
    },
    setStretchSize: function setStretchSize() {
      var _this$$props = this.$props, stretch = _this$$props.stretch, getRootDomNode2 = _this$$props.getRootDomNode, visible9 = _this$$props.visible;
      var _this$$data = this.$data, stretchChecked = _this$$data.stretchChecked, targetHeight = _this$$data.targetHeight, targetWidth = _this$$data.targetWidth;
      if (!stretch || !visible9) {
        if (stretchChecked) {
          this.setState({
            stretchChecked: false
          });
        }
        return;
      }
      var $ele = getRootDomNode2();
      if (!$ele)
        return;
      var height = $ele.offsetHeight;
      var width = $ele.offsetWidth;
      if (targetHeight !== height || targetWidth !== width || !stretchChecked) {
        this.setState({
          stretchChecked: true,
          targetHeight: height,
          targetWidth: width
        });
      }
    },
    getPopupDomNode: function getPopupDomNode() {
      return findDOMNode(this.popupInstance);
    },
    getTargetElement: function getTargetElement() {
      return this.$props.getRootDomNode();
    },
    getAlignTarget: function getAlignTarget() {
      var point = this.$props.point;
      if (point) {
        return point;
      }
      return this.getTargetElement;
    },
    getMaskTransitionName: function getMaskTransitionName() {
      var props2 = this.$props;
      var transitionName2 = props2.maskTransitionName;
      var animation2 = props2.maskAnimation;
      if (!transitionName2 && animation2) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    getTransitionName: function getTransitionName() {
      var props2 = this.$props;
      var transitionName2 = props2.transitionName;
      var animation2 = props2.animation;
      if (!transitionName2) {
        if (typeof animation2 === "string") {
          transitionName2 = "".concat(animation2);
        } else if (animation2 && animation2.props && animation2.props.name) {
          transitionName2 = animation2.props.name;
        }
      }
      return transitionName2;
    },
    getClassName: function getClassName(currentAlignClassName) {
      var _this3 = this;
      var originClassName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var enterActiveClass = [];
      if (this.transitionProps) {
        Object.keys(this.transitionProps).forEach(function(k) {
          if (typeof _this3.transitionProps[k] === "string") {
            enterActiveClass.push.apply(enterActiveClass, _toConsumableArray(_this3.transitionProps[k].split(" ")));
          }
        });
      }
      var classNames2 = originClassName.split(" ").filter(function(c) {
        return enterActiveClass.indexOf(c) !== -1;
      }).join(" ");
      return "".concat(this.$props.prefixCls, " ").concat(this.$attrs.class || "", " ").concat(this.$props.popupClassName, " ").concat(currentAlignClassName, " ").concat(classNames2);
    },
    getPopupElement: function getPopupElement() {
      var _this4 = this;
      var _a, _b;
      var savePopupRef6 = this.savePopupRef;
      var props2 = this.$props, $attrs = this.$attrs, $slots = this.$slots, getTransitionName5 = this.getTransitionName;
      var _this$$data2 = this.$data, stretchChecked = _this$$data2.stretchChecked, targetHeight = _this$$data2.targetHeight, targetWidth = _this$$data2.targetWidth;
      var _$attrs$style = $attrs.style, style3 = _$attrs$style === void 0 ? {} : _$attrs$style;
      var onEvents = splitAttrs($attrs).onEvents;
      var align = props2.align, visible9 = props2.visible, prefixCls2 = props2.prefixCls, animation2 = props2.animation, popupStyle = props2.popupStyle, getClassNameFromAlign = props2.getClassNameFromAlign, destroyPopupOnHide = props2.destroyPopupOnHide, stretch = props2.stretch;
      var className = this.getClassName(this.currentAlignClassName || getClassNameFromAlign(align));
      if (!visible9) {
        this.currentAlignClassName = null;
      }
      var sizeStyle = {};
      if (stretch) {
        if (stretch.indexOf("height") !== -1) {
          sizeStyle.height = typeof targetHeight === "number" ? "".concat(targetHeight, "px") : targetHeight;
        } else if (stretch.indexOf("minHeight") !== -1) {
          sizeStyle.minHeight = typeof targetHeight === "number" ? "".concat(targetHeight, "px") : targetHeight;
        }
        if (stretch.indexOf("width") !== -1) {
          sizeStyle.width = typeof targetWidth === "number" ? "".concat(targetWidth, "px") : targetWidth;
        } else if (stretch.indexOf("minWidth") !== -1) {
          sizeStyle.minWidth = typeof targetWidth === "number" ? "".concat(targetWidth, "px") : targetWidth;
        }
        if (!stretchChecked) {
          setTimeout(function() {
            if (_this4.alignInstance) {
              _this4.alignInstance.forceAlign();
            }
          }, 0);
        }
      }
      var popupInnerProps = _extends(_extends({
        prefixCls: prefixCls2,
        visible: visible9,
        class: className
      }, onEvents), {
        ref: savePopupRef6,
        style: _extends(_extends(_extends(_extends({}, sizeStyle), popupStyle), style3), this.getZIndexStyle())
      });
      var transitionName2 = getTransitionName5();
      var useTransition = !!transitionName2;
      var transitionProps = getTransitionProps(transitionName2);
      if (_typeof(animation2) === "object") {
        useTransition = true;
        transitionProps = _extends(_extends({}, transitionProps), animation2);
      }
      if (!useTransition) {
        transitionProps = {};
      }
      this.transitionProps = transitionProps;
      if (destroyPopupOnHide) {
        return createVNode(Transition, transitionProps, {
          default: function _default8() {
            return [visible9 ? createVNode(Align, {
              "target": _this4.getAlignTarget(),
              "key": "popup",
              "ref": _this4.saveAlignRef,
              "monitorWindowResize": true,
              "align": align,
              "onAlign": _this4.onAlign
            }, {
              default: function _default9() {
                return [createVNode(PopupInner, popupInnerProps, {
                  default: function _default10() {
                    return [(_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots)];
                  }
                })];
              }
            }) : null];
          }
        });
      }
      return createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [withDirectives(createVNode(Align, {
            "target": _this4.getAlignTarget(),
            "key": "popup",
            "ref": _this4.saveAlignRef,
            "monitorWindowResize": true,
            "disabled": !visible9,
            "align": align,
            "onAlign": _this4.onAlign
          }, {
            default: function _default9() {
              return [createVNode(PopupInner, popupInnerProps, {
                default: function _default10() {
                  return [(_b = $slots.default) === null || _b === void 0 ? void 0 : _b.call($slots)];
                }
              })];
            }
          }), [[vShow, visible9]])];
        }
      });
    },
    getZIndexStyle: function getZIndexStyle() {
      var style3 = {};
      var props2 = this.$props;
      if (props2.zIndex !== void 0) {
        style3.zIndex = props2.zIndex;
      }
      return style3;
    },
    getMaskElement: function getMaskElement() {
      var props2 = this.$props;
      var maskElement = null;
      if (props2.mask) {
        var maskTransition = this.getMaskTransitionName();
        maskElement = withDirectives(createVNode(LazyRenderBox$1, {
          "style": this.getZIndexStyle(),
          "key": "mask",
          "class": "".concat(props2.prefixCls, "-mask"),
          "visible": props2.visible
        }, null), [[vShow, props2.visible]]);
        if (maskTransition) {
          var _maskElement = function() {
            return maskElement;
          }();
          maskElement = createVNode(Transition, {
            "appear": true,
            "name": maskTransition
          }, {
            default: function _default8() {
              return [_maskElement];
            }
          });
        }
      }
      return maskElement;
    }
  },
  render: function render9() {
    var getMaskElement3 = this.getMaskElement, getPopupElement4 = this.getPopupElement;
    return createVNode("div", null, [getMaskElement3(), getPopupElement4()]);
  }
};
var Portal$1 = defineComponent({
  name: "Portal",
  props: {
    getContainer: PropsTypes.func.isRequired,
    children: PropsTypes.any.isRequired,
    didUpdate: PropsTypes.func
  },
  data: function data2() {
    this._container = null;
    return {};
  },
  mounted: function mounted3() {
    this.createContainer();
  },
  updated: function updated2() {
    var _this = this;
    var didUpdate = this.$props.didUpdate;
    if (didUpdate) {
      nextTick(function() {
        didUpdate(_this.$props);
      });
    }
  },
  beforeUnmount: function beforeUnmount2() {
    this.removeContainer();
  },
  methods: {
    createContainer: function createContainer() {
      this._container = this.$props.getContainer();
      this.$forceUpdate();
    },
    removeContainer: function removeContainer() {
      if (this._container && this._container.parentNode) {
        this._container.parentNode.removeChild(this._container);
      }
    }
  },
  render: function render10() {
    var _this2 = this;
    if (this._container) {
      return createVNode(Teleport, {
        "to": this._container
      }, {
        default: function _default8() {
          return [_this2.$props.children];
        }
      });
    }
    return null;
  }
});
function returnEmptyString() {
  return "";
}
function returnDocument() {
  return window.document;
}
var ALL_HANDLERS = ["onClick", "onMousedown", "onTouchstart", "onMouseenter", "onMouseleave", "onFocus", "onBlur", "onContextmenu"];
var Trigger = defineComponent({
  name: "Trigger",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string)]).def([]),
    showAction: PropsTypes.any.def([]),
    hideAction: PropsTypes.any.def([]),
    getPopupClassNameFromAlign: PropsTypes.any.def(returnEmptyString),
    onPopupVisibleChange: PropsTypes.func.def(noop$G),
    afterPopupVisibleChange: PropsTypes.func.def(noop$G),
    popup: PropsTypes.any,
    popupStyle: PropsTypes.object.def(function() {
      return {};
    }),
    prefixCls: PropsTypes.string.def("rc-trigger-popup"),
    popupClassName: PropsTypes.string.def(""),
    popupPlacement: PropsTypes.string,
    builtinPlacements: PropsTypes.object,
    popupTransitionName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    popupAnimation: PropsTypes.any,
    mouseEnterDelay: PropsTypes.number.def(0),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    zIndex: PropsTypes.number,
    focusDelay: PropsTypes.number.def(0),
    blurDelay: PropsTypes.number.def(0.15),
    getPopupContainer: PropsTypes.func,
    getDocument: PropsTypes.func.def(returnDocument),
    forceRender: PropsTypes.looseBool,
    destroyPopupOnHide: PropsTypes.looseBool.def(false),
    mask: PropsTypes.looseBool.def(false),
    maskClosable: PropsTypes.looseBool.def(true),
    popupAlign: PropsTypes.object.def(function() {
      return {};
    }),
    popupVisible: PropsTypes.looseBool,
    defaultPopupVisible: PropsTypes.looseBool.def(false),
    maskTransitionName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    maskAnimation: PropsTypes.string,
    stretch: PropsTypes.string,
    alignPoint: PropsTypes.looseBool
  },
  setup: function setup20() {
    return {
      vcTriggerContext: inject("vcTriggerContext", {}),
      savePopupRef: inject("savePopupRef", noop$G),
      dialogContext: inject("dialogContext", null)
    };
  },
  data: function data3() {
    var _this = this;
    var props2 = this.$props;
    var popupVisible4;
    if (hasProp(this, "popupVisible")) {
      popupVisible4 = !!props2.popupVisible;
    } else {
      popupVisible4 = !!props2.defaultPopupVisible;
    }
    ALL_HANDLERS.forEach(function(h2) {
      _this["fire".concat(h2)] = function(e) {
        _this.fireEvents(h2, e);
      };
    });
    this._component = null;
    this.focusTime = null;
    this.clickOutsideHandler = null;
    this.contextmenuOutsideHandler1 = null;
    this.contextmenuOutsideHandler2 = null;
    this.touchOutsideHandler = null;
    return {
      prevPopupVisible: popupVisible4,
      sPopupVisible: popupVisible4,
      point: null
    };
  },
  watch: {
    popupVisible: function popupVisible(val) {
      if (val !== void 0) {
        this.prevPopupVisible = this.sPopupVisible;
        this.sPopupVisible = val;
      }
    }
  },
  created: function created2() {
    provide("vcTriggerContext", this);
  },
  deactivated: function deactivated() {
    this.setPopupVisible(false);
  },
  mounted: function mounted4() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.updatedCal();
    });
  },
  updated: function updated3() {
    var _this3 = this;
    this.$nextTick(function() {
      _this3.updatedCal();
    });
  },
  beforeUnmount: function beforeUnmount3() {
    this.clearDelayTimer();
    this.clearOutsideHandler();
    clearTimeout(this.mouseDownTimeout);
  },
  methods: {
    updatedCal: function updatedCal() {
      var props2 = this.$props;
      var state = this.$data;
      if (state.sPopupVisible) {
        var currentDocument;
        if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextmenuToShow())) {
          currentDocument = props2.getDocument();
          this.clickOutsideHandler = addEventListenerWrap(currentDocument, "mousedown", this.onDocumentClick);
        }
        if (!this.touchOutsideHandler) {
          currentDocument = currentDocument || props2.getDocument();
          this.touchOutsideHandler = addEventListenerWrap(currentDocument, "touchstart", this.onDocumentClick, supportsPassive$1 ? {
            passive: false
          } : false);
        }
        if (!this.contextmenuOutsideHandler1 && this.isContextmenuToShow()) {
          currentDocument = currentDocument || props2.getDocument();
          this.contextmenuOutsideHandler1 = addEventListenerWrap(currentDocument, "scroll", this.onContextmenuClose);
        }
        if (!this.contextmenuOutsideHandler2 && this.isContextmenuToShow()) {
          this.contextmenuOutsideHandler2 = addEventListenerWrap(window, "blur", this.onContextmenuClose);
        }
      } else {
        this.clearOutsideHandler();
      }
    },
    onMouseenter: function onMouseenter(e) {
      var mouseEnterDelay = this.$props.mouseEnterDelay;
      this.fireEvents("onMouseenter", e);
      this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
    },
    onMouseMove: function onMouseMove2(e) {
      this.fireEvents("onMousemove", e);
      this.setPoint(e);
    },
    onMouseleave: function onMouseleave(e) {
      this.fireEvents("onMouseleave", e);
      this.delaySetPopupVisible(false, this.$props.mouseLeaveDelay);
    },
    onPopupMouseenter: function onPopupMouseenter() {
      this.clearDelayTimer();
    },
    onPopupMouseleave: function onPopupMouseleave(e) {
      if (e && e.relatedTarget && !e.relatedTarget.setTimeout && this._component && this._component.getPopupDomNode && contains(this._component.getPopupDomNode(), e.relatedTarget)) {
        return;
      }
      this.delaySetPopupVisible(false, this.$props.mouseLeaveDelay);
    },
    onFocus: function onFocus(e) {
      this.fireEvents("onFocus", e);
      this.clearDelayTimer();
      if (this.isFocusToShow()) {
        this.focusTime = Date.now();
        this.delaySetPopupVisible(true, this.$props.focusDelay);
      }
    },
    onMousedown: function onMousedown(e) {
      this.fireEvents("onMousedown", e);
      this.preClickTime = Date.now();
    },
    onTouchstart: function onTouchstart(e) {
      this.fireEvents("onTouchstart", e);
      this.preTouchTime = Date.now();
    },
    onBlur: function onBlur(e) {
      if (!contains(e.target, e.relatedTarget || document.activeElement)) {
        this.fireEvents("onBlur", e);
        this.clearDelayTimer();
        if (this.isBlurToHide()) {
          this.delaySetPopupVisible(false, this.$props.blurDelay);
        }
      }
    },
    onContextmenu: function onContextmenu(e) {
      e.preventDefault();
      this.fireEvents("onContextmenu", e);
      this.setPopupVisible(true, e);
    },
    onContextmenuClose: function onContextmenuClose() {
      if (this.isContextmenuToShow()) {
        this.close();
      }
    },
    onClick: function onClick(event) {
      this.fireEvents("onClick", event);
      if (this.focusTime) {
        var preTime;
        if (this.preClickTime && this.preTouchTime) {
          preTime = Math.min(this.preClickTime, this.preTouchTime);
        } else if (this.preClickTime) {
          preTime = this.preClickTime;
        } else if (this.preTouchTime) {
          preTime = this.preTouchTime;
        }
        if (Math.abs(preTime - this.focusTime) < 20) {
          return;
        }
        this.focusTime = 0;
      }
      this.preClickTime = 0;
      this.preTouchTime = 0;
      if (this.isClickToShow() && (this.isClickToHide() || this.isBlurToHide()) && event && event.preventDefault) {
        event.preventDefault();
      }
      if (event && event.domEvent) {
        event.domEvent.preventDefault();
      }
      var nextVisible = !this.$data.sPopupVisible;
      if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
        this.setPopupVisible(!this.$data.sPopupVisible, event);
      }
    },
    onPopupMouseDown: function onPopupMouseDown() {
      var _this4 = this;
      var _this$vcTriggerContex = this.vcTriggerContext, vcTriggerContext = _this$vcTriggerContex === void 0 ? {} : _this$vcTriggerContex;
      this.hasPopupMouseDown = true;
      clearTimeout(this.mouseDownTimeout);
      this.mouseDownTimeout = setTimeout(function() {
        _this4.hasPopupMouseDown = false;
      }, 0);
      if (vcTriggerContext.onPopupMouseDown) {
        vcTriggerContext.onPopupMouseDown.apply(vcTriggerContext, arguments);
      }
    },
    onDocumentClick: function onDocumentClick(event) {
      if (this.$props.mask && !this.$props.maskClosable) {
        return;
      }
      var target = event.target;
      var root = findDOMNode(this);
      if (!contains(root, target) && !this.hasPopupMouseDown) {
        this.close();
      }
    },
    getPopupDomNode: function getPopupDomNode2() {
      if (this._component && this._component.getPopupDomNode) {
        return this._component.getPopupDomNode();
      }
      return null;
    },
    getRootDomNode: function getRootDomNode() {
      return findDOMNode(this);
    },
    handleGetPopupClassFromAlign: function handleGetPopupClassFromAlign(align) {
      var className = [];
      var props2 = this.$props;
      var popupPlacement = props2.popupPlacement, builtinPlacements = props2.builtinPlacements, prefixCls2 = props2.prefixCls, alignPoint2 = props2.alignPoint, getPopupClassNameFromAlign = props2.getPopupClassNameFromAlign;
      if (popupPlacement && builtinPlacements) {
        className.push(getAlignPopupClassName(builtinPlacements, prefixCls2, align, alignPoint2));
      }
      if (getPopupClassNameFromAlign) {
        className.push(getPopupClassNameFromAlign(align));
      }
      return className.join(" ");
    },
    getPopupAlign: function getPopupAlign() {
      var props2 = this.$props;
      var popupPlacement = props2.popupPlacement, popupAlign = props2.popupAlign, builtinPlacements = props2.builtinPlacements;
      if (popupPlacement && builtinPlacements) {
        return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
      }
      return popupAlign;
    },
    savePopup: function savePopup(node) {
      this._component = node;
      this.savePopupRef(node);
    },
    getComponent: function getComponent$1() {
      var self = this;
      var mouseProps = {};
      if (this.isMouseEnterToShow()) {
        mouseProps.onMouseenter = self.onPopupMouseenter;
      }
      if (this.isMouseLeaveToHide()) {
        mouseProps.onMouseleave = self.onPopupMouseleave;
      }
      mouseProps.onMousedown = this.onPopupMouseDown;
      mouseProps[supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart"] = this.onPopupMouseDown;
      var handleGetPopupClassFromAlign2 = self.handleGetPopupClassFromAlign, getRootDomNode2 = self.getRootDomNode, getContainer5 = self.getContainer, $attrs = self.$attrs;
      var _self$$props = self.$props, prefixCls2 = _self$$props.prefixCls, destroyPopupOnHide = _self$$props.destroyPopupOnHide, popupClassName = _self$$props.popupClassName, action = _self$$props.action, popupAnimation = _self$$props.popupAnimation, popupTransitionName = _self$$props.popupTransitionName, popupStyle = _self$$props.popupStyle, mask = _self$$props.mask, maskAnimation = _self$$props.maskAnimation, maskTransitionName = _self$$props.maskTransitionName, zIndex = _self$$props.zIndex, stretch = _self$$props.stretch, alignPoint2 = _self$$props.alignPoint;
      var _this$$data = this.$data, sPopupVisible = _this$$data.sPopupVisible, point = _this$$data.point;
      var align = this.getPopupAlign();
      var popupProps = _extends(_extends({
        prefixCls: prefixCls2,
        destroyPopupOnHide,
        visible: sPopupVisible,
        point: alignPoint2 ? point : null,
        action,
        align,
        animation: popupAnimation,
        getClassNameFromAlign: handleGetPopupClassFromAlign2,
        stretch,
        getRootDomNode: getRootDomNode2,
        mask,
        zIndex,
        transitionName: popupTransitionName,
        maskAnimation,
        maskTransitionName,
        getContainer: getContainer5,
        popupClassName,
        popupStyle,
        onAlign: $attrs.onPopupAlign || noop$G
      }, mouseProps), {
        ref: this.savePopup
      });
      return createVNode(Popup, popupProps, {
        default: function _default8() {
          return [getComponent(self, "popup")];
        }
      });
    },
    getContainer: function getContainer() {
      var props2 = this.$props, dialogContext = this.dialogContext;
      var popupContainer = document.createElement("div");
      popupContainer.style.position = "absolute";
      popupContainer.style.top = "0";
      popupContainer.style.left = "0";
      popupContainer.style.width = "100%";
      var mountNode = props2.getPopupContainer ? props2.getPopupContainer(findDOMNode(this), dialogContext) : props2.getDocument().body;
      mountNode.appendChild(popupContainer);
      this.popupContainer = popupContainer;
      return popupContainer;
    },
    setPopupVisible: function setPopupVisible(sPopupVisible, event) {
      var alignPoint2 = this.alignPoint, prevPopupVisible = this.sPopupVisible, onPopupVisibleChange = this.onPopupVisibleChange;
      this.clearDelayTimer();
      if (prevPopupVisible !== sPopupVisible) {
        if (!hasProp(this, "popupVisible")) {
          this.setState({
            sPopupVisible,
            prevPopupVisible
          });
        }
        onPopupVisibleChange && onPopupVisibleChange(sPopupVisible);
      }
      if (alignPoint2 && event) {
        this.setPoint(event);
      }
    },
    setPoint: function setPoint(point) {
      var alignPoint2 = this.$props.alignPoint;
      if (!alignPoint2 || !point)
        return;
      this.setState({
        point: {
          pageX: point.pageX,
          pageY: point.pageY
        }
      });
    },
    handlePortalUpdate: function handlePortalUpdate() {
      if (this.prevPopupVisible !== this.sPopupVisible) {
        this.afterPopupVisibleChange(this.sPopupVisible);
      }
    },
    delaySetPopupVisible: function delaySetPopupVisible(visible9, delayS, event) {
      var _this5 = this;
      var delay = delayS * 1e3;
      this.clearDelayTimer();
      if (delay) {
        var point = event ? {
          pageX: event.pageX,
          pageY: event.pageY
        } : null;
        this.delayTimer = requestAnimationTimeout(function() {
          _this5.setPopupVisible(visible9, point);
          _this5.clearDelayTimer();
        }, delay);
      } else {
        this.setPopupVisible(visible9, event);
      }
    },
    clearDelayTimer: function clearDelayTimer() {
      if (this.delayTimer) {
        cancelAnimationTimeout(this.delayTimer);
        this.delayTimer = null;
      }
    },
    clearOutsideHandler: function clearOutsideHandler() {
      if (this.clickOutsideHandler) {
        this.clickOutsideHandler.remove();
        this.clickOutsideHandler = null;
      }
      if (this.contextmenuOutsideHandler1) {
        this.contextmenuOutsideHandler1.remove();
        this.contextmenuOutsideHandler1 = null;
      }
      if (this.contextmenuOutsideHandler2) {
        this.contextmenuOutsideHandler2.remove();
        this.contextmenuOutsideHandler2 = null;
      }
      if (this.touchOutsideHandler) {
        this.touchOutsideHandler.remove();
        this.touchOutsideHandler = null;
      }
    },
    createTwoChains: function createTwoChains(event) {
      var fn = function fn2() {
      };
      var events = getEvents(this);
      if (this.childOriginEvents[event] && events[event]) {
        return this["fire".concat(event)];
      }
      fn = this.childOriginEvents[event] || events[event] || fn;
      return fn;
    },
    isClickToShow: function isClickToShow() {
      var _this$$props = this.$props, action = _this$$props.action, showAction = _this$$props.showAction;
      return action.indexOf("click") !== -1 || showAction.indexOf("click") !== -1;
    },
    isContextmenuToShow: function isContextmenuToShow() {
      var _this$$props2 = this.$props, action = _this$$props2.action, showAction = _this$$props2.showAction;
      return action.indexOf("contextmenu") !== -1 || showAction.indexOf("contextmenu") !== -1;
    },
    isClickToHide: function isClickToHide() {
      var _this$$props3 = this.$props, action = _this$$props3.action, hideAction = _this$$props3.hideAction;
      return action.indexOf("click") !== -1 || hideAction.indexOf("click") !== -1;
    },
    isMouseEnterToShow: function isMouseEnterToShow() {
      var _this$$props4 = this.$props, action = _this$$props4.action, showAction = _this$$props4.showAction;
      return action.indexOf("hover") !== -1 || showAction.indexOf("mouseenter") !== -1;
    },
    isMouseLeaveToHide: function isMouseLeaveToHide() {
      var _this$$props5 = this.$props, action = _this$$props5.action, hideAction = _this$$props5.hideAction;
      return action.indexOf("hover") !== -1 || hideAction.indexOf("mouseleave") !== -1;
    },
    isFocusToShow: function isFocusToShow() {
      var _this$$props6 = this.$props, action = _this$$props6.action, showAction = _this$$props6.showAction;
      return action.indexOf("focus") !== -1 || showAction.indexOf("focus") !== -1;
    },
    isBlurToHide: function isBlurToHide() {
      var _this$$props7 = this.$props, action = _this$$props7.action, hideAction = _this$$props7.hideAction;
      return action.indexOf("focus") !== -1 || hideAction.indexOf("blur") !== -1;
    },
    forcePopupAlign: function forcePopupAlign() {
      if (this.$data.sPopupVisible && this._component && this._component.alignInstance) {
        this._component.alignInstance.forceAlign();
      }
    },
    fireEvents: function fireEvents(type2, e) {
      if (this.childOriginEvents[type2]) {
        this.childOriginEvents[type2](e);
      }
      var event = this.$props[type2] || this.$attrs[type2];
      if (event) {
        event(e);
      }
    },
    close: function close() {
      this.setPopupVisible(false);
    }
  },
  render: function render11() {
    var _this6 = this;
    var sPopupVisible = this.sPopupVisible, $attrs = this.$attrs;
    var children = filterEmpty(getSlot(this));
    var _this$$props8 = this.$props, forceRender = _this$$props8.forceRender, alignPoint2 = _this$$props8.alignPoint;
    if (children.length > 1) {
      warning$1(false, "Trigger children just support only one default", true);
    }
    var child = children[0];
    this.childOriginEvents = getEvents(child);
    var newChildProps = {
      key: "trigger"
    };
    if (this.isContextmenuToShow()) {
      newChildProps.onContextmenu = this.onContextmenu;
    } else {
      newChildProps.onContextmenu = this.createTwoChains("onContextmenu");
    }
    if (this.isClickToHide() || this.isClickToShow()) {
      newChildProps.onClick = this.onClick;
      newChildProps.onMousedown = this.onMousedown;
      newChildProps[supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart"] = this.onTouchstart;
    } else {
      newChildProps.onClick = this.createTwoChains("onClick");
      newChildProps.onMousedown = this.createTwoChains("onMousedown");
      newChildProps[supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart"] = this.createTwoChains("onTouchstart");
    }
    if (this.isMouseEnterToShow()) {
      newChildProps.onMouseenter = this.onMouseenter;
      if (alignPoint2) {
        newChildProps.onMousemove = this.onMouseMove;
      }
    } else {
      newChildProps.onMouseenter = this.createTwoChains("onMouseenter");
    }
    if (this.isMouseLeaveToHide()) {
      newChildProps.onMouseleave = this.onMouseleave;
    } else {
      newChildProps.onMouseleave = this.createTwoChains("onMouseleave");
    }
    if (this.isFocusToShow() || this.isBlurToHide()) {
      newChildProps.onFocus = this.onFocus;
      newChildProps.onBlur = this.onBlur;
    } else {
      newChildProps.onFocus = this.createTwoChains("onFocus");
      newChildProps.onBlur = function(e) {
        if (e && (!e.relatedTarget || !contains(e.target, e.relatedTarget))) {
          _this6.createTwoChains("onBlur")(e);
        }
      };
    }
    var childrenClassName = classNames(child && child.props && child.props.class, $attrs.class);
    if (childrenClassName) {
      newChildProps.class = childrenClassName;
    }
    var trigger2 = cloneElement(child, newChildProps);
    var portal;
    if (sPopupVisible || this._component || forceRender) {
      portal = createVNode(Portal$1, {
        "key": "portal",
        "children": this.getComponent(),
        "getContainer": this.getContainer,
        "didUpdate": this.handlePortalUpdate
      }, null);
    }
    return [portal, trigger2];
  }
});
var __rest$Q = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
  var adjustX = typeof dropdownMatchSelectWidth !== "number" ? 0 : 1;
  return {
    bottomLeft: {
      points: ["tl", "bl"],
      offset: [0, 4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    },
    bottomRight: {
      points: ["tr", "br"],
      offset: [0, 4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    },
    topLeft: {
      points: ["bl", "tl"],
      offset: [0, -4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    },
    topRight: {
      points: ["br", "tr"],
      offset: [0, -4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    }
  };
};
var SelectTrigger$2 = defineComponent({
  name: "SelectTrigger",
  inheritAttrs: false,
  created: function created3() {
    this.popupRef = createRef$1();
  },
  methods: {
    getPopupElement: function getPopupElement2() {
      return this.popupRef.current;
    }
  },
  render: function render12() {
    var _this = this;
    var _a = _extends(_extends({}, this.$props), this.$attrs), _a$empty = _a.empty, empty2 = _a$empty === void 0 ? false : _a$empty, props2 = __rest$Q(_a, ["empty"]);
    var visible9 = props2.visible, dropdownAlign = props2.dropdownAlign, prefixCls2 = props2.prefixCls, popupElement = props2.popupElement, dropdownClassName = props2.dropdownClassName, dropdownStyle = props2.dropdownStyle, dropdownMatchSelectWidth = props2.dropdownMatchSelectWidth, containerWidth = props2.containerWidth, dropdownRender = props2.dropdownRender, animation2 = props2.animation, transitionName2 = props2.transitionName, direction = props2.direction, getPopupContainer = props2.getPopupContainer;
    var dropdownPrefixCls = "".concat(prefixCls2, "-dropdown");
    var popupNode = popupElement;
    if (dropdownRender) {
      popupNode = dropdownRender({
        menuNode: popupElement,
        props: props2
      });
    }
    var builtInPlacements = getBuiltInPlacements(dropdownMatchSelectWidth);
    var mergedTransitionName = animation2 ? "".concat(dropdownPrefixCls, "-").concat(animation2) : transitionName2;
    var popupStyle = _extends({
      minWidth: "".concat(containerWidth, "px")
    }, dropdownStyle);
    if (typeof dropdownMatchSelectWidth === "number") {
      popupStyle.width = "".concat(dropdownMatchSelectWidth, "px");
    } else if (dropdownMatchSelectWidth) {
      popupStyle.width = "".concat(containerWidth, "px");
    }
    return createVNode(Trigger, _objectSpread2(_objectSpread2({}, props2), {}, {
      "showAction": [],
      "hideAction": [],
      "popupPlacement": direction === "rtl" ? "bottomRight" : "bottomLeft",
      "builtinPlacements": builtInPlacements,
      "prefixCls": dropdownPrefixCls,
      "popupTransitionName": mergedTransitionName,
      "popup": createVNode("div", {
        "ref": this.popupRef
      }, [popupNode]),
      "popupAlign": dropdownAlign,
      "popupVisible": visible9,
      "getPopupContainer": getPopupContainer,
      "popupClassName": classNames(dropdownClassName, _defineProperty({}, "".concat(dropdownPrefixCls, "-empty"), empty2)),
      "popupStyle": popupStyle
    }), {
      default: function _default8() {
        return [getSlot(_this)[0]];
      }
    });
  }
});
SelectTrigger$2.props = {
  dropdownAlign: PropsTypes.object,
  visible: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  dropdownClassName: PropsTypes.string,
  dropdownStyle: PropsTypes.object,
  empty: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  popupClassName: PropsTypes.string,
  animation: PropsTypes.string,
  transitionName: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  dropdownRender: PropsTypes.func,
  containerWidth: PropsTypes.number,
  dropdownMatchSelectWidth: PropsTypes.oneOfType([Number, Boolean]).def(true),
  popupElement: PropsTypes.any,
  direction: PropsTypes.string,
  getTriggerDOMNode: PropsTypes.func
};
var SelectTrigger$3 = SelectTrigger$2;
var INTERNAL_PROPS_MARK = "RC_SELECT_INTERNAL_PROPS_MARK";
function useDelayReset() {
  var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
  var bool = ref(false);
  var delay;
  var cancelLatest = function cancelLatest2() {
    window.clearTimeout(delay);
  };
  onMounted(function() {
    cancelLatest();
  });
  var delaySetBool = function delaySetBool2(value26, callback) {
    cancelLatest();
    delay = window.setTimeout(function() {
      bool.value = value26;
      if (callback) {
        callback();
      }
    }, timeout);
  };
  return [bool, delaySetBool, cancelLatest];
}
function useSelectTriggerControl(refs, open6, triggerOpen) {
  function onGlobalMouseDown(event) {
    var _a, _b, _c;
    var target = event.target;
    if (target.shadowRoot && event.composed) {
      target = event.composedPath()[0] || target;
    }
    var elements = [(_a = refs[0]) === null || _a === void 0 ? void 0 : _a.value, (_c = (_b = refs[1]) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.getPopupElement()];
    if (open6.value && elements.every(function(element) {
      return element && !element.contains(target) && element !== target;
    })) {
      triggerOpen(false);
    }
  }
  onMounted(function() {
    window.addEventListener("mousedown", onGlobalMouseDown);
  });
  onBeforeUnmount(function() {
    window.removeEventListener("mousedown", onGlobalMouseDown);
  });
}
function useCacheDisplayValue(values) {
  var prevValues = _toConsumableArray(values.value);
  var mergedValues = computed(function() {
    var valueLabels = new Map();
    prevValues.forEach(function(_ref) {
      var value26 = _ref.value, label = _ref.label;
      if (value26 !== label) {
        valueLabels.set(value26, label);
      }
    });
    var resultValues = values.value.map(function(item) {
      var cacheLabel = valueLabels.get(item.value);
      if (item.isCacheable && cacheLabel) {
        return _extends(_extends({}, item), {
          label: cacheLabel
        });
      }
      return item;
    });
    prevValues = resultValues;
    return resultValues;
  });
  return mergedValues;
}
function useCacheOptions(options2) {
  var optionMap = computed(function() {
    var map = new Map();
    options2.value.forEach(function(item) {
      var value26 = item.data.value;
      map.set(value26, item);
    });
    return map;
  });
  var getValueOption = function getValueOption2(vals) {
    return vals.map(function(value26) {
      return optionMap.value.get(value26);
    }).filter(Boolean);
  };
  return getValueOption;
}
var initDefaultProps2 = function initDefaultProps3(types, defaultProps2) {
  var propTypes2 = _extends({}, types);
  Object.keys(defaultProps2).forEach(function(k) {
    var prop = propTypes2[k];
    if (prop) {
      prop.default = defaultProps2[k];
    } else {
      throw new Error("not have ".concat(k, " prop"));
    }
  });
  return propTypes2;
};
var initDefaultProps$1 = initDefaultProps2;
var isMobile$2 = function() {
  if (typeof navigator === "undefined" || typeof window === "undefined") {
    return false;
  }
  var agent = navigator.userAgent || navigator.vendor || window.opera;
  if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4))) {
    return true;
  }
  return false;
};
var __rest$P = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var DEFAULT_OMIT_PROPS = ["children", "removeIcon", "placeholder", "autofocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "tabindex"];
var BaseProps = function BaseProps2() {
  return {
    prefixCls: PropsTypes.string,
    id: PropsTypes.string,
    class: PropsTypes.string,
    style: PropsTypes.any,
    options: PropsTypes.array,
    mode: PropsTypes.string,
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    labelInValue: PropsTypes.looseBool,
    inputValue: PropsTypes.string,
    searchValue: PropsTypes.string,
    optionFilterProp: PropsTypes.string,
    filterOption: PropsTypes.any,
    filterSort: PropsTypes.func,
    showSearch: PropsTypes.looseBool,
    autoClearSearchValue: PropsTypes.looseBool,
    onSearch: PropsTypes.func,
    onClear: PropsTypes.func,
    allowClear: PropsTypes.looseBool,
    clearIcon: PropsTypes.VNodeChild,
    showArrow: PropsTypes.looseBool,
    inputIcon: PropsTypes.VNodeChild,
    removeIcon: PropsTypes.VNodeChild,
    menuItemSelectedIcon: PropsTypes.VNodeChild,
    open: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool,
    listHeight: PropsTypes.number,
    listItemHeight: PropsTypes.number,
    dropdownStyle: PropsTypes.object,
    dropdownClassName: PropsTypes.string,
    dropdownMatchSelectWidth: withUndefined(PropsTypes.oneOfType([Boolean, Number])),
    virtual: PropsTypes.looseBool,
    dropdownRender: PropsTypes.func,
    dropdownAlign: PropsTypes.any,
    animation: PropsTypes.string,
    transitionName: PropsTypes.string,
    getPopupContainer: PropsTypes.func,
    direction: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    loading: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    defaultActiveFirstOption: PropsTypes.looseBool,
    notFoundContent: PropsTypes.VNodeChild,
    placeholder: PropsTypes.VNodeChild,
    backfill: PropsTypes.looseBool,
    getInputElement: PropsTypes.func,
    optionLabelProp: PropsTypes.string,
    maxTagTextLength: PropsTypes.number,
    maxTagCount: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    maxTagPlaceholder: PropsTypes.any,
    tokenSeparators: PropsTypes.arrayOf(PropsTypes.string),
    tagRender: PropsTypes.func,
    showAction: PropsTypes.array,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    onKeyup: PropsTypes.func,
    onKeydown: PropsTypes.func,
    onPopupScroll: PropsTypes.func,
    onDropdownVisibleChange: PropsTypes.func,
    onSelect: PropsTypes.func,
    onDeselect: PropsTypes.func,
    onInputKeyDown: {
      type: Function
    },
    onClick: PropsTypes.func,
    onChange: PropsTypes.func,
    onBlur: PropsTypes.func,
    onFocus: PropsTypes.func,
    onMousedown: PropsTypes.func,
    onMouseenter: PropsTypes.func,
    onMouseleave: PropsTypes.func,
    choiceTransitionName: PropsTypes.string,
    internalProps: PropsTypes.object,
    children: PropsTypes.array
  };
};
function generateSelector$1(config2) {
  var defaultPrefixCls = config2.prefixCls, OptionList2 = config2.components.optionList, convertChildrenToData2 = config2.convertChildrenToData, flattenOptions2 = config2.flattenOptions, getLabeledValue3 = config2.getLabeledValue, filterOptions2 = config2.filterOptions, isValueDisabled2 = config2.isValueDisabled, findValueOption2 = config2.findValueOption;
  config2.warningProps;
  var fillOptionsWithMissingValue2 = config2.fillOptionsWithMissingValue, omitDOMProps = config2.omitDOMProps;
  var Select2 = defineComponent({
    name: "Select",
    slots: ["option"],
    props: initDefaultProps$1(BaseProps(), {}),
    setup: function setup161(props2) {
      var _a;
      var useInternalProps = computed(function() {
        return props2.internalProps && props2.internalProps.mark === INTERNAL_PROPS_MARK;
      });
      warning$1(props2.optionFilterProp !== "children", "Select", "optionFilterProp not support children, please use label instead");
      var containerRef = ref(null);
      var triggerRef = ref(null);
      var selectorRef = ref(null);
      var listRef = ref(null);
      var tokenWithEnter = computed(function() {
        return (props2.tokenSeparators || []).some(function(tokenSeparator) {
          return ["\n", "\r\n"].includes(tokenSeparator);
        });
      });
      var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
      var mergedId = computed(function() {
        return props2.id || "rc_select_".concat(getUUID());
      });
      var mergedOptionLabelProp = computed(function() {
        var mergedOptionLabelProp2 = props2.optionLabelProp;
        if (mergedOptionLabelProp2 === void 0) {
          mergedOptionLabelProp2 = props2.options ? "label" : "children";
        }
        return mergedOptionLabelProp2;
      });
      var mergedLabelInValue = computed(function() {
        return props2.mode === "combobox" ? false : props2.labelInValue;
      });
      var isMultiple2 = computed(function() {
        return props2.mode === "tags" || props2.mode === "multiple";
      });
      var mergedShowSearch = computed(function() {
        return props2.showSearch !== void 0 ? props2.showSearch : isMultiple2.value || props2.mode === "combobox";
      });
      var mobile = ref(false);
      onMounted(function() {
        mobile.value = isMobile$2();
      });
      var selectorDomRef = createRef$1();
      var innerSearchValue = ref("");
      var setInnerSearchValue = function setInnerSearchValue2(val) {
        innerSearchValue.value = val;
      };
      var mergedValue = ref(props2.value !== void 0 ? props2.value : props2.defaultValue);
      watch(function() {
        return props2.value;
      }, function() {
        mergedValue.value = props2.value;
        innerSearchValue.value = "";
      });
      var mergedRawValueArr = computed(function() {
        return toInnerValue(mergedValue.value, {
          labelInValue: mergedLabelInValue.value,
          combobox: props2.mode === "combobox"
        });
      });
      var mergedRawValue = computed(function() {
        return mergedRawValueArr.value[0];
      });
      var mergedValueMap = computed(function() {
        return mergedRawValueArr.value[1];
      });
      var rawValues = computed(function() {
        return new Set(mergedRawValue.value);
      });
      var activeValue = ref(null);
      var setActiveValue = function setActiveValue2(val) {
        activeValue.value = val;
      };
      var mergedSearchValue = computed(function() {
        var mergedSearchValue2 = innerSearchValue.value;
        if (props2.mode === "combobox" && mergedValue.value !== void 0) {
          mergedSearchValue2 = mergedValue.value;
        } else if (props2.searchValue !== void 0) {
          mergedSearchValue2 = props2.searchValue;
        } else if (props2.inputValue) {
          mergedSearchValue2 = props2.inputValue;
        }
        return mergedSearchValue2;
      });
      var mergedOptions = computed(function() {
        var newOptions = props2.options;
        if (newOptions === void 0) {
          newOptions = convertChildrenToData2(props2.children);
        }
        if (props2.mode === "tags" && fillOptionsWithMissingValue2) {
          newOptions = fillOptionsWithMissingValue2(newOptions, mergedValue.value, mergedOptionLabelProp.value, props2.labelInValue);
        }
        return newOptions || [];
      });
      var mergedFlattenOptions = computed(function() {
        return flattenOptions2(mergedOptions.value, props2);
      });
      var getValueOption = useCacheOptions(mergedFlattenOptions);
      var displayOptions = computed(function() {
        if (!mergedSearchValue.value || !mergedShowSearch.value) {
          return _toConsumableArray(mergedOptions.value);
        }
        var _props$optionFilterPr = props2.optionFilterProp, optionFilterProp = _props$optionFilterPr === void 0 ? "value" : _props$optionFilterPr, mode4 = props2.mode, filterOption2 = props2.filterOption;
        var filteredOptions = filterOptions2(mergedSearchValue.value, mergedOptions.value, {
          optionFilterProp,
          filterOption: mode4 === "combobox" && filterOption2 === void 0 ? function() {
            return true;
          } : filterOption2
        });
        if (mode4 === "tags" && filteredOptions.every(function(opt) {
          return opt[optionFilterProp] !== mergedSearchValue.value;
        })) {
          filteredOptions.unshift({
            value: mergedSearchValue.value,
            label: mergedSearchValue.value,
            key: "__RC_SELECT_TAG_PLACEHOLDER__"
          });
        }
        if (props2.filterSort && Array.isArray(filteredOptions)) {
          return _toConsumableArray(filteredOptions).sort(props2.filterSort);
        }
        return filteredOptions;
      });
      var displayFlattenOptions = computed(function() {
        return flattenOptions2(displayOptions.value, props2);
      });
      onMounted(function() {
        watch(mergedSearchValue, function() {
          if (listRef.value && listRef.value.scrollTo) {
            listRef.value.scrollTo(0);
          }
        }, {
          flush: "post",
          immediate: true
        });
      });
      var displayValues = computed(function() {
        var tmpValues = mergedRawValue.value.map(function(val) {
          var valueOptions = getValueOption([val]);
          var displayValue = getLabeledValue3(val, {
            options: valueOptions,
            prevValueMap: mergedValueMap.value,
            labelInValue: mergedLabelInValue.value,
            optionLabelProp: mergedOptionLabelProp.value
          });
          return _extends(_extends({}, displayValue), {
            disabled: isValueDisabled2(val, valueOptions)
          });
        });
        if (!props2.mode && tmpValues.length === 1 && tmpValues[0].value === null && tmpValues[0].label === null) {
          return [];
        }
        return tmpValues;
      });
      displayValues = useCacheDisplayValue(displayValues);
      var triggerSelect2 = function triggerSelect3(newValue, isSelect, source) {
        var newValueOption = getValueOption([newValue]);
        var outOption = findValueOption2([newValue], newValueOption)[0];
        var _props$internalProps = props2.internalProps, internalProps = _props$internalProps === void 0 ? {} : _props$internalProps;
        if (!internalProps.skipTriggerSelect) {
          var selectValue = mergedLabelInValue.value ? getLabeledValue3(newValue, {
            options: newValueOption,
            prevValueMap: mergedValueMap.value,
            labelInValue: mergedLabelInValue.value,
            optionLabelProp: mergedOptionLabelProp.value
          }) : newValue;
          if (isSelect && props2.onSelect) {
            props2.onSelect(selectValue, outOption);
          } else if (!isSelect && props2.onDeselect) {
            props2.onDeselect(selectValue, outOption);
          }
        }
        if (useInternalProps.value) {
          if (isSelect && internalProps.onRawSelect) {
            internalProps.onRawSelect(newValue, outOption, source);
          } else if (!isSelect && internalProps.onRawDeselect) {
            internalProps.onRawDeselect(newValue, outOption, source);
          }
        }
      };
      var prevValueOptions = ref([]);
      var setPrevValueOptions = function setPrevValueOptions2(val) {
        prevValueOptions.value = val;
      };
      var triggerChange5 = function triggerChange6(newRawValues) {
        if (useInternalProps.value && props2.internalProps && props2.internalProps.skipTriggerChange) {
          return;
        }
        var newRawValuesOptions = getValueOption(newRawValues);
        var outValues = toOuterValues(Array.from(newRawValues), {
          labelInValue: mergedLabelInValue.value,
          options: newRawValuesOptions,
          getLabeledValue: getLabeledValue3,
          prevValueMap: mergedValueMap.value,
          optionLabelProp: mergedOptionLabelProp.value
        });
        var outValue = isMultiple2.value ? outValues : outValues[0];
        if (props2.onChange && (mergedRawValue.value.length !== 0 || outValues.length !== 0)) {
          var outOptions = findValueOption2(newRawValues, newRawValuesOptions, {
            prevValueOptions: prevValueOptions.value
          });
          setPrevValueOptions(outOptions.map(function(option, index2) {
            var clone = _extends({}, option);
            Object.defineProperty(clone, "_INTERNAL_OPTION_VALUE_", {
              get: function get2() {
                return newRawValues[index2];
              }
            });
            return clone;
          }));
          props2.onChange(outValue, isMultiple2.value ? outOptions : outOptions[0]);
        }
        mergedValue.value = outValue;
      };
      var onInternalSelect = function onInternalSelect2(newValue, _ref) {
        var selected = _ref.selected, source = _ref.source;
        var _props$autoClearSearc = props2.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc;
        if (props2.disabled) {
          return;
        }
        var newRawValue;
        if (isMultiple2.value) {
          newRawValue = new Set(mergedRawValue.value);
          if (selected) {
            newRawValue.add(newValue);
          } else {
            newRawValue.delete(newValue);
          }
        } else {
          newRawValue = new Set();
          newRawValue.add(newValue);
        }
        if (isMultiple2.value || !isMultiple2.value && Array.from(mergedRawValue.value)[0] !== newValue) {
          triggerChange5(Array.from(newRawValue));
        }
        triggerSelect2(newValue, !isMultiple2.value || selected, source);
        if (props2.mode === "combobox") {
          setInnerSearchValue(String(newValue));
          setActiveValue("");
        } else if (!isMultiple2.value || autoClearSearchValue) {
          setInnerSearchValue("");
          setActiveValue("");
        }
      };
      var onInternalOptionSelect = function onInternalOptionSelect2(newValue, info3) {
        onInternalSelect(newValue, _extends(_extends({}, info3), {
          source: "option"
        }));
      };
      var onInternalSelectionSelect = function onInternalSelectionSelect2(newValue, info3) {
        onInternalSelect(newValue, _extends(_extends({}, info3), {
          source: "selection"
        }));
      };
      var initOpen = props2.open !== void 0 ? props2.open : props2.defaultOpen;
      var innerOpen = ref(initOpen);
      var mergedOpen = ref(initOpen);
      var setInnerOpen = function setInnerOpen2(val) {
        innerOpen.value = props2.open !== void 0 ? props2.open : val;
        mergedOpen.value = innerOpen.value;
      };
      watch(function() {
        return props2.open;
      }, function() {
        setInnerOpen(props2.open);
      });
      var emptyListContent = computed(function() {
        return !props2.notFoundContent && !displayOptions.value.length;
      });
      watchEffect(function() {
        mergedOpen.value = innerOpen.value;
        if (props2.disabled || emptyListContent.value && mergedOpen.value && props2.mode === "combobox") {
          mergedOpen.value = false;
        }
      });
      var triggerOpen = computed(function() {
        return emptyListContent.value ? false : mergedOpen.value;
      });
      var onToggleOpen = function onToggleOpen2(newOpen) {
        var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen.value;
        if (innerOpen.value !== nextOpen && !props2.disabled) {
          setInnerOpen(nextOpen);
          if (props2.onDropdownVisibleChange) {
            props2.onDropdownVisibleChange(nextOpen);
          }
        }
      };
      useSelectTriggerControl([containerRef, triggerRef], triggerOpen, onToggleOpen);
      var triggerSearch = function triggerSearch2(searchText, fromTyping, isCompositing) {
        var ret = true;
        var newSearchText = searchText;
        var preSearchValue = mergedSearchValue.value;
        setActiveValue(null);
        var patchLabels = isCompositing ? null : getSeparatedContent(searchText, props2.tokenSeparators);
        var patchRawValues = patchLabels;
        if (props2.mode === "combobox") {
          if (fromTyping) {
            triggerChange5([newSearchText]);
          }
        } else if (patchLabels) {
          newSearchText = "";
          if (props2.mode !== "tags") {
            patchRawValues = patchLabels.map(function(label) {
              var item = mergedFlattenOptions.value.find(function(_ref2) {
                var data79 = _ref2.data;
                return data79[mergedOptionLabelProp.value] === label;
              });
              return item ? item.data.value : null;
            }).filter(function(val) {
              return val !== null;
            });
          }
          var newRawValues = Array.from(new Set([].concat(_toConsumableArray(mergedRawValue.value), _toConsumableArray(patchRawValues))));
          triggerChange5(newRawValues);
          newRawValues.forEach(function(newRawValue) {
            triggerSelect2(newRawValue, true, "input");
          });
          onToggleOpen(false);
          ret = false;
        }
        setInnerSearchValue(newSearchText);
        if (props2.onSearch && preSearchValue !== newSearchText) {
          props2.onSearch(newSearchText);
        }
        return ret;
      };
      var onSearchSubmit = function onSearchSubmit2(searchText) {
        if (!searchText || !searchText.trim()) {
          return;
        }
        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(mergedRawValue.value), [searchText])));
        triggerChange5(newRawValues);
        newRawValues.forEach(function(newRawValue) {
          triggerSelect2(newRawValue, true, "input");
        });
        setInnerSearchValue("");
      };
      watch(function() {
        return props2.disabled;
      }, function() {
        if (innerOpen.value && !!props2.disabled) {
          setInnerOpen(false);
        }
      }, {
        immediate: true
      });
      watch(mergedOpen, function() {
        if (!mergedOpen.value && !isMultiple2.value && props2.mode !== "combobox") {
          triggerSearch("", false, false);
        }
      }, {
        immediate: true
      });
      var _useLock = useLock(), _useLock2 = _slicedToArray(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
      var onInternalKeyDown = function onInternalKeyDown2(event) {
        var clearLock = getClearLock();
        var which = event.which;
        if (which === KeyCode$2.ENTER) {
          if (props2.mode !== "combobox") {
            event.preventDefault();
          }
          if (!mergedOpen.value) {
            onToggleOpen(true);
          }
        }
        setClearLock(!!mergedSearchValue.value);
        if (which === KeyCode$2.BACKSPACE && !clearLock && isMultiple2.value && !mergedSearchValue.value && mergedRawValue.value.length) {
          var removeInfo = removeLastEnabledValue(displayValues.value, mergedRawValue.value);
          if (removeInfo.removedValue !== null) {
            triggerChange5(removeInfo.values);
            triggerSelect2(removeInfo.removedValue, false, "input");
          }
        }
        if (mergedOpen.value && listRef.value) {
          listRef.value.onKeydown(event);
        }
        if (props2.onKeydown) {
          props2.onKeydown(event);
        }
      };
      var onInternalKeyUp = function onInternalKeyUp2(event) {
        if (mergedOpen.value && listRef.value) {
          listRef.value.onKeyup(event);
        }
        if (props2.onKeyup) {
          props2.onKeyup(event);
        }
      };
      var focusRef = ref(false);
      var onContainerFocus = function onContainerFocus2() {
        setMockFocused(true);
        if (!props2.disabled) {
          if (props2.onFocus && !focusRef.value) {
            props2.onFocus(arguments.length <= 0 ? void 0 : arguments[0]);
          }
          if (props2.showAction && props2.showAction.includes("focus")) {
            onToggleOpen(true);
          }
        }
        focusRef.value = true;
      };
      var onContainerBlur = function onContainerBlur2() {
        setMockFocused(false, function() {
          focusRef.value = false;
          onToggleOpen(false);
        });
        if (props2.disabled) {
          return;
        }
        var searchVal = mergedSearchValue.value;
        if (searchVal) {
          if (props2.mode === "tags") {
            triggerSearch("", false, false);
            triggerChange5(Array.from(new Set([].concat(_toConsumableArray(mergedRawValue.value), [searchVal]))));
          } else if (props2.mode === "multiple") {
            setInnerSearchValue("");
          }
        }
        if (props2.onBlur) {
          props2.onBlur(arguments.length <= 0 ? void 0 : arguments[0]);
        }
      };
      provide("VCSelectContainerEvent", {
        focus: onContainerFocus,
        blur: onContainerBlur
      });
      var activeTimeoutIds = [];
      onMounted(function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return window.clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      });
      onBeforeUnmount(function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return window.clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      });
      var onInternalMouseDown = function onInternalMouseDown2(event) {
        var target = event.target;
        var popupElement = triggerRef.value && triggerRef.value.getPopupElement();
        if (popupElement && popupElement.contains(target)) {
          var timeoutId = window.setTimeout(function() {
            var index2 = activeTimeoutIds.indexOf(timeoutId);
            if (index2 !== -1) {
              activeTimeoutIds.splice(index2, 1);
            }
            cancelSetMockFocused();
            if (!mobile.value && !popupElement.contains(document.activeElement)) {
              selectorRef.value.focus();
            }
          });
          activeTimeoutIds.push(timeoutId);
        }
        if (props2.onMousedown) {
          props2.onMousedown(event);
        }
      };
      var accessibilityIndex = ref(0);
      var mergedDefaultActiveFirstOption = computed(function() {
        return props2.defaultActiveFirstOption !== void 0 ? props2.defaultActiveFirstOption : props2.mode !== "combobox";
      });
      var onActiveValue = function onActiveValue2(active, index2) {
        var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$source = _ref3.source, source = _ref3$source === void 0 ? "keyboard" : _ref3$source;
        accessibilityIndex.value = index2;
        if (props2.backfill && props2.mode === "combobox" && active !== null && source === "keyboard") {
          setActiveValue(String(active));
        }
      };
      var containerWidth = ref(null);
      onMounted(function() {
        watch(triggerOpen, function() {
          if (triggerOpen.value) {
            var newWidth = Math.ceil(containerRef.value.offsetWidth);
            if (containerWidth.value !== newWidth) {
              containerWidth.value = newWidth;
            }
          }
        }, {
          immediate: true
        });
      });
      var focus27 = function focus28() {
        selectorRef.value.focus();
      };
      var blur24 = function blur25() {
        selectorRef.value.blur();
      };
      return {
        focus: focus27,
        blur: blur24,
        scrollTo: (_a = listRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo,
        tokenWithEnter,
        mockFocused,
        mergedId,
        containerWidth,
        onActiveValue,
        accessibilityIndex,
        mergedDefaultActiveFirstOption,
        onInternalMouseDown,
        onContainerFocus,
        onContainerBlur,
        onInternalKeyDown,
        isMultiple: isMultiple2,
        mergedOpen,
        displayOptions,
        displayFlattenOptions,
        rawValues,
        onInternalOptionSelect,
        onToggleOpen,
        mergedSearchValue,
        useInternalProps,
        triggerChange: triggerChange5,
        triggerSearch,
        mergedRawValue,
        mergedShowSearch,
        onInternalKeyUp,
        triggerOpen,
        mergedOptions,
        onInternalSelectionSelect,
        selectorDomRef,
        displayValues,
        activeValue,
        onSearchSubmit,
        containerRef,
        listRef,
        triggerRef,
        selectorRef
      };
    },
    methods: {
      onPopupMouseEnter: function onPopupMouseEnter() {
        this.$forceUpdate();
      }
    },
    render: function render165() {
      var _classNames2, _this = this;
      var tokenWithEnter = this.tokenWithEnter, mockFocused = this.mockFocused, mergedId = this.mergedId, containerWidth = this.containerWidth, onActiveValue = this.onActiveValue, accessibilityIndex = this.accessibilityIndex, mergedDefaultActiveFirstOption = this.mergedDefaultActiveFirstOption, onInternalMouseDown = this.onInternalMouseDown, onInternalKeyDown = this.onInternalKeyDown, isMultiple2 = this.isMultiple, mergedOpen = this.mergedOpen, displayOptions = this.displayOptions, displayFlattenOptions = this.displayFlattenOptions, rawValues = this.rawValues, onInternalOptionSelect = this.onInternalOptionSelect, onToggleOpen = this.onToggleOpen, mergedSearchValue = this.mergedSearchValue, onPopupMouseEnter = this.onPopupMouseEnter, useInternalProps = this.useInternalProps, triggerChange5 = this.triggerChange, triggerSearch = this.triggerSearch, mergedRawValue = this.mergedRawValue, mergedShowSearch = this.mergedShowSearch, onInternalKeyUp = this.onInternalKeyUp, triggerOpen = this.triggerOpen, mergedOptions = this.mergedOptions, onInternalSelectionSelect = this.onInternalSelectionSelect, selectorDomRef = this.selectorDomRef, displayValues = this.displayValues, activeValue = this.activeValue, onSearchSubmit = this.onSearchSubmit, slots = this.$slots;
      var _a = this.$props, _a$prefixCls = _a.prefixCls, prefixCls2 = _a$prefixCls === void 0 ? defaultPrefixCls : _a$prefixCls, className = _a.class;
      _a.id;
      _a.open;
      _a.defaultOpen;
      var options2 = _a.options;
      _a.children;
      var mode4 = _a.mode;
      _a.value;
      _a.defaultValue;
      _a.labelInValue;
      _a.showSearch;
      _a.inputValue;
      _a.searchValue;
      _a.filterOption;
      _a.optionFilterProp;
      _a.autoClearSearchValue;
      _a.onSearch;
      var allowClear = _a.allowClear, clearIcon = _a.clearIcon, showArrow = _a.showArrow, inputIcon = _a.inputIcon, menuItemSelectedIcon = _a.menuItemSelectedIcon, disabled = _a.disabled, loading = _a.loading;
      _a.defaultActiveFirstOption;
      var _a$notFoundContent = _a.notFoundContent, notFoundContent = _a$notFoundContent === void 0 ? "Not Found" : _a$notFoundContent;
      _a.optionLabelProp;
      _a.backfill;
      var getInputElement2 = _a.getInputElement, getPopupContainer = _a.getPopupContainer, _a$listHeight = _a.listHeight, listHeight = _a$listHeight === void 0 ? 200 : _a$listHeight, _a$listItemHeight = _a.listItemHeight, listItemHeight = _a$listItemHeight === void 0 ? 20 : _a$listItemHeight, animation2 = _a.animation, transitionName2 = _a.transitionName, virtual = _a.virtual, dropdownStyle = _a.dropdownStyle, dropdownClassName = _a.dropdownClassName, dropdownMatchSelectWidth = _a.dropdownMatchSelectWidth, dropdownRender = _a.dropdownRender, dropdownAlign = _a.dropdownAlign;
      _a.showAction;
      var direction = _a.direction;
      _a.tokenSeparators;
      var tagRender = _a.tagRender, onPopupScroll = _a.onPopupScroll;
      _a.onDropdownVisibleChange;
      _a.onFocus;
      _a.onBlur;
      _a.onKeyup;
      _a.onKeydown;
      _a.onMousedown;
      _a.onChange;
      _a.onSelect;
      _a.onDeselect;
      var onClear4 = _a.onClear, _a$internalProps = _a.internalProps, internalProps = _a$internalProps === void 0 ? {} : _a$internalProps, restProps = __rest$P(_a, ["prefixCls", "class", "id", "open", "defaultOpen", "options", "children", "mode", "value", "defaultValue", "labelInValue", "showSearch", "inputValue", "searchValue", "filterOption", "optionFilterProp", "autoClearSearchValue", "onSearch", "allowClear", "clearIcon", "showArrow", "inputIcon", "menuItemSelectedIcon", "disabled", "loading", "defaultActiveFirstOption", "notFoundContent", "optionLabelProp", "backfill", "getInputElement", "getPopupContainer", "listHeight", "listItemHeight", "animation", "transitionName", "virtual", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "showAction", "direction", "tokenSeparators", "tagRender", "onPopupScroll", "onDropdownVisibleChange", "onFocus", "onBlur", "onKeyup", "onKeydown", "onMousedown", "onChange", "onSelect", "onDeselect", "onClear", "internalProps"]);
      var customizeInputElement = mode4 === "combobox" && getInputElement2 && getInputElement2() || null;
      var domProps = omitDOMProps ? omitDOMProps(restProps) : restProps;
      DEFAULT_OMIT_PROPS.forEach(function(prop) {
        delete domProps[prop];
      });
      var popupNode = createVNode(OptionList2, {
        "ref": "listRef",
        "prefixCls": prefixCls2,
        "id": mergedId,
        "open": mergedOpen,
        "childrenAsData": !options2,
        "options": displayOptions,
        "flattenOptions": displayFlattenOptions,
        "multiple": isMultiple2,
        "values": rawValues,
        "height": listHeight,
        "itemHeight": listItemHeight,
        "onSelect": onInternalOptionSelect,
        "onToggleOpen": onToggleOpen,
        "onActiveValue": onActiveValue,
        "defaultActiveFirstOption": mergedDefaultActiveFirstOption,
        "notFoundContent": notFoundContent,
        "onScroll": onPopupScroll,
        "searchValue": mergedSearchValue,
        "menuItemSelectedIcon": menuItemSelectedIcon,
        "virtual": virtual !== false && dropdownMatchSelectWidth !== false,
        "onMouseenter": onPopupMouseEnter
      }, {
        option: slots.option
      });
      var clearNode;
      var onClearMouseDown = function onClearMouseDown2() {
        if (useInternalProps && internalProps.onClear) {
          internalProps.onClear();
        }
        if (onClear4) {
          onClear4();
        }
        triggerChange5([]);
        triggerSearch("", false, false);
      };
      if (!disabled && allowClear && (mergedRawValue.length || mergedSearchValue)) {
        clearNode = createVNode(TransBtn$1, {
          "class": "".concat(prefixCls2, "-clear"),
          "onMousedown": onClearMouseDown,
          "customizeIcon": clearIcon
        }, {
          default: function _default8() {
            return [createTextVNode("\xD7")];
          }
        });
      }
      var mergedShowArrow = showArrow !== void 0 ? showArrow : loading || !isMultiple2 && mode4 !== "combobox";
      var arrowNode;
      if (mergedShowArrow) {
        arrowNode = createVNode(TransBtn$1, {
          "class": classNames("".concat(prefixCls2, "-arrow"), _defineProperty({}, "".concat(prefixCls2, "-arrow-loading"), loading)),
          "customizeIcon": inputIcon,
          "customizeIconProps": {
            loading,
            searchValue: mergedSearchValue,
            open: mergedOpen,
            focused: mockFocused,
            showSearch: mergedShowSearch
          }
        }, null);
      }
      var mergedClassName = classNames(prefixCls2, className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-focused"), mockFocused), _defineProperty(_classNames2, "".concat(prefixCls2, "-multiple"), isMultiple2), _defineProperty(_classNames2, "".concat(prefixCls2, "-single"), !isMultiple2), _defineProperty(_classNames2, "".concat(prefixCls2, "-allow-clear"), allowClear), _defineProperty(_classNames2, "".concat(prefixCls2, "-show-arrow"), mergedShowArrow), _defineProperty(_classNames2, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(prefixCls2, "-loading"), loading), _defineProperty(_classNames2, "".concat(prefixCls2, "-open"), mergedOpen), _defineProperty(_classNames2, "".concat(prefixCls2, "-customize-input"), customizeInputElement), _defineProperty(_classNames2, "".concat(prefixCls2, "-show-search"), mergedShowSearch), _classNames2));
      return createVNode("div", _objectSpread2(_objectSpread2({
        "class": mergedClassName
      }, domProps), {}, {
        "ref": "containerRef",
        "onMousedown": onInternalMouseDown,
        "onKeydown": onInternalKeyDown,
        "onKeyup": onInternalKeyUp
      }), [mockFocused && !mergedOpen && createVNode("span", {
        "style": {
          width: 0,
          height: 0,
          display: "flex",
          overflow: "hidden",
          opacity: 0
        },
        "aria-live": "polite"
      }, ["".concat(mergedRawValue.join(", "))]), createVNode(SelectTrigger$3, {
        "ref": "triggerRef",
        "disabled": disabled,
        "prefixCls": prefixCls2,
        "visible": triggerOpen,
        "popupElement": popupNode,
        "containerWidth": containerWidth,
        "animation": animation2,
        "transitionName": transitionName2,
        "dropdownStyle": dropdownStyle,
        "dropdownClassName": dropdownClassName,
        "direction": direction,
        "dropdownMatchSelectWidth": dropdownMatchSelectWidth,
        "dropdownRender": dropdownRender,
        "dropdownAlign": dropdownAlign,
        "getPopupContainer": getPopupContainer,
        "empty": !mergedOptions.length,
        "getTriggerDOMNode": function getTriggerDOMNode() {
          return selectorDomRef.current;
        }
      }, {
        default: function _default8() {
          return [createVNode(Selector$3, _objectSpread2(_objectSpread2({}, _this.$props), {}, {
            "domRef": selectorDomRef,
            "prefixCls": prefixCls2,
            "inputElement": customizeInputElement,
            "ref": "selectorRef",
            "id": mergedId,
            "showSearch": mergedShowSearch,
            "mode": mode4,
            "accessibilityIndex": accessibilityIndex,
            "multiple": isMultiple2,
            "tagRender": tagRender,
            "values": displayValues,
            "open": mergedOpen,
            "onToggleOpen": onToggleOpen,
            "searchValue": mergedSearchValue,
            "activeValue": activeValue,
            "onSearch": triggerSearch,
            "onSearchSubmit": onSearchSubmit,
            "onSelect": onInternalSelectionSelect,
            "tokenWithEnter": tokenWithEnter
          }), null)];
        }
      }), arrowNode, clearNode]);
    }
  });
  return Select2;
}
function warningProps(props2) {
  var mode4 = props2.mode, options2 = props2.options, children = props2.children, backfill = props2.backfill, allowClear = props2.allowClear, placeholder = props2.placeholder, getInputElement2 = props2.getInputElement, showSearch = props2.showSearch, onSearch = props2.onSearch, defaultOpen = props2.defaultOpen, autofocus = props2.autofocus, labelInValue = props2.labelInValue, value26 = props2.value, inputValue = props2.inputValue, optionLabelProp = props2.optionLabelProp;
  var multiple = mode4 === "multiple" || mode4 === "tags";
  var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode4 === "combobox";
  var mergedOptions = options2 || convertChildrenToData$1(children);
  warningOnce(mode4 !== "tags" || mergedOptions.every(function(opt) {
    return !opt.disabled;
  }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
  warningOnce(mode4 !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
  warningOnce(mode4 === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
  warningOnce(mode4 === "combobox" || !getInputElement2, "`getInputElement` only work with `combobox` mode.");
  noteOnce(mode4 !== "combobox" || !getInputElement2 || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
  if (onSearch && !mergedShowSearch && mode4 !== "combobox" && mode4 !== "tags") {
    warningOnce(false, "`onSearch` should work with `showSearch` instead of use alone.");
  }
  noteOnce(!defaultOpen || autofocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autofocus` if needed.");
  if (value26 !== void 0 && value26 !== null) {
    var values = toArray$5(value26);
    warningOnce(!labelInValue || values.every(function(val) {
      return _typeof(val) === "object" && ("key" in val || "value" in val);
    }), "`value` should in shape of `{ value: string | number, label?: any }` when you set `labelInValue` to `true`");
    warningOnce(!multiple || Array.isArray(value26), "`value` should be array when `mode` is `multiple` or `tags`");
  }
  if (children) {
    var invalidateChildType = null;
    children.some(function(node) {
      var _a;
      if (!isValidElement(node) || !node.type) {
        return false;
      }
      var type2 = node.type;
      if (type2.isSelectOption) {
        return false;
      }
      if (type2.isSelectOptGroup) {
        var childs = ((_a = node.children) === null || _a === void 0 ? void 0 : _a.default()) || [];
        var allChildrenValid = childs.every(function(subNode) {
          if (!isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {
            return true;
          }
          invalidateChildType = subNode.type;
          return false;
        });
        if (allChildrenValid) {
          return false;
        }
        return true;
      }
      invalidateChildType = type2;
      return true;
    });
    if (invalidateChildType) {
      warningOnce(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
    }
    warningOnce(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
  }
}
var RefSelect = generateSelector$1({
  prefixCls: "rc-select",
  components: {
    optionList: SelectOptionList
  },
  convertChildrenToData: convertChildrenToData$1,
  flattenOptions,
  getLabeledValue,
  filterOptions,
  isValueDisabled,
  findValueOption,
  warningProps,
  fillOptionsWithMissingValue
});
var Select$5 = defineComponent({
  setup: function setup21(props2, _ref) {
    var attrs = _ref.attrs, expose = _ref.expose, slots = _ref.slots;
    var selectRef = ref(null);
    expose({
      focus: function focus27() {
        var _a;
        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();
      },
      blur: function blur24() {
        var _a;
        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();
      }
    });
    return function() {
      var _a;
      return createVNode(RefSelect, _objectSpread2(_objectSpread2(_objectSpread2({
        "ref": selectRef
      }, props2), attrs), {}, {
        "children": ((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || []
      }), slots);
    };
  }
});
Select$5.inheritAttrs = false;
Select$5.props = omit$1(RefSelect.props, ["children"]);
Select$5.Option = Option$5;
Select$5.OptGroup = OptGroup$3;
var Select$6 = Select$5;
function getIcons(props2) {
  var slots = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var loading = props2.loading, multiple = props2.multiple, prefixCls2 = props2.prefixCls;
  var suffixIcon = props2.suffixIcon || slots.suffixIcon && slots.suffixIcon();
  var clearIcon = props2.clearIcon || slots.clearIcon && slots.clearIcon();
  var menuItemSelectedIcon = props2.menuItemSelectedIcon || slots.menuItemSelectedIcon && slots.menuItemSelectedIcon();
  var removeIcon = props2.removeIcon || slots.removeIcon && slots.removeIcon();
  var mergedClearIcon = clearIcon;
  if (!clearIcon) {
    mergedClearIcon = createVNode(CloseCircleFilled, null, null);
  }
  var mergedSuffixIcon = null;
  if (suffixIcon !== void 0) {
    mergedSuffixIcon = suffixIcon;
  } else if (loading) {
    mergedSuffixIcon = createVNode(LoadingOutlined, {
      "spin": true
    }, null);
  } else {
    var iconCls = "".concat(prefixCls2, "-suffix");
    mergedSuffixIcon = function mergedSuffixIcon2(_ref) {
      var open6 = _ref.open, showSearch = _ref.showSearch;
      if (open6 && showSearch) {
        return createVNode(SearchOutlined, {
          "class": iconCls
        }, null);
      }
      return createVNode(DownOutlined, {
        "class": iconCls
      }, null);
    };
  }
  var mergedItemIcon = null;
  if (menuItemSelectedIcon !== void 0) {
    mergedItemIcon = menuItemSelectedIcon;
  } else if (multiple) {
    mergedItemIcon = createVNode(CheckOutlined, null, null);
  } else {
    mergedItemIcon = null;
  }
  var mergedRemoveIcon = null;
  if (removeIcon !== void 0) {
    mergedRemoveIcon = removeIcon;
  } else {
    mergedRemoveIcon = createVNode(CloseOutlined, null, null);
  }
  return {
    clearIcon: mergedClearIcon,
    suffixIcon: mergedSuffixIcon,
    itemIcon: mergedItemIcon,
    removeIcon: mergedRemoveIcon
  };
}
var SelectProps = function SelectProps2() {
  return _extends(_extends({}, omit(BaseProps(), ["inputIcon", "mode", "getInputElement", "backfill", "class", "style"])), {
    value: {
      type: [Array, Object, String, Number]
    },
    defaultValue: {
      type: [Array, Object, String, Number]
    },
    notFoundContent: PropsTypes.VNodeChild,
    suffixIcon: PropsTypes.VNodeChild,
    itemIcon: PropsTypes.VNodeChild,
    size: PropsTypes.oneOf(tuple("small", "middle", "large", "default")),
    mode: PropsTypes.oneOf(tuple("multiple", "tags", "SECRET_COMBOBOX_MODE_DO_NOT_USE")),
    bordered: PropsTypes.looseBool.def(true),
    transitionName: PropsTypes.string.def("slide-up"),
    choiceTransitionName: PropsTypes.string.def("")
  });
};
var Select$4 = defineComponent({
  name: "ASelect",
  Option: Option$5,
  OptGroup: OptGroup$3,
  inheritAttrs: false,
  props: SelectProps(),
  SECRET_COMBOBOX_MODE_DO_NOT_USE: "SECRET_COMBOBOX_MODE_DO_NOT_USE",
  emits: ["change", "update:value"],
  slots: ["notFoundContent", "suffixIcon", "itemIcon", "removeIcon", "clearIcon", "dropdownRender", "option"],
  setup: function setup22(props2, _ref) {
    var attrs = _ref.attrs, emit = _ref.emit, slots = _ref.slots, expose = _ref.expose;
    var selectRef = ref(null);
    var focus27 = function focus28() {
      if (selectRef.value) {
        selectRef.value.focus();
      }
    };
    var blur24 = function blur25() {
      if (selectRef.value) {
        selectRef.value.blur();
      }
    };
    var mode4 = computed(function() {
      var mode5 = props2.mode;
      if (mode5 === "combobox") {
        return void 0;
      }
      if (mode5 === Select$4.SECRET_COMBOBOX_MODE_DO_NOT_USE) {
        return "combobox";
      }
      return mode5;
    });
    var _useConfigInject = useConfigInject("select", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, configProvider = _useConfigInject.configProvider;
    var mergedClassName = computed(function() {
      var _classNames;
      return classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2.value, "-lg"), props2.size === "large"), _defineProperty(_classNames, "".concat(prefixCls2.value, "-sm"), props2.size === "small"), _defineProperty(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty(_classNames, "".concat(prefixCls2.value, "-borderless"), !props2.bordered), _classNames));
    });
    var triggerChange5 = function triggerChange6() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      emit("update:value", args[0]);
      emit.apply(void 0, ["change"].concat(args));
    };
    expose({
      blur: blur24,
      focus: focus27
    });
    return function() {
      var _a;
      var notFoundContent = props2.notFoundContent, _props$listHeight = props2.listHeight, listHeight = _props$listHeight === void 0 ? 256 : _props$listHeight, _props$listItemHeight = props2.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 24 : _props$listItemHeight, getPopupContainer = props2.getPopupContainer, dropdownClassName = props2.dropdownClassName, virtual = props2.virtual, dropdownMatchSelectWidth = props2.dropdownMatchSelectWidth;
      var renderEmpty2 = configProvider.renderEmpty, getContextPopupContainer = configProvider.getPopupContainer;
      var isMultiple2 = mode4.value === "multiple" || mode4.value === "tags";
      var mergedNotFound;
      if (notFoundContent !== void 0) {
        mergedNotFound = notFoundContent;
      } else if (slots.notFoundContent) {
        mergedNotFound = slots.notFoundContent();
      } else if (mode4.value === "combobox") {
        mergedNotFound = null;
      } else {
        mergedNotFound = renderEmpty2("Select");
      }
      var _getIcons = getIcons(_extends(_extends({}, props2), {
        multiple: isMultiple2,
        prefixCls: prefixCls2.value
      }), slots), suffixIcon = _getIcons.suffixIcon, itemIcon = _getIcons.itemIcon, removeIcon = _getIcons.removeIcon, clearIcon = _getIcons.clearIcon;
      var selectProps = omit(props2, ["prefixCls", "suffixIcon", "itemIcon", "removeIcon", "clearIcon", "size", "bordered"]);
      var rcSelectRtlDropDownClassName = classNames(dropdownClassName, _defineProperty({}, "".concat(prefixCls2.value, "-dropdown-").concat(direction.value), direction.value === "rtl"));
      return createVNode(Select$6, _objectSpread2(_objectSpread2(_objectSpread2({
        "ref": selectRef,
        "virtual": virtual,
        "dropdownMatchSelectWidth": dropdownMatchSelectWidth
      }, selectProps), attrs), {}, {
        "listHeight": listHeight,
        "listItemHeight": listItemHeight,
        "mode": mode4.value,
        "prefixCls": prefixCls2.value,
        "direction": direction.value,
        "inputIcon": suffixIcon,
        "menuItemSelectedIcon": itemIcon,
        "removeIcon": removeIcon,
        "clearIcon": clearIcon,
        "notFoundContent": mergedNotFound,
        "class": [mergedClassName.value, attrs.class],
        "getPopupContainer": getPopupContainer || getContextPopupContainer,
        "dropdownClassName": rcSelectRtlDropDownClassName,
        "onChange": triggerChange5,
        "dropdownRender": selectProps.dropdownRender || slots.dropdownRender
      }), {
        default: function _default8() {
          return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
        },
        option: slots.option
      });
    };
  }
});
Select$4.install = function(app) {
  app.component(Select$4.name, Select$4);
  app.component(Select$4.Option.displayName, Select$4.Option);
  app.component(Select$4.OptGroup.displayName, Select$4.OptGroup);
  return app;
};
var SelectOption = Select$4.Option;
var SelectOptGroup = Select$4.OptGroup;
var VcSelect = Select$4;
var inputProps = {
  prefixCls: PropsTypes.string,
  inputPrefixCls: PropsTypes.string,
  defaultValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  value: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  placeholder: {
    type: [String, Number]
  },
  type: PropsTypes.string.def("text"),
  name: PropsTypes.string,
  size: {
    type: String
  },
  disabled: PropsTypes.looseBool,
  readonly: PropsTypes.looseBool,
  addonBefore: PropsTypes.VNodeChild,
  addonAfter: PropsTypes.VNodeChild,
  prefix: PropsTypes.VNodeChild,
  suffix: PropsTypes.VNodeChild,
  autofocus: PropsTypes.looseBool,
  allowClear: PropsTypes.looseBool,
  lazy: PropsTypes.looseBool.def(true),
  maxlength: PropsTypes.number,
  loading: PropsTypes.looseBool,
  onPressEnter: PropsTypes.func,
  onKeydown: PropsTypes.func,
  onKeyup: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func,
  onChange: PropsTypes.func,
  onInput: PropsTypes.func,
  "onUpdate:value": PropsTypes.func
};
function hasPrefixSuffix(instance) {
  return !!(getComponent(instance, "prefix") || getComponent(instance, "suffix") || instance.$props.allowClear);
}
var ClearableInputType = ["text", "input"];
var ClearableLabeledInput = defineComponent({
  name: "ClearableLabeledInput",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    inputType: PropsTypes.oneOf(tuple("text", "input")),
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    allowClear: PropsTypes.looseBool,
    element: PropsTypes.VNodeChild,
    handleReset: PropsTypes.func,
    disabled: PropsTypes.looseBool,
    size: PropsTypes.oneOf(tuple("small", "large", "default")),
    suffix: PropsTypes.VNodeChild,
    prefix: PropsTypes.VNodeChild,
    addonBefore: PropsTypes.VNodeChild,
    addonAfter: PropsTypes.VNodeChild,
    readonly: PropsTypes.looseBool,
    isFocused: PropsTypes.looseBool
  },
  methods: {
    renderClearIcon: function renderClearIcon(prefixCls2) {
      var _this$$props = this.$props, allowClear = _this$$props.allowClear, value26 = _this$$props.value, disabled = _this$$props.disabled, readonly = _this$$props.readonly, inputType = _this$$props.inputType, handleReset3 = _this$$props.handleReset;
      if (!allowClear) {
        return null;
      }
      var showClearIcon = !disabled && !readonly && value26 !== void 0 && value26 !== null && value26 !== "";
      var className = inputType === ClearableInputType[0] ? "".concat(prefixCls2, "-textarea-clear-icon") : "".concat(prefixCls2, "-clear-icon");
      return createVNode(CloseCircleFilled, {
        "onClick": handleReset3,
        "class": classNames(className, _defineProperty({}, "".concat(className, "-hidden"), !showClearIcon)),
        "role": "button"
      }, null);
    },
    renderSuffix: function renderSuffix(prefixCls2) {
      var _this$$props2 = this.$props, suffix = _this$$props2.suffix, allowClear = _this$$props2.allowClear;
      if (suffix || allowClear) {
        return createVNode("span", {
          "class": "".concat(prefixCls2, "-suffix")
        }, [this.renderClearIcon(prefixCls2), suffix]);
      }
      return null;
    },
    renderLabeledIcon: function renderLabeledIcon(prefixCls2, element) {
      var _classNames2;
      var _a;
      var props2 = this.$props;
      var style3 = this.$attrs.style;
      var suffix = this.renderSuffix(prefixCls2);
      if (!hasPrefixSuffix(this)) {
        return cloneElement(element, {
          value: props2.value
        });
      }
      var prefix = props2.prefix ? createVNode("span", {
        "class": "".concat(prefixCls2, "-prefix")
      }, [props2.prefix]) : null;
      var affixWrapperCls = classNames((_a = this.$attrs) === null || _a === void 0 ? void 0 : _a.class, "".concat(prefixCls2, "-affix-wrapper"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-affix-wrapper-focused"), props2.isFocused), _defineProperty(_classNames2, "".concat(prefixCls2, "-affix-wrapper-disabled"), props2.disabled), _defineProperty(_classNames2, "".concat(prefixCls2, "-affix-wrapper-sm"), props2.size === "small"), _defineProperty(_classNames2, "".concat(prefixCls2, "-affix-wrapper-lg"), props2.size === "large"), _defineProperty(_classNames2, "".concat(prefixCls2, "-affix-wrapper-input-with-clear-btn"), props2.suffix && props2.allowClear && this.$props.value), _classNames2));
      return createVNode("span", {
        "class": affixWrapperCls,
        "style": style3
      }, [prefix, cloneElement(element, {
        style: null,
        value: props2.value,
        class: getInputClassName(prefixCls2, props2.size, props2.disabled)
      }), suffix]);
    },
    renderInputWithLabel: function renderInputWithLabel(prefixCls2, labeledElement) {
      var _classNames4;
      var _this$$props3 = this.$props, addonBefore = _this$$props3.addonBefore, addonAfter = _this$$props3.addonAfter, size = _this$$props3.size;
      var _this$$attrs = this.$attrs, style3 = _this$$attrs.style, className = _this$$attrs.class;
      if (!addonBefore && !addonAfter) {
        return labeledElement;
      }
      var wrapperClassName = "".concat(prefixCls2, "-group");
      var addonClassName = "".concat(wrapperClassName, "-addon");
      var addonBeforeNode = addonBefore ? createVNode("span", {
        "class": addonClassName
      }, [addonBefore]) : null;
      var addonAfterNode = addonAfter ? createVNode("span", {
        "class": addonClassName
      }, [addonAfter]) : null;
      var mergedWrapperClassName = classNames("".concat(prefixCls2, "-wrapper"), _defineProperty({}, wrapperClassName, addonBefore || addonAfter));
      var mergedGroupClassName = classNames(className, "".concat(prefixCls2, "-group-wrapper"), (_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls2, "-group-wrapper-sm"), size === "small"), _defineProperty(_classNames4, "".concat(prefixCls2, "-group-wrapper-lg"), size === "large"), _classNames4));
      return createVNode("span", {
        "class": mergedGroupClassName,
        "style": style3
      }, [createVNode("span", {
        "class": mergedWrapperClassName
      }, [addonBeforeNode, cloneElement(labeledElement, {
        style: null
      }), addonAfterNode])]);
    },
    renderTextAreaWithClearIcon: function renderTextAreaWithClearIcon(prefixCls2, element) {
      var _this$$props4 = this.$props, value26 = _this$$props4.value, allowClear = _this$$props4.allowClear;
      var _this$$attrs2 = this.$attrs, style3 = _this$$attrs2.style, className = _this$$attrs2.class;
      if (!allowClear) {
        return cloneElement(element, {
          value: value26
        });
      }
      var affixWrapperCls = classNames(className, "".concat(prefixCls2, "-affix-wrapper"), "".concat(prefixCls2, "-affix-wrapper-textarea-with-clear-btn"));
      return createVNode("span", {
        "class": affixWrapperCls,
        "style": style3
      }, [cloneElement(element, {
        style: null,
        value: value26
      }), this.renderClearIcon(prefixCls2)]);
    },
    renderClearableLabeledInput: function renderClearableLabeledInput() {
      var _this$$props5 = this.$props, prefixCls2 = _this$$props5.prefixCls, inputType = _this$$props5.inputType, element = _this$$props5.element;
      if (inputType === ClearableInputType[0]) {
        return this.renderTextAreaWithClearIcon(prefixCls2, element);
      }
      return this.renderInputWithLabel(prefixCls2, this.renderLabeledIcon(prefixCls2, element));
    }
  },
  render: function render13() {
    return this.renderClearableLabeledInput();
  }
});
var ClearableLabeledInput$1 = ClearableLabeledInput;
function fixControlledValue(value26) {
  if (typeof value26 === "undefined" || value26 === null) {
    return "";
  }
  return value26;
}
function resolveOnChange(target, e, onChange9) {
  if (onChange9) {
    var event = e;
    if (e.type === "click") {
      Object.defineProperty(event, "target", {
        writable: true
      });
      Object.defineProperty(event, "currentTarget", {
        writable: true
      });
      event.target = target;
      event.currentTarget = target;
      var originalInputValue = target.value;
      target.value = "";
      onChange9(event);
      target.value = originalInputValue;
      return;
    }
    onChange9(event);
  }
}
function getInputClassName(prefixCls2, size, disabled) {
  var _classNames;
  return classNames(prefixCls2, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-sm"), size === "small"), _defineProperty(_classNames, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames));
}
var Input = defineComponent({
  name: "AInput",
  inheritAttrs: false,
  props: _extends({}, inputProps),
  setup: function setup23() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      removePasswordTimeout: void 0,
      input: null,
      clearableInput: null
    };
  },
  data: function data4() {
    var props2 = this.$props;
    var value26 = typeof props2.value === "undefined" ? props2.defaultValue : props2.value;
    return {
      stateValue: typeof value26 === "undefined" ? "" : value26,
      isFocused: false
    };
  },
  watch: {
    value: function value(val) {
      this.stateValue = val;
    }
  },
  mounted: function mounted5() {
    var _this = this;
    nextTick(function() {
      _this.clearPasswordValueAttribute();
    });
  },
  beforeUnmount: function beforeUnmount4() {
    if (this.removePasswordTimeout) {
      clearTimeout(this.removePasswordTimeout);
    }
  },
  methods: {
    handleInputFocus: function handleInputFocus(e) {
      this.isFocused = true;
      this.onFocus && this.onFocus(e);
    },
    handleInputBlur: function handleInputBlur(e) {
      this.isFocused = false;
      this.onBlur && this.onBlur(e);
    },
    focus: function focus() {
      this.input.focus();
    },
    blur: function blur() {
      this.input.blur();
    },
    select: function select() {
      this.input.select();
    },
    saveClearableInput: function saveClearableInput(input) {
      this.clearableInput = input;
    },
    saveInput: function saveInput(input) {
      this.input = input;
    },
    setValue: function setValue(value26, callback) {
      if (this.stateValue === value26) {
        return;
      }
      if (!hasProp(this, "value")) {
        this.stateValue = value26;
      } else {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    triggerChange: function triggerChange(e) {
      this.$emit("update:value", e.target.value);
      this.$emit("change", e);
      this.$emit("input", e);
    },
    handleReset: function handleReset(e) {
      var _this2 = this;
      this.setValue("", function() {
        _this2.focus();
      });
      resolveOnChange(this.input, e, this.triggerChange);
    },
    renderInput: function renderInput(prefixCls2, _ref) {
      var addonBefore = _ref.addonBefore, addonAfter = _ref.addonAfter;
      var otherProps = omit(this.$props, ["prefixCls", "onPressEnter", "addonBefore", "addonAfter", "prefix", "suffix", "allowClear", "defaultValue", "lazy", "size", "inputPrefixCls", "loading"]);
      var handleKeyDown7 = this.handleKeyDown, handleChange22 = this.handleChange, handleInputFocus3 = this.handleInputFocus, handleInputBlur3 = this.handleInputBlur, size = this.size, disabled = this.disabled, $attrs = this.$attrs;
      var inputProps2 = _extends(_extends(_extends({}, otherProps), $attrs), {
        onKeydown: handleKeyDown7,
        class: classNames(getInputClassName(prefixCls2, size, disabled), _defineProperty({}, $attrs.class, $attrs.class && !addonBefore && !addonAfter)),
        ref: this.saveInput,
        key: "ant-input",
        onInput: handleChange22,
        onChange: handleChange22,
        onFocus: handleInputFocus3,
        onBlur: handleInputBlur3
      });
      if (!inputProps2.autofocus) {
        delete inputProps2.autofocus;
      }
      var inputNode = createVNode("input", inputProps2, null);
      return withDirectives(inputNode, [[antInput$1]]);
    },
    clearPasswordValueAttribute: function clearPasswordValueAttribute() {
      var _this3 = this;
      this.removePasswordTimeout = setTimeout(function() {
        if (_this3.input && _this3.input.getAttribute && _this3.input.getAttribute("type") === "password" && _this3.input.hasAttribute("value")) {
          _this3.input.removeAttribute("value");
        }
      });
    },
    handleChange: function handleChange(e) {
      var _e$target = e.target, value26 = _e$target.value, composing = _e$target.composing, isComposing = _e$target.isComposing;
      if ((isComposing || composing) && this.lazy || this.stateValue === value26)
        return;
      this.setValue(value26, this.clearPasswordValueAttribute);
      resolveOnChange(this.input, e, this.triggerChange);
    },
    handleKeyDown: function handleKeyDown(e) {
      if (e.keyCode === 13) {
        this.$emit("pressEnter", e);
      }
      this.$emit("keydown", e);
    }
  },
  render: function render14() {
    var customizePrefixCls = this.$props.prefixCls;
    var _this$$data = this.$data, stateValue = _this$$data.stateValue, isFocused = _this$$data.isFocused;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input", customizePrefixCls);
    var addonAfter = getComponent(this, "addonAfter");
    var addonBefore = getComponent(this, "addonBefore");
    var suffix = getComponent(this, "suffix");
    var prefix = getComponent(this, "prefix");
    var props2 = _extends(_extends(_extends({}, this.$attrs), getOptionProps(this)), {
      prefixCls: prefixCls2,
      inputType: "input",
      value: fixControlledValue(stateValue),
      element: this.renderInput(prefixCls2, {
        addonAfter,
        addonBefore
      }),
      handleReset: this.handleReset,
      addonAfter,
      addonBefore,
      suffix,
      prefix,
      isFocused
    });
    return createVNode(ClearableLabeledInput$1, _objectSpread2(_objectSpread2({}, props2), {}, {
      "ref": this.saveClearableInput
    }), null);
  }
});
var Group$4 = defineComponent({
  name: "AInputGroup",
  props: {
    prefixCls: PropsTypes.string,
    size: PropsTypes.oneOf(tuple("small", "large", "default")),
    compact: PropsTypes.looseBool
  },
  setup: function setup24() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  computed: {
    classes: function classes() {
      var _ref;
      var customizePrefixCls = this.prefixCls, size = this.size, _this$compact = this.compact, compact = _this$compact === void 0 ? false : _this$compact, configProvider = this.configProvider;
      var getPrefixCls2 = configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("input-group", customizePrefixCls);
      return _ref = {}, _defineProperty(_ref, "".concat(prefixCls2), true), _defineProperty(_ref, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_ref, "".concat(prefixCls2, "-sm"), size === "small"), _defineProperty(_ref, "".concat(prefixCls2, "-compact"), compact), _ref;
    }
  },
  render: function render15() {
    return createVNode("span", {
      "class": this.classes
    }, [getSlot(this)]);
  }
});
var applePhone = /iPhone/i;
var appleIpod = /iPod/i;
var appleTablet = /iPad/i;
var androidPhone = /\bAndroid(?:.+)Mobile\b/i;
var androidTablet = /Android/i;
var amazonPhone = /\bAndroid(?:.+)SD4930UR\b/i;
var amazonTablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i;
var windowsPhone = /Windows Phone/i;
var windowsTablet = /\bWindows(?:.+)ARM\b/i;
var otherBlackberry = /BlackBerry/i;
var otherBlackberry10 = /BB10/i;
var otherOpera = /Opera Mini/i;
var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
var otherFirefox = /Mobile(?:.+)Firefox\b/i;
function match(regex, userAgent) {
  return regex.test(userAgent);
}
function isMobile(userAgent) {
  var ua = userAgent || (typeof navigator !== "undefined" ? navigator.userAgent : "");
  var tmp = ua.split("[FBAN");
  if (typeof tmp[1] !== "undefined") {
    var _tmp = tmp;
    var _tmp2 = _slicedToArray(_tmp, 1);
    ua = _tmp2[0];
  }
  tmp = ua.split("Twitter");
  if (typeof tmp[1] !== "undefined") {
    var _tmp3 = tmp;
    var _tmp4 = _slicedToArray(_tmp3, 1);
    ua = _tmp4[0];
  }
  var result = {
    apple: {
      phone: match(applePhone, ua) && !match(windowsPhone, ua),
      ipod: match(appleIpod, ua),
      tablet: !match(applePhone, ua) && match(appleTablet, ua) && !match(windowsPhone, ua),
      device: (match(applePhone, ua) || match(appleIpod, ua) || match(appleTablet, ua)) && !match(windowsPhone, ua)
    },
    amazon: {
      phone: match(amazonPhone, ua),
      tablet: !match(amazonPhone, ua) && match(amazonTablet, ua),
      device: match(amazonPhone, ua) || match(amazonTablet, ua)
    },
    android: {
      phone: !match(windowsPhone, ua) && match(amazonPhone, ua) || !match(windowsPhone, ua) && match(androidPhone, ua),
      tablet: !match(windowsPhone, ua) && !match(amazonPhone, ua) && !match(androidPhone, ua) && (match(amazonTablet, ua) || match(androidTablet, ua)),
      device: !match(windowsPhone, ua) && (match(amazonPhone, ua) || match(amazonTablet, ua) || match(androidPhone, ua) || match(androidTablet, ua)) || match(/\bokhttp\b/i, ua)
    },
    windows: {
      phone: match(windowsPhone, ua),
      tablet: match(windowsTablet, ua),
      device: match(windowsPhone, ua) || match(windowsTablet, ua)
    },
    other: {
      blackberry: match(otherBlackberry, ua),
      blackberry10: match(otherBlackberry10, ua),
      opera: match(otherOpera, ua),
      firefox: match(otherFirefox, ua),
      chrome: match(otherChrome, ua),
      device: match(otherBlackberry, ua) || match(otherBlackberry10, ua) || match(otherOpera, ua) || match(otherFirefox, ua) || match(otherChrome, ua)
    },
    any: null,
    phone: null,
    tablet: null
  };
  result.any = result.apple.device || result.android.device || result.windows.device || result.other.device;
  result.phone = result.apple.phone || result.android.phone || result.windows.phone;
  result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
  return result;
}
var defaultResult = _extends(_extends({}, isMobile()), {
  isMobile
});
var isMobile$1 = defaultResult;
var START_EVENT_NAME_MAP = {
  transitionstart: {
    transition: "transitionstart",
    WebkitTransition: "webkitTransitionStart",
    MozTransition: "mozTransitionStart",
    OTransition: "oTransitionStart",
    msTransition: "MSTransitionStart"
  },
  animationstart: {
    animation: "animationstart",
    WebkitAnimation: "webkitAnimationStart",
    MozAnimation: "mozAnimationStart",
    OAnimation: "oAnimationStart",
    msAnimation: "MSAnimationStart"
  }
};
var END_EVENT_NAME_MAP = {
  transitionend: {
    transition: "transitionend",
    WebkitTransition: "webkitTransitionEnd",
    MozTransition: "mozTransitionEnd",
    OTransition: "oTransitionEnd",
    msTransition: "MSTransitionEnd"
  },
  animationend: {
    animation: "animationend",
    WebkitAnimation: "webkitAnimationEnd",
    MozAnimation: "mozAnimationEnd",
    OAnimation: "oAnimationEnd",
    msAnimation: "MSAnimationEnd"
  }
};
var startEvents = [];
var endEvents = [];
function detectEvents() {
  var testEl = document.createElement("div");
  var style3 = testEl.style;
  if (!("AnimationEvent" in window)) {
    delete START_EVENT_NAME_MAP.animationstart.animation;
    delete END_EVENT_NAME_MAP.animationend.animation;
  }
  if (!("TransitionEvent" in window)) {
    delete START_EVENT_NAME_MAP.transitionstart.transition;
    delete END_EVENT_NAME_MAP.transitionend.transition;
  }
  function process2(EVENT_NAME_MAP, events) {
    for (var baseEventName in EVENT_NAME_MAP) {
      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
        var baseEvents = EVENT_NAME_MAP[baseEventName];
        for (var styleName in baseEvents) {
          if (styleName in style3) {
            events.push(baseEvents[styleName]);
            break;
          }
        }
      }
    }
  }
  process2(START_EVENT_NAME_MAP, startEvents);
  process2(END_EVENT_NAME_MAP, endEvents);
}
if (typeof window !== "undefined" && typeof document !== "undefined") {
  detectEvents();
}
function addEventListener$1(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}
function removeEventListener$1(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}
var TransitionEvents = {
  startEvents,
  addStartEventListener: function addStartEventListener(node, eventListener) {
    if (startEvents.length === 0) {
      window.setTimeout(eventListener, 0);
      return;
    }
    startEvents.forEach(function(startEvent) {
      addEventListener$1(node, startEvent, eventListener);
    });
  },
  removeStartEventListener: function removeStartEventListener(node, eventListener) {
    if (startEvents.length === 0) {
      return;
    }
    startEvents.forEach(function(startEvent) {
      removeEventListener$1(node, startEvent, eventListener);
    });
  },
  endEvents,
  addEndEventListener: function addEndEventListener(node, eventListener) {
    if (endEvents.length === 0) {
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function(endEvent) {
      addEventListener$1(node, endEvent, eventListener);
    });
  },
  removeEndEventListener: function removeEndEventListener(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function(endEvent) {
      removeEventListener$1(node, endEvent, eventListener);
    });
  }
};
var Event$1 = TransitionEvents;
var styleForPesudo;
function isHidden$1(element) {
  return !element || element.offsetParent === null;
}
function isNotGrey(color) {
  var match2 = (color || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);
  if (match2 && match2[1] && match2[2] && match2[3]) {
    return !(match2[1] === match2[2] && match2[2] === match2[3]);
  }
  return true;
}
var Wave = defineComponent({
  name: "Wave",
  props: ["insertExtraNode"],
  setup: function setup25() {
    var configProvider = inject("configProvider", defaultConfigProvider);
    return {
      configProvider
    };
  },
  mounted: function mounted6() {
    var _this = this;
    nextTick(function() {
      var node = findDOMNode(_this);
      if (node.nodeType !== 1) {
        return;
      }
      _this.instance = _this.bindAnimationEvent(node);
    });
  },
  beforeUnmount: function beforeUnmount5() {
    if (this.instance) {
      this.instance.cancel();
    }
    if (this.clickWaveTimeoutId) {
      clearTimeout(this.clickWaveTimeoutId);
    }
  },
  methods: {
    onClick: function onClick2(node, waveColor) {
      if (!node || isHidden$1(node) || node.className.indexOf("-leave") >= 0) {
        return;
      }
      var insertExtraNode = this.$props.insertExtraNode;
      this.extraNode = document.createElement("div");
      var extraNode = this.extraNode;
      extraNode.className = "ant-click-animating-node";
      var attributeName = this.getAttributeName();
      node.removeAttribute(attributeName);
      node.setAttribute(attributeName, "true");
      styleForPesudo = styleForPesudo || document.createElement("style");
      if (waveColor && waveColor !== "#ffffff" && waveColor !== "rgb(255, 255, 255)" && isNotGrey(waveColor) && !/rgba\(\d*, \d*, \d*, 0\)/.test(waveColor) && waveColor !== "transparent") {
        if (this.csp && this.csp.nonce) {
          styleForPesudo.nonce = this.csp.nonce;
        }
        extraNode.style.borderColor = waveColor;
        styleForPesudo.innerHTML = "\n        [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {\n          --antd-wave-shadow-color: ".concat(waveColor, ";\n        }");
        if (!document.body.contains(styleForPesudo)) {
          document.body.appendChild(styleForPesudo);
        }
      }
      if (insertExtraNode) {
        node.appendChild(extraNode);
      }
      Event$1.addStartEventListener(node, this.onTransitionStart);
      Event$1.addEndEventListener(node, this.onTransitionEnd);
    },
    onTransitionStart: function onTransitionStart(e) {
      if (this._.isUnmounted)
        return;
      var node = findDOMNode(this);
      if (!e || e.target !== node) {
        return;
      }
      if (!this.animationStart) {
        this.resetEffect(node);
      }
    },
    onTransitionEnd: function onTransitionEnd(e) {
      if (!e || e.animationName !== "fadeEffect") {
        return;
      }
      this.resetEffect(e.target);
    },
    getAttributeName: function getAttributeName() {
      var insertExtraNode = this.$props.insertExtraNode;
      return insertExtraNode ? "ant-click-animating" : "ant-click-animating-without-extra-node";
    },
    bindAnimationEvent: function bindAnimationEvent(node) {
      var _this2 = this;
      if (!node || !node.getAttribute || node.getAttribute("disabled") || node.className.indexOf("disabled") >= 0) {
        return;
      }
      var onClick7 = function onClick8(e) {
        if (e.target.tagName === "INPUT" || isHidden$1(e.target)) {
          return;
        }
        _this2.resetEffect(node);
        var waveColor = getComputedStyle(node).getPropertyValue("border-top-color") || getComputedStyle(node).getPropertyValue("border-color") || getComputedStyle(node).getPropertyValue("background-color");
        _this2.clickWaveTimeoutId = window.setTimeout(function() {
          return _this2.onClick(node, waveColor);
        }, 0);
        wrapperRaf.cancel(_this2.animationStartId);
        _this2.animationStart = true;
        _this2.animationStartId = wrapperRaf(function() {
          _this2.animationStart = false;
        }, 10);
      };
      node.addEventListener("click", onClick7, true);
      return {
        cancel: function cancel2() {
          node.removeEventListener("click", onClick7, true);
        }
      };
    },
    resetEffect: function resetEffect(node) {
      if (!node || node === this.extraNode || !(node instanceof Element)) {
        return;
      }
      var insertExtraNode = this.$props.insertExtraNode;
      var attributeName = this.getAttributeName();
      node.setAttribute(attributeName, "false");
      if (styleForPesudo) {
        styleForPesudo.innerHTML = "";
      }
      if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
        node.removeChild(this.extraNode);
      }
      Event$1.removeStartEventListener(node, this.onTransitionStart);
      Event$1.removeEndEventListener(node, this.onTransitionEnd);
    }
  },
  render: function render16() {
    var _a, _b;
    var csp = this.configProvider.csp;
    if (csp) {
      this.csp = csp;
    }
    return (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)[0];
  }
});
var ButtonTypes = tuple("default", "primary", "ghost", "dashed", "link", "text");
var ButtonShapes = tuple("circle", "round");
var ButtonHTMLTypes = tuple("submit", "button", "reset");
function convertLegacyProps(type2) {
  if (type2 === "danger") {
    return {
      danger: true
    };
  }
  return {
    type: type2
  };
}
var buttonProps = function buttonProps2() {
  return {
    prefixCls: PropsTypes.string,
    type: PropsTypes.oneOf(ButtonTypes),
    htmlType: PropsTypes.oneOf(ButtonHTMLTypes).def("button"),
    shape: PropsTypes.oneOf(ButtonShapes),
    size: {
      type: String
    },
    loading: {
      type: [Boolean, Object],
      default: function _default8() {
        return false;
      }
    },
    disabled: PropsTypes.looseBool,
    ghost: PropsTypes.looseBool,
    block: PropsTypes.looseBool,
    danger: PropsTypes.looseBool,
    icon: PropsTypes.VNodeChild,
    href: PropsTypes.string,
    target: PropsTypes.string,
    title: PropsTypes.string,
    onClick: {
      type: Function
    }
  };
};
var buttonTypes = buttonProps;
var devWarning = function(valid, component, message2) {
  warningOnce(valid, "[ant-design-vue: ".concat(component, "] ").concat(message2));
};
var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
var props$2 = buttonTypes();
function isUnborderedButtonType(type2) {
  return type2 === "text" || type2 === "link";
}
var Button$1 = defineComponent({
  name: "AButton",
  inheritAttrs: false,
  __ANT_BUTTON: true,
  props: props$2,
  slots: ["icon"],
  emits: ["click"],
  setup: function setup26(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var _useConfigInject = useConfigInject("btn", props2), prefixCls2 = _useConfigInject.prefixCls, autoInsertSpaceInButton = _useConfigInject.autoInsertSpaceInButton, direction = _useConfigInject.direction;
    var buttonNodeRef = ref(null);
    var delayTimeoutRef = ref(void 0);
    var isNeedInserted = false;
    var innerLoading = ref(false);
    var hasTwoCNChar = ref(false);
    var autoInsertSpace = computed(function() {
      return autoInsertSpaceInButton.value !== false;
    });
    var loadingOrDelay = computed(function() {
      return _typeof(props2.loading) === "object" && props2.loading.delay ? props2.loading.delay || true : !!props2.loading;
    });
    watch(loadingOrDelay, function(val) {
      clearTimeout(delayTimeoutRef.value);
      if (typeof loadingOrDelay.value === "number") {
        delayTimeoutRef.value = window.setTimeout(function() {
          innerLoading.value = val;
        }, loadingOrDelay.value);
      } else {
        innerLoading.value = val;
      }
    }, {
      immediate: true
    });
    var classes4 = computed(function() {
      var _ref2;
      var type2 = props2.type, shape = props2.shape, size = props2.size, ghost = props2.ghost, block = props2.block, danger = props2.danger;
      var pre = prefixCls2.value;
      var sizeCls = "";
      switch (size) {
        case "large":
          sizeCls = "lg";
          break;
        case "small":
          sizeCls = "sm";
          break;
      }
      return _ref2 = {}, _defineProperty(_ref2, "".concat(pre), true), _defineProperty(_ref2, "".concat(pre, "-").concat(type2), type2), _defineProperty(_ref2, "".concat(pre, "-").concat(shape), shape), _defineProperty(_ref2, "".concat(pre, "-").concat(sizeCls), sizeCls), _defineProperty(_ref2, "".concat(pre, "-loading"), innerLoading.value), _defineProperty(_ref2, "".concat(pre, "-background-ghost"), ghost && !isUnborderedButtonType(type2)), _defineProperty(_ref2, "".concat(pre, "-two-chinese-chars"), hasTwoCNChar.value && autoInsertSpace.value), _defineProperty(_ref2, "".concat(pre, "-block"), block), _defineProperty(_ref2, "".concat(pre, "-dangerous"), !!danger), _defineProperty(_ref2, "".concat(pre, "-rtl"), direction.value === "rtl"), _ref2;
    });
    var fixTwoCNChar = function fixTwoCNChar2() {
      var node = buttonNodeRef.value;
      if (!node || autoInsertSpaceInButton.value === false) {
        return;
      }
      var buttonText = node.textContent;
      if (isNeedInserted && isTwoCNChar(buttonText)) {
        if (!hasTwoCNChar.value) {
          hasTwoCNChar.value = true;
        }
      } else if (hasTwoCNChar.value) {
        hasTwoCNChar.value = false;
      }
    };
    var handleClick5 = function handleClick6(event) {
      if (innerLoading.value || props2.disabled) {
        event.preventDefault();
        return;
      }
      emit("click", event);
    };
    var insertSpace = function insertSpace2(child, needInserted) {
      var SPACE = needInserted ? " " : "";
      if (child.type === Text$2) {
        var text = child.children.trim();
        if (isTwoCNChar(text)) {
          text = text.split("").join(SPACE);
        }
        return createVNode("span", null, [text]);
      }
      return child;
    };
    watchEffect(function() {
      devWarning(!(props2.ghost && isUnborderedButtonType(props2.type)), "Button", "`link` or `text` button can't be a `ghost` button.");
    });
    onMounted(fixTwoCNChar);
    onUpdated(fixTwoCNChar);
    onBeforeUnmount(function() {
      delayTimeoutRef.value && clearTimeout(delayTimeoutRef.value);
    });
    return function() {
      var children = flattenChildren(getPropsSlot(slots, props2));
      var icon = getPropsSlot(slots, props2, "icon");
      isNeedInserted = children.length === 1 && !icon && !isUnborderedButtonType(props2.type);
      var type2 = props2.type, htmlType = props2.htmlType, disabled = props2.disabled, href = props2.href, title2 = props2.title, target = props2.target;
      var iconType = innerLoading.value ? "loading" : icon;
      var buttonProps3 = _extends(_extends({}, attrs), {
        title: title2,
        disabled,
        class: [classes4.value, attrs.class, _defineProperty({}, "".concat(prefixCls2.value, "-icon-only"), children.length === 0 && !!iconType)],
        onClick: handleClick5
      });
      var iconNode = innerLoading.value ? createVNode(LoadingOutlined, null, null) : icon;
      var kids = children.map(function(child) {
        return insertSpace(child, isNeedInserted && autoInsertSpace.value);
      });
      if (href !== void 0) {
        return createVNode("a", _objectSpread2(_objectSpread2({}, buttonProps3), {}, {
          "href": href,
          "target": target,
          "ref": buttonNodeRef
        }), [iconNode, kids]);
      }
      var buttonNode = createVNode("button", _objectSpread2(_objectSpread2({}, buttonProps3), {}, {
        "ref": buttonNodeRef,
        "type": htmlType
      }), [iconNode, kids]);
      if (isUnborderedButtonType(type2)) {
        return buttonNode;
      }
      return createVNode(Wave, {
        "ref": "wave"
      }, {
        default: function _default8() {
          return [buttonNode];
        }
      });
    };
  }
});
var buttonGroupProps = {
  prefixCls: PropsTypes.string,
  size: {
    type: String
  }
};
var ButtonGroup$1 = defineComponent({
  name: "AButtonGroup",
  props: buttonGroupProps,
  setup: function setup27(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("btn-group", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var classes4 = computed(function() {
      var _ref2;
      var size = props2.size;
      var sizeCls = "";
      switch (size) {
        case "large":
          sizeCls = "lg";
          break;
        case "small":
          sizeCls = "sm";
          break;
      }
      return _ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2.value), true), _defineProperty(_ref2, "".concat(prefixCls2.value, "-").concat(sizeCls), sizeCls), _defineProperty(_ref2, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _ref2;
    });
    return function() {
      var _a;
      return createVNode("div", {
        "class": classes4.value
      }, [flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots))]);
    };
  }
});
Button$1.Group = ButtonGroup$1;
Button$1.install = function(app) {
  app.component(Button$1.name, Button$1);
  app.component(ButtonGroup$1.name, ButtonGroup$1);
  return app;
};
var __rest$O = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Search$1 = defineComponent({
  name: "AInputSearch",
  inheritAttrs: false,
  props: _extends(_extends({}, inputProps), {
    enterButton: PropsTypes.VNodeChild,
    onSearch: PropsTypes.func
  }),
  setup: function setup28() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      input: null
    };
  },
  methods: {
    saveInput: function saveInput2(node) {
      this.input = node;
    },
    handleChange: function handleChange2(e) {
      this.$emit("update:value", e.target.value);
      if (e && e.target && e.type === "click") {
        this.$emit("search", e.target.value, e);
      }
      this.$emit("change", e);
    },
    handleSearch: function handleSearch(e) {
      if (this.loading || this.disabled) {
        return;
      }
      this.$emit("search", this.input.stateValue, e);
      if (!isMobile$1.tablet) {
        this.input.focus();
      }
    },
    focus: function focus2() {
      this.input.focus();
    },
    blur: function blur2() {
      this.input.blur();
    },
    renderLoading: function renderLoading(prefixCls2) {
      var size = this.$props.size;
      var enterButton = getComponent(this, "enterButton");
      enterButton = enterButton || enterButton === "";
      if (enterButton) {
        return createVNode(Button$1, {
          "class": "".concat(prefixCls2, "-button"),
          "type": "primary",
          "size": size,
          "key": "enterButton"
        }, {
          default: function _default8() {
            return [createVNode(LoadingOutlined, null, null)];
          }
        });
      }
      return createVNode(LoadingOutlined, {
        "class": "".concat(prefixCls2, "-icon"),
        "key": "loadingIcon"
      }, null);
    },
    renderSuffix: function renderSuffix2(prefixCls2) {
      var loading = this.loading;
      var suffix = getComponent(this, "suffix");
      var enterButton = getComponent(this, "enterButton");
      enterButton = enterButton || enterButton === "";
      if (loading && !enterButton) {
        return [suffix, this.renderLoading(prefixCls2)];
      }
      if (enterButton)
        return suffix;
      var icon = createVNode(SearchOutlined, {
        "class": "".concat(prefixCls2, "-icon"),
        "key": "searchIcon",
        "onClick": this.handleSearch
      }, null);
      if (suffix) {
        return [suffix, icon];
      }
      return icon;
    },
    renderAddonAfter: function renderAddonAfter(prefixCls2) {
      var size = this.size, disabled = this.disabled, loading = this.loading;
      var btnClassName = "".concat(prefixCls2, "-button");
      var enterButton = getComponent(this, "enterButton");
      enterButton = enterButton || enterButton === "";
      var addonAfter = getComponent(this, "addonAfter");
      if (loading && enterButton) {
        return [this.renderLoading(prefixCls2), addonAfter];
      }
      if (!enterButton)
        return addonAfter;
      var enterButtonAsElement = Array.isArray(enterButton) ? enterButton[0] : enterButton;
      var button;
      var isAntdButton = enterButtonAsElement.type && isPlainObject(enterButtonAsElement.type) && enterButtonAsElement.type.__ANT_BUTTON;
      if (enterButtonAsElement.tagName === "button" || isAntdButton) {
        button = cloneElement(enterButtonAsElement, _extends(_extends({
          key: "enterButton",
          class: isAntdButton ? btnClassName : ""
        }, isAntdButton ? {
          size
        } : {}), {
          onClick: this.handleSearch
        }));
      } else {
        button = createVNode(Button$1, {
          "class": btnClassName,
          "type": "primary",
          "size": size,
          "disabled": disabled,
          "key": "enterButton",
          "onClick": this.handleSearch
        }, {
          default: function _default8() {
            return [enterButton === true || enterButton === "" ? createVNode(SearchOutlined, null, null) : enterButton];
          }
        });
      }
      if (addonAfter) {
        return [button, addonAfter];
      }
      return button;
    }
  },
  render: function render17() {
    var _a = _extends(_extends({}, getOptionProps(this)), this.$attrs), customizePrefixCls = _a.prefixCls, customizeInputPrefixCls = _a.inputPrefixCls, size = _a.size, className = _a.class, restProps = __rest$O(_a, ["prefixCls", "inputPrefixCls", "size", "class"]);
    delete restProps.onSearch;
    delete restProps.loading;
    delete restProps.enterButton;
    delete restProps.addonBefore;
    delete restProps["onUpdate:value"];
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input-search", customizePrefixCls);
    var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
    var enterButton = getComponent(this, "enterButton");
    var addonBefore = getComponent(this, "addonBefore");
    enterButton = enterButton || enterButton === "";
    var inputClassName;
    if (enterButton) {
      var _classNames;
      inputClassName = classNames(prefixCls2, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-enter-button"), !!enterButton), _defineProperty(_classNames, "".concat(prefixCls2, "-").concat(size), !!size), _classNames));
    } else {
      inputClassName = classNames(prefixCls2, className);
    }
    var inputProps2 = _extends(_extends({}, restProps), {
      prefixCls: inputPrefixCls,
      size,
      suffix: this.renderSuffix(prefixCls2),
      prefix: getComponent(this, "prefix"),
      addonAfter: this.renderAddonAfter(prefixCls2),
      addonBefore,
      class: inputClassName,
      onPressEnter: this.handleSearch,
      onChange: this.handleChange
    });
    return createVNode(Input, _objectSpread2(_objectSpread2({}, inputProps2), {}, {
      "ref": this.saveInput
    }), null);
  }
});
var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
var SIZING_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
var computedStyleCache = {};
var hiddenTextarea;
function calculateNodeStyling(node) {
  var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var nodeRef = node.getAttribute("id") || node.getAttribute("data-reactid") || node.getAttribute("name");
  if (useCache && computedStyleCache[nodeRef]) {
    return computedStyleCache[nodeRef];
  }
  var style3 = window.getComputedStyle(node);
  var boxSizing = style3.getPropertyValue("box-sizing") || style3.getPropertyValue("-moz-box-sizing") || style3.getPropertyValue("-webkit-box-sizing");
  var paddingSize = parseFloat(style3.getPropertyValue("padding-bottom")) + parseFloat(style3.getPropertyValue("padding-top"));
  var borderSize = parseFloat(style3.getPropertyValue("border-bottom-width")) + parseFloat(style3.getPropertyValue("border-top-width"));
  var sizingStyle = SIZING_STYLE.map(function(name2) {
    return "".concat(name2, ":").concat(style3.getPropertyValue(name2));
  }).join(";");
  var nodeInfo = {
    sizingStyle,
    paddingSize,
    borderSize,
    boxSizing
  };
  if (useCache && nodeRef) {
    computedStyleCache[nodeRef] = nodeInfo;
  }
  return nodeInfo;
}
function calculateNodeHeight(uiTextNode) {
  var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var minRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
  var maxRows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  if (uiTextNode.getAttribute("wrap")) {
    hiddenTextarea.setAttribute("wrap", uiTextNode.getAttribute("wrap"));
  } else {
    hiddenTextarea.removeAttribute("wrap");
  }
  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
  hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || "";
  var minHeight = Number.MIN_SAFE_INTEGER;
  var maxHeight = Number.MAX_SAFE_INTEGER;
  var height = hiddenTextarea.scrollHeight;
  var overflowY;
  if (boxSizing === "border-box") {
    height += borderSize;
  } else if (boxSizing === "content-box") {
    height -= paddingSize;
  }
  if (minRows !== null || maxRows !== null) {
    hiddenTextarea.value = " ";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    if (minRows !== null) {
      minHeight = singleRowHeight * minRows;
      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }
      height = Math.max(minHeight, height);
    }
    if (maxRows !== null) {
      maxHeight = singleRowHeight * maxRows;
      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }
      overflowY = height > maxHeight ? "" : "hidden";
      height = Math.min(maxHeight, height);
    }
  }
  return {
    height: "".concat(height, "px"),
    minHeight: "".concat(minHeight, "px"),
    maxHeight: "".concat(maxHeight, "px"),
    overflowY,
    resize: "none"
  };
}
var RESIZE_STATUS_NONE = 0;
var RESIZE_STATUS_RESIZING = 1;
var RESIZE_STATUS_RESIZED = 2;
var TextAreaProps$1 = _extends(_extends({}, inputProps), {
  autosize: {
    type: [Boolean, Object],
    default: void 0
  },
  autoSize: {
    type: [Boolean, Object],
    default: void 0
  },
  onResize: PropsTypes.func
});
var ResizableTextArea = defineComponent({
  name: "ResizableTextArea",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: TextAreaProps$1,
  setup: function setup29() {
    return {
      nextFrameActionId: void 0,
      textArea: null,
      resizeFrameId: void 0
    };
  },
  data: function data5() {
    return {
      textareaStyles: {},
      resizeStatus: RESIZE_STATUS_NONE
    };
  },
  watch: {
    value: function value2() {
      var _this = this;
      nextTick(function() {
        _this.resizeTextarea();
      });
    }
  },
  mounted: function mounted7() {
    this.resizeTextarea();
  },
  beforeUnmount: function beforeUnmount6() {
    wrapperRaf.cancel(this.nextFrameActionId);
    wrapperRaf.cancel(this.resizeFrameId);
  },
  methods: {
    saveTextArea: function saveTextArea(textArea) {
      this.textArea = textArea;
    },
    handleResize: function handleResize(size) {
      var resizeStatus = this.$data.resizeStatus;
      if (resizeStatus !== RESIZE_STATUS_NONE) {
        return;
      }
      this.$emit("resize", size);
    },
    resizeOnNextFrame: function resizeOnNextFrame() {
      wrapperRaf.cancel(this.nextFrameActionId);
      this.nextFrameActionId = wrapperRaf(this.resizeTextarea);
    },
    resizeTextarea: function resizeTextarea() {
      var _this2 = this;
      var autoSize = this.$props.autoSize || this.$props.autosize;
      if (!autoSize || !this.textArea) {
        return;
      }
      var minRows = autoSize.minRows, maxRows = autoSize.maxRows;
      var textareaStyles = calculateNodeHeight(this.textArea, false, minRows, maxRows);
      this.setState({
        textareaStyles,
        resizeStatus: RESIZE_STATUS_RESIZING
      }, function() {
        wrapperRaf.cancel(_this2.resizeFrameId);
        _this2.resizeFrameId = wrapperRaf(function() {
          _this2.setState({
            resizeStatus: RESIZE_STATUS_RESIZED
          }, function() {
            _this2.resizeFrameId = wrapperRaf(function() {
              _this2.setState({
                resizeStatus: RESIZE_STATUS_NONE
              });
              _this2.fixFirefoxAutoScroll();
            });
          });
        });
      });
    },
    fixFirefoxAutoScroll: function fixFirefoxAutoScroll() {
      try {
        if (document.activeElement === this.textArea) {
          var currentStart = this.textArea.selectionStart;
          var currentEnd = this.textArea.selectionEnd;
          this.textArea.setSelectionRange(currentStart, currentEnd);
        }
      } catch (e) {
      }
    },
    renderTextArea: function renderTextArea() {
      var _this3 = this;
      var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
      var prefixCls2 = props2.prefixCls, autoSize = props2.autoSize, autosize = props2.autosize, disabled = props2.disabled, className = props2.class;
      var _this$$data = this.$data, textareaStyles = _this$$data.textareaStyles, resizeStatus = _this$$data.resizeStatus;
      warning$1(autosize === void 0, "Input.TextArea", "autosize is deprecated, please use autoSize instead.");
      var otherProps = omit(props2, ["prefixCls", "onPressEnter", "autoSize", "autosize", "defaultValue", "allowClear", "type", "lazy"]);
      var cls = classNames(prefixCls2, className, _defineProperty({}, "".concat(prefixCls2, "-disabled"), disabled));
      if ("value" in otherProps) {
        otherProps.value = otherProps.value || "";
      }
      var style3 = _extends(_extends(_extends({}, props2.style), textareaStyles), resizeStatus === RESIZE_STATUS_RESIZING ? {
        overflowX: "hidden",
        overflowY: "hidden"
      } : null);
      var textareaProps = _extends(_extends({}, otherProps), {
        style: style3,
        class: cls
      });
      if (!textareaProps.autofocus) {
        delete textareaProps.autofocus;
      }
      return createVNode(ResizeObserver, {
        "onResize": this.handleResize,
        "disabled": !(autoSize || autosize)
      }, {
        default: function _default8() {
          return [withDirectives(createVNode("textarea", _objectSpread2(_objectSpread2({}, textareaProps), {}, {
            "ref": _this3.saveTextArea
          }), null), [[antInput$1]])];
        }
      });
    }
  },
  render: function render18() {
    return this.renderTextArea();
  }
});
var ResizableTextArea$1 = ResizableTextArea;
var TextAreaProps = _extends(_extends({}, inputProps), {
  autosize: withUndefined(PropsTypes.oneOfType([Object, Boolean])),
  autoSize: withUndefined(PropsTypes.oneOfType([Object, Boolean])),
  showCount: PropsTypes.looseBool,
  onCompositionstart: PropsTypes.func,
  onCompositionend: PropsTypes.func
});
var TextArea = defineComponent({
  name: "ATextarea",
  inheritAttrs: false,
  props: _extends({}, TextAreaProps),
  setup: function setup30() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      resizableTextArea: null,
      clearableInput: null
    };
  },
  data: function data6() {
    var value26 = typeof this.value === "undefined" ? this.defaultValue : this.value;
    return {
      stateValue: typeof value26 === "undefined" ? "" : value26
    };
  },
  watch: {
    value: function value3(val) {
      this.stateValue = val;
    }
  },
  mounted: function mounted8() {
    nextTick(function() {
    });
  },
  methods: {
    setValue: function setValue2(value26, callback) {
      if (!hasProp(this, "value")) {
        this.stateValue = value26;
      } else {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    handleKeyDown: function handleKeyDown2(e) {
      if (e.keyCode === 13) {
        this.$emit("pressEnter", e);
      }
      this.$emit("keydown", e);
    },
    triggerChange: function triggerChange2(e) {
      this.$emit("update:value", e.target.value);
      this.$emit("change", e);
      this.$emit("input", e);
    },
    handleChange: function handleChange3(e) {
      var _this2 = this;
      var _e$target = e.target, value26 = _e$target.value, composing = _e$target.composing, isComposing = _e$target.isComposing;
      if ((isComposing || composing) && this.lazy || this.stateValue === value26)
        return;
      this.setValue(e.target.value, function() {
        var _a;
        (_a = _this2.resizableTextArea) === null || _a === void 0 ? void 0 : _a.resizeTextarea();
      });
      resolveOnChange(this.resizableTextArea.textArea, e, this.triggerChange);
    },
    focus: function focus3() {
      this.resizableTextArea.textArea.focus();
    },
    blur: function blur3() {
      this.resizableTextArea.textArea.blur();
    },
    saveTextArea: function saveTextArea2(resizableTextArea) {
      this.resizableTextArea = resizableTextArea;
    },
    saveClearableInput: function saveClearableInput2(clearableInput) {
      this.clearableInput = clearableInput;
    },
    handleReset: function handleReset2(e) {
      var _this3 = this;
      this.setValue("", function() {
        _this3.resizableTextArea.renderTextArea();
        _this3.focus();
      });
      resolveOnChange(this.resizableTextArea.textArea, e, this.triggerChange);
    },
    renderTextArea: function renderTextArea2(prefixCls2) {
      var props2 = getOptionProps(this);
      var _this$$attrs = this.$attrs, style3 = _this$$attrs.style, customClass = _this$$attrs.class;
      var resizeProps = _extends(_extends(_extends({}, props2), this.$attrs), {
        style: !props2.showCount && style3,
        class: !props2.showCount && customClass,
        showCount: null,
        prefixCls: prefixCls2,
        onInput: this.handleChange,
        onChange: this.handleChange,
        onKeydown: this.handleKeyDown
      });
      return createVNode(ResizableTextArea$1, _objectSpread2(_objectSpread2({}, resizeProps), {}, {
        "ref": this.saveTextArea
      }), null);
    }
  },
  render: function render19() {
    var stateValue = this.stateValue, customizePrefixCls = this.prefixCls, maxlength = this.maxlength, showCount = this.showCount;
    var _this$$attrs2 = this.$attrs, style3 = _this$$attrs2.style, customClass = _this$$attrs2.class;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input", customizePrefixCls);
    var value26 = fixControlledValue(stateValue);
    var hasMaxlength = Number(maxlength) > 0;
    value26 = hasMaxlength ? value26.slice(0, maxlength) : value26;
    var props2 = _extends(_extends(_extends({}, getOptionProps(this)), this.$attrs), {
      prefixCls: prefixCls2,
      inputType: "text",
      element: this.renderTextArea(prefixCls2),
      handleReset: this.handleReset
    });
    var textareaNode = createVNode(ClearableLabeledInput$1, _objectSpread2(_objectSpread2({}, props2), {}, {
      "value": value26,
      "ref": this.saveClearableInput
    }), null);
    if (showCount) {
      var valueLength = _toConsumableArray(value26).length;
      var dataCount = "".concat(valueLength).concat(hasMaxlength ? " / ".concat(maxlength) : "");
      textareaNode = createVNode("div", {
        "class": classNames("".concat(prefixCls2, "-textarea"), "".concat(prefixCls2, "-textarea-show-count"), customClass),
        "style": style3,
        "data-count": dataCount
      }, [textareaNode]);
    }
    return textareaNode;
  }
});
var __rest$N = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var ActionMap = {
  click: "onClick",
  hover: "onMouseover"
};
var Password = defineComponent({
  name: "AInputPassword",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends(_extends({}, inputProps), {
    prefixCls: PropsTypes.string,
    inputPrefixCls: PropsTypes.string,
    action: PropsTypes.string.def("click"),
    visibilityToggle: PropsTypes.looseBool.def(true),
    iconRender: PropsTypes.func.def(function(visible9) {
      return visible9 ? createVNode(EyeOutlined, null, null) : createVNode(EyeInvisibleOutlined, null, null);
    })
  }),
  setup: function setup31() {
    return {
      input: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data7() {
    return {
      visible: false
    };
  },
  methods: {
    saveInput: function saveInput3(node) {
      this.input = node;
    },
    focus: function focus4() {
      this.input.focus();
    },
    blur: function blur4() {
      this.input.blur();
    },
    onVisibleChange: function onVisibleChange() {
      if (this.disabled) {
        return;
      }
      this.setState({
        visible: !this.visible
      });
    },
    getIcon: function getIcon(prefixCls2) {
      var _iconProps;
      var action = this.$props.action;
      var iconTrigger = ActionMap[action] || "";
      var iconRender = this.$slots.iconRender || this.$props.iconRender;
      var icon = iconRender(this.visible);
      var iconProps = (_iconProps = {}, _defineProperty(_iconProps, iconTrigger, this.onVisibleChange), _defineProperty(_iconProps, "onMousedown", function onMousedown2(e) {
        e.preventDefault();
      }), _defineProperty(_iconProps, "onMouseup", function onMouseup(e) {
        e.preventDefault();
      }), _defineProperty(_iconProps, "class", "".concat(prefixCls2, "-icon")), _defineProperty(_iconProps, "key", "passwordIcon"), _iconProps);
      return cloneElement(icon, iconProps);
    }
  },
  render: function render20() {
    var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, customizeInputPrefixCls = _a.inputPrefixCls, size = _a.size;
    _a.suffix;
    _a.action;
    var visibilityToggle = _a.visibilityToggle;
    _a.iconRender;
    var restProps = __rest$N(_a, ["prefixCls", "inputPrefixCls", "size", "suffix", "action", "visibilityToggle", "iconRender"]);
    var className = this.$attrs.class;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
    var prefixCls2 = getPrefixCls2("input-password", customizePrefixCls);
    var suffixIcon = visibilityToggle && this.getIcon(prefixCls2);
    var inputClassName = classNames(prefixCls2, className, _defineProperty({}, "".concat(prefixCls2, "-").concat(size), !!size));
    var inputProps2 = _extends(_extends(_extends(_extends({}, restProps), {
      prefixCls: inputPrefixCls,
      size,
      suffix: suffixIcon,
      prefix: getComponent(this, "prefix"),
      addonAfter: getComponent(this, "addonAfter"),
      addonBefore: getComponent(this, "addonBefore")
    }), this.$attrs), {
      type: this.visible ? "text" : "password",
      class: inputClassName,
      ref: "input"
    });
    return createVNode(Input, _objectSpread2(_objectSpread2({}, inputProps2), {}, {
      "ref": this.saveInput
    }), null);
  }
});
Input.Group = Group$4;
Input.Search = Search$1;
Input.TextArea = TextArea;
Input.Password = Password;
Input.install = function(app) {
  app.component(Input.name, Input);
  app.component(Input.Group.name, Input.Group);
  app.component(Input.Search.name, Input.Search);
  app.component(Input.TextArea.name, Input.TextArea);
  app.component(Input.Password.name, Input.Password);
  return app;
};
var Option$2 = function Option2() {
  return null;
};
Option$2.isSelectOption = true;
Option$2.displayName = "AAutoCompleteOption";
var Option$3 = Option$2;
var OptGroup2 = function OptGroup3() {
  return null;
};
OptGroup2.isSelectOptGroup = true;
OptGroup2.displayName = "AAutoCompleteOptGroup";
var OptGroup$1 = OptGroup2;
function isSelectOptionOrSelectOptGroup(child) {
  var _a, _b;
  return ((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.isSelectOption) || ((_b = child === null || child === void 0 ? void 0 : child.type) === null || _b === void 0 ? void 0 : _b.isSelectOptGroup);
}
var autoCompleteProps = _extends(_extends({}, SelectProps()), {
  dataSource: PropsTypes.array,
  dropdownMenuStyle: PropsTypes.style,
  optionLabelProp: PropsTypes.string,
  dropdownMatchSelectWidth: PropsTypes.looseBool
});
var AutoCompleteOption = Option$3;
var AutoCompleteOptGroup = OptGroup$1;
var AutoComplete = defineComponent({
  name: "AAutoComplete",
  inheritAttrs: false,
  props: _extends(_extends({}, autoCompleteProps), {
    prefixCls: PropsTypes.string,
    showSearch: PropsTypes.looseBool,
    transitionName: PropsTypes.string.def("slide-up"),
    choiceTransitionName: PropsTypes.string.def("zoom"),
    autofocus: PropsTypes.looseBool,
    backfill: PropsTypes.looseBool,
    optionLabelProp: PropsTypes.string.def("children"),
    filterOption: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func]).def(false),
    defaultActiveFirstOption: PropsTypes.looseBool.def(true)
  }),
  emits: ["change", "select", "focus", "blur"],
  Option: Option$3,
  OptGroup: OptGroup$1,
  setup: function setup32(props2, _ref) {
    var slots = _ref.slots;
    warning$1(!(props2.dataSource !== void 0 || "dataSource" in slots), "AutoComplete", "`dataSource` is deprecated, please use `options` instead.");
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      popupRef: null,
      select: null
    };
  },
  created: function created4() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef(ref2) {
      this.popupRef = ref2;
    },
    saveSelect: function saveSelect(node) {
      this.select = node;
    },
    getInputElement: function getInputElement() {
      var children = getSlot(this);
      var element = children.length ? children[0] : createVNode(Input, {
        "lazy": false
      }, null);
      return element;
    },
    focus: function focus5() {
      if (this.select) {
        this.select.focus();
      }
    },
    blur: function blur5() {
      if (this.select) {
        this.select.blur();
      }
    }
  },
  render: function render21() {
    var _cls;
    var size = this.size, customizePrefixCls = this.prefixCls, dataSource3 = this.dataSource;
    var optionChildren;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("select", customizePrefixCls);
    var className = this.$attrs.class;
    var cls = (_cls = {}, _defineProperty(_cls, className, !!className), _defineProperty(_cls, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_cls, "".concat(prefixCls2, "-sm"), size === "small"), _defineProperty(_cls, "".concat(prefixCls2, "-show-search"), true), _defineProperty(_cls, "".concat(prefixCls2, "-auto-complete"), true), _cls);
    var childArray = getSlot(this, "dataSource");
    if ("options" in this.$slots) {
      childArray = getSlot(this, "options");
    }
    if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {
      optionChildren = childArray;
    } else {
      optionChildren = dataSource3 ? dataSource3.map(function(item) {
        if (isValidElement(item)) {
          return item;
        }
        switch (_typeof(item)) {
          case "string":
            return createVNode(Option$3, {
              "key": item,
              "value": item
            }, {
              default: function _default8() {
                return [item];
              }
            });
          case "object":
            return createVNode(Option$3, {
              "key": item.value,
              "value": item.value
            }, {
              default: function _default8() {
                return [item.text];
              }
            });
          default:
            throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.");
        }
      }) : [];
    }
    var selectProps = _extends(_extends(_extends({}, omit(getOptionProps(this), ["dataSource", "optionLabelProp"])), this.$attrs), {
      mode: VcSelect.SECRET_COMBOBOX_MODE_DO_NOT_USE,
      getInputElement: this.getInputElement,
      notFoundContent: getComponent(this, "notFoundContent"),
      class: cls,
      ref: this.saveSelect
    });
    return createVNode(VcSelect, selectProps, {
      default: function _default8() {
        return [optionChildren];
      }
    });
  }
});
AutoComplete.install = function(app) {
  app.component(AutoComplete.name, AutoComplete);
  app.component(AutoComplete.Option.displayName, AutoComplete.Option);
  app.component(AutoComplete.OptGroup.displayName, AutoComplete.OptGroup);
  return app;
};
var AutoComplete$1 = AutoComplete;
function noop$F() {
}
var iconMapFilled = {
  success: CheckCircleFilled,
  info: InfoCircleFilled,
  error: CloseCircleFilled,
  warning: ExclamationCircleFilled
};
var iconMapOutlined = {
  success: CheckCircleOutlined,
  info: InfoCircleOutlined,
  error: CloseCircleOutlined,
  warning: ExclamationCircleOutlined
};
var AlertTypes = tuple("success", "info", "warning", "error");
var alertProps = {
  type: PropsTypes.oneOf(AlertTypes),
  closable: PropsTypes.looseBool,
  closeText: PropsTypes.VNodeChild,
  message: PropsTypes.VNodeChild,
  description: PropsTypes.VNodeChild,
  afterClose: PropsTypes.func.def(noop$F),
  showIcon: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  banner: PropsTypes.looseBool,
  icon: PropsTypes.VNodeChild,
  onClose: PropsTypes.VNodeChild
};
var Alert = defineComponent({
  name: "AAlert",
  inheritAttrs: false,
  props: alertProps,
  emits: ["close"],
  setup: function setup33(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs, expose = _ref.expose;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var closing = ref(false);
    var closed = ref(false);
    var alertNode = ref();
    var handleClose2 = function handleClose3(e) {
      e.preventDefault();
      var dom = alertNode.value;
      dom.style.height = "".concat(dom.offsetHeight, "px");
      dom.style.height = "".concat(dom.offsetHeight, "px");
      closing.value = true;
      emit("close", e);
    };
    var animationEnd = function animationEnd2() {
      var _a;
      closing.value = false;
      closed.value = true;
      (_a = props2.afterClose) === null || _a === void 0 ? void 0 : _a.call(props2);
    };
    expose({
      animationEnd
    });
    return function() {
      var _classNames;
      var customizePrefixCls = props2.prefixCls, banner = props2.banner;
      var getPrefixCls2 = configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("alert", customizePrefixCls);
      var closable = props2.closable, type2 = props2.type, showIcon = props2.showIcon;
      var closeText = getPropsSlot(slots, props2, "closeText");
      var description2 = getPropsSlot(slots, props2, "description");
      var message2 = getPropsSlot(slots, props2, "message");
      var icon = getPropsSlot(slots, props2, "icon");
      showIcon = banner && showIcon === void 0 ? true : showIcon;
      type2 = banner && type2 === void 0 ? "warning" : type2 || "info";
      var IconType = (description2 ? iconMapOutlined : iconMapFilled)[type2] || null;
      if (closeText) {
        closable = true;
      }
      var alertCls = classNames(prefixCls2, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-").concat(type2), true), _defineProperty(_classNames, "".concat(prefixCls2, "-closing"), closing.value), _defineProperty(_classNames, "".concat(prefixCls2, "-with-description"), !!description2), _defineProperty(_classNames, "".concat(prefixCls2, "-no-icon"), !showIcon), _defineProperty(_classNames, "".concat(prefixCls2, "-banner"), !!banner), _defineProperty(_classNames, "".concat(prefixCls2, "-closable"), closable), _classNames));
      var closeIcon = closable ? createVNode("button", {
        "type": "button",
        "onClick": handleClose2,
        "class": "".concat(prefixCls2, "-close-icon"),
        "tabindex": 0
      }, [closeText ? createVNode("span", {
        "class": "".concat(prefixCls2, "-close-text")
      }, [closeText]) : createVNode(CloseOutlined, null, null)]) : null;
      var iconNode = icon && (isValidElement(icon) ? cloneVNode(icon, {
        class: "".concat(prefixCls2, "-icon")
      }) : createVNode("span", {
        "class": "".concat(prefixCls2, "-icon")
      }, [icon])) || createVNode(IconType, {
        "class": "".concat(prefixCls2, "-icon")
      }, null);
      var transitionProps = getTransitionProps("".concat(prefixCls2, "-slide-up"), {
        appear: false,
        onAfterLeave: animationEnd
      });
      return closed.value ? null : createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [withDirectives(createVNode("div", _objectSpread2(_objectSpread2({}, attrs), {}, {
            "class": [attrs.class, alertCls],
            "data-show": !closing.value,
            "ref": alertNode
          }), [showIcon ? iconNode : null, createVNode("div", {
            "class": "".concat(prefixCls2, "-content")
          }, [createVNode("div", {
            "class": "".concat(prefixCls2, "-message")
          }, [message2]), createVNode("div", {
            "class": "".concat(prefixCls2, "-description")
          }, [description2])]), closeIcon]), [[vShow, !closing.value]])];
        }
      });
    };
  }
});
var index$i = withInstall(Alert);
var responsiveArray = ["xxl", "xl", "lg", "md", "sm", "xs"];
var responsiveMap = {
  xs: "(max-width: 575px)",
  sm: "(min-width: 576px)",
  md: "(min-width: 768px)",
  lg: "(min-width: 992px)",
  xl: "(min-width: 1200px)",
  xxl: "(min-width: 1600px)"
};
var subscribers = new Map();
var subUid = -1;
var screens = {};
var responsiveObserve = {
  matchHandlers: {},
  dispatch: function dispatch(pointMap) {
    screens = pointMap;
    subscribers.forEach(function(func) {
      return func(screens);
    });
    return subscribers.size >= 1;
  },
  subscribe: function subscribe(func) {
    if (!subscribers.size)
      this.register();
    subUid += 1;
    subscribers.set(subUid, func);
    func(screens);
    return subUid;
  },
  unsubscribe: function unsubscribe(token) {
    subscribers.delete(token);
    if (!subscribers.size)
      this.unregister();
  },
  unregister: function unregister() {
    var _this = this;
    Object.keys(responsiveMap).forEach(function(screen) {
      var matchMediaQuery = responsiveMap[screen];
      var handler8 = _this.matchHandlers[matchMediaQuery];
      handler8 === null || handler8 === void 0 ? void 0 : handler8.mql.removeListener(handler8 === null || handler8 === void 0 ? void 0 : handler8.listener);
    });
    subscribers.clear();
  },
  register: function register() {
    var _this2 = this;
    Object.keys(responsiveMap).forEach(function(screen) {
      var matchMediaQuery = responsiveMap[screen];
      var listener = function listener2(_ref) {
        var matches = _ref.matches;
        _this2.dispatch(_extends(_extends({}, screens), _defineProperty({}, screen, matches)));
      };
      var mql = window.matchMedia(matchMediaQuery);
      mql.addListener(listener);
      _this2.matchHandlers[matchMediaQuery] = {
        mql,
        listener
      };
      listener(mql);
    });
  }
};
var ResponsiveObserve = responsiveObserve;
function useBreakpoint() {
  var screens2 = ref({});
  var token = null;
  onMounted(function() {
    token = ResponsiveObserve.subscribe(function(supportScreens) {
      screens2.value = supportScreens;
    });
  });
  onUnmounted(function() {
    ResponsiveObserve.unsubscribe(token);
  });
  return screens2;
}
var sizeProvider = Symbol("SizeProvider");
var useProvideSize = function useProvideSize2(props2) {
  var configProvider = inject("configProvider", defaultConfigProvider);
  var size = computed(function() {
    return props2.size || configProvider.componentSize;
  });
  provide(sizeProvider, size);
  return size;
};
var useInjectSize = function useInjectSize2(props2) {
  var size = props2 ? computed(function() {
    return props2.size;
  }) : inject(sizeProvider, computed(function() {
    return "default";
  }));
  return size;
};
var useProvideSize$1 = useProvideSize;
var avatarProps$1 = {
  prefixCls: PropsTypes.string,
  shape: PropsTypes.oneOf(tuple("circle", "square")).def("circle"),
  size: {
    type: [Number, String, Object],
    default: function _default2() {
      return "default";
    }
  },
  src: PropsTypes.string,
  srcset: PropsTypes.string,
  icon: PropsTypes.VNodeChild,
  alt: PropsTypes.string,
  gap: PropsTypes.number,
  draggable: PropsTypes.bool,
  loadError: {
    type: Function
  }
};
var Avatar = defineComponent({
  name: "AAvatar",
  inheritAttrs: false,
  props: avatarProps$1,
  slots: ["icon"],
  setup: function setup34(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var isImgExist = ref(true);
    var isMounted = ref(false);
    var scale = ref(1);
    var avatarChildrenRef = ref(null);
    var avatarNodeRef = ref(null);
    var _useConfigInject = useConfigInject("avatar", props2), prefixCls2 = _useConfigInject.prefixCls;
    var groupSize = useInjectSize();
    var screens2 = useBreakpoint();
    var responsiveSize = computed(function() {
      if (_typeof(props2.size) !== "object") {
        return void 0;
      }
      var currentBreakpoint = responsiveArray.find(function(screen) {
        return screens2.value[screen];
      });
      var currentSize = props2.size[currentBreakpoint];
      return currentSize;
    });
    var responsiveSizeStyle = function responsiveSizeStyle2(hasIcon) {
      if (responsiveSize.value) {
        return {
          width: "".concat(responsiveSize.value, "px"),
          height: "".concat(responsiveSize.value, "px"),
          lineHeight: "".concat(responsiveSize.value, "px"),
          fontSize: "".concat(hasIcon ? responsiveSize.value / 2 : 18, "px")
        };
      }
      return {};
    };
    var setScaleParam = function setScaleParam2() {
      if (!avatarChildrenRef.value || !avatarNodeRef.value) {
        return;
      }
      var childrenWidth = avatarChildrenRef.value.offsetWidth;
      var nodeWidth = avatarNodeRef.value.offsetWidth;
      if (childrenWidth !== 0 && nodeWidth !== 0) {
        var _props$gap = props2.gap, gap = _props$gap === void 0 ? 4 : _props$gap;
        if (gap * 2 < nodeWidth) {
          scale.value = nodeWidth - gap * 2 < childrenWidth ? (nodeWidth - gap * 2) / childrenWidth : 1;
        }
      }
    };
    var handleImgLoadError = function handleImgLoadError2() {
      var loadError = props2.loadError;
      var errorFlag = loadError === null || loadError === void 0 ? void 0 : loadError();
      if (errorFlag !== false) {
        isImgExist.value = false;
      }
    };
    watch(function() {
      return props2.src;
    }, function() {
      nextTick(function() {
        isImgExist.value = true;
        scale.value = 1;
      });
    });
    watch(function() {
      return props2.gap;
    }, function() {
      nextTick(function() {
        setScaleParam();
      });
    });
    onMounted(function() {
      nextTick(function() {
        setScaleParam();
        isMounted.value = true;
      });
    });
    return function() {
      var _classString;
      var _a;
      var shape = props2.shape, customSize = props2.size, src = props2.src, alt = props2.alt, srcset = props2.srcset, draggable = props2.draggable;
      var icon = getPropsSlot(slots, props2, "icon");
      var pre = prefixCls2.value;
      var size = customSize === "default" ? groupSize.value : customSize;
      var classString = (_classString = {}, _defineProperty(_classString, "".concat(attrs.class), !!attrs.class), _defineProperty(_classString, pre, true), _defineProperty(_classString, "".concat(pre, "-lg"), size === "large"), _defineProperty(_classString, "".concat(pre, "-sm"), size === "small"), _defineProperty(_classString, "".concat(pre, "-").concat(shape), shape), _defineProperty(_classString, "".concat(pre, "-image"), src && isImgExist.value), _defineProperty(_classString, "".concat(pre, "-icon"), icon), _classString);
      var sizeStyle = typeof size === "number" ? {
        width: "".concat(size, "px"),
        height: "".concat(size, "px"),
        lineHeight: "".concat(size, "px"),
        fontSize: icon ? "".concat(size / 2, "px") : "18px"
      } : {};
      var children = (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
      var childrenToRender;
      if (src && isImgExist.value) {
        childrenToRender = createVNode("img", {
          "draggable": draggable,
          "src": src,
          "srcset": srcset,
          "onError": handleImgLoadError,
          "alt": alt
        }, null);
      } else if (icon) {
        childrenToRender = icon;
      } else if (isMounted.value || scale.value !== 1) {
        var transformString = "scale(".concat(scale.value, ") translateX(-50%)");
        var childrenStyle = {
          msTransform: transformString,
          WebkitTransform: transformString,
          transform: transformString
        };
        var sizeChildrenStyle = typeof size === "number" ? {
          lineHeight: "".concat(size, "px")
        } : {};
        childrenToRender = createVNode(ResizeObserver, {
          "onResize": setScaleParam
        }, {
          default: function _default8() {
            return [createVNode("span", {
              "class": "".concat(pre, "-string"),
              "ref": avatarChildrenRef,
              "style": _extends(_extends({}, sizeChildrenStyle), childrenStyle)
            }, [children])];
          }
        });
      } else {
        childrenToRender = createVNode("span", {
          "class": "".concat(pre, "-string"),
          "ref": avatarChildrenRef,
          "style": {
            opacity: 0
          }
        }, [children]);
      }
      return createVNode("span", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "ref": avatarNodeRef,
        "class": classString,
        "style": _extends(_extends(_extends({}, sizeStyle), responsiveSizeStyle(!!icon)), attrs.style)
      }), [childrenToRender]);
    };
  }
});
var Avatar$1 = Avatar;
var autoAdjustOverflow$4 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset$4 = [0, 0];
var placements$7 = {
  left: {
    points: ["cr", "cl"],
    overflow: autoAdjustOverflow$4,
    offset: [-4, 0],
    targetOffset: targetOffset$4
  },
  right: {
    points: ["cl", "cr"],
    overflow: autoAdjustOverflow$4,
    offset: [4, 0],
    targetOffset: targetOffset$4
  },
  top: {
    points: ["bc", "tc"],
    overflow: autoAdjustOverflow$4,
    offset: [0, -4],
    targetOffset: targetOffset$4
  },
  bottom: {
    points: ["tc", "bc"],
    overflow: autoAdjustOverflow$4,
    offset: [0, 4],
    targetOffset: targetOffset$4
  },
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$4,
    offset: [0, -4],
    targetOffset: targetOffset$4
  },
  leftTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow$4,
    offset: [-4, 0],
    targetOffset: targetOffset$4
  },
  topRight: {
    points: ["br", "tr"],
    overflow: autoAdjustOverflow$4,
    offset: [0, -4],
    targetOffset: targetOffset$4
  },
  rightTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow$4,
    offset: [4, 0],
    targetOffset: targetOffset$4
  },
  bottomRight: {
    points: ["tr", "br"],
    overflow: autoAdjustOverflow$4,
    offset: [0, 4],
    targetOffset: targetOffset$4
  },
  rightBottom: {
    points: ["bl", "br"],
    overflow: autoAdjustOverflow$4,
    offset: [4, 0],
    targetOffset: targetOffset$4
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$4,
    offset: [0, 4],
    targetOffset: targetOffset$4
  },
  leftBottom: {
    points: ["br", "bl"],
    overflow: autoAdjustOverflow$4,
    offset: [-4, 0],
    targetOffset: targetOffset$4
  }
};
var Content$1 = {
  name: "Content",
  props: {
    prefixCls: PropsTypes.string,
    overlay: PropsTypes.any,
    trigger: PropsTypes.any,
    overlayInnerStyle: PropsTypes.any
  },
  updated: function updated4() {
    var trigger2 = this.trigger;
    if (trigger2) {
      trigger2.forcePopupAlign();
    }
  },
  render: function render22() {
    var overlay = this.overlay, prefixCls2 = this.prefixCls, overlayInnerStyle = this.overlayInnerStyle;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-inner"),
      "role": "tooltip",
      "style": overlayInnerStyle
    }, [typeof overlay === "function" ? overlay() : overlay]);
  }
};
var __rest$M = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$E() {
}
var Tooltip$1 = defineComponent({
  name: "Tooltip",
  inheritAttrs: false,
  props: {
    trigger: PropsTypes.any.def(["hover"]),
    defaultVisible: PropsTypes.looseBool,
    visible: PropsTypes.looseBool,
    placement: PropsTypes.string.def("right"),
    transitionName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    animation: PropsTypes.any,
    afterVisibleChange: PropsTypes.func.def(function() {
    }),
    overlay: PropsTypes.any,
    overlayStyle: PropsTypes.object,
    overlayClassName: PropsTypes.string,
    prefixCls: PropsTypes.string.def("rc-tooltip"),
    mouseEnterDelay: PropsTypes.number.def(0),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    getTooltipContainer: PropsTypes.func,
    destroyTooltipOnHide: PropsTypes.looseBool.def(false),
    align: PropsTypes.object.def(function() {
      return {};
    }),
    arrowContent: PropsTypes.any.def(null),
    tipId: PropsTypes.string,
    builtinPlacements: PropsTypes.object,
    overlayInnerStyle: PropsTypes.style
  },
  methods: {
    getPopupElement: function getPopupElement3() {
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, tipId = _this$$props.tipId, overlayInnerStyle = _this$$props.overlayInnerStyle;
      return [createVNode("div", {
        "class": "".concat(prefixCls2, "-arrow"),
        "key": "arrow"
      }, [getComponent(this, "arrowContent")]), createVNode(Content$1, {
        "key": "content",
        "trigger": this.$refs.trigger,
        "prefixCls": prefixCls2,
        "id": tipId,
        "overlay": getComponent(this, "overlay"),
        "overlayInnerStyle": overlayInnerStyle
      }, null)];
    },
    getPopupDomNode: function getPopupDomNode3() {
      return this.$refs.trigger.getPopupDomNode();
    }
  },
  render: function render23(h2) {
    var _this = this;
    var _a = getOptionProps(this), overlayClassName = _a.overlayClassName, trigger2 = _a.trigger, mouseEnterDelay = _a.mouseEnterDelay, mouseLeaveDelay = _a.mouseLeaveDelay, overlayStyle = _a.overlayStyle, prefixCls2 = _a.prefixCls, afterVisibleChange2 = _a.afterVisibleChange, transitionName2 = _a.transitionName, animation2 = _a.animation, placement2 = _a.placement, align = _a.align, destroyTooltipOnHide = _a.destroyTooltipOnHide, defaultVisible = _a.defaultVisible, getTooltipContainer = _a.getTooltipContainer, restProps = __rest$M(_a, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "afterVisibleChange", "transitionName", "animation", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer"]);
    var extraProps = _extends({}, restProps);
    if (hasProp(this, "visible")) {
      extraProps.popupVisible = this.$props.visible;
    }
    var $attrs = this.$attrs;
    var triggerProps = _extends(_extends(_extends({
      popupClassName: overlayClassName,
      prefixCls: prefixCls2,
      action: trigger2,
      builtinPlacements: placements$7,
      popupPlacement: placement2,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      afterPopupVisibleChange: afterVisibleChange2,
      popupTransitionName: transitionName2,
      popupAnimation: animation2,
      defaultPopupVisible: defaultVisible,
      destroyPopupOnHide: destroyTooltipOnHide,
      mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay
    }, extraProps), $attrs), {
      onPopupVisibleChange: $attrs.onVisibleChange || noop$E,
      onPopupAlign: $attrs.onPopupAlign || noop$E,
      ref: "trigger",
      popup: this.getPopupElement()
    });
    return createVNode(Trigger, triggerProps, {
      default: function _default8() {
        return [getSlot(_this)[0]];
      }
    });
  }
});
var autoAdjustOverflowEnabled = {
  adjustX: 1,
  adjustY: 1
};
var autoAdjustOverflowDisabled = {
  adjustX: 0,
  adjustY: 0
};
var targetOffset$3 = [0, 0];
function getOverflowOptions(autoAdjustOverflow2) {
  if (typeof autoAdjustOverflow2 === "boolean") {
    return autoAdjustOverflow2 ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
  }
  return _extends(_extends({}, autoAdjustOverflowDisabled), autoAdjustOverflow2);
}
function getPlacements(config2) {
  var _config$arrowWidth = config2.arrowWidth, arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth, _config$horizontalArr = config2.horizontalArrowShift, horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr, _config$verticalArrow = config2.verticalArrowShift, verticalArrowShift = _config$verticalArrow === void 0 ? 12 : _config$verticalArrow, _config$autoAdjustOve = config2.autoAdjustOverflow, autoAdjustOverflow2 = _config$autoAdjustOve === void 0 ? true : _config$autoAdjustOve;
  var placementMap = {
    left: {
      points: ["cr", "cl"],
      offset: [-4, 0]
    },
    right: {
      points: ["cl", "cr"],
      offset: [4, 0]
    },
    top: {
      points: ["bc", "tc"],
      offset: [0, -4]
    },
    bottom: {
      points: ["tc", "bc"],
      offset: [0, 4]
    },
    topLeft: {
      points: ["bl", "tc"],
      offset: [-(horizontalArrowShift + arrowWidth), -4]
    },
    leftTop: {
      points: ["tr", "cl"],
      offset: [-4, -(verticalArrowShift + arrowWidth)]
    },
    topRight: {
      points: ["br", "tc"],
      offset: [horizontalArrowShift + arrowWidth, -4]
    },
    rightTop: {
      points: ["tl", "cr"],
      offset: [4, -(verticalArrowShift + arrowWidth)]
    },
    bottomRight: {
      points: ["tr", "bc"],
      offset: [horizontalArrowShift + arrowWidth, 4]
    },
    rightBottom: {
      points: ["bl", "cr"],
      offset: [4, verticalArrowShift + arrowWidth]
    },
    bottomLeft: {
      points: ["tl", "bc"],
      offset: [-(horizontalArrowShift + arrowWidth), 4]
    },
    leftBottom: {
      points: ["br", "cl"],
      offset: [-4, verticalArrowShift + arrowWidth]
    }
  };
  Object.keys(placementMap).forEach(function(key2) {
    placementMap[key2] = config2.arrowPointAtCenter ? _extends(_extends({}, placementMap[key2]), {
      overflow: getOverflowOptions(autoAdjustOverflow2),
      targetOffset: targetOffset$3
    }) : _extends(_extends({}, placements$7[key2]), {
      overflow: getOverflowOptions(autoAdjustOverflow2)
    });
    placementMap[key2].ignoreShake = true;
  });
  return placementMap;
}
var PresetStatusColorTypes = tuple("success", "processing", "error", "default", "warning");
var PresetColorTypes = tuple("pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime");
var triggerType = PropsTypes.oneOf(tuple("hover", "focus", "click", "contextmenu"));
var abstractTooltipProps = function() {
  return {
    trigger: PropsTypes.oneOfType([triggerType, PropsTypes.arrayOf(triggerType)]).def("hover"),
    visible: PropsTypes.looseBool,
    defaultVisible: PropsTypes.looseBool,
    placement: PropsTypes.oneOf(tuple("top", "left", "right", "bottom", "topLeft", "topRight", "bottomLeft", "bottomRight", "leftTop", "leftBottom", "rightTop", "rightBottom")).def("top"),
    color: PropsTypes.string,
    transitionName: PropsTypes.string.def("zoom-big-fast"),
    overlayStyle: PropsTypes.object.def(function() {
      return {};
    }),
    overlayClassName: PropsTypes.string,
    openClassName: PropsTypes.string,
    prefixCls: PropsTypes.string,
    mouseEnterDelay: PropsTypes.number.def(0.1),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    getPopupContainer: PropsTypes.func,
    arrowPointAtCenter: PropsTypes.looseBool.def(false),
    autoAdjustOverflow: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]).def(true),
    destroyTooltipOnHide: PropsTypes.looseBool.def(false),
    align: PropsTypes.object.def(function() {
      return {};
    }),
    builtinPlacements: PropsTypes.object,
    children: PropsTypes.array,
    onVisibleChange: PropsTypes.func,
    "onUpdate:visible": PropsTypes.func
  };
};
var splitObject = function splitObject2(obj, keys) {
  var picked = {};
  var omitted = _extends({}, obj);
  keys.forEach(function(key2) {
    if (obj && key2 in obj) {
      picked[key2] = obj[key2];
      delete omitted[key2];
    }
  });
  return {
    picked,
    omitted
  };
};
var props$1 = abstractTooltipProps();
var PresetColorRegex$1 = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
var tooltipProps$2 = _extends(_extends({}, props$1), {
  title: PropsTypes.VNodeChild
});
var ToolTip = defineComponent({
  name: "ATooltip",
  inheritAttrs: false,
  props: tooltipProps$2,
  emits: ["update:visible", "visibleChange"],
  setup: function setup35() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data8() {
    return {
      sVisible: !!this.$props.visible || !!this.$props.defaultVisible
    };
  },
  watch: {
    visible: function visible(val) {
      this.sVisible = val;
    }
  },
  methods: {
    handleVisibleChange: function handleVisibleChange(visible9) {
      if (!hasProp(this, "visible")) {
        this.sVisible = this.isNoTitle() ? false : visible9;
      }
      if (!this.isNoTitle()) {
        this.$emit("update:visible", visible9);
        this.$emit("visibleChange", visible9);
      }
    },
    getPopupDomNode: function getPopupDomNode4() {
      return this.$refs.tooltip.getPopupDomNode();
    },
    getPlacements: function getPlacements$1() {
      var _this$$props = this.$props, builtinPlacements = _this$$props.builtinPlacements, arrowPointAtCenter = _this$$props.arrowPointAtCenter, autoAdjustOverflow2 = _this$$props.autoAdjustOverflow;
      return builtinPlacements || getPlacements({
        arrowPointAtCenter,
        verticalArrowShift: 8,
        autoAdjustOverflow: autoAdjustOverflow2
      });
    },
    getDisabledCompatibleChildren: function getDisabledCompatibleChildren(ele) {
      if ((_typeof(ele.type) === "object" && (ele.type.__ANT_BUTTON === true || ele.type.__ANT_SWITCH === true || ele.type.__ANT_CHECKBOX === true) || ele.type === "button") && ele.props && (ele.props.disabled || ele.props.disabled === "")) {
        var _splitObject = splitObject(getStyle$1(ele), ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]), picked = _splitObject.picked, omitted = _splitObject.omitted;
        var spanStyle = _extends(_extends({
          display: "inline-block"
        }, picked), {
          cursor: "not-allowed",
          width: ele.props && ele.props.block ? "100%" : null
        });
        var buttonStyle = _extends(_extends({}, omitted), {
          pointerEvents: "none"
        });
        var child = cloneElement(ele, {
          style: buttonStyle
        }, true);
        return createVNode("span", {
          "style": spanStyle
        }, [child]);
      }
      return ele;
    },
    isNoTitle: function isNoTitle() {
      var title2 = getComponent(this, "title");
      return !title2 && title2 !== 0;
    },
    getOverlay: function getOverlay() {
      var title2 = getComponent(this, "title");
      if (title2 === 0) {
        return title2;
      }
      return title2 || "";
    },
    onPopupAlign: function onPopupAlign(domNode, align) {
      var placements2 = this.getPlacements();
      var placement2 = Object.keys(placements2).filter(function(key2) {
        return placements2[key2].points[0] === align.points[0] && placements2[key2].points[1] === align.points[1];
      })[0];
      if (!placement2) {
        return;
      }
      var rect = domNode.getBoundingClientRect();
      var transformOrigin = {
        top: "50%",
        left: "50%"
      };
      if (placement2.indexOf("top") >= 0 || placement2.indexOf("Bottom") >= 0) {
        transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
      } else if (placement2.indexOf("Top") >= 0 || placement2.indexOf("bottom") >= 0) {
        transformOrigin.top = "".concat(-align.offset[1], "px");
      }
      if (placement2.indexOf("left") >= 0 || placement2.indexOf("Right") >= 0) {
        transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
      } else if (placement2.indexOf("right") >= 0 || placement2.indexOf("Left") >= 0) {
        transformOrigin.left = "".concat(-align.offset[0], "px");
      }
      domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
    }
  },
  render: function render24() {
    var _classNames;
    var $props = this.$props, $data = this.$data, $attrs = this.$attrs;
    var customizePrefixCls = $props.prefixCls, openClassName = $props.openClassName, getPopupContainer = $props.getPopupContainer, color = $props.color, overlayClassName = $props.overlayClassName;
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tooltip", customizePrefixCls);
    var children = this.children || filterEmpty(getSlot(this));
    children = children.length === 1 ? children[0] : children;
    var sVisible = $data.sVisible;
    if (!hasProp(this, "visible") && this.isNoTitle()) {
      sVisible = false;
    }
    if (!children) {
      return null;
    }
    var child = this.getDisabledCompatibleChildren(isValidElement(children) ? children : createVNode("span", null, [children]));
    var childCls = classNames((_classNames = {}, _defineProperty(_classNames, openClassName || "".concat(prefixCls2, "-open"), sVisible), _defineProperty(_classNames, child.props && child.props.class, child.props && child.props.class), _classNames));
    var customOverlayClassName = classNames(overlayClassName, _defineProperty({}, "".concat(prefixCls2, "-").concat(color), color && PresetColorRegex$1.test(color)));
    var formattedOverlayInnerStyle;
    var arrowContentStyle;
    if (color && !PresetColorRegex$1.test(color)) {
      formattedOverlayInnerStyle = {
        backgroundColor: color
      };
      arrowContentStyle = {
        backgroundColor: color
      };
    }
    var vcTooltipProps = _extends(_extends(_extends({}, $attrs), $props), {
      prefixCls: prefixCls2,
      getTooltipContainer: getPopupContainer || getContextPopupContainer,
      builtinPlacements: this.getPlacements(),
      overlay: this.getOverlay(),
      visible: sVisible,
      ref: "tooltip",
      overlayClassName: customOverlayClassName,
      overlayInnerStyle: formattedOverlayInnerStyle,
      arrowContent: createVNode("span", {
        "class": "".concat(prefixCls2, "-arrow-content"),
        "style": arrowContentStyle
      }, null),
      onVisibleChange: this.handleVisibleChange,
      onPopupAlign: this.onPopupAlign
    });
    return createVNode(Tooltip$1, vcTooltipProps, {
      default: function _default8() {
        return [sVisible ? cloneElement(child, {
          class: childCls
        }) : child];
      }
    });
  }
});
var Tooltip = withInstall(ToolTip);
var props = abstractTooltipProps();
var Popover = defineComponent({
  name: "APopover",
  props: _extends(_extends({}, props), {
    prefixCls: PropsTypes.string,
    transitionName: PropsTypes.string.def("zoom-big"),
    content: PropsTypes.any,
    title: PropsTypes.any
  }),
  setup: function setup36() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    getPopupDomNode: function getPopupDomNode5() {
      return this.$refs.tooltip.getPopupDomNode();
    }
  },
  render: function render25() {
    var _this = this;
    var title2 = this.title, customizePrefixCls = this.prefixCls, $slots = this.$slots;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("popover", customizePrefixCls);
    var props2 = getOptionProps(this);
    delete props2.title;
    delete props2.content;
    var tooltipProps2 = _extends(_extends({}, props2), {
      prefixCls: prefixCls2,
      ref: "tooltip",
      title: createVNode("div", null, [(title2 || $slots.title) && createVNode("div", {
        "class": "".concat(prefixCls2, "-title")
      }, [getComponent(this, "title")]), createVNode("div", {
        "class": "".concat(prefixCls2, "-inner-content")
      }, [getComponent(this, "content")])])
    });
    return createVNode(Tooltip, tooltipProps2, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
var Popover$1 = withInstall(Popover);
var groupProps = {
  prefixCls: PropsTypes.string,
  maxCount: PropsTypes.number,
  maxStyle: {
    type: Object,
    default: function _default3() {
      return {};
    }
  },
  maxPopoverPlacement: PropsTypes.oneOf(tuple("top", "bottom")).def("top"),
  size: avatarProps$1.size
};
var Group$2 = defineComponent({
  name: "AAvatarGroup",
  inheritAttrs: false,
  props: groupProps,
  setup: function setup37(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("avatar-group", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    useProvideSize$1(props2);
    return function() {
      var _cls;
      var _props$maxPopoverPlac = props2.maxPopoverPlacement, maxPopoverPlacement = _props$maxPopoverPlac === void 0 ? "top" : _props$maxPopoverPlac, maxCount2 = props2.maxCount, maxStyle = props2.maxStyle;
      var cls = (_cls = {}, _defineProperty(_cls, prefixCls2.value, true), _defineProperty(_cls, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty(_cls, "".concat(attrs.class), !!attrs.class), _cls);
      var children = getPropsSlot(slots, props2);
      var childrenWithProps = flattenChildren(children).map(function(child, index2) {
        return cloneElement(child, {
          key: "avatar-key-".concat(index2)
        });
      });
      var numOfChildren = childrenWithProps.length;
      if (maxCount2 && maxCount2 < numOfChildren) {
        var childrenShow = childrenWithProps.slice(0, maxCount2);
        var childrenHidden = childrenWithProps.slice(maxCount2, numOfChildren);
        childrenShow.push(createVNode(Popover$1, {
          "key": "avatar-popover-key",
          "content": childrenHidden,
          "trigger": "hover",
          "placement": maxPopoverPlacement,
          "overlayClassName": "".concat(prefixCls2.value, "-popover")
        }, {
          default: function _default8() {
            return [createVNode(Avatar$1, {
              "style": maxStyle
            }, {
              default: function _default9() {
                return ["+".concat(numOfChildren - maxCount2)];
              }
            })];
          }
        }));
        return createVNode("div", _objectSpread2(_objectSpread2({}, attrs), {}, {
          "class": cls,
          "style": attrs.style
        }), [childrenShow]);
      }
      return createVNode("div", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "class": cls,
        "style": attrs.style
      }), [childrenWithProps]);
    };
  }
});
var Group$3 = Group$2;
Avatar$1.Group = Group$3;
Avatar$1.install = function(app) {
  app.component(Avatar$1.name, Avatar$1);
  app.component(Group$3.name, Group$3);
  return app;
};
var backTopProps = {
  visibilityHeight: PropsTypes.number.def(400),
  duration: PropsTypes.number.def(450),
  target: Function,
  prefixCls: PropsTypes.string,
  onClick: PropsTypes.func
};
var BackTop = defineComponent({
  name: "ABackTop",
  inheritAttrs: false,
  props: backTopProps,
  emits: ["click"],
  setup: function setup38(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var domRef = ref();
    var state = reactive({
      visible: false,
      scrollEvent: null
    });
    var getDefaultTarget2 = function getDefaultTarget3() {
      return domRef.value && domRef.value.ownerDocument ? domRef.value.ownerDocument : window;
    };
    var scrollToTop = function scrollToTop2(e) {
      var _props$target = props2.target, target = _props$target === void 0 ? getDefaultTarget2 : _props$target, duration2 = props2.duration;
      scrollTo$1(0, {
        getContainer: target,
        duration: duration2
      });
      emit("click", e);
    };
    var handleScroll4 = throttleByAnimationFrame(function(e) {
      var visibilityHeight = props2.visibilityHeight;
      var scrollTop = getScroll$2(e.target, true);
      state.visible = scrollTop > visibilityHeight;
    });
    var bindScrollEvent = function bindScrollEvent2() {
      var target = props2.target;
      var getTarget = target || getDefaultTarget2;
      var container = getTarget();
      state.scrollEvent = addEventListenerWrap(container, "scroll", function(e) {
        handleScroll4(e);
      });
      handleScroll4({
        target: container
      });
    };
    var scrollRemove = function scrollRemove2() {
      if (state.scrollEvent) {
        state.scrollEvent.remove();
      }
      handleScroll4.cancel();
    };
    watch(function() {
      return props2.target;
    }, function() {
      scrollRemove();
      nextTick(function() {
        bindScrollEvent();
      });
    });
    onMounted(function() {
      nextTick(function() {
        bindScrollEvent();
      });
    });
    onActivated(function() {
      nextTick(function() {
        bindScrollEvent();
      });
    });
    onDeactivated(function() {
      scrollRemove();
    });
    onBeforeUnmount(function() {
      scrollRemove();
    });
    var prefixCls2 = computed(function() {
      return configProvider.getPrefixCls("back-top", props2.prefixCls);
    });
    return function() {
      var _class;
      var _a;
      var defaultElement = createVNode("div", {
        "class": "".concat(prefixCls2.value, "-content")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2.value, "-icon")
      }, [createVNode(VerticalAlignTopOutlined, null, null)])]);
      var divProps = _extends(_extends({}, attrs), {
        onClick: scrollToTop,
        class: (_class = {}, _defineProperty(_class, "".concat(prefixCls2.value), true), _defineProperty(_class, "".concat(attrs.class), attrs.class), _defineProperty(_class, "".concat(prefixCls2.value, "-rtl"), configProvider.direction === "rtl"), _class)
      });
      var backTopBtn = state.visible ? createVNode("div", _objectSpread2(_objectSpread2({}, divProps), {}, {
        "ref": domRef
      }), [((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || defaultElement]) : null;
      var transitionProps = getTransitionProps("fade");
      return createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [backTopBtn];
        }
      });
    };
  }
});
var index$h = withInstall(BackTop);
function UnitNumber(_ref) {
  var prefixCls2 = _ref.prefixCls, value26 = _ref.value, current2 = _ref.current, _ref$offset = _ref.offset, offset2 = _ref$offset === void 0 ? 0 : _ref$offset;
  var style3;
  if (offset2) {
    style3 = {
      position: "absolute",
      top: "".concat(offset2, "00%"),
      left: 0
    };
  }
  return createVNode("p", {
    "style": style3,
    "class": classNames("".concat(prefixCls2, "-only-unit"), {
      current: current2
    })
  }, [value26]);
}
function getOffset$1(start, end, unit) {
  var index2 = start;
  var offset2 = 0;
  while ((index2 + 10) % 10 !== end) {
    index2 += unit;
    offset2 += unit;
  }
  return offset2;
}
var SingleNumber = defineComponent({
  name: "SingleNumber",
  props: {
    prefixCls: String,
    value: String,
    count: Number
  },
  setup: function setup39(props2) {
    var originValue = computed(function() {
      return Number(props2.value);
    });
    var originCount = computed(function() {
      return Math.abs(props2.count);
    });
    var state = reactive({
      prevValue: originValue.value,
      prevCount: originCount.value
    });
    var onTransitionEnd2 = function onTransitionEnd3() {
      state.prevValue = originValue.value;
      state.prevCount = originCount.value;
    };
    var timeout = ref();
    watch(originValue, function() {
      clearTimeout(timeout.value);
      timeout.value = setTimeout(function() {
        onTransitionEnd2();
      }, 1e3);
    }, {
      flush: "post"
    });
    onUnmounted(function() {
      clearTimeout(timeout.value);
    });
    return function() {
      var unitNodes;
      var offsetStyle = {};
      var value26 = originValue.value;
      if (state.prevValue === value26 || Number.isNaN(value26) || Number.isNaN(state.prevValue)) {
        unitNodes = [UnitNumber(_extends(_extends({}, props2), {
          current: true
        }))];
        offsetStyle = {
          transition: "none"
        };
      } else {
        unitNodes = [];
        var end = value26 + 10;
        var unitNumberList = [];
        for (var index2 = value26; index2 <= end; index2 += 1) {
          unitNumberList.push(index2);
        }
        var prevIndex = unitNumberList.findIndex(function(n) {
          return n % 10 === state.prevValue;
        });
        unitNodes = unitNumberList.map(function(n, index3) {
          var singleUnit = n % 10;
          return UnitNumber(_extends(_extends({}, props2), {
            value: singleUnit,
            offset: index3 - prevIndex,
            current: index3 === prevIndex
          }));
        });
        var unit = state.prevCount < originCount.value ? 1 : -1;
        offsetStyle = {
          transform: "translateY(".concat(-getOffset$1(state.prevValue, value26, unit), "00%)")
        };
      }
      return createVNode("span", {
        "class": "".concat(props2.prefixCls, "-only"),
        "style": offsetStyle,
        "onTransitionend": function onTransitionend() {
          return onTransitionEnd2();
        }
      }, [unitNodes]);
    };
  }
});
var __rest$L = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var scrollNumberProps = {
  prefixCls: PropsTypes.string,
  count: PropsTypes.any,
  component: PropsTypes.string,
  title: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string, null]),
  show: Boolean
};
var ScrollNumber = defineComponent({
  name: "ScrollNumber",
  inheritAttrs: false,
  props: scrollNumberProps,
  setup: function setup40(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots;
    var _useConfigInject = useConfigInject("scroll-number", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      var _b = _extends(_extends({}, props2), attrs);
      _b.prefixCls;
      var count = _b.count, title2 = _b.title;
      _b.show;
      var _b$component = _b.component, Tag2 = _b$component === void 0 ? "sup" : _b$component, className = _b.class, style3 = _b.style, restProps = __rest$L(_b, ["prefixCls", "count", "title", "show", "component", "class", "style"]);
      var newProps = _extends(_extends({}, restProps), {
        style: style3,
        "data-show": props2.show,
        class: classNames(prefixCls2.value, className),
        title: title2
      });
      var numberNodes = count;
      if (count && Number(count) % 1 === 0) {
        var numberList = String(count).split("");
        numberNodes = numberList.map(function(num, i) {
          return createVNode(SingleNumber, {
            "prefixCls": prefixCls2.value,
            "count": Number(count),
            "value": num,
            "key": numberList.length - i
          }, null);
        });
      }
      if (style3 && style3.borderColor) {
        newProps.style = _extends(_extends({}, style3), {
          boxShadow: "0 0 0 1px ".concat(style3.borderColor, " inset")
        });
      }
      var children = filterEmpty((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      if (children && children.length) {
        return cloneElement(children, {
          class: classNames("".concat(prefixCls2.value, "-custom-component"))
        }, false);
      }
      return createVNode(Tag2, newProps, {
        default: function _default8() {
          return [numberNodes];
        }
      });
    };
  }
});
function isPresetColor(color) {
  return PresetColorTypes.indexOf(color) !== -1;
}
var __rest$K = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var ribbonProps = {
  prefix: PropsTypes.string,
  color: {
    type: String
  },
  text: PropsTypes.any,
  placement: PropsTypes.oneOf(tuple("start", "end")).def("end")
};
var Ribbon = defineComponent({
  name: "ABadgeRibbon",
  inheritAttrs: false,
  props: ribbonProps,
  slots: ["text"],
  setup: function setup41(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots;
    var _useConfigInject = useConfigInject("ribbon", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var colorInPreset = computed(function() {
      return isPresetColor(props2.color);
    });
    var ribbonCls = computed(function() {
      var _ref2;
      return [prefixCls2.value, "".concat(prefixCls2.value, "-placement-").concat(props2.placement), (_ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty(_ref2, "".concat(prefixCls2.value, "-color-").concat(props2.color), colorInPreset.value), _ref2)];
    });
    return function() {
      var _a, _b;
      var className = attrs.class, style3 = attrs.style, restAttrs = __rest$K(attrs, ["class", "style"]);
      var colorStyle = {};
      var cornerColorStyle = {};
      if (props2.color && !colorInPreset.value) {
        colorStyle.background = props2.color;
        cornerColorStyle.color = props2.color;
      }
      return createVNode("div", _objectSpread2({
        "class": "".concat(prefixCls2.value, "-wrapper")
      }, restAttrs), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots), createVNode("div", {
        "class": [ribbonCls.value, className],
        "style": _extends(_extends({}, colorStyle), style3)
      }, [createVNode("span", {
        "class": "".concat(prefixCls2.value, "-text")
      }, [props2.text || ((_b = slots.text) === null || _b === void 0 ? void 0 : _b.call(slots))]), createVNode("div", {
        "class": "".concat(prefixCls2.value, "-corner"),
        "style": cornerColorStyle
      }, null)])]);
    };
  }
});
var isNumeric$1 = function isNumeric(value26) {
  return !isNaN(parseFloat(value26)) && isFinite(value26);
};
var isNumeric$2 = isNumeric$1;
var badgeProps = {
  count: PropsTypes.any,
  showZero: PropsTypes.looseBool,
  overflowCount: PropsTypes.number.def(99),
  dot: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  scrollNumberPrefixCls: PropsTypes.string,
  status: PropsTypes.oneOf(tuple("success", "processing", "default", "error", "warning")),
  size: PropsTypes.oneOf(tuple("default", "small")).def("default"),
  color: PropsTypes.string,
  text: PropsTypes.VNodeChild,
  offset: PropsTypes.arrayOf(PropsTypes.oneOfType([String, Number])),
  numberStyle: PropsTypes.style,
  title: PropsTypes.string
};
var Badge = defineComponent({
  name: "ABadge",
  Ribbon,
  inheritAttrs: false,
  props: badgeProps,
  slots: ["text", "count"],
  setup: function setup42(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("badge", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var numberedDisplayCount = computed(function() {
      return props2.count > props2.overflowCount ? "".concat(props2.overflowCount, "+") : props2.count;
    });
    var hasStatus = computed(function() {
      return props2.status !== null && props2.status !== void 0 || props2.color !== null && props2.color !== void 0;
    });
    var isZero = computed(function() {
      return numberedDisplayCount.value === "0" || numberedDisplayCount.value === 0;
    });
    var showAsDot = computed(function() {
      return props2.dot && !isZero.value || hasStatus.value;
    });
    var mergedCount = computed(function() {
      return showAsDot.value ? "" : numberedDisplayCount.value;
    });
    var isHidden3 = computed(function() {
      var isEmpty = mergedCount.value === null || mergedCount.value === void 0 || mergedCount.value === "";
      return (isEmpty || isZero.value && !props2.showZero) && !showAsDot.value;
    });
    var livingCount = ref(props2.count);
    var displayCount = ref(mergedCount.value);
    var isDotRef = ref(showAsDot.value);
    watch([function() {
      return props2.count;
    }, mergedCount, showAsDot], function() {
      if (!isHidden3.value) {
        livingCount.value = props2.count;
        displayCount.value = mergedCount.value;
        isDotRef.value = showAsDot.value;
      }
    }, {
      immediate: true
    });
    var statusCls = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2.value, "-status-dot"), hasStatus.value), _defineProperty(_ref2, "".concat(prefixCls2.value, "-status-").concat(props2.status), !!props2.status), _defineProperty(_ref2, "".concat(prefixCls2.value, "-status-").concat(props2.color), isPresetColor(props2.color)), _ref2;
    });
    var statusStyle = computed(function() {
      if (props2.color && !isPresetColor(props2.color)) {
        return {
          background: props2.color
        };
      } else {
        return {};
      }
    });
    var scrollNumberCls = computed(function() {
      var _ref3;
      return _ref3 = {}, _defineProperty(_ref3, "".concat(prefixCls2.value, "-dot"), isDotRef.value), _defineProperty(_ref3, "".concat(prefixCls2.value, "-count"), !isDotRef.value), _defineProperty(_ref3, "".concat(prefixCls2.value, "-count-sm"), props2.size === "small"), _defineProperty(_ref3, "".concat(prefixCls2.value, "-multiple-words"), !isDotRef.value && displayCount.value && displayCount.value.toString().length > 1), _defineProperty(_ref3, "".concat(prefixCls2.value, "-status-").concat(props2.status), !!props2.status), _defineProperty(_ref3, "".concat(prefixCls2.value, "-status-").concat(props2.color), isPresetColor(props2.color)), _ref3;
    });
    return function() {
      var _classNames;
      var _a, _b;
      var offset2 = props2.offset, title2 = props2.title, color = props2.color;
      var style3 = attrs.style;
      var text = getPropsSlot(slots, props2, "text");
      var pre = prefixCls2.value;
      var count = livingCount.value;
      var children = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      children = children.length ? children : null;
      var visible9 = !!(!isHidden3.value || slots.count);
      var mergedStyle = function() {
        if (!offset2) {
          return _extends({}, style3);
        }
        var offsetStyle = {
          marginTop: isNumeric$2(offset2[1]) ? "".concat(offset2[1], "px") : offset2[1]
        };
        if (direction.value === "rtl") {
          offsetStyle.left = "".concat(parseInt(offset2[0], 10), "px");
        } else {
          offsetStyle.right = "".concat(-parseInt(offset2[0], 10), "px");
        }
        return _extends(_extends({}, offsetStyle), style3);
      }();
      var titleNode = title2 !== null && title2 !== void 0 ? title2 : typeof count === "string" || typeof count === "number" ? count : void 0;
      var statusTextNode = visible9 || !text ? null : createVNode("span", {
        "class": "".concat(pre, "-status-text")
      }, [text]);
      var displayNode = _typeof(count) === "object" || count === void 0 && slots.count ? cloneElement(count !== null && count !== void 0 ? count : (_b = slots.count) === null || _b === void 0 ? void 0 : _b.call(slots), {
        style: mergedStyle
      }, false) : null;
      var badgeClassName = classNames(pre, (_classNames = {}, _defineProperty(_classNames, "".concat(pre, "-status"), hasStatus.value), _defineProperty(_classNames, "".concat(pre, "-not-a-wrapper"), !children), _defineProperty(_classNames, "".concat(pre, "-rtl"), direction.value === "rtl"), _classNames), attrs.class);
      if (!children && hasStatus.value) {
        var statusTextColor = mergedStyle.color;
        return createVNode("span", _objectSpread2(_objectSpread2({}, attrs), {}, {
          "class": badgeClassName,
          "style": mergedStyle
        }), [createVNode("span", {
          "class": statusCls.value,
          "style": statusStyle.value
        }, null), createVNode("span", {
          "style": {
            color: statusTextColor
          },
          "class": "".concat(pre, "-status-text")
        }, [text])]);
      }
      var transitionProps = getTransitionProps(children ? "".concat(pre, "-zoom") : "", {
        appear: false
      });
      var scrollNumberStyle = _extends(_extends({}, mergedStyle), props2.numberStyle);
      if (color && !isPresetColor(color)) {
        scrollNumberStyle = scrollNumberStyle || {};
        scrollNumberStyle.background = color;
      }
      return createVNode("span", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "class": badgeClassName
      }), [children, createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [withDirectives(createVNode(ScrollNumber, {
            "prefixCls": props2.scrollNumberPrefixCls,
            "show": visible9,
            "class": scrollNumberCls.value,
            "count": displayCount.value,
            "title": titleNode,
            "style": scrollNumberStyle,
            "key": "scrollNumber"
          }, {
            default: function _default9() {
              return [displayNode];
            }
          }), [[vShow, visible9]])];
        }
      }), statusTextNode]);
    };
  }
});
Badge.install = function(app) {
  app.component(Badge.name, Badge);
  app.component(Ribbon.name, Ribbon);
  return app;
};
var autoAdjustOverflow$3 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset$2 = [0, 0];
var placements$5 = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$3,
    offset: [0, -4],
    targetOffset: targetOffset$2
  },
  topCenter: {
    points: ["bc", "tc"],
    overflow: autoAdjustOverflow$3,
    offset: [0, -4],
    targetOffset: targetOffset$2
  },
  topRight: {
    points: ["br", "tr"],
    overflow: autoAdjustOverflow$3,
    offset: [0, -4],
    targetOffset: targetOffset$2
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$3,
    offset: [0, 4],
    targetOffset: targetOffset$2
  },
  bottomCenter: {
    points: ["tc", "bc"],
    overflow: autoAdjustOverflow$3,
    offset: [0, 4],
    targetOffset: targetOffset$2
  },
  bottomRight: {
    points: ["tr", "br"],
    overflow: autoAdjustOverflow$3,
    offset: [0, 4],
    targetOffset: targetOffset$2
  }
};
var placements$6 = placements$5;
var __rest$J = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Dropdown$2 = defineComponent({
  mixins: [BaseMixin],
  props: {
    minOverlayWidthMatchTrigger: PropsTypes.looseBool,
    prefixCls: PropsTypes.string.def("rc-dropdown"),
    transitionName: PropsTypes.string,
    overlayClassName: PropsTypes.string.def(""),
    openClassName: PropsTypes.string,
    animation: PropsTypes.any,
    align: PropsTypes.object,
    overlayStyle: PropsTypes.object.def(function() {
      return {};
    }),
    placement: PropsTypes.string.def("bottomLeft"),
    overlay: PropsTypes.any,
    trigger: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string)]).def("hover"),
    alignPoint: PropsTypes.looseBool,
    showAction: PropsTypes.array,
    hideAction: PropsTypes.array,
    getPopupContainer: PropsTypes.func,
    visible: PropsTypes.looseBool,
    defaultVisible: PropsTypes.looseBool.def(false),
    mouseEnterDelay: PropsTypes.number.def(0.15),
    mouseLeaveDelay: PropsTypes.number.def(0.1)
  },
  data: function data9() {
    var sVisible = this.defaultVisible;
    if (hasProp(this, "visible")) {
      sVisible = this.visible;
    }
    return {
      sVisible
    };
  },
  watch: {
    visible: function visible2(val) {
      if (val !== void 0) {
        this.setState({
          sVisible: val
        });
      }
    }
  },
  methods: {
    onClick: function onClick3(e) {
      var overlayProps = this.getOverlayElement().props;
      if (!hasProp(this, "visible")) {
        this.setState({
          sVisible: false
        });
      }
      this.__emit("overlayClick", e);
      if (overlayProps.onClick) {
        overlayProps.onClick(e);
      }
    },
    onVisibleChange: function onVisibleChange2(visible9) {
      if (!hasProp(this, "visible")) {
        this.setState({
          sVisible: visible9
        });
      }
      this.__emit("update:visible", visible9);
      this.__emit("visibleChange", visible9);
    },
    getMinOverlayWidthMatchTrigger: function getMinOverlayWidthMatchTrigger() {
      var props2 = getOptionProps(this);
      var minOverlayWidthMatchTrigger = props2.minOverlayWidthMatchTrigger, alignPoint2 = props2.alignPoint;
      if ("minOverlayWidthMatchTrigger" in props2) {
        return minOverlayWidthMatchTrigger;
      }
      return !alignPoint2;
    },
    getOverlayElement: function getOverlayElement() {
      var overlay = getComponent(this, "overlay");
      return Array.isArray(overlay) ? overlay[0] : overlay;
    },
    getMenuElement: function getMenuElement() {
      var _this = this;
      var onClick7 = this.onClick, prefixCls2 = this.prefixCls;
      var overlayElement = this.getOverlayElement();
      var extraOverlayProps = {
        prefixCls: "".concat(prefixCls2, "-menu"),
        getPopupContainer: function getPopupContainer() {
          return _this.getPopupDomNode();
        },
        onClick: onClick7
      };
      if (overlayElement && overlayElement.type === Text$2) {
        delete extraOverlayProps.prefixCls;
      }
      return cloneElement(overlayElement, extraOverlayProps);
    },
    getMenuElementOrLambda: function getMenuElementOrLambda() {
      var overlay = this.overlay || this.$slots.overlay;
      if (typeof overlay === "function") {
        return this.getMenuElement;
      }
      return this.getMenuElement();
    },
    getPopupDomNode: function getPopupDomNode6() {
      return this.triggerRef.getPopupDomNode();
    },
    getOpenClassName: function getOpenClassName() {
      var _this$$props = this.$props, openClassName = _this$$props.openClassName, prefixCls2 = _this$$props.prefixCls;
      if (openClassName !== void 0) {
        return openClassName;
      }
      return "".concat(prefixCls2, "-open");
    },
    afterVisibleChange: function afterVisibleChange(visible9) {
      if (visible9 && this.getMinOverlayWidthMatchTrigger()) {
        var overlayNode = this.getPopupDomNode();
        var rootNode = findDOMNode(this);
        if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {
          overlayNode.style.minWidth = "".concat(rootNode.offsetWidth, "px");
          if (this.triggerRef && this.triggerRef._component && this.triggerRef._component.alignInstance) {
            this.triggerRef._component.alignInstance.forceAlign();
          }
        }
      }
    },
    renderChildren: function renderChildren2() {
      var children = getSlot(this);
      var sVisible = this.sVisible;
      return sVisible && children ? cloneElement(children[0], {
        class: this.getOpenClassName()
      }, false) : children;
    },
    saveTrigger: function saveTrigger(node) {
      this.triggerRef = node;
    }
  },
  render: function render26() {
    var _this2 = this;
    var _a = this.$props, prefixCls2 = _a.prefixCls, transitionName2 = _a.transitionName, animation2 = _a.animation, align = _a.align, placement2 = _a.placement, getPopupContainer = _a.getPopupContainer, showAction = _a.showAction, hideAction = _a.hideAction, overlayClassName = _a.overlayClassName, overlayStyle = _a.overlayStyle, trigger2 = _a.trigger, otherProps = __rest$J(_a, ["prefixCls", "transitionName", "animation", "align", "placement", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "trigger"]);
    var triggerHideAction = hideAction;
    if (!triggerHideAction && trigger2.indexOf("contextmenu") !== -1) {
      triggerHideAction = ["click"];
    }
    var triggerProps = _extends(_extends({}, otherProps), {
      prefixCls: prefixCls2,
      popupClassName: overlayClassName,
      popupStyle: overlayStyle,
      builtinPlacements: placements$6,
      action: trigger2,
      showAction,
      hideAction: triggerHideAction || [],
      popupPlacement: placement2,
      popupAlign: align,
      popupTransitionName: transitionName2,
      popupAnimation: animation2,
      popupVisible: this.sVisible,
      afterPopupVisibleChange: this.afterVisibleChange,
      getPopupContainer,
      onPopupVisibleChange: this.onVisibleChange,
      popup: this.getMenuElementOrLambda(),
      ref: this.saveTrigger
    });
    return createVNode(Trigger, triggerProps, {
      default: function _default8() {
        return [_this2.renderChildren()];
      }
    });
  }
});
var getDropdownProps = function() {
  return {
    trigger: {
      type: [Array, String],
      default: "hover"
    },
    overlay: PropsTypes.any,
    visible: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    align: PropsTypes.object,
    getPopupContainer: PropsTypes.func,
    prefixCls: PropsTypes.string,
    transitionName: PropsTypes.string,
    placement: PropsTypes.oneOf(tuple("topLeft", "topCenter", "topRight", "bottomLeft", "bottomCenter", "bottomRight")),
    overlayClassName: PropsTypes.string,
    overlayStyle: PropsTypes.style,
    forceRender: PropsTypes.looseBool,
    mouseEnterDelay: PropsTypes.number,
    mouseLeaveDelay: PropsTypes.number,
    openClassName: PropsTypes.string,
    minOverlayWidthMatchTrigger: PropsTypes.looseBool
  };
};
var __rest$I = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var ButtonTypesProps = buttonTypes();
var DropdownProps = getDropdownProps();
var ButtonGroup = Button$1.Group;
var dropdownButtonProps = _extends(_extends({}, DropdownProps), {
  type: PropsTypes.oneOf(tuple("primary", "ghost", "dashed", "danger", "default")).def("default"),
  size: PropsTypes.oneOf(tuple("small", "large", "default")).def("default"),
  htmlType: ButtonTypesProps.htmlType,
  href: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  placement: DropdownProps.placement.def("bottomRight"),
  icon: PropsTypes.any,
  title: PropsTypes.string,
  onClick: PropsTypes.func,
  onVisibleChange: PropsTypes.func,
  "onUpdate:visible": PropsTypes.func
});
var DropdownButton = defineComponent({
  name: "ADropdownButton",
  inheritAttrs: false,
  props: dropdownButtonProps,
  emits: ["click", "visibleChange", "update:visible"],
  setup: function setup43() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      popupRef: null
    };
  },
  created: function created5() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef2(ref2) {
      this.popupRef = ref2;
    },
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    },
    handleVisibleChange: function handleVisibleChange2(val) {
      this.$emit("update:visible", val);
      this.$emit("visibleChange", val);
    }
  },
  render: function render27() {
    var _this = this;
    var _a = _extends(_extends({}, this.$props), this.$attrs), type2 = _a.type, disabled = _a.disabled;
    _a.onClick;
    var htmlType = _a.htmlType, className = _a.class, customizePrefixCls = _a.prefixCls;
    _a.overlay;
    var trigger2 = _a.trigger, align = _a.align, visible9 = _a.visible;
    _a.onVisibleChange;
    var placement2 = _a.placement, getPopupContainer = _a.getPopupContainer, href = _a.href, title2 = _a.title, restProps = __rest$I(_a, ["type", "disabled", "onClick", "htmlType", "class", "prefixCls", "overlay", "trigger", "align", "visible", "onVisibleChange", "placement", "getPopupContainer", "href", "title"]);
    var icon = getComponent(this, "icon") || createVNode(EllipsisOutlined, null, null);
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("dropdown-button", customizePrefixCls);
    var dropdownProps2 = {
      align,
      disabled,
      trigger: disabled ? [] : trigger2,
      placement: placement2,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      onVisibleChange: this.handleVisibleChange
    };
    if (hasProp(this, "visible")) {
      dropdownProps2.visible = visible9;
    }
    var buttonGroupProps2 = _extends(_extends({}, restProps), {
      class: classNames(prefixCls2, className)
    });
    return createVNode(ButtonGroup, buttonGroupProps2, {
      default: function _default8() {
        return [createVNode(Button$1, {
          "type": type2,
          "disabled": disabled,
          "onClick": _this.handleClick,
          "htmlType": htmlType,
          "href": href,
          "title": title2
        }, {
          default: function _default9() {
            return [getSlot(_this)];
          }
        }), createVNode(Dropdown$1, _objectSpread2(_objectSpread2({}, dropdownProps2), {}, {
          "overlay": getComponent(_this, "overlay")
        }), {
          default: function _default9() {
            return [createVNode(Button$1, {
              "type": type2
            }, {
              default: function _default10() {
                return [icon];
              }
            })];
          }
        })];
      }
    });
  }
});
var dropdownProps = getDropdownProps();
var Dropdown = defineComponent({
  name: "ADropdown",
  inheritAttrs: false,
  props: _extends(_extends({}, dropdownProps), {
    prefixCls: PropsTypes.string,
    mouseEnterDelay: PropsTypes.number.def(0.15),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    placement: dropdownProps.placement.def("bottomLeft"),
    onVisibleChange: PropsTypes.func,
    "onUpdate:visible": PropsTypes.func
  }),
  emits: ["visibleChange", "update:visible"],
  setup: function setup44() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      popupRef: null
    };
  },
  created: function created6() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef3(ref2) {
      this.popupRef = ref2;
    },
    getTransitionName: function getTransitionName2() {
      var _this$$props = this.$props, _this$$props$placemen = _this$$props.placement, placement2 = _this$$props$placemen === void 0 ? "" : _this$$props$placemen, transitionName2 = _this$$props.transitionName;
      if (transitionName2 !== void 0) {
        return transitionName2;
      }
      if (placement2.indexOf("top") >= 0) {
        return "slide-down";
      }
      return "slide-up";
    },
    renderOverlay: function renderOverlay(prefixCls2) {
      var overlay = getComponent(this, "overlay");
      var overlayNode = Array.isArray(overlay) ? overlay[0] : overlay;
      var overlayProps = overlayNode && getPropsData(overlayNode);
      var _ref = overlayProps || {}, _ref$selectable = _ref.selectable, selectable = _ref$selectable === void 0 ? false : _ref$selectable, _ref$focusable = _ref.focusable, focusable = _ref$focusable === void 0 ? true : _ref$focusable;
      var expandIcon = function expandIcon2() {
        return createVNode("span", {
          "class": "".concat(prefixCls2, "-menu-submenu-arrow")
        }, [createVNode(RightOutlined, {
          "class": "".concat(prefixCls2, "-menu-submenu-arrow-icon")
        }, null)]);
      };
      var fixedModeOverlay = isValidElement(overlayNode) ? cloneVNode(overlayNode, {
        mode: "vertical",
        selectable,
        focusable,
        expandIcon
      }) : overlay;
      return fixedModeOverlay;
    },
    handleVisibleChange: function handleVisibleChange3(val) {
      this.$emit("update:visible", val);
      this.$emit("visibleChange", val);
    }
  },
  render: function render28() {
    var _a;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, trigger2 = props2.trigger, disabled = props2.disabled, getPopupContainer = props2.getPopupContainer;
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("dropdown", customizePrefixCls);
    var child = getSlot(this)[0];
    var dropdownTrigger = cloneElement(child, {
      class: classNames((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.class, "".concat(prefixCls2, "-trigger")),
      disabled
    });
    var triggerActions = disabled ? [] : typeof trigger2 === "string" ? [trigger2] : trigger2;
    var alignPoint2;
    if (triggerActions && triggerActions.indexOf("contextmenu") !== -1) {
      alignPoint2 = true;
    }
    var dropdownProps2 = _extends(_extends(_extends({
      alignPoint: alignPoint2
    }, props2), this.$attrs), {
      prefixCls: prefixCls2,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      transitionName: this.getTransitionName(),
      trigger: triggerActions,
      overlay: this.renderOverlay(prefixCls2),
      onVisibleChange: this.handleVisibleChange
    });
    return createVNode(Dropdown$2, dropdownProps2, {
      default: function _default8() {
        return [dropdownTrigger];
      }
    });
  }
});
Dropdown.Button = DropdownButton;
var Dropdown$1 = Dropdown;
var breadcrumbItemProps = {
  prefixCls: PropsTypes.string,
  href: PropsTypes.string,
  separator: PropsTypes.any,
  overlay: PropsTypes.any
};
var BreadcrumbItem = defineComponent({
  name: "ABreadcrumbItem",
  __ANT_BREADCRUMB_ITEM: true,
  props: breadcrumbItemProps,
  slots: ["separator", "overlay"],
  setup: function setup45(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("breadcrumb", props2), prefixCls2 = _useConfigInject.prefixCls;
    var renderBreadcrumbNode = function renderBreadcrumbNode2(breadcrumbItem, prefixCls3) {
      var overlay = getPropsSlot(slots, props2, "overlay");
      if (overlay) {
        return createVNode(Dropdown$1, {
          "overlay": overlay,
          "placement": "bottomCenter"
        }, {
          default: function _default8() {
            return [createVNode("span", {
              "class": "".concat(prefixCls3, "-overlay-link")
            }, [breadcrumbItem, createVNode(DownOutlined, null, null)])];
          }
        });
      }
      return breadcrumbItem;
    };
    return function() {
      var _a;
      var separator = (_a = getPropsSlot(slots, props2, "separator")) !== null && _a !== void 0 ? _a : "/";
      var children = getPropsSlot(slots, props2);
      var link;
      if (props2.href !== void 0) {
        link = createVNode("a", {
          "class": "".concat(prefixCls2.value, "-link")
        }, [children]);
      } else {
        link = createVNode("span", {
          "class": "".concat(prefixCls2.value, "-link")
        }, [children]);
      }
      link = renderBreadcrumbNode(link, prefixCls2.value);
      if (children) {
        return createVNode("span", null, [link, separator && createVNode("span", {
          "class": "".concat(prefixCls2.value, "-separator")
        }, [separator])]);
      }
      return null;
    };
  }
});
function shallowEqual(objA, objB, compare2, compareContext) {
  var ret = compare2 ? compare2.call(compareContext, objA, objB) : void 0;
  if (ret !== void 0) {
    return !!ret;
  }
  if (objA === objB) {
    return true;
  }
  if (_typeof(objA) !== "object" || !objA || _typeof(objB) !== "object" || !objB) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
  for (var idx = 0; idx < keysA.length; idx++) {
    var key2 = keysA[idx];
    if (!bHasOwnProperty(key2)) {
      return false;
    }
    var valueA = objA[key2];
    var valueB = objB[key2];
    ret = compare2 ? compare2.call(compareContext, valueA, valueB, key2) : void 0;
    if (ret === false || ret === void 0 && valueA !== valueB) {
      return false;
    }
  }
  return true;
}
function shallowEqual$1(value26, other, customizer, thisArg) {
  return shallowEqual(toRaw(value26), toRaw(other), customizer, thisArg);
}
var MenuContextKey = Symbol("menuContextKey");
var useProvideMenu = function useProvideMenu2(props2) {
  provide(MenuContextKey, props2);
};
var useInjectMenu = function useInjectMenu2() {
  return inject(MenuContextKey);
};
var MenuFirstLevelContextKey = Symbol("menuFirstLevelContextKey");
var useProvideFirstLevel = function useProvideFirstLevel2(firstLevel) {
  provide(MenuFirstLevelContextKey, firstLevel);
};
var useInjectFirstLevel = function useInjectFirstLevel2() {
  return inject(MenuFirstLevelContextKey, true);
};
var MenuContextProvider = defineComponent({
  name: "MenuContextProvider",
  inheritAttrs: false,
  props: {
    mode: {
      type: String,
      default: void 0
    },
    overflowDisabled: {
      type: Boolean,
      default: void 0
    },
    isRootMenu: {
      type: Boolean,
      default: void 0
    }
  },
  setup: function setup46(props2, _ref) {
    var slots = _ref.slots;
    var menuContext = useInjectMenu();
    var newContext = _extends({}, menuContext);
    if (props2.mode !== void 0) {
      newContext.mode = toRef(props2, "mode");
    }
    if (props2.isRootMenu !== void 0) {
      newContext.isRootMenu = toRef(props2, "isRootMenu");
    }
    if (props2.overflowDisabled !== void 0) {
      newContext.overflowDisabled = toRef(props2, "overflowDisabled");
    }
    useProvideMenu(newContext);
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var useProvideMenu$1 = useProvideMenu;
var SiderCollapsedKey = Symbol("siderCollapsed");
var SiderHookProviderKey = Symbol("siderHookProvider");
var KeyPathContext = Symbol("KeyPathContext");
var useInjectKeyPath = function useInjectKeyPath2() {
  return inject(KeyPathContext, {
    parentEventKeys: computed(function() {
      return [];
    }),
    parentKeys: computed(function() {
      return [];
    }),
    parentInfo: {}
  });
};
var useProvideKeyPath = function useProvideKeyPath2(eventKey, key2, menuInfo) {
  var _useInjectKeyPath = useInjectKeyPath(), parentEventKeys = _useInjectKeyPath.parentEventKeys, parentKeys = _useInjectKeyPath.parentKeys;
  var eventKeys = computed(function() {
    return [].concat(_toConsumableArray(parentEventKeys.value), [eventKey]);
  });
  var keys = computed(function() {
    return [].concat(_toConsumableArray(parentKeys.value), [key2]);
  });
  provide(KeyPathContext, {
    parentEventKeys: eventKeys,
    parentKeys: keys,
    parentInfo: menuInfo
  });
  return keys;
};
var useProvideKeyPath$1 = useProvideKeyPath;
function useDirectionStyle(level2) {
  var _useInjectMenu = useInjectMenu(), mode4 = _useInjectMenu.mode, rtl = _useInjectMenu.rtl, inlineIndent = _useInjectMenu.inlineIndent;
  return computed(function() {
    return mode4.value !== "inline" ? null : rtl.value ? {
      paddingRight: "".concat(level2.value * inlineIndent.value, "px")
    } : {
      paddingLeft: "".concat(level2.value * inlineIndent.value, "px")
    };
  });
}
var indexGuid$2 = 0;
var menuItemProps = {
  role: String,
  disabled: Boolean,
  danger: Boolean,
  title: {
    type: [String, Boolean],
    default: void 0
  },
  icon: PropsTypes.VNodeChild
};
var MenuItem = defineComponent({
  name: "AMenuItem",
  inheritAttrs: false,
  props: menuItemProps,
  emits: ["mouseenter", "mouseleave", "click", "keydown", "focus"],
  slots: ["icon", "title"],
  setup: function setup47(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs;
    var instance = getCurrentInstance();
    var key2 = _typeof(instance.vnode.key) === "symbol" ? String(instance.vnode.key) : instance.vnode.key;
    devWarning(_typeof(instance.vnode.key) !== "symbol", "MenuItem", 'MenuItem `:key="'.concat(String(key2), '"` not support Symbol type'));
    var eventKey = "menu_item_".concat(++indexGuid$2, "_$$_").concat(key2);
    var _useInjectKeyPath = useInjectKeyPath(), parentEventKeys = _useInjectKeyPath.parentEventKeys, parentKeys = _useInjectKeyPath.parentKeys;
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls, activeKeys = _useInjectMenu.activeKeys, disabled = _useInjectMenu.disabled, changeActiveKeys = _useInjectMenu.changeActiveKeys, rtl = _useInjectMenu.rtl, inlineCollapsed = _useInjectMenu.inlineCollapsed, siderCollapsed = _useInjectMenu.siderCollapsed, onItemClick2 = _useInjectMenu.onItemClick, selectedKeys3 = _useInjectMenu.selectedKeys, registerMenuInfo = _useInjectMenu.registerMenuInfo, unRegisterMenuInfo = _useInjectMenu.unRegisterMenuInfo;
    var firstLevel = useInjectFirstLevel();
    var isActive = ref(false);
    var keysPath = computed(function() {
      return [].concat(_toConsumableArray(parentKeys.value), [key2]);
    });
    var menuInfo = {
      eventKey,
      key: key2,
      parentEventKeys,
      parentKeys,
      isLeaf: true
    };
    registerMenuInfo(eventKey, menuInfo);
    onBeforeUnmount(function() {
      unRegisterMenuInfo(eventKey);
    });
    watch(activeKeys, function() {
      isActive.value = !!activeKeys.value.find(function(val) {
        return val === key2;
      });
    }, {
      immediate: true
    });
    var mergedDisabled = computed(function() {
      return disabled.value || props2.disabled;
    });
    var selected = computed(function() {
      return selectedKeys3.value.includes(key2);
    });
    var classNames2 = computed(function() {
      var _ref2;
      var itemCls = "".concat(prefixCls2.value, "-item");
      return _ref2 = {}, _defineProperty(_ref2, "".concat(itemCls), true), _defineProperty(_ref2, "".concat(itemCls, "-danger"), props2.danger), _defineProperty(_ref2, "".concat(itemCls, "-active"), isActive.value), _defineProperty(_ref2, "".concat(itemCls, "-selected"), selected.value), _defineProperty(_ref2, "".concat(itemCls, "-disabled"), mergedDisabled.value), _ref2;
    });
    var getEventInfo = function getEventInfo2(e) {
      return {
        key: key2,
        eventKey,
        keyPath: keysPath.value,
        eventKeyPath: [].concat(_toConsumableArray(parentEventKeys.value), [eventKey]),
        domEvent: e,
        item: _extends(_extends({}, props2), attrs)
      };
    };
    var onInternalClick = function onInternalClick2(e) {
      if (mergedDisabled.value) {
        return;
      }
      var info3 = getEventInfo(e);
      emit("click", e);
      onItemClick2(info3);
    };
    var onMouseEnter4 = function onMouseEnter5(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys(keysPath.value);
        emit("mouseenter", event);
      }
    };
    var onMouseLeave5 = function onMouseLeave6(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys([]);
        emit("mouseleave", event);
      }
    };
    var onInternalKeyDown = function onInternalKeyDown2(e) {
      emit("keydown", e);
      if (e.which === KeyCode$2.ENTER) {
        var info3 = getEventInfo(e);
        emit("click", e);
        onItemClick2(info3);
      }
    };
    var onInternalFocus = function onInternalFocus2(e) {
      changeActiveKeys(keysPath.value);
      emit("focus", e);
    };
    var renderItemChildren = function renderItemChildren2(icon, children) {
      var wrapNode = createVNode("span", {
        "class": "".concat(prefixCls2.value, "-title-content")
      }, [children]);
      if (!icon || isValidElement(children) && children.type === "span") {
        if (children && inlineCollapsed.value && firstLevel && typeof children === "string") {
          return createVNode("div", {
            "class": "".concat(prefixCls2.value, "-inline-collapsed-noicon")
          }, [children.charAt(0)]);
        }
      }
      return wrapNode;
    };
    var directionStyle = useDirectionStyle(computed(function() {
      return keysPath.value.length;
    }));
    return function() {
      var _ref3;
      var _a, _b, _c;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var children = flattenChildren((_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots));
      var childrenLength = children.length;
      var tooltipTitle = title2;
      if (typeof title2 === "undefined") {
        tooltipTitle = firstLevel && childrenLength ? children : "";
      } else if (title2 === false) {
        tooltipTitle = "";
      }
      var tooltipProps2 = {
        title: tooltipTitle
      };
      if (!siderCollapsed.value && !inlineCollapsed.value) {
        tooltipProps2.title = null;
        tooltipProps2.visible = false;
      }
      var optionRoleProps = {};
      if (props2.role === "option") {
        optionRoleProps["aria-selected"] = selected.value;
      }
      var icon = getPropsSlot(slots, props2, "icon");
      return createVNode(Tooltip, _objectSpread2(_objectSpread2({}, tooltipProps2), {}, {
        "placement": rtl.value ? "left" : "right",
        "overlayClassName": "".concat(prefixCls2.value, "-inline-collapsed-tooltip")
      }), {
        default: function _default8() {
          return [createVNode(Overflow$1.Item, _objectSpread2(_objectSpread2(_objectSpread2({
            "component": "li"
          }, attrs), {}, {
            "style": _extends(_extends({}, attrs.style || {}), directionStyle.value),
            "class": [classNames2.value, (_ref3 = {}, _defineProperty(_ref3, "".concat(attrs.class), !!attrs.class), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-only-child"), (icon ? childrenLength + 1 : childrenLength) === 1), _ref3)],
            "role": props2.role || "menuitem",
            "tabindex": props2.disabled ? null : -1,
            "data-menu-id": key2,
            "aria-disabled": props2.disabled
          }, optionRoleProps), {}, {
            "onMouseenter": onMouseEnter4,
            "onMouseleave": onMouseLeave5,
            "onClick": onInternalClick,
            "onKeydown": onInternalKeyDown,
            "onFocus": onInternalFocus,
            "title": typeof title2 === "string" ? title2 : void 0
          }), {
            default: function _default9() {
              return [cloneElement(icon, {
                class: "".concat(prefixCls2.value, "-item-icon")
              }), renderItemChildren(icon, children)];
            }
          })];
        }
      });
    };
  }
});
var autoAdjustOverflow$2 = {
  adjustX: 1,
  adjustY: 1
};
var placements$4 = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, -7]
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, 7]
  },
  leftTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [-4, 0]
  },
  rightTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow$2,
    offset: [4, 0]
  }
};
var placementsRtl = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, -7]
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, 7]
  },
  rightTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [-4, 0]
  },
  leftTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow$2,
    offset: [4, 0]
  }
};
var popupPlacementMap = {
  horizontal: "bottomLeft",
  vertical: "rightTop",
  "vertical-left": "rightTop",
  "vertical-right": "leftTop"
};
var PopupTrigger = defineComponent({
  name: "PopupTrigger",
  inheritAttrs: false,
  props: {
    prefixCls: String,
    mode: String,
    visible: Boolean,
    popupClassName: String,
    popupOffset: Array,
    disabled: Boolean,
    onVisibleChange: Function
  },
  slots: ["popup"],
  emits: ["visibleChange"],
  setup: function setup48(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var innerVisible = ref(false);
    var _useInjectMenu = useInjectMenu(), getPopupContainer = _useInjectMenu.getPopupContainer, rtl = _useInjectMenu.rtl, subMenuOpenDelay = _useInjectMenu.subMenuOpenDelay, subMenuCloseDelay = _useInjectMenu.subMenuCloseDelay, builtinPlacements = _useInjectMenu.builtinPlacements, triggerSubMenuAction = _useInjectMenu.triggerSubMenuAction, isRootMenu = _useInjectMenu.isRootMenu;
    var placement2 = computed(function() {
      return rtl.value ? _extends(_extends({}, placementsRtl), builtinPlacements.value) : _extends(_extends({}, placements$4), builtinPlacements.value);
    });
    var popupPlacement = computed(function() {
      return popupPlacementMap[props2.mode];
    });
    var visibleRef = ref();
    watch(function() {
      return props2.visible;
    }, function(visible9) {
      wrapperRaf.cancel(visibleRef.value);
      visibleRef.value = wrapperRaf(function() {
        innerVisible.value = visible9;
      });
    }, {
      immediate: true
    });
    onBeforeUnmount(function() {
      wrapperRaf.cancel(visibleRef.value);
    });
    var onVisibleChange6 = function onVisibleChange7(visible9) {
      emit("visibleChange", visible9);
    };
    return function() {
      var prefixCls2 = props2.prefixCls, popupClassName = props2.popupClassName, mode4 = props2.mode, popupOffset = props2.popupOffset, disabled = props2.disabled;
      return createVNode(Trigger, {
        "prefixCls": prefixCls2,
        "popupClassName": classNames("".concat(prefixCls2, "-popup"), _defineProperty({}, "".concat(prefixCls2, "-rtl"), rtl.value), popupClassName),
        "stretch": mode4 === "horizontal" ? "minWidth" : null,
        "getPopupContainer": isRootMenu.value ? getPopupContainer.value : function(triggerNode) {
          return triggerNode.parentNode;
        },
        "builtinPlacements": placement2.value,
        "popupPlacement": popupPlacement.value,
        "popupVisible": innerVisible.value,
        "popupAlign": popupOffset && {
          offset: popupOffset
        },
        "action": disabled ? [] : [triggerSubMenuAction.value],
        "mouseEnterDelay": subMenuOpenDelay.value,
        "mouseLeaveDelay": subMenuCloseDelay.value,
        "onPopupVisibleChange": onVisibleChange6,
        "forceRender": true
      }, {
        popup: function popup() {
          var _a;
          return (_a = slots.popup) === null || _a === void 0 ? void 0 : _a.call(slots, {
            visible: innerVisible.value
          });
        },
        default: slots.default
      });
    };
  }
});
var InternalSubMenuList = function InternalSubMenuList2(_props, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var _a;
  var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls, mode4 = _useInjectMenu.mode;
  return createVNode("ul", _objectSpread2(_objectSpread2({}, attrs), {}, {
    "class": classNames(prefixCls2.value, "".concat(prefixCls2.value, "-sub"), "".concat(prefixCls2.value, "-").concat(mode4.value === "inline" ? "inline" : "vertical")),
    "data-menu-list": true
  }), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
};
InternalSubMenuList.displayName = "SubMenuList";
var SubMenuList = InternalSubMenuList;
var InlineSubMenuList = defineComponent({
  name: "InlineSubMenuList",
  inheritAttrs: false,
  props: {
    id: String,
    open: Boolean,
    keyPath: Array
  },
  setup: function setup49(props2, _ref) {
    var slots = _ref.slots;
    var fixedMode = computed(function() {
      return "inline";
    });
    var _useInjectMenu = useInjectMenu(), motion = _useInjectMenu.motion, mode4 = _useInjectMenu.mode, defaultMotions = _useInjectMenu.defaultMotions;
    var sameModeRef = computed(function() {
      return mode4.value === fixedMode.value;
    });
    var destroy3 = ref(!sameModeRef.value);
    var mergedOpen = computed(function() {
      return sameModeRef.value ? props2.open : false;
    });
    watch(mode4, function() {
      if (sameModeRef.value) {
        destroy3.value = false;
      }
    }, {
      flush: "post"
    });
    var style3 = ref({});
    var className = ref("");
    var mergedMotion = computed(function() {
      var _a, _b;
      var m = motion.value || ((_a = defaultMotions.value) === null || _a === void 0 ? void 0 : _a[fixedMode.value]) || ((_b = defaultMotions.value) === null || _b === void 0 ? void 0 : _b.other);
      var res = typeof m === "function" ? m(style3, className) : m;
      return _extends(_extends({}, res), {
        appear: props2.keyPath.length <= 1
      });
    });
    return function() {
      var _a;
      if (destroy3.value) {
        return null;
      }
      return createVNode(MenuContextProvider, {
        "mode": fixedMode.value
      }, {
        default: function _default8() {
          return [createVNode(Transition$1, mergedMotion.value, {
            default: function _default9() {
              return [withDirectives(createVNode(SubMenuList, {
                "id": props2.id,
                "style": style3.value,
                "class": className.value
              }, {
                default: function _default10() {
                  return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
                }
              }), [[vShow, mergedOpen.value]])];
            }
          })];
        }
      });
    };
  }
});
var indexGuid$1 = 0;
var subMenuProps = {
  icon: PropsTypes.VNodeChild,
  title: PropsTypes.VNodeChild,
  disabled: Boolean,
  level: Number,
  popupClassName: String,
  popupOffset: Array,
  internalPopupClose: Boolean,
  eventKey: String,
  expandIcon: Function
};
var SubMenu = defineComponent({
  name: "ASubMenu",
  inheritAttrs: false,
  props: subMenuProps,
  slots: ["icon", "title", "expandIcon"],
  emits: ["titleClick", "mouseenter", "mouseleave"],
  setup: function setup50(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var _a, _b;
    useProvideFirstLevel(false);
    var instance = getCurrentInstance();
    var vnodeKey = _typeof(instance.vnode.key) === "symbol" ? String(instance.vnode.key) : instance.vnode.key;
    devWarning(_typeof(instance.vnode.key) !== "symbol", "SubMenu", 'SubMenu `:key="'.concat(String(vnodeKey), '"` not support Symbol type'));
    var key2 = isValid$1(vnodeKey) ? vnodeKey : "sub_menu_".concat(++indexGuid$1, "_$$_not_set_key");
    var eventKey = (_a = props2.eventKey) !== null && _a !== void 0 ? _a : isValid$1(vnodeKey) ? "sub_menu_".concat(++indexGuid$1, "_$$_").concat(vnodeKey) : key2;
    var _useInjectKeyPath = useInjectKeyPath(), parentEventKeys = _useInjectKeyPath.parentEventKeys, parentInfo = _useInjectKeyPath.parentInfo, parentKeys = _useInjectKeyPath.parentKeys;
    var keysPath = computed(function() {
      return [].concat(_toConsumableArray(parentKeys.value), [key2]);
    });
    var eventKeysPath = computed(function() {
      return [].concat(_toConsumableArray(parentEventKeys.value), [eventKey]);
    });
    var childrenEventKeys = ref([]);
    var menuInfo = {
      eventKey,
      key: key2,
      parentEventKeys,
      childrenEventKeys,
      parentKeys
    };
    (_b = parentInfo.childrenEventKeys) === null || _b === void 0 ? void 0 : _b.value.push(eventKey);
    onBeforeUnmount(function() {
      var _a2;
      if (parentInfo.childrenEventKeys) {
        parentInfo.childrenEventKeys.value = (_a2 = parentInfo.childrenEventKeys) === null || _a2 === void 0 ? void 0 : _a2.value.filter(function(k) {
          return k != eventKey;
        });
      }
    });
    useProvideKeyPath$1(eventKey, key2, menuInfo);
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls, activeKeys = _useInjectMenu.activeKeys, contextDisabled = _useInjectMenu.disabled, changeActiveKeys = _useInjectMenu.changeActiveKeys, mode4 = _useInjectMenu.mode, inlineCollapsed = _useInjectMenu.inlineCollapsed, antdMenuTheme = _useInjectMenu.antdMenuTheme, openKeys = _useInjectMenu.openKeys, overflowDisabled = _useInjectMenu.overflowDisabled, onOpenChange = _useInjectMenu.onOpenChange, registerMenuInfo = _useInjectMenu.registerMenuInfo, unRegisterMenuInfo = _useInjectMenu.unRegisterMenuInfo, selectedSubMenuEventKeys = _useInjectMenu.selectedSubMenuEventKeys, motion = _useInjectMenu.motion, defaultMotions = _useInjectMenu.defaultMotions, menuExpandIcon = _useInjectMenu.expandIcon;
    registerMenuInfo(eventKey, menuInfo);
    onBeforeUnmount(function() {
      unRegisterMenuInfo(eventKey);
    });
    var subMenuPrefixCls = computed(function() {
      return "".concat(prefixCls2.value, "-submenu");
    });
    var mergedDisabled = computed(function() {
      return contextDisabled.value || props2.disabled;
    });
    var elementRef = ref();
    var popupRef = ref();
    var originOpen = computed(function() {
      return openKeys.value.includes(key2);
    });
    var open6 = computed(function() {
      return !overflowDisabled.value && originOpen.value;
    });
    var childrenSelected = computed(function() {
      return selectedSubMenuEventKeys.value.includes(eventKey);
    });
    var isActive = ref(false);
    watch(activeKeys, function() {
      isActive.value = !!activeKeys.value.find(function(val) {
        return val === key2;
      });
    }, {
      immediate: true
    });
    var onInternalTitleClick = function onInternalTitleClick2(e) {
      if (mergedDisabled.value) {
        return;
      }
      emit("titleClick", e, key2);
      if (mode4.value === "inline") {
        onOpenChange(eventKey, !originOpen.value);
      }
    };
    var onMouseEnter4 = function onMouseEnter5(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys(keysPath.value);
        emit("mouseenter", event);
      }
    };
    var onMouseLeave5 = function onMouseLeave6(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys([]);
        emit("mouseleave", event);
      }
    };
    var directionStyle = useDirectionStyle(computed(function() {
      return eventKeysPath.value.length;
    }));
    var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
      if (mode4.value !== "inline") {
        onOpenChange(eventKey, newVisible);
      }
    };
    var onInternalFocus = function onInternalFocus2() {
      changeActiveKeys(keysPath.value);
    };
    var popupId = eventKey && "".concat(eventKey, "-popup");
    var popupClassName = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-").concat(antdMenuTheme.value), props2.popupClassName);
    });
    var renderTitle2 = function renderTitle3(title2, icon) {
      if (!icon) {
        return inlineCollapsed.value && !parentEventKeys.value.length && title2 && typeof title2 === "string" ? createVNode("div", {
          "class": "".concat(prefixCls2.value, "-inline-collapsed-noicon")
        }, [title2.charAt(0)]) : createVNode("span", {
          "class": "".concat(prefixCls2.value, "-title-content")
        }, [title2]);
      }
      var titleIsSpan = isValidElement(title2) && title2.type === "span";
      return createVNode(Fragment, null, [cloneElement(icon, {
        class: "".concat(prefixCls2.value, "-item-icon")
      }, false), titleIsSpan ? title2 : createVNode("span", {
        "class": "".concat(prefixCls2.value, "-title-content")
      }, [title2])]);
    };
    var triggerModeRef = computed(function() {
      return mode4.value !== "inline" && eventKeysPath.value.length > 1 ? "vertical" : mode4.value;
    });
    var renderMode = computed(function() {
      return mode4.value === "horizontal" ? "vertical" : mode4.value;
    });
    var style3 = ref({});
    var className = ref("");
    var mergedMotion = computed(function() {
      var _a2, _b2;
      var m = motion.value || ((_a2 = defaultMotions.value) === null || _a2 === void 0 ? void 0 : _a2[mode4.value]) || ((_b2 = defaultMotions.value) === null || _b2 === void 0 ? void 0 : _b2.other);
      var res = typeof m === "function" ? m(style3, className) : m;
      return res ? getTransitionProps(res.name) : void 0;
    });
    var subMenuTriggerModeRef = computed(function() {
      return triggerModeRef.value === "horizontal" ? "vertical" : triggerModeRef.value;
    });
    return function() {
      var _classNames;
      var _a2;
      var icon = getPropsSlot(slots, props2, "icon");
      var title2 = renderTitle2(getPropsSlot(slots, props2, "title"), icon);
      var subMenuPrefixClsValue = subMenuPrefixCls.value;
      var expandIcon = props2.expandIcon || slots.expandIcon || menuExpandIcon;
      var titleNode = createVNode("div", {
        "style": directionStyle.value,
        "class": "".concat(subMenuPrefixClsValue, "-title"),
        "tabindex": mergedDisabled.value ? null : -1,
        "ref": elementRef,
        "title": typeof title2 === "string" ? title2 : null,
        "data-menu-id": key2,
        "aria-expanded": open6.value,
        "aria-haspopup": true,
        "aria-controls": popupId,
        "aria-disabled": mergedDisabled.value,
        "onClick": onInternalTitleClick,
        "onFocus": onInternalFocus
      }, [title2, mode4.value !== "horizontal" && expandIcon ? expandIcon(_extends(_extends({}, props2), {
        isOpen: open6.value
      })) : createVNode("i", {
        "class": "".concat(subMenuPrefixClsValue, "-arrow")
      }, null)]);
      if (!overflowDisabled.value && mode4.value !== "inline") {
        var triggerMode = triggerModeRef.value;
        var _titleNode = function() {
          return titleNode;
        }();
        titleNode = createVNode(PopupTrigger, {
          "mode": triggerMode,
          "prefixCls": subMenuPrefixClsValue,
          "visible": !props2.internalPopupClose && open6.value,
          "popupClassName": popupClassName.value,
          "popupOffset": props2.popupOffset,
          "disabled": mergedDisabled.value,
          "onVisibleChange": onPopupVisibleChange
        }, {
          default: function _default8() {
            return [_titleNode];
          },
          popup: function popup(_ref2) {
            var visible9 = _ref2.visible;
            var _a3;
            return createVNode(MenuContextProvider, {
              "mode": subMenuTriggerModeRef.value,
              "isRootMenu": false
            }, {
              default: function _default8() {
                return [createVNode(Transition$1, mergedMotion.value, {
                  default: function _default9() {
                    return [withDirectives(createVNode(SubMenuList, {
                      "id": popupId,
                      "ref": popupRef
                    }, {
                      default: function _default10() {
                        return [(_a3 = slots.default) === null || _a3 === void 0 ? void 0 : _a3.call(slots)];
                      }
                    }), [[vShow, visible9]])];
                  }
                })];
              }
            });
          }
        });
      } else {
        var _titleNode2 = function() {
          return titleNode;
        }();
        titleNode = createVNode(PopupTrigger, null, {
          default: function _default8() {
            return [_titleNode2];
          }
        });
      }
      return createVNode(MenuContextProvider, {
        "mode": renderMode.value
      }, {
        default: function _default8() {
          return [createVNode(Overflow$1.Item, _objectSpread2(_objectSpread2({
            "component": "li"
          }, attrs), {}, {
            "role": "none",
            "class": classNames(subMenuPrefixClsValue, "".concat(subMenuPrefixClsValue, "-").concat(mode4.value), attrs.class, (_classNames = {}, _defineProperty(_classNames, "".concat(subMenuPrefixClsValue, "-open"), open6.value), _defineProperty(_classNames, "".concat(subMenuPrefixClsValue, "-active"), isActive.value), _defineProperty(_classNames, "".concat(subMenuPrefixClsValue, "-selected"), childrenSelected.value), _defineProperty(_classNames, "".concat(subMenuPrefixClsValue, "-disabled"), mergedDisabled.value), _classNames)),
            "onMouseenter": onMouseEnter4,
            "onMouseleave": onMouseLeave5,
            "data-submenu-id": key2
          }), {
            default: function _default9() {
              return [titleNode, !overflowDisabled.value && createVNode(InlineSubMenuList, {
                "id": popupId,
                "open": open6.value,
                "keyPath": keysPath.value
              }, {
                default: function _default10() {
                  return [(_a2 = slots.default) === null || _a2 === void 0 ? void 0 : _a2.call(slots)];
                }
              })];
            }
          })];
        }
      });
    };
  }
});
var menuProps = {
  prefixCls: String,
  disabled: Boolean,
  inlineCollapsed: Boolean,
  disabledOverflow: Boolean,
  openKeys: Array,
  selectedKeys: Array,
  activeKey: String,
  selectable: {
    type: Boolean,
    default: true
  },
  multiple: {
    type: Boolean,
    default: false
  },
  motion: Object,
  theme: {
    type: String,
    default: "light"
  },
  mode: {
    type: String,
    default: "vertical"
  },
  inlineIndent: {
    type: Number,
    default: 24
  },
  subMenuOpenDelay: {
    type: Number,
    default: 0.1
  },
  subMenuCloseDelay: {
    type: Number,
    default: 0.1
  },
  builtinPlacements: {
    type: Object
  },
  triggerSubMenuAction: {
    type: String,
    default: "hover"
  },
  getPopupContainer: Function,
  expandIcon: Function
};
var EMPTY_LIST = [];
var Menu = defineComponent({
  name: "AMenu",
  props: menuProps,
  emits: ["update:openKeys", "openChange", "select", "deselect", "update:selectedKeys", "click", "update:activeKey"],
  slots: ["expandIcon", "overflowedIndicator"],
  setup: function setup51(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var _useConfigInject = useConfigInject("menu", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var store = ref({});
    var siderCollapsed = inject(SiderCollapsedKey, ref(void 0));
    var inlineCollapsed = computed(function() {
      if (siderCollapsed.value !== void 0) {
        return siderCollapsed.value;
      }
      return props2.inlineCollapsed;
    });
    var isMounted = ref(false);
    onMounted(function() {
      isMounted.value = true;
    });
    watchEffect(function() {
      devWarning(!(props2.inlineCollapsed === true && props2.mode !== "inline"), "Menu", "`inlineCollapsed` should only be used when `mode` is inline.");
      devWarning(!(siderCollapsed.value !== void 0 && props2.inlineCollapsed === true), "Menu", "`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.");
    });
    var activeKeys = ref([]);
    var mergedSelectedKeys = ref([]);
    var keyMapStore = ref({});
    watch(store, function() {
      var newKeyMapStore = {};
      for (var _i = 0, _Object$values = Object.values(store.value); _i < _Object$values.length; _i++) {
        var menuInfo = _Object$values[_i];
        newKeyMapStore[menuInfo.key] = menuInfo;
      }
      keyMapStore.value = newKeyMapStore;
    }, {
      flush: "post"
    });
    watchEffect(function() {
      if (props2.activeKey !== void 0) {
        var keys = [];
        var menuInfo = props2.activeKey ? keyMapStore.value[props2.activeKey] : void 0;
        if (menuInfo && props2.activeKey !== void 0) {
          keys = [].concat(_toConsumableArray(menuInfo.parentKeys), [props2.activeKey]);
        } else {
          keys = [];
        }
        if (!shallowEqual$1(activeKeys.value, keys)) {
          activeKeys.value = keys;
        }
      }
    });
    watch(function() {
      return props2.selectedKeys;
    }, function(selectedKeys3) {
      mergedSelectedKeys.value = selectedKeys3 || mergedSelectedKeys.value;
    }, {
      immediate: true
    });
    var selectedSubMenuEventKeys = ref([]);
    watch([keyMapStore, mergedSelectedKeys], function() {
      var subMenuParentEventKeys = [];
      mergedSelectedKeys.value.forEach(function(key2) {
        var menuInfo = keyMapStore.value[key2];
        if (menuInfo) {
          var _subMenuParentEventKe;
          (_subMenuParentEventKe = subMenuParentEventKeys).push.apply(_subMenuParentEventKe, _toConsumableArray(unref(menuInfo.parentEventKeys)));
        }
      });
      subMenuParentEventKeys = uniq(subMenuParentEventKeys);
      if (!shallowEqual$1(selectedSubMenuEventKeys.value, subMenuParentEventKeys)) {
        selectedSubMenuEventKeys.value = subMenuParentEventKeys;
      }
    }, {
      immediate: true
    });
    var triggerSelection = function triggerSelection2(info3) {
      if (!props2.selectable) {
        return;
      }
      var targetKey = info3.key;
      var exist = mergedSelectedKeys.value.includes(targetKey);
      var newSelectedKeys;
      if (props2.multiple) {
        if (exist) {
          newSelectedKeys = mergedSelectedKeys.value.filter(function(key2) {
            return key2 !== targetKey;
          });
        } else {
          newSelectedKeys = [].concat(_toConsumableArray(mergedSelectedKeys.value), [targetKey]);
        }
      } else {
        newSelectedKeys = [targetKey];
      }
      var selectInfo = _extends(_extends({}, info3), {
        selectedKeys: newSelectedKeys
      });
      if (!shallowEqual$1(newSelectedKeys, mergedSelectedKeys.value)) {
        if (props2.selectedKeys === void 0) {
          mergedSelectedKeys.value = newSelectedKeys;
        }
        emit("update:selectedKeys", newSelectedKeys);
        if (exist && props2.multiple) {
          emit("deselect", selectInfo);
        } else {
          emit("select", selectInfo);
        }
      }
      if (mergedMode.value !== "inline" && !props2.multiple && mergedOpenKeys.value.length) {
        triggerOpenKeys(EMPTY_LIST);
      }
    };
    var mergedOpenKeys = ref([]);
    watch(function() {
      return props2.openKeys;
    }, function() {
      var openKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : mergedOpenKeys.value;
      if (!shallowEqual$1(mergedOpenKeys.value, openKeys)) {
        mergedOpenKeys.value = openKeys;
      }
    }, {
      immediate: true
    });
    var timeout;
    var changeActiveKeys = function changeActiveKeys2(keys) {
      window.clearTimeout(timeout);
      timeout = window.setTimeout(function() {
        if (props2.activeKey === void 0) {
          activeKeys.value = keys;
        }
        emit("update:activeKey", keys[keys.length - 1]);
      });
    };
    var disabled = computed(function() {
      return !!props2.disabled;
    });
    var isRtl = computed(function() {
      return direction.value === "rtl";
    });
    var mergedMode = ref("vertical");
    var mergedInlineCollapsed = ref(false);
    watchEffect(function() {
      if ((props2.mode === "inline" || props2.mode === "vertical") && inlineCollapsed.value) {
        mergedMode.value = "vertical";
        mergedInlineCollapsed.value = inlineCollapsed.value;
      } else {
        mergedMode.value = props2.mode;
        mergedInlineCollapsed.value = false;
      }
    });
    var isInlineMode = computed(function() {
      return mergedMode.value === "inline";
    });
    var triggerOpenKeys = function triggerOpenKeys2(keys) {
      mergedOpenKeys.value = keys;
      emit("update:openKeys", keys);
      emit("openChange", keys);
    };
    var inlineCacheOpenKeys = ref(mergedOpenKeys.value);
    var mountRef = ref(false);
    watch(mergedOpenKeys, function() {
      if (isInlineMode.value) {
        inlineCacheOpenKeys.value = mergedOpenKeys.value;
      }
    }, {
      immediate: true
    });
    watch(isInlineMode, function() {
      if (!mountRef.value) {
        mountRef.value = true;
        return;
      }
      if (isInlineMode.value) {
        mergedOpenKeys.value = inlineCacheOpenKeys.value;
      } else {
        triggerOpenKeys(EMPTY_LIST);
      }
    }, {
      immediate: true
    });
    var className = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2.value), true), _defineProperty(_ref2, "".concat(prefixCls2.value, "-root"), true), _defineProperty(_ref2, "".concat(prefixCls2.value, "-").concat(mergedMode.value), true), _defineProperty(_ref2, "".concat(prefixCls2.value, "-inline-collapsed"), mergedInlineCollapsed.value), _defineProperty(_ref2, "".concat(prefixCls2.value, "-rtl"), isRtl.value), _defineProperty(_ref2, "".concat(prefixCls2.value, "-").concat(props2.theme), true), _ref2;
    });
    var defaultMotions = {
      horizontal: {
        name: "ant-slide-up"
      },
      inline: collapseMotion,
      other: {
        name: "ant-zoom-big"
      }
    };
    useProvideFirstLevel(true);
    var getChildrenKeys = function getChildrenKeys2() {
      var eventKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var keys = [];
      var storeValue = store.value;
      eventKeys.forEach(function(eventKey) {
        var _storeValue$eventKey = storeValue[eventKey], key2 = _storeValue$eventKey.key, childrenEventKeys = _storeValue$eventKey.childrenEventKeys;
        keys.push.apply(keys, [key2].concat(_toConsumableArray(getChildrenKeys2(childrenEventKeys))));
      });
      return keys;
    };
    var onInternalClick = function onInternalClick2(info3) {
      emit("click", info3);
      triggerSelection(info3);
    };
    var onInternalOpenChange = function onInternalOpenChange2(eventKey, open6) {
      var _store$value$eventKey = store.value[eventKey], key2 = _store$value$eventKey.key, childrenEventKeys = _store$value$eventKey.childrenEventKeys;
      var newOpenKeys = mergedOpenKeys.value.filter(function(k) {
        return k !== key2;
      });
      if (open6) {
        newOpenKeys.push(key2);
      } else if (mergedMode.value !== "inline") {
        var subPathKeys = getChildrenKeys(childrenEventKeys);
        newOpenKeys = newOpenKeys.filter(function(k) {
          return !subPathKeys.includes(k);
        });
      }
      if (!shallowEqual$1(mergedOpenKeys, newOpenKeys)) {
        triggerOpenKeys(newOpenKeys);
      }
    };
    var registerMenuInfo = function registerMenuInfo2(key2, info3) {
      store.value = _extends(_extends({}, store.value), _defineProperty({}, key2, info3));
    };
    var unRegisterMenuInfo = function unRegisterMenuInfo2(key2) {
      delete store.value[key2];
      store.value = _extends({}, store.value);
    };
    var lastVisibleIndex = ref(0);
    useProvideMenu$1({
      store,
      prefixCls: prefixCls2,
      activeKeys,
      openKeys: mergedOpenKeys,
      selectedKeys: mergedSelectedKeys,
      changeActiveKeys,
      disabled,
      rtl: isRtl,
      mode: mergedMode,
      inlineIndent: computed(function() {
        return props2.inlineIndent;
      }),
      subMenuCloseDelay: computed(function() {
        return props2.subMenuCloseDelay;
      }),
      subMenuOpenDelay: computed(function() {
        return props2.subMenuOpenDelay;
      }),
      builtinPlacements: computed(function() {
        return props2.builtinPlacements;
      }),
      triggerSubMenuAction: computed(function() {
        return props2.triggerSubMenuAction;
      }),
      getPopupContainer: computed(function() {
        return props2.getPopupContainer;
      }),
      inlineCollapsed: mergedInlineCollapsed,
      antdMenuTheme: computed(function() {
        return props2.theme;
      }),
      siderCollapsed,
      defaultMotions: computed(function() {
        return isMounted.value ? defaultMotions : null;
      }),
      motion: computed(function() {
        return isMounted.value ? props2.motion : null;
      }),
      overflowDisabled: ref(void 0),
      onOpenChange: onInternalOpenChange,
      onItemClick: onInternalClick,
      registerMenuInfo,
      unRegisterMenuInfo,
      selectedSubMenuEventKeys,
      isRootMenu: ref(true),
      expandIcon: props2.expandIcon || slots.expandIcon
    });
    return function() {
      var _a, _b;
      var childList = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      var allVisible = lastVisibleIndex.value >= childList.length - 1 || mergedMode.value !== "horizontal" || props2.disabledOverflow;
      var wrappedChildList = mergedMode.value !== "horizontal" || props2.disabledOverflow ? childList : childList.map(function(child, index2) {
        return createVNode(MenuContextProvider, {
          "key": child.key,
          "overflowDisabled": index2 > lastVisibleIndex.value
        }, {
          default: function _default8() {
            return [child];
          }
        });
      });
      var overflowedIndicator = ((_b = slots.overflowedIndicator) === null || _b === void 0 ? void 0 : _b.call(slots)) || createVNode(EllipsisOutlined, null, null);
      return createVNode(Overflow$1, {
        "prefixCls": "".concat(prefixCls2.value, "-overflow"),
        "component": "ul",
        "itemComponent": MenuItem,
        "class": className.value,
        "role": "menu",
        "data": wrappedChildList,
        "renderRawItem": function renderRawItem(node) {
          return node;
        },
        "renderRawRest": function renderRawRest(omitItems) {
          var len = omitItems.length;
          var originOmitItems = len ? childList.slice(-len) : null;
          return createVNode(SubMenu, {
            "eventKey": Overflow$1.OVERFLOW_KEY,
            "title": overflowedIndicator,
            "disabled": allVisible,
            "internalPopupClose": len === 0
          }, {
            default: function _default8() {
              return [originOmitItems];
            }
          });
        },
        "maxCount": mergedMode.value !== "horizontal" || props2.disabledOverflow ? Overflow$1.INVALIDATE : Overflow$1.RESPONSIVE,
        "ssr": "full",
        "data-menu-list": true,
        "onVisibleChange": function onVisibleChange6(newLastIndex) {
          lastVisibleIndex.value = newLastIndex;
        }
      }, null);
    };
  }
});
var menuItemGroupProps = {
  title: PropsTypes.VNodeChild
};
var ItemGroup = defineComponent({
  name: "AMenuItemGroup",
  inheritAttrs: false,
  props: menuItemGroupProps,
  slots: ["title"],
  setup: function setup52(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls;
    var groupPrefixCls = computed(function() {
      return "".concat(prefixCls2.value, "-item-group");
    });
    return function() {
      var _a;
      return createVNode("li", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "onClick": function onClick7(e) {
          return e.stopPropagation();
        },
        "class": groupPrefixCls.value
      }), [createVNode("div", {
        "title": typeof props2.title === "string" ? props2.title : void 0,
        "class": "".concat(groupPrefixCls.value, "-title")
      }, [getPropsSlot(slots, props2, "title")]), createVNode("ul", {
        "class": "".concat(groupPrefixCls.value, "-list")
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])]);
    };
  }
});
var Divider$1 = defineComponent({
  name: "AMenuDivider",
  setup: function setup53() {
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls;
    return function() {
      return createVNode("li", {
        "class": "".concat(prefixCls2.value, "-item-divider")
      }, null);
    };
  }
});
Menu.install = function(app) {
  app.component(Menu.name, Menu);
  app.component(MenuItem.name, MenuItem);
  app.component(SubMenu.name, SubMenu);
  app.component(Divider$1.name, Divider$1);
  app.component(ItemGroup.name, ItemGroup);
  return app;
};
Menu.Item = MenuItem;
Menu.Divider = Divider$1;
Menu.SubMenu = SubMenu;
Menu.ItemGroup = ItemGroup;
var breadcrumbProps = {
  prefixCls: PropsTypes.string,
  routes: {
    type: Array
  },
  params: PropsTypes.any,
  separator: PropsTypes.any,
  itemRender: {
    type: Function
  }
};
function getBreadcrumbName(route, params) {
  if (!route.breadcrumbName) {
    return null;
  }
  var paramsKeys = Object.keys(params).join("|");
  var name2 = route.breadcrumbName.replace(new RegExp(":(".concat(paramsKeys, ")"), "g"), function(replacement, key2) {
    return params[key2] || replacement;
  });
  return name2;
}
function defaultItemRender$1(opt) {
  var route = opt.route, params = opt.params, routes = opt.routes, paths = opt.paths;
  var isLastItem = routes.indexOf(route) === routes.length - 1;
  var name2 = getBreadcrumbName(route, params);
  return isLastItem ? createVNode("span", null, [name2]) : createVNode("a", {
    "href": "#/".concat(paths.join("/"))
  }, [name2]);
}
var Breadcrumb = defineComponent({
  name: "ABreadcrumb",
  props: breadcrumbProps,
  slots: ["separator", "itemRender"],
  setup: function setup54(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("breadcrumb", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var getPath = function getPath2(path2, params) {
      path2 = (path2 || "").replace(/^\//, "");
      Object.keys(params).forEach(function(key2) {
        path2 = path2.replace(":".concat(key2), params[key2]);
      });
      return path2;
    };
    var addChildPath = function addChildPath2(paths) {
      var childPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var params = arguments.length > 2 ? arguments[2] : void 0;
      var originalPaths = _toConsumableArray(paths);
      var path2 = getPath(childPath, params);
      if (path2) {
        originalPaths.push(path2);
      }
      return originalPaths;
    };
    var genForRoutes = function genForRoutes2(_ref2) {
      var _ref2$routes = _ref2.routes, routes = _ref2$routes === void 0 ? [] : _ref2$routes, _ref2$params = _ref2.params, params = _ref2$params === void 0 ? {} : _ref2$params, separator = _ref2.separator, _ref2$itemRender = _ref2.itemRender, itemRender = _ref2$itemRender === void 0 ? defaultItemRender$1 : _ref2$itemRender;
      var paths = [];
      return routes.map(function(route) {
        var path2 = getPath(route.path, params);
        if (path2) {
          paths.push(path2);
        }
        var tempPaths = [].concat(paths);
        var overlay = null;
        if (route.children && route.children.length) {
          overlay = createVNode(Menu, null, {
            default: function _default8() {
              return [route.children.map(function(child) {
                return createVNode(Menu.Item, {
                  "key": child.path || child.breadcrumbName
                }, {
                  default: function _default9() {
                    return [itemRender({
                      route: child,
                      params,
                      routes,
                      paths: addChildPath(tempPaths, child.path, params)
                    })];
                  }
                });
              })];
            }
          });
        }
        return createVNode(BreadcrumbItem, {
          "overlay": overlay,
          "separator": separator,
          "key": path2 || route.breadcrumbName
        }, {
          default: function _default8() {
            return [itemRender({
              route,
              params,
              routes,
              paths: tempPaths
            })];
          }
        });
      });
    };
    return function() {
      var _breadcrumbClassName;
      var _a;
      var crumbs;
      var routes = props2.routes, _props$params = props2.params, params = _props$params === void 0 ? {} : _props$params;
      var children = flattenChildren(getPropsSlot(slots, props2));
      var separator = (_a = getPropsSlot(slots, props2, "separator")) !== null && _a !== void 0 ? _a : "/";
      var itemRender = props2.itemRender || slots.itemRender || defaultItemRender$1;
      if (routes && routes.length > 0) {
        crumbs = genForRoutes({
          routes,
          params,
          separator,
          itemRender
        });
      } else if (children.length) {
        crumbs = children.map(function(element, index2) {
          warning$1(_typeof(element.type) === "object" && (element.type.__ANT_BREADCRUMB_ITEM || element.type.__ANT_BREADCRUMB_SEPARATOR), "Breadcrumb", "Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children");
          return cloneVNode(element, {
            separator,
            key: index2
          });
        });
      }
      var breadcrumbClassName = (_breadcrumbClassName = {}, _defineProperty(_breadcrumbClassName, prefixCls2.value, true), _defineProperty(_breadcrumbClassName, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _breadcrumbClassName);
      return createVNode("div", {
        "class": breadcrumbClassName
      }, [crumbs]);
    };
  }
});
var __rest$H = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var breadcrumbSeparatorProps = {
  prefixCls: PropsTypes.string
};
var BreadcrumbSeparator = defineComponent({
  name: "ABreadcrumbSeparator",
  __ANT_BREADCRUMB_SEPARATOR: true,
  inheritAttrs: false,
  props: breadcrumbSeparatorProps,
  setup: function setup55(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("breadcrumb", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      attrs.separator;
      var className = attrs.class, restAttrs = __rest$H(attrs, ["separator", "class"]);
      var children = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      return createVNode("span", _objectSpread2({
        "class": ["".concat(prefixCls2.value, "-separator"), className]
      }, restAttrs), [children.length > 0 ? children : "/"]);
    };
  }
});
Breadcrumb.Item = BreadcrumbItem;
Breadcrumb.Separator = BreadcrumbSeparator;
Breadcrumb.install = function(app) {
  app.component(Breadcrumb.name, Breadcrumb);
  app.component(BreadcrumbItem.name, BreadcrumbItem);
  app.component(BreadcrumbSeparator.name, BreadcrumbSeparator);
  return app;
};
var DateConstants = {
  DATE_ROW_COUNT: 6,
  DATE_COL_COUNT: 7
};
var DateTHead = function DateTHead2(_, _ref) {
  var attrs = _ref.attrs;
  var value26 = attrs.value;
  var localeData = value26.localeData();
  var prefixCls2 = attrs.prefixCls;
  var veryShortWeekdays = [];
  var weekDays = [];
  var firstDayOfWeek = localeData.firstDayOfWeek();
  var showWeekNumberEl;
  var now2 = hooks();
  for (var dateColIndex = 0; dateColIndex < DateConstants.DATE_COL_COUNT; dateColIndex++) {
    var index2 = (firstDayOfWeek + dateColIndex) % DateConstants.DATE_COL_COUNT;
    now2.day(index2);
    veryShortWeekdays[dateColIndex] = localeData.weekdaysMin(now2);
    weekDays[dateColIndex] = localeData.weekdaysShort(now2);
  }
  if (attrs.showWeekNumber) {
    showWeekNumberEl = createVNode("th", {
      "role": "columnheader",
      "class": "".concat(prefixCls2, "-column-header ").concat(prefixCls2, "-week-number-header")
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-column-header-inner")
    }, [createTextVNode("x")])]);
  }
  var weekDaysEls = weekDays.map(function(day, xindex) {
    return createVNode("th", {
      "key": xindex,
      "role": "columnheader",
      "title": day,
      "class": "".concat(prefixCls2, "-column-header")
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-column-header-inner")
    }, [veryShortWeekdays[xindex]])]);
  });
  return createVNode("thead", null, [createVNode("tr", {
    "role": "row"
  }, [showWeekNumberEl, weekDaysEls])]);
};
DateTHead.inheritAttrs = false;
var DateTHead$1 = DateTHead;
var defaultDisabledTime = {
  disabledHours: function disabledHours() {
    return [];
  },
  disabledMinutes: function disabledMinutes() {
    return [];
  },
  disabledSeconds: function disabledSeconds() {
    return [];
  }
};
function getTodayTime(value26) {
  var today = hooks();
  today.locale(value26.locale()).utcOffset(value26.utcOffset());
  return today;
}
function getTitleString(value26) {
  return value26.format("LL");
}
function getTodayTimeStr(value26) {
  var today = getTodayTime(value26);
  return getTitleString(today);
}
function getMonthName(month) {
  var locale2 = month.locale();
  var localeData = month.localeData();
  return localeData[locale2 === "zh-cn" ? "months" : "monthsShort"](month);
}
function syncTime(from, to) {
  if (!hooks.isMoment(from) || !hooks.isMoment(to))
    return;
  to.hour(from.hour());
  to.minute(from.minute());
  to.second(from.second());
  to.millisecond(from.millisecond());
}
function getTimeConfig(value26, disabledTime) {
  var disabledTimeConfig = disabledTime ? disabledTime(value26) : {};
  disabledTimeConfig = _extends(_extends({}, defaultDisabledTime), disabledTimeConfig);
  return disabledTimeConfig;
}
function isTimeValidByConfig(value26, disabledTimeConfig) {
  var invalidTime = false;
  if (value26) {
    var hour = value26.hour();
    var minutes = value26.minute();
    var seconds = value26.second();
    var disabledHours3 = disabledTimeConfig.disabledHours();
    if (disabledHours3.indexOf(hour) === -1) {
      var disabledMinutes2 = disabledTimeConfig.disabledMinutes(hour);
      if (disabledMinutes2.indexOf(minutes) === -1) {
        var disabledSeconds2 = disabledTimeConfig.disabledSeconds(hour, minutes);
        invalidTime = disabledSeconds2.indexOf(seconds) !== -1;
      } else {
        invalidTime = true;
      }
    } else {
      invalidTime = true;
    }
  }
  return !invalidTime;
}
function isTimeValid(value26, disabledTime) {
  var disabledTimeConfig = getTimeConfig(value26, disabledTime);
  return isTimeValidByConfig(value26, disabledTimeConfig);
}
function isAllowedDate(value26, disabledDate, disabledTime) {
  if (disabledDate) {
    if (disabledDate(value26)) {
      return false;
    }
  }
  if (disabledTime) {
    if (!isTimeValid(value26, disabledTime)) {
      return false;
    }
  }
  return true;
}
function formatDate$1(value26, format3) {
  if (!value26) {
    return "";
  }
  if (Array.isArray(format3)) {
    format3 = format3[0];
  }
  if (typeof format3 === "function") {
    var result = format3(value26);
    if (typeof result === "string") {
      return result;
    } else {
      throw new Error("The function of format does not return a string");
    }
  }
  return value26.format(format3);
}
function noop$D() {
}
function isSameDay(one, two) {
  return one && two && one.isSame(two, "day");
}
function beforeCurrentMonthYear(current2, today) {
  if (current2.year() < today.year()) {
    return 1;
  }
  return current2.year() === today.year() && current2.month() < today.month();
}
function afterCurrentMonthYear(current2, today) {
  if (current2.year() > today.year()) {
    return 1;
  }
  return current2.year() === today.year() && current2.month() > today.month();
}
function getIdFromDate(date) {
  return "rc-calendar-".concat(date.year(), "-").concat(date.month(), "-").concat(date.date());
}
var DateTBody = {
  name: "DateTBody",
  inheritAttrs: false,
  props: {
    contentRender: PropsTypes.func,
    dateRender: PropsTypes.func,
    disabledDate: PropsTypes.func,
    prefixCls: PropsTypes.string,
    selectedValue: PropsTypes.any,
    value: PropsTypes.object,
    hoverValue: PropsTypes.any.def([]),
    showWeekNumber: PropsTypes.looseBool
  },
  render: function render29() {
    var props2 = getOptionProps(this);
    var contentRender = props2.contentRender, prefixCls2 = props2.prefixCls, selectedValue6 = props2.selectedValue, value26 = props2.value, showWeekNumber = props2.showWeekNumber, dateRender = props2.dateRender, disabledDate = props2.disabledDate, hoverValue2 = props2.hoverValue;
    var _this$$attrs = this.$attrs, _this$$attrs$onSelect = _this$$attrs.onSelect, onSelect6 = _this$$attrs$onSelect === void 0 ? noop$D : _this$$attrs$onSelect, _this$$attrs$onDayHov = _this$$attrs.onDayHover, onDayHover2 = _this$$attrs$onDayHov === void 0 ? noop$D : _this$$attrs$onDayHov;
    var iIndex;
    var jIndex;
    var current2;
    var dateTable = [];
    var today = getTodayTime(value26);
    var cellClass = "".concat(prefixCls2, "-cell");
    var weekNumberCellClass = "".concat(prefixCls2, "-week-number-cell");
    var dateClass = "".concat(prefixCls2, "-date");
    var todayClass = "".concat(prefixCls2, "-today");
    var selectedClass = "".concat(prefixCls2, "-selected-day");
    var selectedDateClass = "".concat(prefixCls2, "-selected-date");
    var selectedStartDateClass = "".concat(prefixCls2, "-selected-start-date");
    var selectedEndDateClass = "".concat(prefixCls2, "-selected-end-date");
    var inRangeClass = "".concat(prefixCls2, "-in-range-cell");
    var lastMonthDayClass = "".concat(prefixCls2, "-last-month-cell");
    var nextMonthDayClass = "".concat(prefixCls2, "-next-month-btn-day");
    var disabledClass = "".concat(prefixCls2, "-disabled-cell");
    var firstDisableClass = "".concat(prefixCls2, "-disabled-cell-first-of-row");
    var lastDisableClass = "".concat(prefixCls2, "-disabled-cell-last-of-row");
    var lastDayOfMonthClass = "".concat(prefixCls2, "-last-day-of-month");
    var month1 = value26.clone();
    month1.date(1);
    var day = month1.day();
    var lastMonthDiffDay = (day + 7 - value26.localeData().firstDayOfWeek()) % 7;
    var lastMonth1 = month1.clone();
    lastMonth1.add(0 - lastMonthDiffDay, "days");
    var passed = 0;
    for (iIndex = 0; iIndex < DateConstants.DATE_ROW_COUNT; iIndex++) {
      for (jIndex = 0; jIndex < DateConstants.DATE_COL_COUNT; jIndex++) {
        current2 = lastMonth1;
        if (passed) {
          current2 = current2.clone();
          current2.add(passed, "days");
        }
        dateTable.push(current2);
        passed++;
      }
    }
    var tableHtml = [];
    passed = 0;
    for (iIndex = 0; iIndex < DateConstants.DATE_ROW_COUNT; iIndex++) {
      var _cx;
      var isCurrentWeek = void 0;
      var weekNumberCell = void 0;
      var isActiveWeek = false;
      var dateCells = [];
      if (showWeekNumber) {
        weekNumberCell = createVNode("td", {
          "key": "week-".concat(dateTable[passed].week()),
          "role": "gridcell",
          "class": weekNumberCellClass
        }, [dateTable[passed].week()]);
      }
      for (jIndex = 0; jIndex < DateConstants.DATE_COL_COUNT; jIndex++) {
        var next3 = null;
        var last = null;
        current2 = dateTable[passed];
        if (jIndex < DateConstants.DATE_COL_COUNT - 1) {
          next3 = dateTable[passed + 1];
        }
        if (jIndex > 0) {
          last = dateTable[passed - 1];
        }
        var cls = cellClass;
        var disabled = false;
        var selected = false;
        if (isSameDay(current2, today)) {
          cls += " ".concat(todayClass);
          isCurrentWeek = true;
        }
        var isBeforeCurrentMonthYear = beforeCurrentMonthYear(current2, value26);
        var isAfterCurrentMonthYear = afterCurrentMonthYear(current2, value26);
        if (selectedValue6 && Array.isArray(selectedValue6)) {
          var rangeValue = hoverValue2.length ? hoverValue2 : selectedValue6;
          if (!isBeforeCurrentMonthYear && !isAfterCurrentMonthYear) {
            var startValue = rangeValue[0];
            var endValue = rangeValue[1];
            if (startValue) {
              if (isSameDay(current2, startValue)) {
                selected = true;
                isActiveWeek = true;
                cls += " ".concat(selectedStartDateClass);
              }
            }
            if (startValue || endValue) {
              if (isSameDay(current2, endValue)) {
                selected = true;
                isActiveWeek = true;
                cls += " ".concat(selectedEndDateClass);
              } else if ((startValue === null || startValue === void 0) && current2.isBefore(endValue, "day")) {
                cls += " ".concat(inRangeClass);
              } else if ((endValue === null || endValue === void 0) && current2.isAfter(startValue, "day")) {
                cls += " ".concat(inRangeClass);
              } else if (current2.isAfter(startValue, "day") && current2.isBefore(endValue, "day")) {
                cls += " ".concat(inRangeClass);
              }
            }
          }
        } else if (isSameDay(current2, value26)) {
          selected = true;
          isActiveWeek = true;
        }
        if (isSameDay(current2, selectedValue6)) {
          cls += " ".concat(selectedDateClass);
        }
        if (isBeforeCurrentMonthYear) {
          cls += " ".concat(lastMonthDayClass);
        }
        if (isAfterCurrentMonthYear) {
          cls += " ".concat(nextMonthDayClass);
        }
        if (current2.clone().endOf("month").date() === current2.date()) {
          cls += " ".concat(lastDayOfMonthClass);
        }
        if (disabledDate) {
          if (disabledDate(current2, value26)) {
            disabled = true;
            if (!last || !disabledDate(last, value26)) {
              cls += " ".concat(firstDisableClass);
            }
            if (!next3 || !disabledDate(next3, value26)) {
              cls += " ".concat(lastDisableClass);
            }
          }
        }
        if (selected) {
          cls += " ".concat(selectedClass);
        }
        if (disabled) {
          cls += " ".concat(disabledClass);
        }
        var dateHtml = void 0;
        if (dateRender) {
          dateHtml = dateRender({
            current: current2,
            today: value26
          });
        } else {
          var content = contentRender ? contentRender({
            current: current2,
            today: value26
          }) : current2.date();
          dateHtml = createVNode("div", {
            "key": getIdFromDate(current2),
            "class": dateClass,
            "aria-selected": selected,
            "aria-disabled": disabled
          }, [content]);
        }
        dateCells.push(createVNode("td", {
          "key": passed,
          "onClick": disabled ? noop$D : onSelect6.bind(null, current2),
          "onMouseenter": disabled ? noop$D : onDayHover2.bind(null, current2),
          "role": "gridcell",
          "title": getTitleString(current2),
          "class": cls
        }, [dateHtml]));
        passed++;
      }
      tableHtml.push(createVNode("tr", {
        "key": iIndex,
        "role": "row",
        "class": classNames((_cx = {}, _defineProperty(_cx, "".concat(prefixCls2, "-current-week"), isCurrentWeek), _defineProperty(_cx, "".concat(prefixCls2, "-active-week"), isActiveWeek), _cx))
      }, [weekNumberCell, dateCells]));
    }
    return createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [tableHtml]);
  }
};
var DateTBody$1 = DateTBody;
var DateTable = function DateTable2(_, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls;
  return createVNode("table", {
    "class": "".concat(prefixCls2, "-table"),
    "cellspacing": "0",
    "role": "grid"
  }, [createVNode(DateTHead$1, attrs, null), createVNode(DateTBody$1, attrs, null)]);
};
DateTable.inheritAttrs = false;
var DateTable$1 = DateTable;
var ROW$2 = 4;
var COL$2 = 3;
function noop$C() {
}
var MonthTable = {
  name: "MonthTable",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    cellRender: PropsTypes.func,
    prefixCls: PropsTypes.string,
    value: PropsTypes.object,
    locale: PropsTypes.any,
    contentRender: PropsTypes.any,
    disabledDate: PropsTypes.func
  },
  data: function data10() {
    return {
      sValue: this.value
    };
  },
  watch: {
    value: function value4(val) {
      this.setState({
        sValue: val
      });
    }
  },
  methods: {
    setAndSelectValue: function setAndSelectValue(value26) {
      this.setState({
        sValue: value26
      });
      this.__emit("select", value26);
    },
    chooseMonth: function chooseMonth(month) {
      var next3 = this.sValue.clone();
      next3.month(month);
      this.setAndSelectValue(next3);
    },
    months: function months() {
      var value26 = this.sValue;
      var current2 = value26.clone();
      var months2 = [];
      var index2 = 0;
      for (var rowIndex = 0; rowIndex < ROW$2; rowIndex++) {
        months2[rowIndex] = [];
        for (var colIndex = 0; colIndex < COL$2; colIndex++) {
          current2.month(index2);
          var content = getMonthName(current2);
          months2[rowIndex][colIndex] = {
            value: index2,
            content,
            title: content
          };
          index2++;
        }
      }
      return months2;
    }
  },
  render: function render30() {
    var _this = this;
    var props2 = this.$props;
    var value26 = this.sValue;
    var today = getTodayTime(value26);
    var months2 = this.months();
    var currentMonth = value26.month();
    var prefixCls2 = props2.prefixCls, locale2 = props2.locale, contentRender = props2.contentRender, cellRender = props2.cellRender, disabledDate = props2.disabledDate;
    var monthsEls = months2.map(function(month, index2) {
      var tds = month.map(function(monthData) {
        var _classNameMap;
        var disabled = false;
        if (disabledDate) {
          var testValue = value26.clone();
          testValue.month(monthData.value);
          disabled = disabledDate(testValue);
        }
        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, "".concat(prefixCls2, "-cell"), 1), _defineProperty(_classNameMap, "".concat(prefixCls2, "-cell-disabled"), disabled), _defineProperty(_classNameMap, "".concat(prefixCls2, "-selected-cell"), monthData.value === currentMonth), _defineProperty(_classNameMap, "".concat(prefixCls2, "-current-cell"), today.year() === value26.year() && monthData.value === today.month()), _classNameMap);
        var cellEl;
        if (cellRender) {
          var currentValue = value26.clone();
          currentValue.month(monthData.value);
          cellEl = cellRender({
            current: currentValue,
            locale: locale2
          });
        } else {
          var content;
          if (contentRender) {
            var _currentValue = value26.clone();
            _currentValue.month(monthData.value);
            content = contentRender({
              current: _currentValue,
              locale: locale2
            });
          } else {
            content = monthData.content;
          }
          cellEl = createVNode("a", {
            "class": "".concat(prefixCls2, "-month")
          }, [content]);
        }
        return createVNode("td", {
          "role": "gridcell",
          "key": monthData.value,
          "onClick": disabled ? noop$C : function() {
            return _this.chooseMonth(monthData.value);
          },
          "title": monthData.title,
          "class": classNameMap
        }, [cellEl]);
      });
      return createVNode("tr", {
        "key": index2,
        "role": "row"
      }, [tds]);
    });
    return createVNode("table", {
      "class": "".concat(prefixCls2, "-table"),
      "cellspacing": "0",
      "role": "grid"
    }, [createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [monthsEls])]);
  }
};
var MonthTable$1 = MonthTable;
function noop$B() {
}
function getNowByCurrentStateValue(value26) {
  var ret;
  if (value26) {
    ret = getTodayTime(value26);
  } else {
    ret = hooks();
  }
  return ret;
}
function isMoment(value26) {
  if (Array.isArray(value26)) {
    return value26.length === 0 || value26.findIndex(function(val) {
      return val === void 0 || hooks.isMoment(val);
    }) !== -1;
  } else {
    return value26 === void 0 || hooks.isMoment(value26);
  }
}
var MomentType = PropsTypes.custom(isMoment);
var CalendarMixin = {
  mixins: [BaseMixin],
  inheritAttrs: false,
  name: "CalendarMixinWrapper",
  props: {
    value: MomentType,
    defaultValue: MomentType
  },
  data: function data11() {
    if (this.onKeyDown === void 0) {
      this.onKeyDown = noop$B;
    }
    if (this.onBlur === void 0) {
      this.onBlur = noop$B;
    }
    var props2 = this.$props;
    var sValue = props2.value || props2.defaultValue || getNowByCurrentStateValue();
    return {
      sValue,
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  watch: {
    value: function value5(val) {
      var sValue = val || this.defaultValue || getNowByCurrentStateValue(this.sValue);
      this.setState({
        sValue
      });
    },
    selectedValue: function selectedValue(val) {
      this.setState({
        sSelectedValue: val
      });
    }
  },
  methods: {
    onSelect: function onSelect(value26, cause) {
      if (value26) {
        this.setValue(value26);
      }
      this.setSelectedValue(value26, cause);
    },
    renderRoot: function renderRoot(newProps) {
      var _className;
      var props2 = _extends(_extends({}, this.$props), this.$attrs);
      var prefixCls2 = props2.prefixCls;
      var className = (_className = {}, _defineProperty(_className, prefixCls2, 1), _defineProperty(_className, "".concat(prefixCls2, "-hidden"), !props2.visible), _defineProperty(_className, props2.class, !!props2.class), _defineProperty(_className, newProps.class, !!newProps.class), _className);
      return createVNode("div", {
        "ref": this.saveRoot,
        "class": className,
        "tabindex": "0",
        "onKeydown": this.onKeyDown || noop$B,
        "onBlur": this.onBlur || noop$B
      }, [newProps.children]);
    },
    setSelectedValue: function setSelectedValue(selectedValue6, cause) {
      if (!hasProp(this, "selectedValue")) {
        this.setState({
          sSelectedValue: selectedValue6
        });
      }
      this.__emit("select", selectedValue6, cause);
    },
    setValue: function setValue3(value26) {
      var originalValue = this.sValue;
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      if (originalValue && value26 && !originalValue.isSame(value26) || !originalValue && value26 || originalValue && !value26) {
        this.__emit("change", value26);
      }
    },
    isAllowedDate: function isAllowedDate$1(value26) {
      var disabledDate = this.disabledDate;
      var disabledTime = this.disabledTime;
      return isAllowedDate(value26, disabledDate, disabledTime);
    }
  }
};
var CalendarMixin$1 = CalendarMixin;
var CommonMixin = {
  methods: {
    getFormat: function getFormat() {
      var format3 = this.format;
      var locale2 = this.locale, timePicker = this.timePicker;
      if (!format3) {
        if (timePicker) {
          format3 = locale2.dateTimeFormat;
        } else {
          format3 = locale2.dateFormat;
        }
      }
      return format3;
    },
    focus: function focus6() {
      if (this.focusElement) {
        this.focusElement.focus();
      } else if (this.rootInstance) {
        this.rootInstance.focus();
      }
    },
    saveFocusElement: function saveFocusElement(focusElement) {
      this.focusElement = focusElement;
    },
    saveRoot: function saveRoot(root) {
      this.rootInstance = root;
    }
  }
};
var CalendarHeader$2 = {
  name: "CalendarHeader",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    value: PropsTypes.object,
    locale: PropsTypes.object,
    yearSelectOffset: PropsTypes.number.def(10),
    yearSelectTotal: PropsTypes.number.def(20),
    Select: PropsTypes.object,
    prefixCls: PropsTypes.string,
    type: PropsTypes.string,
    showTypeSwitch: PropsTypes.looseBool,
    headerComponents: PropsTypes.array
  },
  methods: {
    onYearChange: function onYearChange(year) {
      var newValue = this.value.clone();
      newValue.year(parseInt(year, 10));
      this.__emit("valueChange", newValue);
    },
    onMonthChange: function onMonthChange(month) {
      var newValue = this.value.clone();
      newValue.month(parseInt(month, 10));
      this.__emit("valueChange", newValue);
    },
    yearSelectElement: function yearSelectElement(year) {
      var yearSelectOffset = this.yearSelectOffset, yearSelectTotal = this.yearSelectTotal, prefixCls2 = this.prefixCls, Select2 = this.Select;
      var start = year - yearSelectOffset;
      var end = start + yearSelectTotal;
      var options2 = [];
      var _loop = function _loop2(index3) {
        options2.push(createVNode(Select2.Option, {
          "key": "".concat(index3)
        }, {
          default: function _default8() {
            return [function() {
              return index3;
            }()];
          }
        }));
      };
      for (var index2 = start; index2 < end; index2++) {
        _loop(index2);
      }
      return createVNode(Select2, {
        "class": "".concat(prefixCls2, "-header-year-select"),
        "onChange": this.onYearChange,
        "dropdownStyle": {
          zIndex: 2e3
        },
        "dropdownMenuStyle": {
          maxHeight: "250px",
          overflow: "auto",
          fontSize: "12px"
        },
        "optionLabelProp": "children",
        "value": String(year),
        "showSearch": false
      }, {
        default: function _default8() {
          return [options2];
        }
      });
    },
    monthSelectElement: function monthSelectElement(month) {
      var value26 = this.value, Select2 = this.Select, prefixCls2 = this.prefixCls;
      var t = value26.clone();
      var options2 = [];
      for (var index2 = 0; index2 < 12; index2++) {
        t.month(index2);
        options2.push(createVNode(Select2.Option, {
          "key": "".concat(index2)
        }, {
          default: function _default8() {
            return [function() {
              return getMonthName(t);
            }()];
          }
        }));
      }
      return createVNode(Select2, {
        "class": "".concat(prefixCls2, "-header-month-select"),
        "dropdownStyle": {
          zIndex: 2e3
        },
        "dropdownMenuStyle": {
          maxHeight: "250px",
          overflow: "auto",
          overflowX: "hidden",
          fontSize: "12px"
        },
        "optionLabelProp": "children",
        "value": String(month),
        "showSearch": false,
        "onChange": this.onMonthChange
      }, {
        default: function _default8() {
          return [options2];
        }
      });
    },
    changeTypeToDate: function changeTypeToDate() {
      this.__emit("typeChange", "date");
    },
    changeTypeToMonth: function changeTypeToMonth() {
      this.__emit("typeChange", "month");
    }
  },
  render: function render31() {
    var value26 = this.value, locale2 = this.locale, prefixCls2 = this.prefixCls, type2 = this.type, showTypeSwitch = this.showTypeSwitch, headerComponents = this.headerComponents;
    var year = value26.year();
    var month = value26.month();
    var yearSelect = this.yearSelectElement(year);
    var monthSelect = type2 === "month" ? null : this.monthSelectElement(month);
    var switchCls = "".concat(prefixCls2, "-header-switcher");
    var typeSwitcher = showTypeSwitch ? createVNode("span", {
      "class": switchCls
    }, [type2 === "date" ? createVNode("span", {
      "class": "".concat(switchCls, "-focus")
    }, [locale2.month]) : createVNode("span", {
      "onClick": this.changeTypeToDate,
      "class": "".concat(switchCls, "-normal")
    }, [locale2.month]), type2 === "month" ? createVNode("span", {
      "class": "".concat(switchCls, "-focus")
    }, [locale2.year]) : createVNode("span", {
      "onClick": this.changeTypeToMonth,
      "class": "".concat(switchCls, "-normal")
    }, [locale2.year])]) : null;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [typeSwitcher, monthSelect, yearSelect, headerComponents]);
  }
};
var CalendarHeader$3 = CalendarHeader$2;
var FullCalendar = defineComponent({
  name: "FullCalendar",
  mixins: [BaseMixin, CommonMixin, CalendarMixin$1],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array, PropsTypes.func]),
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    defaultType: PropsTypes.string.def("date"),
    type: PropsTypes.string,
    fullscreen: PropsTypes.looseBool.def(false),
    monthCellRender: PropsTypes.func,
    dateCellRender: PropsTypes.func,
    showTypeSwitch: PropsTypes.looseBool.def(true),
    Select: PropsTypes.object.isRequired,
    headerComponents: PropsTypes.array,
    headerComponent: PropsTypes.object,
    headerRender: PropsTypes.func,
    showHeader: PropsTypes.looseBool.def(true),
    disabledDate: PropsTypes.func,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    selectedValue: PropsTypes.object,
    defaultSelectedValue: PropsTypes.object,
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    })
  },
  data: function data12() {
    var type2;
    if (hasProp(this, "type")) {
      type2 = this.type;
    } else {
      type2 = this.defaultType;
    }
    var props2 = this.$props;
    return {
      sType: type2,
      sValue: props2.value || props2.defaultValue || hooks(),
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  watch: {
    type: function type(val) {
      this.setState({
        sType: val
      });
    },
    value: function value6(val) {
      var sValue = val || this.defaultValue || getNowByCurrentStateValue(this.sValue);
      this.setState({
        sValue
      });
    },
    selectedValue: function selectedValue2(val) {
      this.setState({
        sSelectedValue: val
      });
    }
  },
  methods: {
    onMonthSelect: function onMonthSelect(value26) {
      this.onSelect(value26, {
        target: "month"
      });
    },
    setType: function setType(type2) {
      if (!hasProp(this, "type")) {
        this.setState({
          sType: type2
        });
      }
      this.__emit("typeChange", type2);
    }
  },
  render: function render32() {
    var props2 = getOptionProps(this);
    var locale2 = props2.locale, prefixCls2 = props2.prefixCls, fullscreen = props2.fullscreen, showHeader = props2.showHeader, headerComponent = props2.headerComponent, headerRender = props2.headerRender, disabledDate = props2.disabledDate;
    var value26 = this.sValue, type2 = this.sType;
    var header = null;
    if (showHeader) {
      if (headerRender) {
        header = headerRender(value26, type2, locale2);
      } else {
        var TheHeader = headerComponent || CalendarHeader$3;
        var headerProps = _extends(_extends(_extends({}, props2), this.$attrs), {
          prefixCls: "".concat(prefixCls2, "-full"),
          type: type2,
          value: value26,
          onTypeChange: this.setType,
          onValueChange: this.setValue,
          key: "calendar-header"
        });
        header = createVNode(TheHeader, headerProps, null);
      }
    }
    var table = type2 === "date" ? createVNode(DateTable$1, {
      "dateRender": props2.dateCellRender,
      "contentRender": props2.dateCellContentRender,
      "locale": locale2,
      "prefixCls": prefixCls2,
      "onSelect": this.onSelect,
      "value": value26,
      "disabledDate": disabledDate
    }, null) : createVNode(MonthTable$1, {
      "cellRender": props2.monthCellRender,
      "contentRender": props2.monthCellContentRender,
      "locale": locale2,
      "onSelect": this.onMonthSelect,
      "prefixCls": "".concat(prefixCls2, "-month-panel"),
      "value": value26,
      "disabledDate": disabledDate
    }, null);
    var children = [header, createVNode("div", {
      "key": "calendar-body",
      "class": "".concat(prefixCls2, "-calendar-body")
    }, [table])];
    var className = ["".concat(prefixCls2, "-full")];
    if (fullscreen) {
      className.push("".concat(prefixCls2, "-fullscreen"));
    }
    return this.renderRoot({
      children,
      class: className.join(" ")
    });
  }
});
var FullCalendar$1 = FullCalendar;
var __rest$G = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Checkbox$1 = defineComponent({
  name: "Checkbox",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    name: PropsTypes.string,
    id: PropsTypes.string,
    type: PropsTypes.string,
    defaultChecked: withUndefined(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.looseBool])),
    checked: withUndefined(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.looseBool])),
    disabled: PropsTypes.looseBool,
    tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    readonly: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    value: PropsTypes.any
  }, {
    prefixCls: "rc-checkbox",
    type: "checkbox",
    defaultChecked: false
  }),
  data: function data13() {
    var checked2 = hasProp(this, "checked") ? this.checked : this.defaultChecked;
    return {
      sChecked: checked2
    };
  },
  watch: {
    checked: function checked(val) {
      this.sChecked = val;
    }
  },
  mounted: function mounted9() {
    nextTick(function() {
    });
  },
  methods: {
    focus: function focus7() {
      this.$refs.input.focus();
    },
    blur: function blur6() {
      this.$refs.input.blur();
    },
    handleChange: function handleChange4(e) {
      var props2 = getOptionProps(this);
      if (props2.disabled) {
        return;
      }
      if (!("checked" in props2)) {
        this.sChecked = e.target.checked;
      }
      e.shiftKey = this.eventShiftKey;
      var eventObj = {
        target: _extends(_extends({}, props2), {
          checked: e.target.checked
        }),
        stopPropagation: function stopPropagation2() {
          e.stopPropagation();
        },
        preventDefault: function preventDefault2() {
          e.preventDefault();
        },
        nativeEvent: e
      };
      if ("checked" in props2) {
        this.$refs.input.checked = props2.checked;
      }
      this.__emit("change", eventObj);
      this.eventShiftKey = false;
    },
    onClick: function onClick4(e) {
      this.__emit("click", e);
      this.eventShiftKey = e.shiftKey;
    }
  },
  render: function render33() {
    var _classNames;
    var _a = getOptionProps(this), prefixCls2 = _a.prefixCls, name2 = _a.name, id2 = _a.id, type2 = _a.type, disabled = _a.disabled, readonly = _a.readonly, tabindex = _a.tabindex, autofocus = _a.autofocus, value26 = _a.value, others = __rest$G(_a, ["prefixCls", "name", "id", "type", "disabled", "readonly", "tabindex", "autofocus", "value"]);
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, onFocus6 = _this$$attrs.onFocus, onBlur7 = _this$$attrs.onBlur;
    var globalProps = Object.keys(_extends(_extends({}, others), this.$attrs)).reduce(function(prev3, key2) {
      if (key2.substr(0, 5) === "aria-" || key2.substr(0, 5) === "data-" || key2 === "role") {
        prev3[key2] = others[key2];
      }
      return prev3;
    }, {});
    var sChecked = this.sChecked;
    var classString = classNames(prefixCls2, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-checked"), sChecked), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames));
    var inputProps2 = _extends(_extends({
      name: name2,
      id: id2,
      type: type2,
      readonly,
      disabled,
      tabindex,
      class: "".concat(prefixCls2, "-input"),
      checked: !!sChecked,
      autofocus,
      value: value26
    }, globalProps), {
      onChange: this.handleChange,
      onClick: this.onClick,
      onFocus: onFocus6,
      onBlur: onBlur7
    });
    return createVNode("span", {
      "class": classString
    }, [createVNode("input", _objectSpread2({
      "ref": "input"
    }, inputProps2), null), createVNode("span", {
      "class": "".concat(prefixCls2, "-inner")
    }, null)]);
  }
});
var __rest$F = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var radioProps = {
  prefixCls: PropsTypes.string,
  defaultChecked: PropsTypes.looseBool,
  checked: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  isGroup: PropsTypes.looseBool,
  value: PropsTypes.any,
  name: PropsTypes.string,
  id: PropsTypes.string,
  autofocus: PropsTypes.looseBool,
  type: PropsTypes.string.def("radio"),
  onChange: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func
};
var Radio = defineComponent({
  name: "ARadio",
  props: radioProps,
  emits: ["update:checked", "update:value", "change", "blur", "focus"],
  setup: function setup56() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      radioGroupContext: inject("radioGroupContext", null)
    };
  },
  methods: {
    focus: function focus8() {
      this.$refs.vcCheckbox.focus();
    },
    blur: function blur7() {
      this.$refs.vcCheckbox.blur();
    },
    handleChange: function handleChange5(event) {
      var targetChecked = event.target.checked;
      this.$emit("update:checked", targetChecked);
      this.$emit("update:value", targetChecked);
      this.$emit("change", event);
    },
    onChange2: function onChange2(e) {
      this.$emit("change", e);
      if (this.radioGroupContext && this.radioGroupContext.onRadioChange) {
        this.radioGroupContext.onRadioChange(e);
      }
    }
  },
  render: function render34() {
    var _classNames;
    var $slots = this.$slots, radioGroup = this.radioGroupContext;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, restProps = __rest$F(props2, ["prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("radio", customizePrefixCls);
    var rProps = _extends({
      prefixCls: prefixCls2
    }, restProps);
    if (radioGroup) {
      rProps.name = radioGroup.name;
      rProps.onChange = this.onChange2;
      rProps.checked = props2.value === radioGroup.stateValue;
      rProps.disabled = props2.disabled || radioGroup.disabled;
    } else {
      rProps.onChange = this.handleChange;
    }
    var wrapperClassString = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-wrapper"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-wrapper-checked"), rProps.checked), _defineProperty(_classNames, "".concat(prefixCls2, "-wrapper-disabled"), rProps.disabled), _classNames));
    return createVNode("label", {
      "class": wrapperClassString
    }, [createVNode(Checkbox$1, _objectSpread2(_objectSpread2({}, rProps), {}, {
      "ref": "vcCheckbox"
    }), null), $slots.default && createVNode("span", null, [$slots.default()])]);
  }
});
var Group$1 = defineComponent({
  name: "ARadioGroup",
  props: {
    prefixCls: PropsTypes.string,
    defaultValue: PropsTypes.any,
    value: PropsTypes.any,
    size: PropsTypes.oneOf(tuple("large", "default", "small")).def("default"),
    options: PropsTypes.array,
    disabled: PropsTypes.looseBool,
    name: PropsTypes.string,
    buttonStyle: PropsTypes.string.def("outline"),
    onChange: PropsTypes.func
  },
  emits: ["update:value", "change"],
  setup: function setup57() {
    return {
      updatingValue: false,
      configProvider: inject("configProvider", defaultConfigProvider),
      radioGroupContext: null
    };
  },
  data: function data14() {
    var value26 = this.value, defaultValue = this.defaultValue;
    return {
      stateValue: value26 === void 0 ? defaultValue : value26
    };
  },
  watch: {
    value: function value7(val) {
      this.updatingValue = false;
      this.stateValue = val;
    }
  },
  created: function created7() {
    this.radioGroupContext = provide("radioGroupContext", this);
  },
  methods: {
    onRadioChange: function onRadioChange(ev) {
      var _this = this;
      var lastValue = this.stateValue;
      var value26 = ev.target.value;
      if (!hasProp(this, "value")) {
        this.stateValue = value26;
      }
      if (!this.updatingValue && value26 !== lastValue) {
        this.updatingValue = true;
        this.$emit("update:value", value26);
        this.$emit("change", ev);
      }
      nextTick(function() {
        _this.updatingValue = false;
      });
    }
  },
  render: function render35() {
    var _this2 = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, options2 = props2.options, buttonStyle = props2.buttonStyle;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("radio", customizePrefixCls);
    var groupPrefixCls = "".concat(prefixCls2, "-group");
    var classString = classNames(groupPrefixCls, "".concat(groupPrefixCls, "-").concat(buttonStyle), _defineProperty({}, "".concat(groupPrefixCls, "-").concat(props2.size), props2.size));
    var children = filterEmpty(getSlot(this));
    if (options2 && options2.length > 0) {
      children = options2.map(function(option) {
        if (typeof option === "string") {
          return createVNode(Radio, {
            "key": option,
            "prefixCls": prefixCls2,
            "disabled": props2.disabled,
            "value": option,
            "checked": _this2.stateValue === option
          }, {
            default: function _default8() {
              return [option];
            }
          });
        }
        return createVNode(Radio, {
          "key": "radio-group-value-options-".concat(option.value),
          "prefixCls": prefixCls2,
          "disabled": option.disabled || props2.disabled,
          "value": option.value,
          "checked": _this2.stateValue === option.value
        }, {
          default: function _default8() {
            return [option.label];
          }
        });
      });
    }
    return createVNode("div", {
      "class": classString
    }, [children]);
  }
});
var __rest$E = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Button = defineComponent({
  name: "ARadioButton",
  props: _extends({}, radioProps),
  setup: function setup58() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      radioGroupContext: inject("radioGroupContext", {})
    };
  },
  render: function render36() {
    var _this = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, otherProps = __rest$E(props2, ["prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("radio-button", customizePrefixCls);
    var rProps = _extends({
      prefixCls: prefixCls2
    }, otherProps);
    if (this.radioGroupContext) {
      rProps.onChange = this.radioGroupContext.onRadioChange;
      rProps.checked = props2.value === this.radioGroupContext.stateValue;
      rProps.disabled = props2.disabled || this.radioGroupContext.disabled;
    }
    return createVNode(Radio, rProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
Radio.Group = Group$1;
Radio.Button = Button;
Radio.install = function(app) {
  app.component(Radio.name, Radio);
  app.component(Radio.Group.name, Radio.Group);
  app.component(Radio.Button.name, Radio.Button);
  return app;
};
function getMonthsLocale(value26) {
  var current2 = value26.clone();
  var localeData = value26.localeData();
  var months2 = [];
  for (var i = 0; i < 12; i++) {
    current2.month(i);
    months2.push(localeData.monthsShort(current2));
  }
  return months2;
}
var HeaderProps = {
  prefixCls: PropsTypes.string,
  locale: PropsTypes.any,
  fullscreen: PropsTypes.looseBool,
  yearSelectOffset: PropsTypes.number,
  yearSelectTotal: PropsTypes.number,
  type: PropsTypes.string,
  value: {
    type: Object
  },
  validRange: {
    type: Array
  },
  headerRender: PropsTypes.func,
  onValueChange: PropsTypes.func,
  onTypeChange: PropsTypes.func
};
var Header$3 = defineComponent({
  name: "CalendarHeader",
  inheritAttrs: false,
  props: _extends(_extends({}, HeaderProps), {
    yearSelectOffset: PropsTypes.number.def(10),
    yearSelectTotal: PropsTypes.number.def(20)
  }),
  setup: function setup59() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      calendarHeaderNode: void 0
    };
  },
  methods: {
    getYearSelectElement: function getYearSelectElement(prefixCls2, year) {
      var _this = this;
      var yearSelectOffset = this.yearSelectOffset, yearSelectTotal = this.yearSelectTotal, _this$locale = this.locale, locale2 = _this$locale === void 0 ? {} : _this$locale, fullscreen = this.fullscreen, validRange = this.validRange;
      var start = year - yearSelectOffset;
      var end = start + yearSelectTotal;
      if (validRange) {
        start = validRange[0].get("year");
        end = validRange[1].get("year") + 1;
      }
      var suffix = locale2 && locale2.year === "\u5E74" ? "\u5E74" : "";
      var options2 = [];
      for (var index2 = start; index2 < end; index2++) {
        options2.push({
          label: "".concat(index2).concat(suffix),
          value: index2
        });
      }
      return createVNode(VcSelect, {
        "size": fullscreen ? void 0 : "small",
        "class": "".concat(prefixCls2, "-year-select"),
        "onChange": this.onYearChange,
        "value": year,
        "options": options2,
        "getPopupContainer": function getPopupContainer() {
          return _this.calendarHeaderNode;
        }
      }, null);
    },
    getMonthSelectElement: function getMonthSelectElement(prefixCls2, month, months2) {
      var _this2 = this;
      var fullscreen = this.fullscreen, validRange = this.validRange, value26 = this.value;
      var start = 0;
      var end = 11;
      if (validRange) {
        var _validRange = _slicedToArray(validRange, 2), rangeStart = _validRange[0], rangeEnd = _validRange[1];
        var currentYear = value26.get("year");
        if (rangeEnd.get("year") === currentYear) {
          end = rangeEnd.get("month") + 1;
        }
        if (rangeStart.get("year") === currentYear) {
          start = rangeStart.get("month");
        }
      }
      var options2 = [];
      for (var index2 = start; index2 <= end; index2 += 1) {
        options2.push({
          label: months2[index2],
          value: index2
        });
      }
      return createVNode(VcSelect, {
        "size": fullscreen ? void 0 : "small",
        "class": "".concat(prefixCls2, "-month-select"),
        "value": month,
        "options": options2,
        "onChange": this.onMonthChange,
        "getPopupContainer": function getPopupContainer() {
          return _this2.calendarHeaderNode;
        }
      }, null);
    },
    onYearChange: function onYearChange2(year) {
      var value26 = this.value, validRange = this.validRange;
      var newValue = value26.clone();
      newValue.year(parseInt(year, 10));
      if (validRange) {
        var _validRange2 = _slicedToArray(validRange, 2), start = _validRange2[0], end = _validRange2[1];
        var newYear = newValue.get("year");
        var newMonth = newValue.get("month");
        if (newYear === end.get("year") && newMonth > end.get("month")) {
          newValue.month(end.get("month"));
        }
        if (newYear === start.get("year") && newMonth < start.get("month")) {
          newValue.month(start.get("month"));
        }
      }
      this.$emit("valueChange", newValue);
    },
    onMonthChange: function onMonthChange2(month) {
      var newValue = this.value.clone();
      newValue.month(parseInt(month, 10));
      this.$emit("valueChange", newValue);
    },
    onInternalTypeChange: function onInternalTypeChange(e) {
      this.triggerTypeChange(e.target.value);
    },
    triggerTypeChange: function triggerTypeChange(val) {
      this.$emit("typeChange", val);
    },
    getMonthYearSelections: function getMonthYearSelections(getPrefixCls2) {
      var _this$$props = this.$props, customizePrefixCls = _this$$props.prefixCls, type2 = _this$$props.type, value26 = _this$$props.value;
      var prefixCls2 = getPrefixCls2("fullcalendar", customizePrefixCls);
      var yearReactNode = this.getYearSelectElement(prefixCls2, value26.year());
      var monthReactNode = type2 === "month" ? this.getMonthSelectElement(prefixCls2, value26.month(), getMonthsLocale(value26)) : null;
      return {
        yearReactNode,
        monthReactNode
      };
    },
    getTypeSwitch: function getTypeSwitch() {
      var _this$$props2 = this.$props, _this$$props2$locale = _this$$props2.locale, locale2 = _this$$props2$locale === void 0 ? {} : _this$$props2$locale, type2 = _this$$props2.type, fullscreen = _this$$props2.fullscreen;
      var size = fullscreen ? "default" : "small";
      return createVNode(Group$1, {
        "onChange": this.onInternalTypeChange,
        "value": type2,
        "size": size
      }, {
        default: function _default8() {
          return [createVNode(Button, {
            "value": "month"
          }, {
            default: function _default9() {
              return [locale2.month];
            }
          }), createVNode(Button, {
            "value": "year"
          }, {
            default: function _default9() {
              return [locale2.year];
            }
          })];
        }
      });
    },
    triggerValueChange: function triggerValueChange() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit.apply(this, ["valueChange"].concat(args));
    },
    saveCalendarHeaderNode: function saveCalendarHeaderNode(node) {
      this.calendarHeaderNode = node;
    },
    headerRenderCustom: function headerRenderCustom(headerRender) {
      var _this$$props3 = this.$props, type2 = _this$$props3.type, value26 = _this$$props3.value;
      return headerRender({
        value: value26,
        type: type2 || "month",
        onChange: this.triggerValueChange,
        onTypeChange: this.triggerTypeChange
      });
    }
  },
  render: function render37() {
    var customizePrefixCls = this.prefixCls, headerRender = this.headerRender;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("fullcalendar", customizePrefixCls);
    var typeSwitch = this.getTypeSwitch();
    var _this$getMonthYearSel = this.getMonthYearSelections(getPrefixCls2), yearReactNode = _this$getMonthYearSel.yearReactNode, monthReactNode = _this$getMonthYearSel.monthReactNode;
    return headerRender ? this.headerRenderCustom(headerRender) : createVNode("div", {
      "class": "".concat(prefixCls2, "-header"),
      "ref": this.saveCalendarHeaderNode
    }, [yearReactNode, monthReactNode, typeSwitch]);
  }
});
var TimeType$1 = {
  validator: function validator(value26) {
    return typeof value26 === "string" || isNil(value26) || hooks.isMoment(value26);
  }
};
var TimeOrTimesType = {
  validator: function validator2(value26) {
    if (Array.isArray(value26)) {
      return value26.length === 0 || value26.findIndex(function(val) {
        return typeof val !== "string";
      }) === -1 || value26.findIndex(function(val) {
        return !isNil(val) && !hooks.isMoment(val);
      }) === -1;
    } else {
      return typeof value26 === "string" || isNil(value26) || hooks.isMoment(value26);
    }
  }
};
function checkValidate(componentName, value26, propName, valueFormat) {
  var values = Array.isArray(value26) ? value26 : [value26];
  values.forEach(function(val) {
    if (!val)
      return;
    valueFormat && warning$1(interopDefault(hooks)(val, valueFormat).isValid(), componentName, "When set `valueFormat`, `".concat(propName, "` should provides invalidate string time. "));
    !valueFormat && warning$1(interopDefault(hooks).isMoment(val) && val.isValid(), componentName, "`".concat(propName, "` provides invalidate moment time. If you want to set empty value, use `null` instead."));
  });
}
var stringToMoment = function stringToMoment2(value26, valueFormat) {
  if (Array.isArray(value26)) {
    return value26.map(function(val) {
      return typeof val === "string" && val ? interopDefault(hooks)(val, valueFormat) : val || null;
    });
  } else {
    return typeof value26 === "string" && value26 ? interopDefault(hooks)(value26, valueFormat) : value26 || null;
  }
};
var momentToString = function momentToString2(value26, valueFormat) {
  if (Array.isArray(value26)) {
    return value26.map(function(val) {
      return interopDefault(hooks).isMoment(val) ? val.format(valueFormat) : val;
    });
  } else {
    return interopDefault(hooks).isMoment(value26) ? value26.format(valueFormat) : value26;
  }
};
function noop$A() {
  return null;
}
function zerofixed(v) {
  if (v < 10) {
    return "0".concat(v);
  }
  return "".concat(v);
}
var CalendarModeTypes = tuple("month", "year");
var CalendarProps = {
  monthCellRender: PropsTypes.func,
  dateCellRender: PropsTypes.func,
  monthFullCellRender: PropsTypes.func,
  dateFullCellRender: PropsTypes.func,
  prefixCls: PropsTypes.string,
  value: TimeType$1,
  defaultValue: TimeType$1,
  mode: PropsTypes.oneOf(CalendarModeTypes),
  fullscreen: PropsTypes.looseBool.def(true),
  locale: PropsTypes.object.def({}),
  disabledDate: PropsTypes.func,
  validRange: {
    type: Array
  },
  headerRender: PropsTypes.func,
  valueFormat: PropsTypes.string,
  onPanelChange: PropsTypes.func,
  onSelect: PropsTypes.func,
  onChange: PropsTypes.func,
  "onUpdate:value": PropsTypes.func
};
var Calendar$2 = defineComponent({
  name: "ACalendar",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: CalendarProps,
  setup: function setup60() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      sPrefixCls: void 0
    };
  },
  data: function data15() {
    var value26 = this.value, defaultValue = this.defaultValue, valueFormat = this.valueFormat;
    var sValue = value26 || defaultValue || interopDefault(hooks)();
    checkValidate("Calendar", defaultValue, "defaultValue", valueFormat);
    checkValidate("Calendar", value26, "value", valueFormat);
    return {
      sValue: stringToMoment(sValue, valueFormat),
      sMode: this.mode || "month"
    };
  },
  watch: {
    value: function value8(val) {
      checkValidate("Calendar", val, "value", this.valueFormat);
      this.setState({
        sValue: stringToMoment(val, this.valueFormat)
      });
    },
    mode: function mode(val) {
      this.setState({
        sMode: val
      });
    }
  },
  methods: {
    onHeaderValueChange: function onHeaderValueChange(value26) {
      this.setValue(value26, "changePanel");
    },
    onHeaderTypeChange: function onHeaderTypeChange(mode4) {
      this.sMode = mode4;
      this.triggerPanelChange(this.sValue, mode4);
    },
    triggerPanelChange: function triggerPanelChange(value26, mode4) {
      var val = this.valueFormat ? momentToString(value26, this.valueFormat) : value26;
      if (value26 !== this.sValue) {
        this.$emit("update:value", val);
        this.$emit("change", val);
      }
      this.$emit("panelChange", val, mode4);
    },
    triggerSelect: function triggerSelect(value26) {
      this.setValue(value26, "select");
    },
    setValue: function setValue4(value26, way) {
      var prevValue = this.value ? stringToMoment(this.value, this.valueFormat) : this.sValue;
      var mode4 = this.sMode, valueFormat = this.valueFormat;
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      if (way === "select") {
        var val = valueFormat ? momentToString(value26, valueFormat) : value26;
        if (prevValue && prevValue.month() !== value26.month()) {
          this.triggerPanelChange(value26, mode4);
        } else {
          this.$emit("update:value", val);
        }
        this.$emit("select", val);
      } else if (way === "changePanel") {
        this.triggerPanelChange(value26, mode4);
      }
    },
    getDateRange: function getDateRange(validRange, disabledDate) {
      return function(current2) {
        if (!current2) {
          return false;
        }
        var _validRange = _slicedToArray(validRange, 2), startDate = _validRange[0], endDate = _validRange[1];
        var inRange = !current2.isBetween(startDate, endDate, "days", "[]");
        if (disabledDate) {
          return disabledDate(current2) || inRange;
        }
        return inRange;
      };
    },
    getDefaultLocale: function getDefaultLocale() {
      var result = _extends(_extends({}, enUS), this.$props.locale);
      result.lang = _extends(_extends({}, result.lang), (this.$props.locale || {}).lang);
      return result;
    },
    monthCellRender2: function monthCellRender2(_ref) {
      var value26 = _ref.current;
      var sPrefixCls = this.sPrefixCls, $slots = this.$slots;
      var monthCellRender = this.monthCellRender || $slots.monthCellRender || noop$A;
      return createVNode("div", {
        "class": "".concat(sPrefixCls, "-month")
      }, [createVNode("div", {
        "class": "".concat(sPrefixCls, "-value")
      }, [value26.localeData().monthsShort(value26)]), createVNode("div", {
        "class": "".concat(sPrefixCls, "-content")
      }, [monthCellRender({
        current: value26
      })])]);
    },
    dateCellRender2: function dateCellRender2(_ref2) {
      var value26 = _ref2.current;
      var sPrefixCls = this.sPrefixCls, $slots = this.$slots;
      var dateCellRender = this.dateCellRender || $slots.dateCellRender || noop$A;
      return createVNode("div", {
        "class": "".concat(sPrefixCls, "-date")
      }, [createVNode("div", {
        "class": "".concat(sPrefixCls, "-value")
      }, [zerofixed(value26.date())]), createVNode("div", {
        "class": "".concat(sPrefixCls, "-content")
      }, [dateCellRender({
        current: value26
      })])]);
    },
    renderCalendar: function renderCalendar(locale2, localeCode) {
      var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
      var value26 = this.sValue, mode4 = this.sMode, $slots = this.$slots;
      if (value26 && localeCode) {
        value26.locale(localeCode);
      }
      var customizePrefixCls = props2.prefixCls, fullscreen = props2.fullscreen, dateFullCellRender = props2.dateFullCellRender, monthFullCellRender = props2.monthFullCellRender, className = props2.class, style3 = props2.style;
      var headerRender = this.headerRender || $slots.headerRender;
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("fullcalendar", customizePrefixCls);
      this.sPrefixCls = prefixCls2;
      var cls = className || "";
      if (fullscreen) {
        cls += " ".concat(prefixCls2, "-fullscreen");
      }
      var monthCellRender = monthFullCellRender || $slots.monthFullCellRender || this.monthCellRender2;
      var dateCellRender = dateFullCellRender || $slots.dateFullCellRender || this.dateCellRender2;
      var disabledDate = props2.disabledDate;
      if (props2.validRange) {
        disabledDate = this.getDateRange(props2.validRange, disabledDate);
      }
      var fullCalendarProps = _extends(_extends(_extends({}, props2), this.$attrs), {
        Select: {},
        locale: locale2.lang,
        type: mode4 === "year" ? "month" : "date",
        prefixCls: prefixCls2,
        showHeader: false,
        value: value26,
        monthCellRender,
        dateCellRender,
        disabledDate,
        onSelect: this.triggerSelect
      });
      return createVNode("div", {
        "class": cls,
        "style": style3
      }, [createVNode(Header$3, {
        "fullscreen": fullscreen,
        "type": mode4,
        "headerRender": headerRender,
        "value": value26,
        "locale": locale2.lang,
        "prefixCls": prefixCls2,
        "onTypeChange": this.onHeaderTypeChange,
        "onValueChange": this.onHeaderValueChange,
        "validRange": props2.validRange
      }, null), createVNode(FullCalendar$1, fullCalendarProps, null)]);
    }
  },
  render: function render38() {
    return createVNode(LocaleReceiver, {
      "componentName": "Calendar",
      "defaultLocale": this.getDefaultLocale,
      "children": this.renderCalendar
    }, null);
  }
});
var index$g = withInstall(Calendar$2);
var KeyCode = {
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};
var sentinelStyle = {
  width: 0,
  height: 0,
  overflow: "hidden",
  position: "absolute"
};
var Sentinel = {
  name: "Sentinel",
  props: {
    setRef: PropsTypes.func,
    prevElement: PropsTypes.any,
    nextElement: PropsTypes.any
  },
  methods: {
    onKeyDown: function onKeyDown(_ref) {
      var target = _ref.target, which = _ref.which, shiftKey = _ref.shiftKey;
      var _this$$props = this.$props, nextElement = _this$$props.nextElement, prevElement = _this$$props.prevElement;
      if (which !== KeyCode$2.TAB || document.activeElement !== target)
        return;
      if (!shiftKey && nextElement) {
        nextElement.focus();
      }
      if (shiftKey && prevElement) {
        prevElement.focus();
      }
    }
  },
  render: function render39() {
    var setRef = this.$props.setRef;
    return createVNode("div", {
      "tabindex": 0,
      "ref": setRef,
      "style": sentinelStyle,
      "onKeydown": this.onKeyDown,
      "role": "presentation"
    }, [getSlot(this)]);
  }
};
function toArray$4(children) {
  var c = [];
  children.forEach(function(child) {
    if (isVNode(child)) {
      c.push(child);
    }
  });
  return c;
}
function getActiveIndex(children, activeKey2) {
  var c = toArray$4(children);
  for (var i = 0; i < c.length; i++) {
    if (c[i].key === activeKey2) {
      return i;
    }
  }
  return -1;
}
function setTransform(style3, v) {
  style3.transform = v;
  style3.webkitTransform = v;
  style3.mozTransform = v;
}
function isTransform3dSupported(style3) {
  return ("transform" in style3 || "webkitTransform" in style3 || "MozTransform" in style3) && window.atob;
}
function getTransformPropValue(v) {
  return {
    transform: v,
    WebkitTransform: v,
    MozTransform: v
  };
}
function isVertical(tabBarPosition2) {
  return tabBarPosition2 === "left" || tabBarPosition2 === "right";
}
function getTransformByIndex(index2, tabBarPosition2) {
  var direction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "ltr";
  var translate = isVertical(tabBarPosition2) ? "translateY" : "translateX";
  if (!isVertical(tabBarPosition2) && direction === "rtl") {
    return "".concat(translate, "(").concat(index2 * 100, "%) translateZ(0)");
  }
  return "".concat(translate, "(").concat(-index2 * 100, "%) translateZ(0)");
}
function getMarginStyle(index2, tabBarPosition2) {
  var marginDirection = isVertical(tabBarPosition2) ? "marginTop" : "marginLeft";
  return _defineProperty({}, marginDirection, "".concat(-index2 * 100, "%"));
}
function getStyle(el, property) {
  return +window.getComputedStyle(el).getPropertyValue(property).replace("px", "");
}
function getDataAttr(props2) {
  return Object.keys(props2).reduce(function(prev3, key2) {
    if (key2.substr(0, 5) === "aria-" || key2.substr(0, 5) === "data-" || key2 === "role") {
      prev3[key2] = props2[key2];
    }
    return prev3;
  }, {});
}
function toNum(style3, property) {
  return +style3.getPropertyValue(property).replace("px", "");
}
function getTypeValue(start, current2, end, tabNode, wrapperNode) {
  var total2 = getStyle(wrapperNode, "padding-".concat(start));
  if (!tabNode || !tabNode.parentNode) {
    return total2;
  }
  var childNodes = tabNode.parentNode.childNodes;
  Array.prototype.some.call(childNodes, function(node) {
    if (!node.tagName) {
      return false;
    }
    var style3 = window.getComputedStyle(node);
    if (node !== tabNode) {
      total2 += toNum(style3, "margin-".concat(start));
      total2 += node[current2];
      total2 += toNum(style3, "margin-".concat(end));
      if (style3.boxSizing === "content-box") {
        total2 += toNum(style3, "border-".concat(start, "-width")) + toNum(style3, "border-".concat(end, "-width"));
      }
      return false;
    }
    total2 += toNum(style3, "margin-".concat(start));
    return true;
  });
  return total2;
}
function getLeft(tabNode, wrapperNode) {
  return getTypeValue("left", "offsetWidth", "right", tabNode, wrapperNode);
}
function getTop2(tabNode, wrapperNode) {
  return getTypeValue("top", "offsetHeight", "bottom", tabNode, wrapperNode);
}
var __rest$D = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function getDefaultActiveKey(props2) {
  var activeKey2;
  var children = props2.children;
  children.forEach(function(child) {
    if (child && !isValid$1(activeKey2) && !child.disabled) {
      activeKey2 = child.key;
    }
  });
  return activeKey2;
}
function activeKeyIsValid(props2, key2) {
  var children = props2.children;
  var keys = children.map(function(child) {
    return child && child.key;
  });
  return keys.indexOf(key2) >= 0;
}
var Tabs$1 = defineComponent({
  name: "Tabs",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    destroyInactiveTabPane: PropsTypes.looseBool,
    renderTabBar: PropsTypes.func.isRequired,
    renderTabContent: PropsTypes.func.isRequired,
    navWrapper: PropsTypes.func.def(function(arg) {
      return arg;
    }),
    children: PropsTypes.any.def([]),
    prefixCls: PropsTypes.string.def("ant-tabs"),
    tabBarPosition: PropsTypes.string.def("top"),
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    defaultActiveKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    direction: PropsTypes.string.def("ltr"),
    tabBarGutter: PropsTypes.number
  },
  setup: function setup61(props2) {
    var activeKey2;
    if (props2.activeKey !== void 0) {
      activeKey2 = props2.activeKey;
    } else if (props2.defaultActiveKey !== void 0) {
      activeKey2 = props2.defaultActiveKey;
    } else {
      activeKey2 = getDefaultActiveKey(props2);
    }
    var state = reactive({
      _activeKey: activeKey2
    });
    watchEffect(function() {
      if (props2.activeKey !== void 0) {
        state._activeKey = props2.activeKey;
      } else if (!activeKeyIsValid(props2, state._activeKey)) {
        state._activeKey = getDefaultActiveKey(props2);
      }
    }, {
      flush: "sync"
    });
    return {
      state
    };
  },
  created: function created8() {
    this.panelSentinelStart = void 0;
    this.panelSentinelEnd = void 0;
    this.sentinelStart = void 0;
    this.sentinelEnd = void 0;
    provide("sentinelContext", this);
  },
  beforeUnmount: function beforeUnmount7() {
    this.destroy = true;
    cancelAnimationFrame(this.sentinelId);
  },
  methods: {
    onTabClick: function onTabClick(activeKey2, e) {
      if (this.tabBar.props && this.tabBar.props.onTabClick) {
        this.tabBar.props.onTabClick(activeKey2, e);
      }
      this.setActiveKey(activeKey2);
    },
    onNavKeyDown: function onNavKeyDown(e) {
      var eventKeyCode = e.keyCode;
      if (eventKeyCode === KeyCode.RIGHT || eventKeyCode === KeyCode.DOWN) {
        e.preventDefault();
        var nextKey = this.getNextActiveKey(true);
        this.onTabClick(nextKey);
      } else if (eventKeyCode === KeyCode.LEFT || eventKeyCode === KeyCode.UP) {
        e.preventDefault();
        var previousKey = this.getNextActiveKey(false);
        this.onTabClick(previousKey);
      }
    },
    onScroll: function onScroll(_ref) {
      var target = _ref.target, currentTarget = _ref.currentTarget;
      if (target === currentTarget && target.scrollLeft > 0) {
        target.scrollLeft = 0;
      }
    },
    setSentinelStart: function setSentinelStart(node) {
      this.sentinelStart = node;
    },
    setSentinelEnd: function setSentinelEnd(node) {
      this.sentinelEnd = node;
    },
    setPanelSentinelStart: function setPanelSentinelStart(node) {
      if (node !== this.panelSentinelStart) {
        this.updateSentinelContext();
      }
      this.panelSentinelStart = node;
    },
    setPanelSentinelEnd: function setPanelSentinelEnd(node) {
      if (node !== this.panelSentinelEnd) {
        this.updateSentinelContext();
      }
      this.panelSentinelEnd = node;
    },
    setActiveKey: function setActiveKey(activeKey2) {
      if (this.state._activeKey !== activeKey2) {
        var props2 = this.$props;
        if (props2.activeKey === void 0) {
          this.state._activeKey = activeKey2;
        }
        this.__emit("update:activeKey", activeKey2);
        this.__emit("change", activeKey2);
      }
    },
    getNextActiveKey: function getNextActiveKey(next3) {
      var activeKey2 = this.state._activeKey;
      var children = [];
      this.$props.children.forEach(function(c) {
        var _a, _b;
        if (c && !((_a = c.props) === null || _a === void 0 ? void 0 : _a.disabled) && ((_b = c.props) === null || _b === void 0 ? void 0 : _b.disabled) !== "") {
          if (next3) {
            children.push(c);
          } else {
            children.unshift(c);
          }
        }
      });
      var length = children.length;
      var ret = length && children[0].key;
      children.forEach(function(child, i) {
        if (child.key === activeKey2) {
          if (i === length - 1) {
            ret = children[0].key;
          } else {
            ret = children[i + 1].key;
          }
        }
      });
      return ret;
    },
    updateSentinelContext: function updateSentinelContext() {
      var _this = this;
      if (this.destroy)
        return;
      cancelAnimationFrame(this.sentinelId);
      this.sentinelId = requestAnimationFrame(function() {
        if (_this.destroy)
          return;
        _this.$forceUpdate();
      });
    }
  },
  render: function render40() {
    var _cls;
    var props2 = this.$props;
    var prefixCls2 = props2.prefixCls, navWrapper = props2.navWrapper, tabBarPosition2 = props2.tabBarPosition, renderTabContent = props2.renderTabContent, renderTabBar = props2.renderTabBar, destroyInactiveTabPane = props2.destroyInactiveTabPane, direction = props2.direction, tabBarGutter = props2.tabBarGutter;
    var _a = this.$attrs, className = _a.class;
    _a.onChange;
    var style3 = _a.style, restProps = __rest$D(_a, ["class", "onChange", "style"]);
    var cls = (_cls = {}, _defineProperty(_cls, className, className), _defineProperty(_cls, prefixCls2, 1), _defineProperty(_cls, "".concat(prefixCls2, "-").concat(tabBarPosition2), 1), _defineProperty(_cls, "".concat(prefixCls2, "-rtl"), direction === "rtl"), _cls);
    this.tabBar = renderTabBar();
    var tabBar = cloneElement(this.tabBar, {
      prefixCls: prefixCls2,
      navWrapper,
      tabBarPosition: tabBarPosition2,
      panels: props2.children,
      activeKey: this.state._activeKey,
      direction,
      tabBarGutter,
      onKeydown: this.onNavKeyDown,
      onTabClick: this.onTabClick,
      key: "tabBar"
    });
    var tabContent = cloneElement(renderTabContent(), {
      prefixCls: prefixCls2,
      tabBarPosition: tabBarPosition2,
      activeKey: this.state._activeKey,
      destroyInactiveTabPane,
      direction,
      onChange: this.setActiveKey,
      children: props2.children,
      key: "tabContent"
    });
    var sentinelStart = createVNode(Sentinel, {
      "key": "sentinelStart",
      "setRef": this.setSentinelStart,
      "nextElement": this.panelSentinelStart
    }, null);
    var sentinelEnd = createVNode(Sentinel, {
      "key": "sentinelEnd",
      "setRef": this.setSentinelEnd,
      "prevElement": this.panelSentinelEnd
    }, null);
    var contents = [];
    if (tabBarPosition2 === "bottom") {
      contents.push(sentinelStart, tabContent, sentinelEnd, tabBar);
    } else {
      contents.push(tabBar, sentinelStart, tabContent, sentinelEnd);
    }
    var p = _extends(_extends({}, getDataAttr(restProps)), {
      style: style3,
      onScroll: this.onScroll,
      class: cls
    });
    return createVNode("div", p, [contents]);
  }
});
var TabPane$1 = defineComponent({
  name: "TabPane",
  props: {
    active: PropsTypes.looseBool,
    destroyInactiveTabPane: PropsTypes.looseBool,
    forceRender: PropsTypes.looseBool,
    placeholder: PropsTypes.any,
    rootPrefixCls: PropsTypes.string,
    tab: PropsTypes.any,
    closable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool
  },
  setup: function setup62() {
    return {
      isActived: void 0,
      sentinelContext: inject("sentinelContext", {})
    };
  },
  render: function render41() {
    var _cls;
    var _this$$props = this.$props, destroyInactiveTabPane = _this$$props.destroyInactiveTabPane, active = _this$$props.active, forceRender = _this$$props.forceRender, rootPrefixCls = _this$$props.rootPrefixCls;
    var children = getSlot(this);
    var placeholder = getComponent(this, "placeholder");
    this.isActived = this.isActived || active;
    var prefixCls2 = "".concat(rootPrefixCls, "-tabpane");
    var cls = (_cls = {}, _defineProperty(_cls, prefixCls2, 1), _defineProperty(_cls, "".concat(prefixCls2, "-inactive"), !active), _defineProperty(_cls, "".concat(prefixCls2, "-active"), active), _cls);
    var isRender = destroyInactiveTabPane ? active : this.isActived;
    var shouldRender = isRender || forceRender;
    var _this$sentinelContext = this.sentinelContext, sentinelStart = _this$sentinelContext.sentinelStart, sentinelEnd = _this$sentinelContext.sentinelEnd, setPanelSentinelStart2 = _this$sentinelContext.setPanelSentinelStart, setPanelSentinelEnd2 = _this$sentinelContext.setPanelSentinelEnd;
    var panelSentinelStart;
    var panelSentinelEnd;
    if (active && shouldRender) {
      panelSentinelStart = createVNode(Sentinel, {
        "setRef": setPanelSentinelStart2,
        "prevElement": sentinelStart
      }, null);
      panelSentinelEnd = createVNode(Sentinel, {
        "setRef": setPanelSentinelEnd2,
        "nextElement": sentinelEnd
      }, null);
    }
    return createVNode("div", {
      "class": cls,
      "role": "tabpanel",
      "aria-hidden": active ? "false" : "true"
    }, [panelSentinelStart, shouldRender ? children : placeholder, panelSentinelEnd]);
  }
});
var TabContent = defineComponent({
  name: "TabContent",
  inheritAttrs: false,
  props: {
    animated: PropsTypes.looseBool.def(true),
    animatedWithMargin: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("ant-tabs"),
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    tabBarPosition: PropsTypes.string,
    direction: PropsTypes.string,
    destroyInactiveTabPane: PropsTypes.looseBool,
    children: PropsTypes.any
  },
  computed: {
    classes: function classes2() {
      var _ref;
      var animated = this.animated, prefixCls2 = this.prefixCls;
      var className = this.$attrs.class;
      return _ref = {}, _defineProperty(_ref, className, !!className), _defineProperty(_ref, "".concat(prefixCls2, "-content"), true), _defineProperty(_ref, animated ? "".concat(prefixCls2, "-content-animated") : "".concat(prefixCls2, "-content-no-animated"), true), _ref;
    }
  },
  methods: {
    getTabPanes: function getTabPanes(children) {
      var props2 = this.$props;
      var activeKey2 = props2.activeKey;
      var newChildren = [];
      children.forEach(function(child) {
        if (!child) {
          return;
        }
        var key2 = child.key;
        var active = activeKey2 === key2;
        newChildren.push(cloneElement(child, {
          active,
          destroyInactiveTabPane: props2.destroyInactiveTabPane,
          rootPrefixCls: props2.prefixCls
        }));
      });
      return newChildren;
    }
  },
  render: function render42() {
    var activeKey2 = this.activeKey, tabBarPosition2 = this.tabBarPosition, animated = this.animated, animatedWithMargin = this.animatedWithMargin, direction = this.direction, classes4 = this.classes, children = this.children;
    var style3 = {};
    if (animated && children) {
      var activeIndex = getActiveIndex(children, activeKey2);
      if (activeIndex !== -1) {
        var animatedStyle = animatedWithMargin ? getMarginStyle(activeIndex, tabBarPosition2) : getTransformPropValue(getTransformByIndex(activeIndex, tabBarPosition2, direction));
        style3 = _extends(_extends({}, this.$attrs.style), animatedStyle);
      } else {
        style3 = _extends(_extends({}, this.$attrs.style), {
          display: "none"
        });
      }
    }
    return createVNode("div", {
      "class": classes4,
      "style": style3
    }, [this.getTabPanes(children || [])]);
  }
});
function componentDidUpdate(component, init) {
  var _component$$props = component.$props, _component$$props$sty = _component$$props.styles, styles = _component$$props$sty === void 0 ? {} : _component$$props$sty, panels = _component$$props.panels, activeKey2 = _component$$props.activeKey, direction = _component$$props.direction;
  var rootNode = component.getRef("root");
  var wrapNode = component.getRef("nav") || rootNode;
  var inkBarNode = component.getRef("inkBar");
  var activeTab = component.getRef("activeTab");
  var inkBarNodeStyle = inkBarNode.style;
  var tabBarPosition2 = component.$props.tabBarPosition;
  var activeIndex = getActiveIndex(panels, activeKey2);
  if (init) {
    inkBarNodeStyle.display = "none";
  }
  if (activeTab) {
    var tabNode = activeTab;
    var transformSupported = isTransform3dSupported(inkBarNodeStyle);
    setTransform(inkBarNodeStyle, "");
    inkBarNodeStyle.width = "";
    inkBarNodeStyle.height = "";
    inkBarNodeStyle.left = "";
    inkBarNodeStyle.top = "";
    inkBarNodeStyle.bottom = "";
    inkBarNodeStyle.right = "";
    if (tabBarPosition2 === "top" || tabBarPosition2 === "bottom") {
      var left = getLeft(tabNode, wrapNode);
      var width = tabNode.offsetWidth;
      if (width === rootNode.offsetWidth) {
        width = 0;
      } else if (styles.inkBar && styles.inkBar.width !== void 0) {
        width = parseFloat(styles.inkBar.width, 10);
        if (width) {
          left += (tabNode.offsetWidth - width) / 2;
        }
      }
      if (direction === "rtl") {
        left = getStyle(tabNode, "margin-left") - left;
      }
      if (transformSupported) {
        setTransform(inkBarNodeStyle, "translate3d(".concat(left, "px,0,0)"));
      } else {
        inkBarNodeStyle.left = "".concat(left, "px");
      }
      inkBarNodeStyle.width = "".concat(width, "px");
    } else {
      var top = getTop2(tabNode, wrapNode);
      var height = tabNode.offsetHeight;
      if (styles.inkBar && styles.inkBar.height !== void 0) {
        height = parseFloat(styles.inkBar.height, 10);
        if (height) {
          top += (tabNode.offsetHeight - height) / 2;
        }
      }
      if (transformSupported) {
        setTransform(inkBarNodeStyle, "translate3d(0,".concat(top, "px,0)"));
        inkBarNodeStyle.top = "0";
      } else {
        inkBarNodeStyle.top = "".concat(top, "px");
      }
      inkBarNodeStyle.height = "".concat(height, "px");
    }
  }
  inkBarNodeStyle.display = activeIndex !== -1 ? "block" : "none";
}
var InkTabBarNode = {
  name: "InkTabBarNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    inkBarAnimated: {
      type: Boolean,
      default: true
    },
    direction: PropsTypes.string,
    prefixCls: String,
    styles: Object,
    tabBarPosition: String,
    saveRef: PropsTypes.func.def(function() {
    }),
    getRef: PropsTypes.func.def(function() {
    }),
    panels: PropsTypes.array,
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])
  },
  updated: function updated5() {
    var _this = this;
    this.$nextTick(function() {
      componentDidUpdate(_this);
    });
  },
  mounted: function mounted10() {
    var _this2 = this;
    this.$nextTick(function() {
      componentDidUpdate(_this2, true);
    });
  },
  render: function render43() {
    var _classes;
    var prefixCls2 = this.prefixCls, _this$styles = this.styles, styles = _this$styles === void 0 ? {} : _this$styles, inkBarAnimated = this.inkBarAnimated;
    var className = "".concat(prefixCls2, "-ink-bar");
    var classes4 = (_classes = {}, _defineProperty(_classes, className, true), _defineProperty(_classes, inkBarAnimated ? "".concat(className, "-animated") : "".concat(className, "-no-animated"), true), _classes);
    return createVNode("div", {
      "style": styles.inkBar,
      "class": classes4,
      "key": "inkBar",
      "ref": this.saveRef("inkBar")
    }, null);
  }
};
function noop$z() {
}
var TabBarTabsNode = {
  name: "TabBarTabsNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    panels: PropsTypes.any.def([]),
    prefixCls: PropsTypes.string.def(""),
    tabBarGutter: PropsTypes.any.def(null),
    onTabClick: PropsTypes.func,
    saveRef: PropsTypes.func.def(noop$z),
    getRef: PropsTypes.func.def(noop$z),
    renderTabBarNode: PropsTypes.func,
    tabBarPosition: PropsTypes.string,
    direction: PropsTypes.string
  },
  render: function render44() {
    var _this = this;
    var _this$$props = this.$props, children = _this$$props.panels, activeKey2 = _this$$props.activeKey, prefixCls2 = _this$$props.prefixCls, tabBarGutter = _this$$props.tabBarGutter, saveRef4 = _this$$props.saveRef, tabBarPosition2 = _this$$props.tabBarPosition, direction = _this$$props.direction;
    var rst = [];
    var renderTabBarNode = this.renderTabBarNode || this.$slots.renderTabBarNode;
    children.forEach(function(child, index2) {
      if (!child) {
        return;
      }
      var props2 = getPropsData(child);
      var key2 = child.key;
      var cls = activeKey2 === key2 ? "".concat(prefixCls2, "-tab-active") : "";
      cls += " ".concat(prefixCls2, "-tab");
      var events = {};
      var disabled = props2.disabled;
      if (disabled) {
        cls += " ".concat(prefixCls2, "-tab-disabled");
      } else {
        events.onClick = function() {
          _this.__emit("tabClick", key2);
        };
      }
      var tab = getComponent(child, "tab");
      var gutter = tabBarGutter && index2 === children.length - 1 ? 0 : tabBarGutter;
      gutter = typeof gutter === "number" ? "".concat(gutter, "px") : gutter;
      var marginProperty = direction === "rtl" ? "marginLeft" : "marginRight";
      var style3 = _defineProperty({}, isVertical(tabBarPosition2) ? "marginBottom" : marginProperty, gutter);
      var node = createVNode("div", _objectSpread2(_objectSpread2({
        "role": "tab",
        "aria-disabled": disabled ? "true" : "false",
        "aria-selected": activeKey2 === key2 ? "true" : "false"
      }, events), {}, {
        "class": cls.trim(),
        "key": key2,
        "style": style3,
        "ref": activeKey2 === key2 ? saveRef4("activeTab") : noop$z
      }), [tab]);
      if (renderTabBarNode) {
        node = renderTabBarNode(node);
      }
      rst.push(node);
    });
    return createVNode("div", {
      "ref": this.saveRef("navTabsContainer")
    }, [rst]);
  }
};
var __rest$C = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$y() {
}
var TabBarRootNode = {
  name: "TabBarRootNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    saveRef: PropsTypes.func.def(noop$y),
    getRef: PropsTypes.func.def(noop$y),
    prefixCls: PropsTypes.string.def(""),
    tabBarPosition: PropsTypes.string.def("top"),
    extraContent: PropsTypes.any
  },
  methods: {
    onKeyDown: function onKeyDown2(e) {
      this.__emit("keydown", e);
    }
  },
  render: function render45() {
    var _cls;
    var prefixCls2 = this.prefixCls, onKeyDown14 = this.onKeyDown, tabBarPosition2 = this.tabBarPosition, extraContent = this.extraContent;
    var _a = this.$attrs, className = _a.class, style3 = _a.style;
    _a.onKeydown;
    var restProps = __rest$C(_a, ["class", "style", "onKeydown"]);
    var cls = (_cls = {}, _defineProperty(_cls, "".concat(prefixCls2, "-bar"), true), _defineProperty(_cls, className, !!className), _cls);
    var topOrBottom = tabBarPosition2 === "top" || tabBarPosition2 === "bottom";
    var tabBarExtraContentStyle = topOrBottom ? {
      float: "right"
    } : {};
    var children = getSlot(this);
    var newChildren = children;
    if (extraContent) {
      newChildren = [cloneElement(extraContent, {
        key: "extra",
        style: _extends({}, tabBarExtraContentStyle)
      }), cloneElement(children, {
        key: "content"
      })];
      newChildren = topOrBottom ? newChildren : newChildren.reverse();
    }
    return createVNode("div", _objectSpread2({
      "role": "tablist",
      "class": cls,
      "tabindex": "0",
      "onKeydown": onKeyDown14,
      "style": style3,
      "ref": this.saveRef("root")
    }, getDataAttr(restProps)), [newChildren]);
  }
};
var ScrollableTabBarNode = {
  name: "ScrollableTabBarNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    activeKey: PropsTypes.any,
    getRef: PropsTypes.func.def(function() {
    }),
    saveRef: PropsTypes.func.def(function() {
    }),
    tabBarPosition: PropsTypes.oneOf(["left", "right", "top", "bottom"]).def("left"),
    prefixCls: PropsTypes.string.def(""),
    scrollAnimated: PropsTypes.looseBool.def(true),
    navWrapper: PropsTypes.func.def(function(arg) {
      return arg;
    }),
    prevIcon: PropsTypes.any,
    nextIcon: PropsTypes.any,
    direction: PropsTypes.string
  },
  data: function data16() {
    this.offset = 0;
    this.prevProps = _extends({}, this.$props);
    return {
      next: false,
      prev: false
    };
  },
  watch: {
    tabBarPosition: function tabBarPosition() {
      var _this = this;
      this.tabBarPositionChange = true;
      this.$nextTick(function() {
        _this.setOffset(0);
      });
    }
  },
  mounted: function mounted11() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.updatedCal();
      _this2.debouncedResize = debounce$1(function() {
        _this2.setNextPrev();
        _this2.scrollToActiveTab();
      }, 200);
      _this2.resizeObserver = new index$k(_this2.debouncedResize);
      _this2.resizeObserver.observe(_this2.$props.getRef("container"));
    });
  },
  updated: function updated6() {
    var _this3 = this;
    this.$nextTick(function() {
      _this3.updatedCal(_this3.prevProps);
      _this3.prevProps = _extends({}, _this3.$props);
    });
  },
  beforeUnmount: function beforeUnmount8() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
    if (this.debouncedResize && this.debouncedResize.cancel) {
      this.debouncedResize.cancel();
    }
  },
  methods: {
    updatedCal: function updatedCal2(prevProps) {
      var _this4 = this;
      var props2 = this.$props;
      if (prevProps && prevProps.tabBarPosition !== props2.tabBarPosition) {
        this.setOffset(0);
        return;
      }
      if (this.isNextPrevShown(this.$data) !== this.isNextPrevShown(this.setNextPrev())) {
        this.$forceUpdate();
        this.$nextTick(function() {
          _this4.scrollToActiveTab();
        });
      } else if (!prevProps || props2.activeKey !== prevProps.activeKey) {
        this.scrollToActiveTab();
      }
    },
    setNextPrev: function setNextPrev() {
      var navNode = this.$props.getRef("nav");
      var navTabsContainer = this.$props.getRef("navTabsContainer");
      var navNodeWH = this.getScrollWH(navTabsContainer || navNode);
      var containerWH = this.getOffsetWH(this.$props.getRef("container")) + 1;
      var navWrapNodeWH = this.getOffsetWH(this.$props.getRef("navWrap"));
      var offset2 = this.offset;
      var minOffset = containerWH - navNodeWH;
      var next3 = this.next, prev3 = this.prev;
      if (minOffset >= 0) {
        next3 = false;
        this.setOffset(0, false);
        offset2 = 0;
      } else if (minOffset < offset2) {
        next3 = true;
      } else {
        next3 = false;
        var realOffset = navWrapNodeWH - navNodeWH;
        this.setOffset(realOffset, false);
        offset2 = realOffset;
      }
      if (offset2 < 0) {
        prev3 = true;
      } else {
        prev3 = false;
      }
      this.setNext(next3);
      this.setPrev(prev3);
      return {
        next: next3,
        prev: prev3
      };
    },
    getOffsetWH: function getOffsetWH(node) {
      var tabBarPosition2 = this.$props.tabBarPosition;
      var prop = "offsetWidth";
      if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
        prop = "offsetHeight";
      }
      return node[prop];
    },
    getScrollWH: function getScrollWH(node) {
      var tabBarPosition2 = this.tabBarPosition;
      var prop = "scrollWidth";
      if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
        prop = "scrollHeight";
      }
      return node[prop];
    },
    getOffsetLT: function getOffsetLT(node) {
      var tabBarPosition2 = this.$props.tabBarPosition;
      var prop = "left";
      if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
        prop = "top";
      }
      return node.getBoundingClientRect()[prop];
    },
    setOffset: function setOffset(offset2) {
      var checkNextPrev = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var target = Math.min(0, offset2);
      if (this.offset !== target) {
        this.offset = target;
        var navOffset = {};
        var tabBarPosition2 = this.$props.tabBarPosition;
        var navStyle = this.$props.getRef("nav").style;
        var transformSupported = isTransform3dSupported(navStyle);
        if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
          if (transformSupported) {
            navOffset = {
              value: "translate3d(0,".concat(target, "px,0)")
            };
          } else {
            navOffset = {
              name: "top",
              value: "".concat(target, "px")
            };
          }
        } else if (transformSupported) {
          if (this.$props.direction === "rtl") {
            target = -target;
          }
          navOffset = {
            value: "translate3d(".concat(target, "px,0,0)")
          };
        } else {
          navOffset = {
            name: "left",
            value: "".concat(target, "px")
          };
        }
        if (transformSupported) {
          setTransform(navStyle, navOffset.value);
        } else {
          navStyle[navOffset.name] = navOffset.value;
        }
        if (checkNextPrev) {
          this.setNextPrev();
        }
      }
    },
    setPrev: function setPrev(v) {
      if (this.prev !== v) {
        this.prev = v;
      }
    },
    setNext: function setNext(v) {
      if (this.next !== v) {
        this.next = v;
      }
    },
    isNextPrevShown: function isNextPrevShown(state) {
      if (state) {
        return state.next || state.prev;
      }
      return this.next || this.prev;
    },
    prevTransitionEnd: function prevTransitionEnd(e) {
      if (e.propertyName !== "opacity") {
        return;
      }
      var container = this.$props.getRef("container");
      this.scrollToActiveTab({
        target: container,
        currentTarget: container
      });
    },
    scrollToActiveTab: function scrollToActiveTab(e) {
      var activeTab = this.$props.getRef("activeTab");
      var navWrap = this.$props.getRef("navWrap");
      if (e && e.target !== e.currentTarget || !activeTab) {
        return;
      }
      var needToSroll = this.isNextPrevShown() && this.lastNextPrevShown;
      this.lastNextPrevShown = this.isNextPrevShown();
      if (!needToSroll) {
        return;
      }
      var activeTabWH = this.getScrollWH(activeTab);
      var navWrapNodeWH = this.getOffsetWH(navWrap);
      var offset2 = this.offset;
      var wrapOffset = this.getOffsetLT(navWrap);
      var activeTabOffset = this.getOffsetLT(activeTab);
      if (wrapOffset > activeTabOffset) {
        offset2 += wrapOffset - activeTabOffset;
        this.setOffset(offset2);
      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
        offset2 -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
        this.setOffset(offset2);
      }
    },
    prevClick: function prevClick(e) {
      this.__emit("prevClick", e);
      var navWrapNode = this.$props.getRef("navWrap");
      var navWrapNodeWH = this.getOffsetWH(navWrapNode);
      var offset2 = this.offset;
      this.setOffset(offset2 + navWrapNodeWH);
    },
    nextClick: function nextClick(e) {
      this.__emit("nextClick", e);
      var navWrapNode = this.$props.getRef("navWrap");
      var navWrapNodeWH = this.getOffsetWH(navWrapNode);
      var offset2 = this.offset;
      this.setOffset(offset2 - navWrapNodeWH);
    }
  },
  render: function render46() {
    var _ref, _ref2, _navClasses, _ref3;
    var next3 = this.next, prev3 = this.prev;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, scrollAnimated = _this$$props.scrollAnimated, navWrapper = _this$$props.navWrapper;
    var prevIcon = getComponent(this, "prevIcon");
    var nextIcon = getComponent(this, "nextIcon");
    var showNextPrev = prev3 || next3;
    var prevButton = createVNode("span", {
      "onClick": prev3 && this.prevClick,
      "unselectable": "unselectable",
      "class": (_ref = {}, _defineProperty(_ref, "".concat(prefixCls2, "-tab-prev"), 1), _defineProperty(_ref, "".concat(prefixCls2, "-tab-btn-disabled"), !prev3), _defineProperty(_ref, "".concat(prefixCls2, "-tab-arrow-show"), showNextPrev), _ref),
      "onTransitionend": this.prevTransitionEnd
    }, [prevIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-prev-icon")
    }, null)]);
    var nextButton = createVNode("span", {
      "onClick": next3 && this.nextClick,
      "unselectable": "unselectable",
      "class": (_ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2, "-tab-next"), 1), _defineProperty(_ref2, "".concat(prefixCls2, "-tab-btn-disabled"), !next3), _defineProperty(_ref2, "".concat(prefixCls2, "-tab-arrow-show"), showNextPrev), _ref2)
    }, [nextIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-next-icon")
    }, null)]);
    var navClassName = "".concat(prefixCls2, "-nav");
    var navClasses = (_navClasses = {}, _defineProperty(_navClasses, navClassName, true), _defineProperty(_navClasses, scrollAnimated ? "".concat(navClassName, "-animated") : "".concat(navClassName, "-no-animated"), true), _navClasses);
    return createVNode("div", {
      "class": (_ref3 = {}, _defineProperty(_ref3, "".concat(prefixCls2, "-nav-container"), 1), _defineProperty(_ref3, "".concat(prefixCls2, "-nav-container-scrolling"), showNextPrev), _ref3),
      "key": "container",
      "ref": this.saveRef("container")
    }, [prevButton, nextButton, createVNode("div", {
      "class": "".concat(prefixCls2, "-nav-wrap"),
      "ref": this.saveRef("navWrap")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-nav-scroll")
    }, [createVNode("div", {
      "class": navClasses,
      "ref": this.saveRef("nav")
    }, [navWrapper(getSlot(this))])])])]);
  }
};
var SaveRef = {
  props: {
    children: PropsTypes.func.def(function() {
      return null;
    })
  },
  methods: {
    getRef: function getRef(name2) {
      return this[name2];
    },
    saveRef: function saveRef2(name2) {
      var _this = this;
      return function(node) {
        if (node) {
          _this[name2] = node;
        }
      };
    }
  },
  render: function render47() {
    var _this2 = this;
    var saveRef4 = function saveRef5(name2) {
      return _this2.saveRef(name2);
    };
    var getRef2 = function getRef3(name2) {
      return _this2.getRef(name2);
    };
    return this.children(saveRef4, getRef2);
  }
};
var ScrollableInkTabBar = defineComponent({
  name: "ScrollableInkTabBar",
  inheritAttrs: false,
  render: function render48() {
    var _this = this;
    var renderTabBarNode = this.$attrs.children;
    return createVNode(SaveRef, {
      "children": function children(saveRef4, getRef2) {
        return createVNode(TabBarRootNode, _objectSpread2({
          "saveRef": saveRef4
        }, _this.$attrs), {
          default: function _default8() {
            return [createVNode(ScrollableTabBarNode, _objectSpread2({
              "saveRef": saveRef4,
              "getRef": getRef2
            }, _this.$attrs), {
              default: function _default9() {
                return [createVNode(TabBarTabsNode, _objectSpread2({
                  "saveRef": saveRef4
                }, _extends(_extends({}, _this.$attrs), {
                  renderTabBarNode
                })), null), createVNode(InkTabBarNode, _objectSpread2({
                  "saveRef": saveRef4,
                  "getRef": getRef2
                }, _this.$attrs), null)];
              }
            })];
          }
        });
      }
    }, null);
  }
});
var TabBar = defineComponent({
  name: "TabBar",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    centered: PropsTypes.looseBool.def(false),
    tabBarStyle: PropsTypes.style,
    tabBarExtraContent: PropsTypes.VNodeChild,
    type: PropsTypes.oneOf(tuple("line", "card", "editable-card")),
    tabPosition: PropsTypes.oneOf(tuple("top", "right", "bottom", "left")).def("top"),
    tabBarPosition: PropsTypes.oneOf(tuple("top", "right", "bottom", "left")),
    size: PropsTypes.oneOf(tuple("default", "small", "large")),
    animated: {
      type: [Boolean, Object],
      default: void 0
    },
    renderTabBar: PropsTypes.func,
    panels: PropsTypes.array.def([]),
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    tabBarGutter: PropsTypes.number
  },
  render: function render49() {
    var _cls;
    var _this$$props = this.$props, centered = _this$$props.centered, tabBarStyle = _this$$props.tabBarStyle, _this$$props$animated = _this$$props.animated, animated = _this$$props$animated === void 0 ? true : _this$$props$animated, renderTabBar = _this$$props.renderTabBar, tabBarExtraContent = _this$$props.tabBarExtraContent, tabPosition = _this$$props.tabPosition, prefixCls2 = _this$$props.prefixCls, _this$$props$type = _this$$props.type, type2 = _this$$props$type === void 0 ? "line" : _this$$props$type, size = _this$$props.size;
    var inkBarAnimated = _typeof(animated) === "object" ? animated.inkBar : animated;
    var isVertical2 = tabPosition === "left" || tabPosition === "right";
    var prevIcon = createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-prev-icon")
    }, [isVertical2 ? createVNode(UpOutlined, {
      "class": "".concat(prefixCls2, "-tab-prev-icon-target")
    }, null) : createVNode(LeftOutlined, {
      "class": "".concat(prefixCls2, "-tab-prev-icon-target")
    }, null)]);
    var nextIcon = createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-next-icon")
    }, [isVertical2 ? createVNode(DownOutlined, {
      "class": "".concat(prefixCls2, "-tab-next-icon-target")
    }, null) : createVNode(RightOutlined, {
      "class": "".concat(prefixCls2, "-tab-next-icon-target")
    }, null)]);
    var cls = (_cls = {}, _defineProperty(_cls, this.$attrs.class, this.$attrs.class), _defineProperty(_cls, "".concat(prefixCls2, "-centered-bar"), centered), _defineProperty(_cls, "".concat(prefixCls2, "-").concat(tabPosition, "-bar"), true), _defineProperty(_cls, "".concat(prefixCls2, "-").concat(size, "-bar"), !!size), _defineProperty(_cls, "".concat(prefixCls2, "-card-bar"), type2 && type2.indexOf("card") >= 0), _cls);
    var renderProps = _extends(_extends(_extends({}, this.$props), this.$attrs), {
      children: null,
      inkBarAnimated,
      extraContent: tabBarExtraContent,
      prevIcon,
      nextIcon,
      style: tabBarStyle,
      class: cls
    });
    if (renderTabBar) {
      return renderTabBar(_extends(_extends({}, renderProps), {
        DefaultTabBar: ScrollableInkTabBar
      }));
    } else {
      return createVNode(ScrollableInkTabBar, renderProps, null);
    }
  }
});
var TabBar$1 = TabBar;
var __rest$B = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Tabs = defineComponent({
  TabPane: TabPane$1,
  name: "ATabs",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    defaultActiveKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    hideAdd: PropsTypes.looseBool.def(false),
    centered: PropsTypes.looseBool.def(false),
    tabBarStyle: PropsTypes.object,
    tabBarExtraContent: PropsTypes.any,
    destroyInactiveTabPane: PropsTypes.looseBool.def(false),
    type: PropsTypes.oneOf(tuple("line", "card", "editable-card")),
    tabPosition: PropsTypes.oneOf(["top", "right", "bottom", "left"]).def("top"),
    size: PropsTypes.oneOf(["default", "small", "large"]),
    animated: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    tabBarGutter: PropsTypes.number,
    renderTabBar: PropsTypes.func,
    onChange: {
      type: Function
    },
    onTabClick: PropsTypes.func,
    onPrevClick: {
      type: Function
    },
    onNextClick: {
      type: Function
    },
    onEdit: {
      type: Function
    }
  },
  emits: ["update:activeKey", "edit", "change"],
  setup: function setup63() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    removeTab: function removeTab(targetKey, e) {
      e.stopPropagation();
      if (isValid$1(targetKey)) {
        this.$emit("edit", targetKey, "remove");
      }
    },
    handleChange: function handleChange6(activeKey2) {
      this.$emit("update:activeKey", activeKey2);
      this.$emit("change", activeKey2);
    },
    createNewTab: function createNewTab(targetKey) {
      this.$emit("edit", targetKey, "add");
    }
  },
  render: function render50() {
    var _cls, _this = this, _contentCls;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, size = props2.size, _props$type = props2.type, type2 = _props$type === void 0 ? "line" : _props$type, tabPosition = props2.tabPosition, _props$animated = props2.animated, animated = _props$animated === void 0 ? true : _props$animated, hideAdd = props2.hideAdd, renderTabBar = props2.renderTabBar;
    var _a = this.$attrs, className = _a.class, restProps = __rest$B(_a, ["class"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tabs", customizePrefixCls);
    var children = filterEmpty(getSlot(this));
    var tabBarExtraContent = getComponent(this, "tabBarExtraContent");
    var tabPaneAnimated = _typeof(animated) === "object" ? animated.tabPane : animated;
    if (type2 !== "line") {
      tabPaneAnimated = "animated" in props2 ? tabPaneAnimated : false;
    }
    var cls = (_cls = {}, _defineProperty(_cls, className, className), _defineProperty(_cls, "".concat(prefixCls2, "-vertical"), tabPosition === "left" || tabPosition === "right"), _defineProperty(_cls, "".concat(prefixCls2, "-").concat(size), !!size), _defineProperty(_cls, "".concat(prefixCls2, "-card"), type2.indexOf("card") >= 0), _defineProperty(_cls, "".concat(prefixCls2, "-").concat(type2), true), _defineProperty(_cls, "".concat(prefixCls2, "-no-animation"), !tabPaneAnimated), _cls);
    var childrenWithClose = [];
    if (type2 === "editable-card") {
      childrenWithClose = [];
      children.forEach(function(child, index2) {
        var props3 = getPropsData(child);
        var closable = props3.closable;
        closable = typeof closable === "undefined" ? true : closable;
        var closeIcon = closable ? createVNode(CloseOutlined, {
          "class": "".concat(prefixCls2, "-close-x"),
          "onClick": function onClick7(e) {
            return _this.removeTab(child.key, e);
          }
        }, null) : null;
        childrenWithClose.push(cloneElement(child, {
          tab: createVNode("div", {
            "class": closable ? void 0 : "".concat(prefixCls2, "-tab-unclosable")
          }, [getComponent(child, "tab"), closeIcon]),
          key: child.key || index2
        }));
      });
      if (!hideAdd) {
        tabBarExtraContent = createVNode("span", null, [createVNode(PlusOutlined, {
          "class": "".concat(prefixCls2, "-new-tab"),
          "onClick": this.createNewTab
        }, null), tabBarExtraContent]);
      }
    }
    tabBarExtraContent = tabBarExtraContent ? createVNode("div", {
      "class": "".concat(prefixCls2, "-extra-content")
    }, [tabBarExtraContent]) : null;
    var renderTabBarSlot = renderTabBar || this.$slots.renderTabBar;
    var tabBarProps = _extends(_extends(_extends(_extends({}, props2), {
      prefixCls: prefixCls2,
      tabBarExtraContent,
      renderTabBar: renderTabBarSlot
    }), restProps), {
      children
    });
    var contentCls = (_contentCls = {}, _defineProperty(_contentCls, "".concat(prefixCls2, "-").concat(tabPosition, "-content"), true), _defineProperty(_contentCls, "".concat(prefixCls2, "-card-content"), type2.indexOf("card") >= 0), _contentCls);
    var tabsProps = _extends(_extends(_extends(_extends({}, props2), {
      prefixCls: prefixCls2,
      tabBarPosition: tabPosition,
      renderTabBar: function renderTabBar2() {
        return createVNode(TabBar$1, _objectSpread2({
          "key": "tabBar"
        }, tabBarProps), null);
      },
      renderTabContent: function renderTabContent() {
        return createVNode(TabContent, {
          "class": contentCls,
          "animated": tabPaneAnimated,
          "animatedWithMargin": true
        }, null);
      },
      children: childrenWithClose.length > 0 ? childrenWithClose : children
    }), restProps), {
      onChange: this.handleChange,
      class: cls
    });
    return createVNode(Tabs$1, tabsProps, null);
  }
});
Tabs.TabPane = _extends(_extends({}, TabPane$1), {
  name: "ATabPane",
  __ANT_TAB_PANE: true
});
Tabs.TabContent = _extends(_extends({}, TabContent), {
  name: "ATabContent"
});
Tabs.install = function(app) {
  app.component(Tabs.name, Tabs);
  app.component(Tabs.TabPane.name, Tabs.TabPane);
  app.component(Tabs.TabContent.name, Tabs.TabContent);
  return app;
};
function canUseDom() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var canUseDocElement = function canUseDocElement2() {
  return canUseDom() && window.document.documentElement;
};
var isStyleSupport = function isStyleSupport2(styleName) {
  if (canUseDocElement()) {
    var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
    var documentElement = window.document.documentElement;
    return styleNameList.some(function(name2) {
      return name2 in documentElement.style;
    });
  }
  return false;
};
var flexGapSupported;
var detectFlexGapSupported = function detectFlexGapSupported2() {
  if (!canUseDocElement()) {
    return false;
  }
  if (flexGapSupported !== void 0) {
    return flexGapSupported;
  }
  var flex = document.createElement("div");
  flex.style.display = "flex";
  flex.style.flexDirection = "column";
  flex.style.rowGap = "1px";
  flex.appendChild(document.createElement("div"));
  flex.appendChild(document.createElement("div"));
  document.body.appendChild(flex);
  flexGapSupported = flex.scrollHeight === 1;
  document.body.removeChild(flex);
  return flexGapSupported;
};
var useFlexGapSupport = function() {
  var flexible = ref(false);
  onMounted(function() {
    flexible.value = detectFlexGapSupported();
  });
  return flexible;
};
var RowContextKey = Symbol("rowContextKey");
var useProvideRow = function useProvideRow2(state) {
  provide(RowContextKey, state);
};
var useInjectRow = function useInjectRow2() {
  return inject(RowContextKey, {
    gutter: computed(function() {
      return void 0;
    }),
    wrap: computed(function() {
      return void 0;
    }),
    supportFlexGap: computed(function() {
      return void 0;
    })
  });
};
var RowAligns = tuple("top", "middle", "bottom", "stretch");
var RowJustify = tuple("start", "end", "center", "space-around", "space-between");
var rowProps = {
  type: PropsTypes.oneOf(["flex"]),
  align: PropsTypes.oneOf(RowAligns),
  justify: PropsTypes.oneOf(RowJustify),
  prefixCls: PropsTypes.string,
  gutter: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.number, PropsTypes.array]).def(0),
  wrap: PropsTypes.looseBool
};
var ARow = defineComponent({
  name: "ARow",
  props: rowProps,
  setup: function setup64(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("row", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var token;
    var screens2 = ref({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    });
    var supportFlexGap = useFlexGapSupport();
    onMounted(function() {
      token = ResponsiveObserve.subscribe(function(screen) {
        var currentGutter = props2.gutter || 0;
        if (!Array.isArray(currentGutter) && _typeof(currentGutter) === "object" || Array.isArray(currentGutter) && (_typeof(currentGutter[0]) === "object" || _typeof(currentGutter[1]) === "object")) {
          screens2.value = screen;
        }
      });
    });
    onBeforeUnmount(function() {
      ResponsiveObserve.unsubscribe(token);
    });
    var gutter = computed(function() {
      var results = [0, 0];
      var _props$gutter = props2.gutter, gutter2 = _props$gutter === void 0 ? 0 : _props$gutter;
      var normalizedGutter = Array.isArray(gutter2) ? gutter2 : [gutter2, 0];
      normalizedGutter.forEach(function(g, index2) {
        if (_typeof(g) === "object") {
          for (var i = 0; i < responsiveArray.length; i++) {
            var breakpoint = responsiveArray[i];
            if (screens2.value[breakpoint] && g[breakpoint] !== void 0) {
              results[index2] = g[breakpoint];
              break;
            }
          }
        } else {
          results[index2] = g || 0;
        }
      });
      return results;
    });
    useProvideRow({
      gutter,
      supportFlexGap,
      wrap: computed(function() {
        return props2.wrap;
      })
    });
    var classes4 = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2.value, "-no-wrap"), props2.wrap === false), _defineProperty(_classNames, "".concat(prefixCls2.value, "-").concat(props2.justify), props2.justify), _defineProperty(_classNames, "".concat(prefixCls2.value, "-").concat(props2.align), props2.align), _defineProperty(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _classNames));
    });
    var rowStyle = computed(function() {
      var gt = gutter.value;
      var style3 = {};
      var horizontalGutter = gt[0] > 0 ? "".concat(gt[0] / -2, "px") : void 0;
      var verticalGutter = gt[1] > 0 ? "".concat(gt[1] / -2, "px") : void 0;
      if (horizontalGutter) {
        style3.marginLeft = horizontalGutter;
        style3.marginRight = horizontalGutter;
      }
      if (supportFlexGap.value) {
        style3.rowGap = "".concat(gt[1], "px");
      } else if (verticalGutter) {
        style3.marginTop = verticalGutter;
        style3.marginBottom = verticalGutter;
      }
      return style3;
    });
    return function() {
      var _a;
      return createVNode("div", {
        "class": classes4.value,
        "style": rowStyle.value
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var Row$3 = ARow;
function parseFlex(flex) {
  if (typeof flex === "number") {
    return "".concat(flex, " ").concat(flex, " auto");
  }
  if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
    return "0 0 ".concat(flex);
  }
  return flex;
}
var stringOrNumber = PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]);
var colSize = PropsTypes.shape({
  span: stringOrNumber,
  order: stringOrNumber,
  offset: stringOrNumber,
  push: stringOrNumber,
  pull: stringOrNumber
}).loose;
var objectOrNumber = PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, colSize]);
var colProps = {
  span: stringOrNumber,
  order: stringOrNumber,
  offset: stringOrNumber,
  push: stringOrNumber,
  pull: stringOrNumber,
  xs: objectOrNumber,
  sm: objectOrNumber,
  md: objectOrNumber,
  lg: objectOrNumber,
  xl: objectOrNumber,
  xxl: objectOrNumber,
  prefixCls: PropsTypes.string,
  flex: stringOrNumber
};
var Col$1 = defineComponent({
  name: "ACol",
  props: colProps,
  setup: function setup65(props2, _ref) {
    var slots = _ref.slots;
    var _useInjectRow = useInjectRow(), gutter = _useInjectRow.gutter, supportFlexGap = _useInjectRow.supportFlexGap, wrap = _useInjectRow.wrap;
    var _useConfigInject = useConfigInject("col", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var classes4 = computed(function() {
      var _classNames;
      var span = props2.span, order = props2.order, offset2 = props2.offset, push2 = props2.push, pull2 = props2.pull;
      var pre = prefixCls2.value;
      var sizeClassObj = {};
      ["xs", "sm", "md", "lg", "xl", "xxl"].forEach(function(size) {
        var _extends2;
        var sizeProps = {};
        var propSize = props2[size];
        if (typeof propSize === "number") {
          sizeProps.span = propSize;
        } else if (_typeof(propSize) === "object") {
          sizeProps = propSize || {};
        }
        sizeClassObj = _extends(_extends({}, sizeClassObj), (_extends2 = {}, _defineProperty(_extends2, "".concat(pre, "-").concat(size, "-").concat(sizeProps.span), sizeProps.span !== void 0), _defineProperty(_extends2, "".concat(pre, "-").concat(size, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty(_extends2, "".concat(pre, "-").concat(size, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty(_extends2, "".concat(pre, "-").concat(size, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty(_extends2, "".concat(pre, "-").concat(size, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty(_extends2, "".concat(pre, "-rtl"), direction.value === "rtl"), _extends2));
      });
      return classNames(pre, (_classNames = {}, _defineProperty(_classNames, "".concat(pre, "-").concat(span), span !== void 0), _defineProperty(_classNames, "".concat(pre, "-order-").concat(order), order), _defineProperty(_classNames, "".concat(pre, "-offset-").concat(offset2), offset2), _defineProperty(_classNames, "".concat(pre, "-push-").concat(push2), push2), _defineProperty(_classNames, "".concat(pre, "-pull-").concat(pull2), pull2), _classNames), sizeClassObj);
    });
    var mergedStyle = computed(function() {
      var flex = props2.flex;
      var gutterVal = gutter.value;
      var style3 = {};
      if (gutterVal && gutterVal[0] > 0) {
        var horizontalGutter = "".concat(gutterVal[0] / 2, "px");
        style3.paddingLeft = horizontalGutter;
        style3.paddingRight = horizontalGutter;
      }
      if (gutterVal && gutterVal[1] > 0 && !supportFlexGap.value) {
        var verticalGutter = "".concat(gutterVal[1] / 2, "px");
        style3.paddingTop = verticalGutter;
        style3.paddingBottom = verticalGutter;
      }
      if (flex) {
        style3.flex = parseFlex(flex);
        if (flex === "auto" && wrap.value === false && !style3.minWidth) {
          style3.minWidth = 0;
        }
      }
      return style3;
    });
    return function() {
      var _a;
      return createVNode("div", {
        "class": classes4.value,
        "style": mergedStyle.value
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var index$f = {
  useBreakpoint
};
var Row$2 = withInstall(Row$3);
var Col = withInstall(Col$1);
var TabPane = Tabs.TabPane;
var cardProps = {
  prefixCls: PropsTypes.string,
  title: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  bordered: PropsTypes.looseBool.def(true),
  bodyStyle: PropsTypes.style,
  headStyle: PropsTypes.style,
  loading: PropsTypes.looseBool.def(false),
  hoverable: PropsTypes.looseBool.def(false),
  type: PropsTypes.string,
  size: PropsTypes.oneOf(tuple("default", "small")),
  actions: PropsTypes.VNodeChild,
  tabList: {
    type: Array
  },
  tabBarExtraContent: PropsTypes.VNodeChild,
  activeTabKey: PropsTypes.string,
  defaultActiveTabKey: PropsTypes.string,
  cover: PropsTypes.VNodeChild,
  onTabChange: {
    type: Function
  }
};
var Card = defineComponent({
  name: "ACard",
  mixins: [BaseMixin],
  props: cardProps,
  setup: function setup66() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data17() {
    return {
      widerPadding: false
    };
  },
  methods: {
    getAction: function getAction(actions) {
      var actionList = actions.map(function(action, index2) {
        return isVNode(action) && !isEmptyElement(action) || !isVNode(action) ? createVNode("li", {
          "style": {
            width: "".concat(100 / actions.length, "%")
          },
          "key": "action-".concat(index2)
        }, [createVNode("span", null, [action])]) : null;
      });
      return actionList;
    },
    triggerTabChange: function triggerTabChange(key2) {
      this.$emit("tabChange", key2);
    },
    isContainGrid: function isContainGrid() {
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var containGrid;
      obj.forEach(function(element) {
        if (element && isPlainObject(element.type) && element.type.__ANT_CARD_GRID) {
          containGrid = true;
        }
      });
      return containGrid;
    }
  },
  render: function render51() {
    var _classString, _tabsProps;
    var _this$$props = this.$props, customizePrefixCls = _this$$props.prefixCls, _this$$props$headStyl = _this$$props.headStyle, headStyle = _this$$props$headStyl === void 0 ? {} : _this$$props$headStyl, _this$$props$bodyStyl = _this$$props.bodyStyle, bodyStyle = _this$$props$bodyStyl === void 0 ? {} : _this$$props$bodyStyl, loading = _this$$props.loading, _this$$props$bordered = _this$$props.bordered, bordered = _this$$props$bordered === void 0 ? true : _this$$props$bordered, _this$$props$size = _this$$props.size, size = _this$$props$size === void 0 ? "default" : _this$$props$size, type2 = _this$$props.type, tabList = _this$$props.tabList, hoverable = _this$$props.hoverable, activeTabKey = _this$$props.activeTabKey, defaultActiveTabKey = _this$$props.defaultActiveTabKey;
    var $slots = this.$slots;
    var children = getSlot(this);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("card", customizePrefixCls);
    var tabBarExtraContent = getComponent(this, "tabBarExtraContent");
    var classString = (_classString = {}, _defineProperty(_classString, "".concat(prefixCls2), true), _defineProperty(_classString, "".concat(prefixCls2, "-loading"), loading), _defineProperty(_classString, "".concat(prefixCls2, "-bordered"), bordered), _defineProperty(_classString, "".concat(prefixCls2, "-hoverable"), !!hoverable), _defineProperty(_classString, "".concat(prefixCls2, "-contain-grid"), this.isContainGrid(children)), _defineProperty(_classString, "".concat(prefixCls2, "-contain-tabs"), tabList && tabList.length), _defineProperty(_classString, "".concat(prefixCls2, "-").concat(size), size !== "default"), _defineProperty(_classString, "".concat(prefixCls2, "-type-").concat(type2), !!type2), _classString);
    var loadingBlockStyle = bodyStyle.padding === 0 || bodyStyle.padding === "0px" ? {
      padding: 24
    } : void 0;
    var loadingBlock = createVNode("div", {
      "class": "".concat(prefixCls2, "-loading-content"),
      "style": loadingBlockStyle
    }, [createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 22
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 8
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 15
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 6
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 18
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 13
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 9
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 4
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 3
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 16
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    })]);
    var hasActiveTabKey = activeTabKey !== void 0;
    var tabsProps = (_tabsProps = {
      size: "large"
    }, _defineProperty(_tabsProps, hasActiveTabKey ? "activeKey" : "defaultActiveKey", hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _defineProperty(_tabsProps, "tabBarExtraContent", tabBarExtraContent), _defineProperty(_tabsProps, "onChange", this.triggerTabChange), _defineProperty(_tabsProps, "class", "".concat(prefixCls2, "-head-tabs")), _tabsProps);
    var head;
    var tabs = tabList && tabList.length ? createVNode(Tabs, tabsProps, {
      default: function _default8() {
        return [tabList.map(function(item) {
          var temp = item.tab, slots = item.slots;
          var name2 = slots === null || slots === void 0 ? void 0 : slots.tab;
          var tab = temp !== void 0 ? temp : $slots[name2] ? $slots[name2](item) : null;
          return createVNode(TabPane, {
            "tab": tab,
            "key": item.key,
            "disabled": item.disabled
          }, null);
        })];
      }
    }) : null;
    var titleDom = getComponent(this, "title");
    var extraDom = getComponent(this, "extra");
    if (titleDom || extraDom || tabs) {
      head = createVNode("div", {
        "class": "".concat(prefixCls2, "-head"),
        "style": headStyle
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-head-wrapper")
      }, [titleDom && createVNode("div", {
        "class": "".concat(prefixCls2, "-head-title")
      }, [titleDom]), extraDom && createVNode("div", {
        "class": "".concat(prefixCls2, "-extra")
      }, [extraDom])]), tabs]);
    }
    var cover = getComponent(this, "cover");
    var coverDom = cover ? createVNode("div", {
      "class": "".concat(prefixCls2, "-cover")
    }, [cover]) : null;
    var body = createVNode("div", {
      "class": "".concat(prefixCls2, "-body"),
      "style": bodyStyle
    }, [loading ? loadingBlock : children]);
    var actions = getComponent(this, "actions");
    var actionDom = actions && actions.length ? createVNode("ul", {
      "class": "".concat(prefixCls2, "-actions")
    }, [this.getAction(actions)]) : null;
    return createVNode("div", {
      "class": classString,
      "ref": "cardContainerRef"
    }, [head, coverDom, children ? body : null, actionDom]);
  }
});
var Card$1 = Card;
var Meta = defineComponent({
  name: "ACardMeta",
  props: {
    prefixCls: PropsTypes.string,
    title: PropsTypes.VNodeChild,
    description: PropsTypes.VNodeChild,
    avatar: PropsTypes.VNodeChild
  },
  setup: function setup67() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render52() {
    var customizePrefixCls = this.$props.prefixCls;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("card", customizePrefixCls);
    var classString = _defineProperty({}, "".concat(prefixCls2, "-meta"), true);
    var avatar = getComponent(this, "avatar");
    var title2 = getComponent(this, "title");
    var description2 = getComponent(this, "description");
    var avatarDom = avatar ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-avatar")
    }, [avatar]) : null;
    var titleDom = title2 ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-title")
    }, [title2]) : null;
    var descriptionDom = description2 ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-description")
    }, [description2]) : null;
    var MetaDetail = titleDom || descriptionDom ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-detail")
    }, [titleDom, descriptionDom]) : null;
    return createVNode("div", {
      "class": classString
    }, [avatarDom, MetaDetail]);
  }
});
var Grid = defineComponent({
  name: "ACardGrid",
  __ANT_CARD_GRID: true,
  props: {
    prefixCls: PropsTypes.string,
    hoverable: PropsTypes.looseBool
  },
  setup: function setup68() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render53() {
    var _classString;
    var _this$$props = this.$props, customizePrefixCls = _this$$props.prefixCls, _this$$props$hoverabl = _this$$props.hoverable, hoverable = _this$$props$hoverabl === void 0 ? true : _this$$props$hoverabl;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("card", customizePrefixCls);
    var classString = (_classString = {}, _defineProperty(_classString, "".concat(prefixCls2, "-grid"), true), _defineProperty(_classString, "".concat(prefixCls2, "-grid-hoverable"), hoverable), _classString);
    return createVNode("div", {
      "class": classString
    }, [getSlot(this)]);
  }
});
Card$1.Meta = Meta;
Card$1.Grid = Grid;
Card$1.install = function(app) {
  app.component(Card$1.name, Card$1);
  app.component(Meta.name, Meta);
  app.component(Grid.name, Grid);
  return app;
};
var re = /\s+/;
var ClassList = /* @__PURE__ */ function() {
  function ClassList2(el) {
    _classCallCheck(this, ClassList2);
    if (!el || !el.nodeType) {
      throw new Error("A DOM element reference is required");
    }
    this.el = el;
    this.list = el.classList;
  }
  _createClass(ClassList2, [{
    key: "array",
    value: function array() {
      var className = this.el.getAttribute("class") || "";
      var str = className.replace(/^\s+|\s+$/g, "");
      var arr = str.split(re);
      if (arr[0] === "")
        arr.shift();
      return arr;
    }
  }, {
    key: "add",
    value: function add2(name2) {
      if (this.list) {
        this.list.add(name2);
        return this;
      }
      var arr = this.array();
      var i = indexOf(arr, name2);
      if (!~i)
        arr.push(name2);
      this.el.className = arr.join(" ");
      return this;
    }
  }, {
    key: "remove",
    value: function remove3(name2) {
      if (toString.call(name2) === "[object RegExp]") {
        return this._removeMatching(name2);
      }
      if (this.list) {
        this.list.remove(name2);
        return this;
      }
      var arr = this.array();
      var i = indexOf(arr, name2);
      if (~i)
        arr.splice(i, 1);
      this.el.className = arr.join(" ");
      return this;
    }
  }, {
    key: "_removeMatching",
    value: function _removeMatching(re2) {
      var arr = this.array();
      for (var i = 0; i < arr.length; i++) {
        if (re2.test(arr[i])) {
          this.remove(arr[i]);
        }
      }
      return this;
    }
  }, {
    key: "toggle",
    value: function toggle(name2, force) {
      if (this.list) {
        if (typeof force !== "undefined") {
          if (force !== this.list.toggle(name2, force)) {
            this.list.toggle(name2);
          }
        } else {
          this.list.toggle(name2);
        }
        return this;
      }
      if (typeof force !== "undefined") {
        if (!force) {
          this.remove(name2);
        } else {
          this.add(name2);
        }
      } else {
        if (this.has(name2)) {
          this.remove(name2);
        } else {
          this.add(name2);
        }
      }
      return this;
    }
  }, {
    key: "has",
    value: function has(name2) {
      return this.list ? this.list.contains(name2) : !!~indexOf(this.array(), name2);
    }
  }, {
    key: "contains",
    value: function contains2(name2) {
      return this.has(name2);
    }
  }]);
  return ClassList2;
}();
function classes3(el) {
  return new ClassList(el);
}
var isCssAnimationSupported = Event$1.endEvents.length !== 0;
var capitalPrefixes = [
  "Webkit",
  "Moz",
  "O",
  "ms"
];
var prefixes = ["-webkit-", "-moz-", "-o-", "ms-", ""];
function getStyleProperty(node, name2) {
  var style3 = window.getComputedStyle(node, null);
  var ret = "";
  for (var i = 0; i < prefixes.length; i++) {
    ret = style3.getPropertyValue(prefixes[i] + name2);
    if (ret) {
      break;
    }
  }
  return ret;
}
function fixBrowserByTimeout(node) {
  if (isCssAnimationSupported) {
    var transitionDelay = parseFloat(getStyleProperty(node, "transition-delay")) || 0;
    var transitionDuration = parseFloat(getStyleProperty(node, "transition-duration")) || 0;
    var animationDelay = parseFloat(getStyleProperty(node, "animation-delay")) || 0;
    var animationDuration = parseFloat(getStyleProperty(node, "animation-duration")) || 0;
    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
    node.rcEndAnimTimeout = setTimeout(function() {
      node.rcEndAnimTimeout = null;
      if (node.rcEndListener) {
        node.rcEndListener();
      }
    }, time * 1e3 + 200);
  }
}
function clearBrowserBugTimeout(node) {
  if (node.rcEndAnimTimeout) {
    clearTimeout(node.rcEndAnimTimeout);
    node.rcEndAnimTimeout = null;
  }
}
var cssAnimation = function cssAnimation2(node, transitionName2, endCallback) {
  var nameIsObj = _typeof(transitionName2) === "object";
  var className = nameIsObj ? transitionName2.name : transitionName2;
  var activeClassName = nameIsObj ? transitionName2.active : "".concat(transitionName2, "-active");
  var end = endCallback;
  var start;
  var active;
  var nodeClasses = classes3(node);
  if (endCallback && Object.prototype.toString.call(endCallback) === "[object Object]") {
    end = endCallback.end;
    start = endCallback.start;
    active = endCallback.active;
  }
  if (node.rcEndListener) {
    node.rcEndListener();
  }
  node.rcEndListener = function(e) {
    if (e && e.target !== node) {
      return;
    }
    if (node.rcAnimTimeout) {
      cancelAnimationTimeout(node.rcAnimTimeout);
      node.rcAnimTimeout = null;
    }
    clearBrowserBugTimeout(node);
    nodeClasses.remove(className);
    nodeClasses.remove(activeClassName);
    Event$1.removeEndEventListener(node, node.rcEndListener);
    node.rcEndListener = null;
    if (end) {
      end();
    }
  };
  Event$1.addEndEventListener(node, node.rcEndListener);
  if (start) {
    start();
  }
  nodeClasses.add(className);
  node.rcAnimTimeout = requestAnimationTimeout(function() {
    node.rcAnimTimeout = null;
    nodeClasses.add(className);
    nodeClasses.add(activeClassName);
    if (active) {
      requestAnimationTimeout(active, 0);
    }
    fixBrowserByTimeout(node);
  }, 30);
  return {
    stop: function stop2() {
      if (node.rcEndListener) {
        node.rcEndListener();
      }
    }
  };
};
cssAnimation.style = function(node, style3, callback) {
  if (node.rcEndListener) {
    node.rcEndListener();
  }
  node.rcEndListener = function(e) {
    if (e && e.target !== node) {
      return;
    }
    if (node.rcAnimTimeout) {
      cancelAnimationTimeout(node.rcAnimTimeout);
      node.rcAnimTimeout = null;
    }
    clearBrowserBugTimeout(node);
    Event$1.removeEndEventListener(node, node.rcEndListener);
    node.rcEndListener = null;
    if (callback) {
      callback();
    }
  };
  Event$1.addEndEventListener(node, node.rcEndListener);
  node.rcAnimTimeout = requestAnimationTimeout(function() {
    for (var s in style3) {
      if (style3.hasOwnProperty(s)) {
        node.style[s] = style3[s];
      }
    }
    node.rcAnimTimeout = null;
    fixBrowserByTimeout(node);
  }, 0);
};
cssAnimation.setTransition = function(node, p, value26) {
  var property = p;
  var v = value26;
  if (value26 === void 0) {
    v = property;
    property = "";
  }
  property = property || "";
  capitalPrefixes.forEach(function(prefix) {
    node.style["".concat(prefix, "Transition").concat(property)] = v;
  });
};
cssAnimation.isCssAnimationSupported = isCssAnimationSupported;
var cssAnimation$1 = cssAnimation;
function animate$1(node, show, done) {
  var height;
  var requestAnimationFrameId;
  var appearRequestAnimationFrameId;
  return cssAnimation$1(node, "ant-motion-collapse-legacy", {
    start: function start() {
      if (appearRequestAnimationFrameId) {
        cancelAnimationFrame(appearRequestAnimationFrameId);
      }
      if (!show) {
        node.style.height = "".concat(node.offsetHeight, "px");
        node.style.opacity = "1";
      } else {
        height = node.offsetHeight;
        if (height === 0) {
          appearRequestAnimationFrameId = requestAnimationFrame(function() {
            height = node.offsetHeight;
            node.style.height = "0px";
            node.style.opacity = "0";
          });
        } else {
          node.style.height = "0px";
          node.style.opacity = "0";
        }
      }
    },
    active: function active() {
      if (requestAnimationFrameId) {
        cancelAnimationFrame(requestAnimationFrameId);
      }
      requestAnimationFrameId = requestAnimationFrame(function() {
        node.style.height = "".concat(show ? height : 0, "px");
        node.style.opacity = show ? "1" : "0";
      });
    },
    end: function end() {
      if (appearRequestAnimationFrameId) {
        cancelAnimationFrame(appearRequestAnimationFrameId);
      }
      if (requestAnimationFrameId) {
        cancelAnimationFrame(requestAnimationFrameId);
      }
      node.style.height = "";
      node.style.opacity = "";
      done && done();
    }
  });
}
var animation$1 = {
  onEnter: function onEnter(node, done) {
    nextTick(function() {
      animate$1(node, true, done);
    });
  },
  onLeave: function onLeave(node, done) {
    return animate$1(node, false, done);
  }
};
var animation$2 = animation$1;
var PanelContent = defineComponent({
  name: "PanelContent",
  props: {
    prefixCls: PropsTypes.string,
    isActive: PropsTypes.looseBool,
    destroyInactivePanel: PropsTypes.looseBool,
    forceRender: PropsTypes.looseBool,
    role: PropsTypes.any
  },
  data: function data18() {
    return {
      _isActive: void 0
    };
  },
  render: function render54() {
    var _contentCls;
    this._isActive = this.forceRender || this._isActive || this.isActive;
    if (!this._isActive) {
      return null;
    }
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, isActive = _this$$props.isActive, destroyInactivePanel = _this$$props.destroyInactivePanel, forceRender = _this$$props.forceRender, role = _this$$props.role;
    var contentCls = (_contentCls = {}, _defineProperty(_contentCls, "".concat(prefixCls2, "-content"), true), _defineProperty(_contentCls, "".concat(prefixCls2, "-content-active"), isActive), _contentCls);
    var child = !forceRender && !isActive && destroyInactivePanel ? null : createVNode("div", {
      "class": "".concat(prefixCls2, "-content-box")
    }, [getSlot(this)]);
    return createVNode("div", {
      "class": contentCls,
      "role": role
    }, [child]);
  }
});
var collapseProps$1 = function collapseProps() {
  return {
    prefixCls: PropsTypes.string,
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]))]),
    defaultActiveKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]))]),
    accordion: PropsTypes.looseBool,
    destroyInactivePanel: PropsTypes.looseBool,
    bordered: PropsTypes.looseBool,
    expandIcon: PropsTypes.func,
    openAnimation: PropsTypes.object,
    expandIconPosition: PropsTypes.oneOf(["left", "right"]),
    onChange: PropsTypes.func
  };
};
var panelProps = function panelProps2() {
  return {
    openAnimation: PropsTypes.object,
    prefixCls: PropsTypes.string,
    header: PropsTypes.any,
    headerClass: PropsTypes.string,
    showArrow: PropsTypes.looseBool,
    isActive: PropsTypes.looseBool,
    destroyInactivePanel: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    accordion: PropsTypes.looseBool,
    forceRender: PropsTypes.looseBool,
    expandIcon: PropsTypes.func,
    extra: PropsTypes.any,
    panelKey: PropsTypes.any
  };
};
var CollapsePanel$1 = defineComponent({
  name: "Panel",
  mixins: [BaseMixin],
  props: initDefaultProps$2(panelProps(), {
    showArrow: true,
    isActive: false,
    destroyInactivePanel: false,
    headerClass: "",
    forceRender: false
  }),
  methods: {
    handleItemClick: function handleItemClick() {
      this.__emit("itemClick", this.panelKey);
    },
    handleKeyPress: function handleKeyPress(e) {
      if (e.key === "Enter" || e.keyCode === 13 || e.which === 13) {
        this.handleItemClick();
      }
    }
  },
  render: function render55() {
    var _headerCls, _itemCls, _this = this;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, headerClass = _this$$props.headerClass, isActive = _this$$props.isActive, showArrow = _this$$props.showArrow, destroyInactivePanel = _this$$props.destroyInactivePanel, disabled = _this$$props.disabled, openAnimation2 = _this$$props.openAnimation, accordion = _this$$props.accordion, forceRender = _this$$props.forceRender, expandIcon = _this$$props.expandIcon, extra = _this$$props.extra;
    var transitionProps = _extends({
      appear: true,
      css: false
    }, openAnimation2);
    var headerCls = (_headerCls = {}, _defineProperty(_headerCls, "".concat(prefixCls2, "-header"), true), _defineProperty(_headerCls, headerClass, headerClass), _headerCls);
    var header = getComponent(this, "header");
    var itemCls = (_itemCls = {}, _defineProperty(_itemCls, "".concat(prefixCls2, "-item"), true), _defineProperty(_itemCls, "".concat(prefixCls2, "-item-active"), isActive), _defineProperty(_itemCls, "".concat(prefixCls2, "-item-disabled"), disabled), _itemCls);
    var icon = createVNode("i", {
      "class": "arrow"
    }, null);
    if (showArrow && typeof expandIcon === "function") {
      icon = expandIcon(this.$props);
    }
    var panelContent = withDirectives(createVNode(PanelContent, {
      "prefixCls": prefixCls2,
      "isActive": isActive,
      "destroyInactivePanel": destroyInactivePanel,
      "forceRender": forceRender,
      "role": accordion ? "tabpanel" : null
    }, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    }), [[vShow, isActive]]);
    return createVNode("div", {
      "class": itemCls,
      "role": "tablist"
    }, [createVNode("div", {
      "class": headerCls,
      "onClick": this.handleItemClick,
      "onKeypress": this.handleKeyPress,
      "role": accordion ? "tab" : "button",
      "tabindex": disabled ? -1 : 0,
      "aria-expanded": isActive
    }, [showArrow && icon, header, extra && createVNode("div", {
      "class": "".concat(prefixCls2, "-extra")
    }, [extra])]), createVNode(Transition$1, transitionProps, {
      default: function _default8() {
        return [panelContent];
      }
    })]);
  }
});
function animate(node, show, transitionName2, done) {
  var height;
  return cssAnimation$1(node, transitionName2, {
    start: function start() {
      if (!show) {
        node.style.height = "".concat(node.offsetHeight, "px");
      } else {
        height = node.offsetHeight;
        node.style.height = 0;
      }
    },
    active: function active() {
      node.style.height = "".concat(show ? height : 0, "px");
    },
    end: function end() {
      node.style.height = "";
      done();
    }
  });
}
function animation(prefixCls2) {
  return {
    onEnter: function onEnter2(node, done) {
      return animate(node, true, "".concat(prefixCls2, "-anim"), done);
    },
    onLeave: function onLeave2(node, done) {
      return animate(node, false, "".concat(prefixCls2, "-anim"), done);
    }
  };
}
function _toArray(activeKey2) {
  var currentActiveKey = activeKey2;
  if (!Array.isArray(currentActiveKey)) {
    var activeKeyType = _typeof(currentActiveKey);
    currentActiveKey = activeKeyType === "number" || activeKeyType === "string" ? [currentActiveKey] : [];
  }
  return currentActiveKey.map(function(key2) {
    return String(key2);
  });
}
var Collapse$1 = defineComponent({
  name: "Collapse",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(collapseProps$1(), {
    prefixCls: "rc-collapse",
    accordion: false,
    destroyInactivePanel: false
  }),
  data: function data19() {
    var _this$$props = this.$props, activeKey2 = _this$$props.activeKey, defaultActiveKey = _this$$props.defaultActiveKey, openAnimation2 = _this$$props.openAnimation, prefixCls2 = _this$$props.prefixCls;
    var currentActiveKey = defaultActiveKey;
    if (hasProp(this, "activeKey")) {
      currentActiveKey = activeKey2;
    }
    var currentOpenAnimations = openAnimation2 || animation(prefixCls2);
    return {
      currentOpenAnimations,
      stateActiveKey: _toArray(currentActiveKey)
    };
  },
  watch: {
    activeKey: function activeKey(val) {
      this.setState({
        stateActiveKey: _toArray(val)
      });
    },
    openAnimation: function openAnimation(val) {
      this.setState({
        currentOpenAnimations: val
      });
    }
  },
  methods: {
    onClickItem: function onClickItem(key2) {
      var activeKey2 = this.stateActiveKey;
      if (this.accordion) {
        activeKey2 = activeKey2[0] === key2 ? [] : [key2];
      } else {
        activeKey2 = _toConsumableArray(activeKey2);
        var index2 = activeKey2.indexOf(key2);
        var isActive = index2 > -1;
        if (isActive) {
          activeKey2.splice(index2, 1);
        } else {
          activeKey2.push(key2);
        }
      }
      this.setActiveKey(activeKey2);
    },
    getNewChild: function getNewChild(child, index2) {
      var _a;
      if (isEmptyElement(child))
        return;
      var activeKey2 = this.stateActiveKey;
      var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, accordion = _this$$props2.accordion, destroyInactivePanel = _this$$props2.destroyInactivePanel, expandIcon = _this$$props2.expandIcon;
      var key2 = String((_a = child.key) !== null && _a !== void 0 ? _a : index2);
      var _getPropsData = getPropsData(child), header = _getPropsData.header, headerClass = _getPropsData.headerClass, disabled = _getPropsData.disabled;
      var isActive = false;
      if (accordion) {
        isActive = activeKey2[0] === key2;
      } else {
        isActive = activeKey2.indexOf(key2) > -1;
      }
      var panelEvents = {};
      if (!disabled && disabled !== "") {
        panelEvents = {
          onItemClick: this.onClickItem
        };
      }
      var props2 = _extends({
        key: key2,
        panelKey: key2,
        header,
        headerClass,
        isActive,
        prefixCls: prefixCls2,
        destroyInactivePanel,
        openAnimation: this.currentOpenAnimations,
        accordion,
        expandIcon
      }, panelEvents);
      return cloneElement(child, props2);
    },
    getItems: function getItems() {
      var _this = this;
      var newChildren = [];
      var children = getSlot(this);
      children && children.forEach(function(child, index2) {
        newChildren.push(_this.getNewChild(child, index2));
      });
      return newChildren;
    },
    setActiveKey: function setActiveKey2(activeKey2) {
      if (!hasProp(this, "activeKey")) {
        this.setState({
          stateActiveKey: activeKey2
        });
      }
      this.__emit("change", this.accordion ? activeKey2[0] : activeKey2);
    }
  },
  render: function render56() {
    var _collapseClassName;
    var _this$$props3 = this.$props, prefixCls2 = _this$$props3.prefixCls, accordion = _this$$props3.accordion;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var collapseClassName = (_collapseClassName = {}, _defineProperty(_collapseClassName, prefixCls2, true), _defineProperty(_collapseClassName, className, className), _collapseClassName);
    return createVNode("div", _objectSpread2(_objectSpread2({
      "class": collapseClassName
    }, getDataAndAriaProps$1(this.$attrs)), {}, {
      "style": style3,
      "role": accordion ? "tablist" : null
    }), [this.getItems()]);
  }
});
Collapse$1.Panel = CollapsePanel$1;
var __rest$A = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var collapseProps2 = {
  prefixCls: PropsTypes.string,
  activeKey: {
    type: [Array, Number, String]
  },
  defaultActiveKey: {
    type: [Array, Number, String]
  },
  accordion: PropsTypes.looseBool,
  destroyInactivePanel: PropsTypes.looseBool,
  bordered: PropsTypes.looseBool.def(true),
  expandIcon: PropsTypes.func,
  openAnimation: PropsTypes.object.def(animation$2),
  expandIconPosition: PropsTypes.oneOf(tuple("left", "right")).def("left"),
  "onUpdate:activeKey": PropsTypes.func,
  onChange: PropsTypes.func
};
var Collapse = defineComponent({
  name: "ACollapse",
  inheritAttrs: false,
  props: collapseProps2,
  setup: function setup69() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    renderExpandIcon: function renderExpandIcon() {
      var panelProps3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var prefixCls2 = arguments.length > 1 ? arguments[1] : void 0;
      var expandIcon = getComponent(this, "expandIcon", panelProps3);
      var icon = expandIcon || createVNode(RightOutlined, {
        "rotate": panelProps3.isActive ? 90 : void 0
      }, null);
      return isValidElement(Array.isArray(expandIcon) ? icon[0] : icon) ? cloneElement(icon, {
        class: "".concat(prefixCls2, "-arrow")
      }) : icon;
    },
    handleChange: function handleChange7(activeKey2) {
      this.$emit("update:activeKey", activeKey2);
      this.$emit("change", activeKey2);
    }
  },
  render: function render57() {
    var _collapseClassName, _this = this;
    var customizePrefixCls = this.prefixCls, bordered = this.bordered, expandIconPosition = this.expandIconPosition;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("collapse", customizePrefixCls);
    var _a = this.$attrs, className = _a.class, restAttrs = __rest$A(_a, ["class"]);
    var collapseClassName = (_collapseClassName = {}, _defineProperty(_collapseClassName, className, className), _defineProperty(_collapseClassName, "".concat(prefixCls2, "-borderless"), !bordered), _defineProperty(_collapseClassName, "".concat(prefixCls2, "-icon-position-").concat(expandIconPosition), true), _collapseClassName);
    var rcCollapeProps = _extends(_extends(_extends(_extends({}, getOptionProps(this)), {
      prefixCls: prefixCls2,
      expandIcon: function expandIcon(panelProps3) {
        return _this.renderExpandIcon(panelProps3, prefixCls2);
      },
      class: collapseClassName
    }), restAttrs), {
      onChange: this.handleChange
    });
    return createVNode(Collapse$1, rcCollapeProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
var __rest$z = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var collapsePanelProps = {
  openAnimation: PropsTypes.object,
  prefixCls: PropsTypes.string,
  header: PropsTypes.VNodeChild,
  headerClass: PropsTypes.string,
  showArrow: PropsTypes.looseBool,
  isActive: PropsTypes.looseBool,
  destroyInactivePanel: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  accordion: PropsTypes.looseBool,
  forceRender: PropsTypes.looseBool,
  expandIcon: PropsTypes.func,
  extra: PropsTypes.VNodeChild,
  panelKey: PropsTypes.VNodeChild
};
var CollapsePanel = defineComponent({
  name: "ACollapsePanel",
  inheritAttrs: false,
  props: collapsePanelProps,
  setup: function setup70() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render58() {
    var _collapsePanelClassNa, _this = this;
    var customizePrefixCls = this.prefixCls, _this$showArrow = this.showArrow, showArrow = _this$showArrow === void 0 ? true : _this$showArrow;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("collapse", customizePrefixCls);
    var _a = this.$attrs, className = _a.class, restAttrs = __rest$z(_a, ["class"]);
    var collapsePanelClassName = (_collapsePanelClassNa = {}, _defineProperty(_collapsePanelClassNa, className, className), _defineProperty(_collapsePanelClassNa, "".concat(prefixCls2, "-no-arrow"), !showArrow), _collapsePanelClassNa);
    var rcCollapePanelProps = _extends(_extends(_extends({}, getOptionProps(this)), {
      header: getComponent(this, "header"),
      prefixCls: prefixCls2,
      extra: getComponent(this, "extra"),
      class: collapsePanelClassName
    }), restAttrs);
    return createVNode(Collapse$1.Panel, rcCollapePanelProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
Collapse.Panel = CollapsePanel;
Collapse.install = function(app) {
  app.component(Collapse.name, Collapse);
  app.component(CollapsePanel.name, CollapsePanel);
  return app;
};
var camel2hyphen = function camel2hyphen2(str) {
  return str.replace(/[A-Z]/g, function(match2) {
    return "-" + match2.toLowerCase();
  }).toLowerCase();
};
var isDimension = function isDimension2(feature) {
  var re2 = /[height|width]$/;
  return re2.test(feature);
};
var obj2mq = function obj2mq2(obj) {
  var mq = "";
  var features = Object.keys(obj);
  features.forEach(function(feature, index2) {
    var value26 = obj[feature];
    feature = camel2hyphen(feature);
    if (isDimension(feature) && typeof value26 === "number") {
      value26 = value26 + "px";
    }
    if (value26 === true) {
      mq += feature;
    } else if (value26 === false) {
      mq += "not " + feature;
    } else {
      mq += "(" + feature + ": " + value26 + ")";
    }
    if (index2 < features.length - 1) {
      mq += " and ";
    }
  });
  return mq;
};
function json2mq(query) {
  var mq = "";
  if (typeof query === "string") {
    return query;
  }
  if (query instanceof Array) {
    query.forEach(function(q, index2) {
      mq += obj2mq(q);
      if (index2 < query.length - 1) {
        mq += ", ";
      }
    });
    return mq;
  }
  return obj2mq(query);
}
var defaultProps$2 = {
  accessibility: PropsTypes.looseBool.def(true),
  adaptiveHeight: PropsTypes.looseBool.def(false),
  afterChange: PropsTypes.any.def(null),
  arrows: PropsTypes.looseBool.def(true),
  autoplay: PropsTypes.looseBool.def(false),
  autoplaySpeed: PropsTypes.number.def(3e3),
  beforeChange: PropsTypes.any.def(null),
  centerMode: PropsTypes.looseBool.def(false),
  centerPadding: PropsTypes.string.def("50px"),
  cssEase: PropsTypes.string.def("ease"),
  dots: PropsTypes.looseBool.def(false),
  dotsClass: PropsTypes.string.def("slick-dots"),
  draggable: PropsTypes.looseBool.def(true),
  unslick: PropsTypes.looseBool.def(false),
  easing: PropsTypes.string.def("linear"),
  edgeFriction: PropsTypes.number.def(0.35),
  fade: PropsTypes.looseBool.def(false),
  focusOnSelect: PropsTypes.looseBool.def(false),
  infinite: PropsTypes.looseBool.def(true),
  initialSlide: PropsTypes.number.def(0),
  lazyLoad: PropsTypes.any.def(null),
  verticalSwiping: PropsTypes.looseBool.def(false),
  asNavFor: PropsTypes.any.def(null),
  pauseOnDotsHover: PropsTypes.looseBool.def(false),
  pauseOnFocus: PropsTypes.looseBool.def(false),
  pauseOnHover: PropsTypes.looseBool.def(true),
  responsive: PropsTypes.array,
  rows: PropsTypes.number.def(1),
  rtl: PropsTypes.looseBool.def(false),
  slide: PropsTypes.string.def("div"),
  slidesPerRow: PropsTypes.number.def(1),
  slidesToScroll: PropsTypes.number.def(1),
  slidesToShow: PropsTypes.number.def(1),
  speed: PropsTypes.number.def(500),
  swipe: PropsTypes.looseBool.def(true),
  swipeEvent: PropsTypes.any.def(null),
  swipeToSlide: PropsTypes.looseBool.def(false),
  touchMove: PropsTypes.looseBool.def(true),
  touchThreshold: PropsTypes.number.def(5),
  useCSS: PropsTypes.looseBool.def(true),
  useTransform: PropsTypes.looseBool.def(true),
  variableWidth: PropsTypes.looseBool.def(false),
  vertical: PropsTypes.looseBool.def(false),
  waitForAnimate: PropsTypes.looseBool.def(true),
  children: PropsTypes.array,
  __propsSymbol__: PropsTypes.any
};
var defaultProps$3 = defaultProps$2;
var initialState = {
  animating: false,
  autoplaying: null,
  currentDirection: 0,
  currentLeft: null,
  currentSlide: 0,
  direction: 1,
  dragging: false,
  edgeDragged: false,
  initialized: false,
  lazyLoadedList: [],
  listHeight: null,
  listWidth: null,
  scrolling: false,
  slideCount: null,
  slideHeight: null,
  slideWidth: null,
  swipeLeft: null,
  swiped: false,
  swiping: false,
  touchObject: {
    startX: 0,
    startY: 0,
    curX: 0,
    curY: 0
  },
  trackStyle: {},
  trackWidth: 0
};
var initialState$1 = initialState;
var getOnDemandLazySlides = function getOnDemandLazySlides2(spec) {
  var onDemandSlides = [];
  var startIndex = lazyStartIndex(spec);
  var endIndex = lazyEndIndex(spec);
  for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) {
    if (spec.lazyLoadedList.indexOf(slideIndex) < 0) {
      onDemandSlides.push(slideIndex);
    }
  }
  return onDemandSlides;
};
var lazyStartIndex = function lazyStartIndex2(spec) {
  return spec.currentSlide - lazySlidesOnLeft(spec);
};
var lazyEndIndex = function lazyEndIndex2(spec) {
  return spec.currentSlide + lazySlidesOnRight(spec);
};
var lazySlidesOnLeft = function lazySlidesOnLeft2(spec) {
  return spec.centerMode ? Math.floor(spec.slidesToShow / 2) + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : 0;
};
var lazySlidesOnRight = function lazySlidesOnRight2(spec) {
  return spec.centerMode ? Math.floor((spec.slidesToShow - 1) / 2) + 1 + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : spec.slidesToShow;
};
var getWidth = function getWidth2(elem) {
  return elem && elem.offsetWidth || 0;
};
var getHeight = function getHeight2(elem) {
  return elem && elem.offsetHeight || 0;
};
var getSwipeDirection = function getSwipeDirection2(touchObject) {
  var verticalSwiping = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var swipeAngle;
  var xDist = touchObject.startX - touchObject.curX;
  var yDist = touchObject.startY - touchObject.curY;
  var r = Math.atan2(yDist, xDist);
  swipeAngle = Math.round(r * 180 / Math.PI);
  if (swipeAngle < 0) {
    swipeAngle = 360 - Math.abs(swipeAngle);
  }
  if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
    return "left";
  }
  if (swipeAngle >= 135 && swipeAngle <= 225) {
    return "right";
  }
  if (verticalSwiping === true) {
    if (swipeAngle >= 35 && swipeAngle <= 135) {
      return "up";
    } else {
      return "down";
    }
  }
  return "vertical";
};
var canGoNext = function canGoNext2(spec) {
  var canGo = true;
  if (!spec.infinite) {
    if (spec.centerMode && spec.currentSlide >= spec.slideCount - 1) {
      canGo = false;
    } else if (spec.slideCount <= spec.slidesToShow || spec.currentSlide >= spec.slideCount - spec.slidesToShow) {
      canGo = false;
    }
  }
  return canGo;
};
var extractObject = function extractObject2(spec, keys) {
  var newObject = {};
  keys.forEach(function(key2) {
    return newObject[key2] = spec[key2];
  });
  return newObject;
};
var initializedState = function initializedState2(spec) {
  var slideCount = spec.children.length;
  var listWidth = Math.ceil(getWidth(spec.listRef));
  var trackWidth = Math.ceil(getWidth(spec.trackRef));
  var slideWidth;
  if (!spec.vertical) {
    var centerPaddingAdj = spec.centerMode && parseInt(spec.centerPadding) * 2;
    if (typeof spec.centerPadding === "string" && spec.centerPadding.slice(-1) === "%") {
      centerPaddingAdj *= listWidth / 100;
    }
    slideWidth = Math.ceil((listWidth - centerPaddingAdj) / spec.slidesToShow);
  } else {
    slideWidth = listWidth;
  }
  var slideHeight = spec.listRef && getHeight(spec.listRef.querySelector('[data-index="0"]'));
  var listHeight = slideHeight * spec.slidesToShow;
  var currentSlide = spec.currentSlide === void 0 ? spec.initialSlide : spec.currentSlide;
  if (spec.rtl && spec.currentSlide === void 0) {
    currentSlide = slideCount - 1 - spec.initialSlide;
  }
  var lazyLoadedList = spec.lazyLoadedList || [];
  var slidesToLoad = getOnDemandLazySlides({
    currentSlide,
    lazyLoadedList
  });
  lazyLoadedList.concat(slidesToLoad);
  var state = {
    slideCount,
    slideWidth,
    listWidth,
    trackWidth,
    currentSlide,
    slideHeight,
    listHeight,
    lazyLoadedList
  };
  if (spec.autoplaying === null && spec.autoplay) {
    state["autoplaying"] = "playing";
  }
  return state;
};
var slideHandler = function slideHandler2(spec) {
  var waitForAnimate = spec.waitForAnimate, animating = spec.animating, fade = spec.fade, infinite = spec.infinite, index2 = spec.index, slideCount = spec.slideCount, lazyLoadedList = spec.lazyLoadedList, lazyLoad = spec.lazyLoad, currentSlide = spec.currentSlide, centerMode = spec.centerMode, slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, useCSS = spec.useCSS;
  if (waitForAnimate && animating)
    return {};
  var animationSlide = index2;
  var finalSlide;
  var animationLeft;
  var finalLeft;
  var state = {};
  var nextState = {};
  if (fade) {
    if (!infinite && (index2 < 0 || index2 >= slideCount))
      return {};
    if (index2 < 0) {
      animationSlide = index2 + slideCount;
    } else if (index2 >= slideCount) {
      animationSlide = index2 - slideCount;
    }
    if (lazyLoad && lazyLoadedList.indexOf(animationSlide) < 0) {
      lazyLoadedList.push(animationSlide);
    }
    state = {
      animating: true,
      currentSlide: animationSlide,
      lazyLoadedList
    };
    nextState = {
      animating: false
    };
  } else {
    finalSlide = animationSlide;
    if (animationSlide < 0) {
      finalSlide = animationSlide + slideCount;
      if (!infinite)
        finalSlide = 0;
      else if (slideCount % slidesToScroll !== 0) {
        finalSlide = slideCount - slideCount % slidesToScroll;
      }
    } else if (!canGoNext(spec) && animationSlide > currentSlide) {
      animationSlide = finalSlide = currentSlide;
    } else if (centerMode && animationSlide >= slideCount) {
      animationSlide = infinite ? slideCount : slideCount - 1;
      finalSlide = infinite ? 0 : slideCount - 1;
    } else if (animationSlide >= slideCount) {
      finalSlide = animationSlide - slideCount;
      if (!infinite)
        finalSlide = slideCount - slidesToShow;
      else if (slideCount % slidesToScroll !== 0)
        finalSlide = 0;
    }
    animationLeft = getTrackLeft(_extends(_extends({}, spec), {
      slideIndex: animationSlide
    }));
    finalLeft = getTrackLeft(_extends(_extends({}, spec), {
      slideIndex: finalSlide
    }));
    if (!infinite) {
      if (animationLeft === finalLeft)
        animationSlide = finalSlide;
      animationLeft = finalLeft;
    }
    lazyLoad && lazyLoadedList.concat(getOnDemandLazySlides(_extends(_extends({}, spec), {
      currentSlide: animationSlide
    })));
    if (!useCSS) {
      state = {
        currentSlide: finalSlide,
        trackStyle: getTrackCSS(_extends(_extends({}, spec), {
          left: finalLeft
        })),
        lazyLoadedList
      };
    } else {
      state = {
        animating: true,
        currentSlide: finalSlide,
        trackStyle: getTrackAnimateCSS(_extends(_extends({}, spec), {
          left: animationLeft
        })),
        lazyLoadedList
      };
      nextState = {
        animating: false,
        currentSlide: finalSlide,
        trackStyle: getTrackCSS(_extends(_extends({}, spec), {
          left: finalLeft
        })),
        swipeLeft: null
      };
    }
  }
  return {
    state,
    nextState
  };
};
var changeSlide = function changeSlide2(spec, options2) {
  var previousInt, slideOffset, targetSlide;
  var slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, slideCount = spec.slideCount, currentSlide = spec.currentSlide, lazyLoad = spec.lazyLoad, infinite = spec.infinite;
  var unevenOffset = slideCount % slidesToScroll !== 0;
  var indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;
  if (options2.message === "previous") {
    slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;
    targetSlide = currentSlide - slideOffset;
    if (lazyLoad && !infinite) {
      previousInt = currentSlide - slideOffset;
      targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;
    }
  } else if (options2.message === "next") {
    slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;
    targetSlide = currentSlide + slideOffset;
    if (lazyLoad && !infinite) {
      targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;
    }
  } else if (options2.message === "dots") {
    targetSlide = options2.index * options2.slidesToScroll;
    if (targetSlide === options2.currentSlide) {
      return null;
    }
  } else if (options2.message === "children") {
    targetSlide = options2.index;
    if (targetSlide === options2.currentSlide) {
      return null;
    }
    if (infinite) {
      var direction = siblingDirection(_extends(_extends({}, spec), {
        targetSlide
      }));
      if (targetSlide > options2.currentSlide && direction === "left") {
        targetSlide = targetSlide - slideCount;
      } else if (targetSlide < options2.currentSlide && direction === "right") {
        targetSlide = targetSlide + slideCount;
      }
    }
  } else if (options2.message === "index") {
    targetSlide = Number(options2.index);
    if (targetSlide === options2.currentSlide) {
      return null;
    }
  }
  return targetSlide;
};
var keyHandler = function keyHandler2(e, accessibility, rtl) {
  if (e.target.tagName.match("TEXTAREA|INPUT|SELECT") || !accessibility) {
    return "";
  }
  if (e.keyCode === 37)
    return rtl ? "next" : "previous";
  if (e.keyCode === 39)
    return rtl ? "previous" : "next";
  return "";
};
var swipeStart = function swipeStart2(e, swipe, draggable) {
  e.target.tagName === "IMG" && e.preventDefault();
  if (!swipe || !draggable && e.type.indexOf("mouse") !== -1)
    return "";
  return {
    dragging: true,
    touchObject: {
      startX: e.touches ? e.touches[0].pageX : e.clientX,
      startY: e.touches ? e.touches[0].pageY : e.clientY,
      curX: e.touches ? e.touches[0].pageX : e.clientX,
      curY: e.touches ? e.touches[0].pageY : e.clientY
    }
  };
};
var swipeMove = function swipeMove2(e, spec) {
  var scrolling = spec.scrolling, animating = spec.animating, vertical = spec.vertical, swipeToSlide = spec.swipeToSlide, verticalSwiping = spec.verticalSwiping, rtl = spec.rtl, currentSlide = spec.currentSlide, edgeFriction = spec.edgeFriction, edgeDragged = spec.edgeDragged, onEdge = spec.onEdge, swiped = spec.swiped, swiping = spec.swiping, slideCount = spec.slideCount, slidesToScroll = spec.slidesToScroll, infinite = spec.infinite, touchObject = spec.touchObject, swipeEvent = spec.swipeEvent, listHeight = spec.listHeight, listWidth = spec.listWidth;
  if (scrolling)
    return;
  if (animating)
    return e.preventDefault();
  if (vertical && swipeToSlide && verticalSwiping)
    e.preventDefault();
  var swipeLeft;
  var state = {};
  var curLeft = getTrackLeft(spec);
  touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
  touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
  touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
  var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
  if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {
    return {
      scrolling: true
    };
  }
  if (verticalSwiping)
    touchObject.swipeLength = verticalSwipeLength;
  var positionOffset = (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
  if (verticalSwiping) {
    positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
  }
  var dotCount = Math.ceil(slideCount / slidesToScroll);
  var swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping);
  var touchSwipeLength = touchObject.swipeLength;
  if (!infinite) {
    if (currentSlide === 0 && swipeDirection === "right" || currentSlide + 1 >= dotCount && swipeDirection === "left" || !canGoNext(spec) && swipeDirection === "left") {
      touchSwipeLength = touchObject.swipeLength * edgeFriction;
      if (edgeDragged === false && onEdge) {
        onEdge(swipeDirection);
        state["edgeDragged"] = true;
      }
    }
  }
  if (!swiped && swipeEvent) {
    swipeEvent(swipeDirection);
    state["swiped"] = true;
  }
  if (!vertical) {
    if (!rtl) {
      swipeLeft = curLeft + touchSwipeLength * positionOffset;
    } else {
      swipeLeft = curLeft - touchSwipeLength * positionOffset;
    }
  } else {
    swipeLeft = curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset;
  }
  if (verticalSwiping) {
    swipeLeft = curLeft + touchSwipeLength * positionOffset;
  }
  state = _extends(_extends({}, state), {
    touchObject,
    swipeLeft,
    trackStyle: getTrackCSS(_extends(_extends({}, spec), {
      left: swipeLeft
    }))
  });
  if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
    return state;
  }
  if (touchObject.swipeLength > 10) {
    state["swiping"] = true;
    e.preventDefault();
  }
  return state;
};
var swipeEnd = function swipeEnd2(e, spec) {
  var dragging = spec.dragging, swipe = spec.swipe, touchObject = spec.touchObject, listWidth = spec.listWidth, touchThreshold = spec.touchThreshold, verticalSwiping = spec.verticalSwiping, listHeight = spec.listHeight, currentSlide = spec.currentSlide, swipeToSlide = spec.swipeToSlide, scrolling = spec.scrolling, onSwipe = spec.onSwipe;
  if (!dragging) {
    if (swipe)
      e.preventDefault();
    return {};
  }
  var minSwipe = verticalSwiping ? listHeight / touchThreshold : listWidth / touchThreshold;
  var swipeDirection = getSwipeDirection(touchObject, verticalSwiping);
  var state = {
    dragging: false,
    edgeDragged: false,
    scrolling: false,
    swiping: false,
    swiped: false,
    swipeLeft: null,
    touchObject: {}
  };
  if (scrolling) {
    return state;
  }
  if (!touchObject.swipeLength) {
    return state;
  }
  if (touchObject.swipeLength > minSwipe) {
    e.preventDefault();
    if (onSwipe) {
      onSwipe(swipeDirection);
    }
    var slideCount, newSlide;
    switch (swipeDirection) {
      case "left":
      case "up":
        newSlide = currentSlide + getSlideCount(spec);
        slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
        state["currentDirection"] = 0;
        break;
      case "right":
      case "down":
        newSlide = currentSlide - getSlideCount(spec);
        slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
        state["currentDirection"] = 1;
        break;
      default:
        slideCount = currentSlide;
    }
    state["triggerSlideHandler"] = slideCount;
  } else {
    var currentLeft = getTrackLeft(spec);
    state["trackStyle"] = getTrackAnimateCSS(_extends(_extends({}, spec), {
      left: currentLeft
    }));
  }
  return state;
};
var getNavigableIndexes = function getNavigableIndexes2(spec) {
  var max3 = spec.infinite ? spec.slideCount * 2 : spec.slideCount;
  var breakpoint = spec.infinite ? spec.slidesToShow * -1 : 0;
  var counter = spec.infinite ? spec.slidesToShow * -1 : 0;
  var indexes = [];
  while (breakpoint < max3) {
    indexes.push(breakpoint);
    breakpoint = counter + spec.slidesToScroll;
    counter += Math.min(spec.slidesToScroll, spec.slidesToShow);
  }
  return indexes;
};
var checkNavigable = function checkNavigable2(spec, index2) {
  var navigables = getNavigableIndexes(spec);
  var prevNavigable = 0;
  if (index2 > navigables[navigables.length - 1]) {
    index2 = navigables[navigables.length - 1];
  } else {
    for (var n in navigables) {
      if (index2 < navigables[n]) {
        index2 = prevNavigable;
        break;
      }
      prevNavigable = navigables[n];
    }
  }
  return index2;
};
var getSlideCount = function getSlideCount2(spec) {
  var centerOffset = spec.centerMode ? spec.slideWidth * Math.floor(spec.slidesToShow / 2) : 0;
  if (spec.swipeToSlide) {
    var swipedSlide;
    var slickList = spec.listRef;
    var slides = slickList.querySelectorAll(".slick-slide");
    Array.from(slides).every(function(slide) {
      if (!spec.vertical) {
        if (slide.offsetLeft - centerOffset + getWidth(slide) / 2 > spec.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      } else {
        if (slide.offsetTop + getHeight(slide) / 2 > spec.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      }
      return true;
    });
    if (!swipedSlide) {
      return 0;
    }
    var currentIndex = spec.rtl === true ? spec.slideCount - spec.currentSlide : spec.currentSlide;
    var slidesTraversed = Math.abs(swipedSlide.dataset.index - currentIndex) || 1;
    return slidesTraversed;
  } else {
    return spec.slidesToScroll;
  }
};
var checkSpecKeys = function checkSpecKeys2(spec, keysArray) {
  return keysArray.reduce(function(value26, key2) {
    return value26 && spec.hasOwnProperty(key2);
  }, true) ? null : console.error("Keys Missing:", spec);
};
var getTrackCSS = function getTrackCSS2(spec) {
  checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth"]);
  var trackWidth, trackHeight;
  var trackChildren = spec.slideCount + 2 * spec.slidesToShow;
  if (!spec.vertical) {
    trackWidth = getTotalSlides(spec) * spec.slideWidth;
  } else {
    trackHeight = trackChildren * spec.slideHeight;
  }
  var style3 = {
    opacity: 1,
    transition: "",
    WebkitTransition: ""
  };
  if (spec.useTransform) {
    var WebkitTransform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
    var transform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
    var msTransform = !spec.vertical ? "translateX(" + spec.left + "px)" : "translateY(" + spec.left + "px)";
    style3 = _extends(_extends({}, style3), {
      WebkitTransform,
      transform,
      msTransform
    });
  } else {
    if (spec.vertical) {
      style3["top"] = spec.left;
    } else {
      style3["left"] = spec.left;
    }
  }
  if (spec.fade)
    style3 = {
      opacity: 1
    };
  if (trackWidth)
    style3.width = trackWidth + "px";
  if (trackHeight)
    style3.height = trackHeight + "px";
  if (window && !window.addEventListener && window.attachEvent) {
    if (!spec.vertical) {
      style3.marginLeft = spec.left + "px";
    } else {
      style3.marginTop = spec.left + "px";
    }
  }
  return style3;
};
var getTrackAnimateCSS = function getTrackAnimateCSS2(spec) {
  checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth", "speed", "cssEase"]);
  var style3 = getTrackCSS(spec);
  if (spec.useTransform) {
    style3.WebkitTransition = "-webkit-transform " + spec.speed + "ms " + spec.cssEase;
    style3.transition = "transform " + spec.speed + "ms " + spec.cssEase;
  } else {
    if (spec.vertical) {
      style3.transition = "top " + spec.speed + "ms " + spec.cssEase;
    } else {
      style3.transition = "left " + spec.speed + "ms " + spec.cssEase;
    }
  }
  return style3;
};
var getTrackLeft = function getTrackLeft2(spec) {
  if (spec.unslick) {
    return 0;
  }
  checkSpecKeys(spec, ["slideIndex", "trackRef", "infinite", "centerMode", "slideCount", "slidesToShow", "slidesToScroll", "slideWidth", "listWidth", "variableWidth", "slideHeight"]);
  var slideIndex = spec.slideIndex, trackRef = spec.trackRef, infinite = spec.infinite, centerMode = spec.centerMode, slideCount = spec.slideCount, slidesToShow = spec.slidesToShow, slidesToScroll = spec.slidesToScroll, slideWidth = spec.slideWidth, listWidth = spec.listWidth, variableWidth = spec.variableWidth, slideHeight = spec.slideHeight, fade = spec.fade, vertical = spec.vertical;
  var slideOffset = 0;
  var targetLeft;
  var targetSlide;
  var verticalOffset = 0;
  if (fade || spec.slideCount === 1) {
    return 0;
  }
  var slidesToOffset = 0;
  if (infinite) {
    slidesToOffset = -getPreClones(spec);
    if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
      slidesToOffset = -(slideIndex > slideCount ? slidesToShow - (slideIndex - slideCount) : slideCount % slidesToScroll);
    }
    if (centerMode) {
      slidesToOffset += parseInt(slidesToShow / 2);
    }
  } else {
    if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
      slidesToOffset = slidesToShow - slideCount % slidesToScroll;
    }
    if (centerMode) {
      slidesToOffset = parseInt(slidesToShow / 2);
    }
  }
  slideOffset = slidesToOffset * slideWidth;
  verticalOffset = slidesToOffset * slideHeight;
  if (!vertical) {
    targetLeft = slideIndex * slideWidth * -1 + slideOffset;
  } else {
    targetLeft = slideIndex * slideHeight * -1 + verticalOffset;
  }
  if (variableWidth === true) {
    var targetSlideIndex;
    var trackElem = trackRef;
    targetSlideIndex = slideIndex + getPreClones(spec);
    targetSlide = trackElem && trackElem.childNodes[targetSlideIndex];
    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
    if (centerMode === true) {
      targetSlideIndex = infinite ? slideIndex + getPreClones(spec) : slideIndex;
      targetSlide = trackElem && trackElem.children[targetSlideIndex];
      targetLeft = 0;
      for (var slide = 0; slide < targetSlideIndex; slide++) {
        targetLeft -= trackElem && trackElem.children[slide] && trackElem.children[slide].offsetWidth;
      }
      targetLeft -= parseInt(spec.centerPadding);
      targetLeft += targetSlide && (listWidth - targetSlide.offsetWidth) / 2;
    }
  }
  return targetLeft;
};
var getPreClones = function getPreClones2(spec) {
  if (spec.unslick || !spec.infinite) {
    return 0;
  }
  if (spec.variableWidth) {
    return spec.slideCount;
  }
  return spec.slidesToShow + (spec.centerMode ? 1 : 0);
};
var getPostClones = function getPostClones2(spec) {
  if (spec.unslick || !spec.infinite) {
    return 0;
  }
  return spec.slideCount;
};
var getTotalSlides = function getTotalSlides2(spec) {
  return spec.slideCount === 1 ? 1 : getPreClones(spec) + spec.slideCount + getPostClones(spec);
};
var siblingDirection = function siblingDirection2(spec) {
  if (spec.targetSlide > spec.currentSlide) {
    if (spec.targetSlide > spec.currentSlide + slidesOnRight(spec)) {
      return "left";
    }
    return "right";
  } else {
    if (spec.targetSlide < spec.currentSlide - slidesOnLeft(spec)) {
      return "right";
    }
    return "left";
  }
};
var slidesOnRight = function slidesOnRight2(_ref) {
  var slidesToShow = _ref.slidesToShow, centerMode = _ref.centerMode, rtl = _ref.rtl, centerPadding = _ref.centerPadding;
  if (centerMode) {
    var right = (slidesToShow - 1) / 2 + 1;
    if (parseInt(centerPadding) > 0)
      right += 1;
    if (rtl && slidesToShow % 2 === 0)
      right += 1;
    return right;
  }
  if (rtl) {
    return 0;
  }
  return slidesToShow - 1;
};
var slidesOnLeft = function slidesOnLeft2(_ref2) {
  var slidesToShow = _ref2.slidesToShow, centerMode = _ref2.centerMode, rtl = _ref2.rtl, centerPadding = _ref2.centerPadding;
  if (centerMode) {
    var left = (slidesToShow - 1) / 2 + 1;
    if (parseInt(centerPadding) > 0)
      left += 1;
    if (!rtl && slidesToShow % 2 === 0)
      left += 1;
    return left;
  }
  if (rtl) {
    return slidesToShow - 1;
  }
  return 0;
};
var canUseDOM = function canUseDOM2() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
};
var getSlideClasses = function getSlideClasses2(spec) {
  var slickActive, slickCenter;
  var centerOffset, index2;
  if (spec.rtl) {
    index2 = spec.slideCount - 1 - spec.index;
  } else {
    index2 = spec.index;
  }
  var slickCloned = index2 < 0 || index2 >= spec.slideCount;
  if (spec.centerMode) {
    centerOffset = Math.floor(spec.slidesToShow / 2);
    slickCenter = (index2 - spec.currentSlide) % spec.slideCount === 0;
    if (index2 > spec.currentSlide - centerOffset - 1 && index2 <= spec.currentSlide + centerOffset) {
      slickActive = true;
    }
  } else {
    slickActive = spec.currentSlide <= index2 && index2 < spec.currentSlide + spec.slidesToShow;
  }
  var slickCurrent = index2 === spec.currentSlide;
  return {
    "slick-slide": true,
    "slick-active": slickActive,
    "slick-center": slickCenter,
    "slick-cloned": slickCloned,
    "slick-current": slickCurrent
  };
};
var getSlideStyle = function getSlideStyle2(spec) {
  var style3 = {};
  if (spec.variableWidth === void 0 || spec.variableWidth === false) {
    style3.width = spec.slideWidth + (typeof spec.slideWidth === "number" ? "px" : "");
  }
  if (spec.fade) {
    style3.position = "relative";
    if (spec.vertical) {
      style3.top = -spec.index * parseInt(spec.slideHeight) + "px";
    } else {
      style3.left = -spec.index * parseInt(spec.slideWidth) + "px";
    }
    style3.opacity = spec.currentSlide === spec.index ? 1 : 0;
    style3.transition = "opacity " + spec.speed + "ms " + spec.cssEase + ", visibility " + spec.speed + "ms " + spec.cssEase;
    style3.WebkitTransition = "opacity " + spec.speed + "ms " + spec.cssEase + ", visibility " + spec.speed + "ms " + spec.cssEase;
  }
  return style3;
};
var getKey2 = function getKey3(child, fallbackKey) {
  return child.key || child.key === 0 && "0" || fallbackKey;
};
var renderSlides = function renderSlides2(spec, children) {
  var key2;
  var slides = [];
  var preCloneSlides = [];
  var postCloneSlides = [];
  var childrenCount = children.length;
  var startIndex = lazyStartIndex(spec);
  var endIndex = lazyEndIndex(spec);
  children.forEach(function(elem, index2) {
    var child;
    var childOnClickOptions = {
      message: "children",
      index: index2,
      slidesToScroll: spec.slidesToScroll,
      currentSlide: spec.currentSlide
    };
    if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index2) >= 0) {
      child = elem;
    } else {
      child = createVNode("div");
    }
    var childStyle = getSlideStyle(_extends(_extends({}, spec), {
      index: index2
    }));
    var slideClass = child.props.class || "";
    var slideClasses = getSlideClasses(_extends(_extends({}, spec), {
      index: index2
    }));
    slides.push(cloneElement(child, {
      key: "original" + getKey2(child, index2),
      tabindex: "-1",
      "data-index": index2,
      "aria-hidden": !slideClasses["slick-active"],
      class: classNames(slideClasses, slideClass),
      style: _extends(_extends({
        outline: "none"
      }, child.props.style || {}), childStyle),
      onClick: function onClick7() {
        if (spec.focusOnSelect) {
          spec.focusOnSelect(childOnClickOptions);
        }
      }
    }));
    if (spec.infinite && spec.fade === false) {
      var preCloneNo = childrenCount - index2;
      if (preCloneNo <= getPreClones(spec) && childrenCount !== spec.slidesToShow) {
        key2 = -preCloneNo;
        if (key2 >= startIndex) {
          child = elem;
        }
        slideClasses = getSlideClasses(_extends(_extends({}, spec), {
          index: key2
        }));
        preCloneSlides.push(cloneElement(child, {
          key: "precloned" + getKey2(child, key2),
          class: classNames(slideClasses, slideClass),
          tabindex: "-1",
          "data-index": key2,
          "aria-hidden": !slideClasses["slick-active"],
          style: _extends(_extends({}, child.props.style || {}), childStyle),
          onClick: function onClick7() {
            if (spec.focusOnSelect) {
              spec.focusOnSelect(childOnClickOptions);
            }
          }
        }));
      }
      if (childrenCount !== spec.slidesToShow) {
        key2 = childrenCount + index2;
        if (key2 < endIndex) {
          child = elem;
        }
        slideClasses = getSlideClasses(_extends(_extends({}, spec), {
          index: key2
        }));
        postCloneSlides.push(cloneElement(child, {
          key: "postcloned" + getKey2(child, key2),
          tabindex: "-1",
          "data-index": key2,
          "aria-hidden": !slideClasses["slick-active"],
          class: classNames(slideClasses, slideClass),
          style: _extends(_extends({}, child.props.style || {}), childStyle),
          onClick: function onClick7() {
            if (spec.focusOnSelect) {
              spec.focusOnSelect(childOnClickOptions);
            }
          }
        }));
      }
    }
  });
  if (spec.rtl) {
    return preCloneSlides.concat(slides, postCloneSlides).reverse();
  } else {
    return preCloneSlides.concat(slides, postCloneSlides);
  }
};
var Track$2 = function Track(_, _ref) {
  var attrs = _ref.attrs, slots = _ref.slots;
  var slides = renderSlides(attrs, flattenChildren(slots === null || slots === void 0 ? void 0 : slots.default()));
  var onMouseenter2 = attrs.onMouseenter, onMouseover = attrs.onMouseover, onMouseleave2 = attrs.onMouseleave;
  var mouseEvents = {
    onMouseenter: onMouseenter2,
    onMouseover,
    onMouseleave: onMouseleave2
  };
  var trackProps = _extends({
    class: "slick-track",
    style: attrs.trackStyle
  }, mouseEvents);
  return createVNode("div", trackProps, [slides]);
};
Track$2.inheritAttrs = false;
var Track$3 = Track$2;
var getDotCount = function getDotCount2(spec) {
  var dots;
  if (spec.infinite) {
    dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
  } else {
    dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;
  }
  return dots;
};
var Dots = function Dots2(_, _ref) {
  var attrs = _ref.attrs;
  var slideCount = attrs.slideCount, slidesToScroll = attrs.slidesToScroll, slidesToShow = attrs.slidesToShow, infinite = attrs.infinite, currentSlide = attrs.currentSlide, appendDots2 = attrs.appendDots, customPaging2 = attrs.customPaging, clickHandler2 = attrs.clickHandler, dotsClass = attrs.dotsClass, onMouseenter2 = attrs.onMouseenter, onMouseover = attrs.onMouseover, onMouseleave2 = attrs.onMouseleave;
  var dotCount = getDotCount({
    slideCount,
    slidesToScroll,
    slidesToShow,
    infinite
  });
  var mouseEvents = {
    onMouseenter: onMouseenter2,
    onMouseover,
    onMouseleave: onMouseleave2
  };
  var dots = Array.apply(null, Array(dotCount + 1).join("0").split("")).map(function(x, i) {
    var leftBound = i * slidesToScroll;
    var rightBound = i * slidesToScroll + (slidesToScroll - 1);
    var className = classNames({
      "slick-active": currentSlide >= leftBound && currentSlide <= rightBound
    });
    var dotOptions = {
      message: "dots",
      index: i,
      slidesToScroll,
      currentSlide
    };
    function onClick7(e) {
      if (e) {
        e.preventDefault();
      }
      clickHandler2(dotOptions);
    }
    return createVNode("li", {
      "key": i,
      "class": className
    }, [cloneElement(customPaging2({
      i
    }), {
      onClick: onClick7
    })]);
  });
  return cloneElement(appendDots2({
    dots
  }), _extends({
    class: dotsClass
  }, mouseEvents));
};
Dots.inheritAttrs = false;
var Dots$1 = Dots;
function noop$x() {
}
function handler2(options2, handle, e) {
  if (e) {
    e.preventDefault();
  }
  handle(options2, e);
}
var PrevArrow = function PrevArrow2(_, _ref) {
  var attrs = _ref.attrs;
  var clickHandler2 = attrs.clickHandler, infinite = attrs.infinite, currentSlide = attrs.currentSlide, slideCount = attrs.slideCount, slidesToShow = attrs.slidesToShow;
  var prevClasses = {
    "slick-arrow": true,
    "slick-prev": true
  };
  var prevHandler = function prevHandler2(e) {
    handler2({
      message: "previous"
    }, clickHandler2, e);
  };
  if (!infinite && (currentSlide === 0 || slideCount <= slidesToShow)) {
    prevClasses["slick-disabled"] = true;
    prevHandler = noop$x;
  }
  var prevArrowProps = {
    key: "0",
    "data-role": "none",
    class: prevClasses,
    style: {
      display: "block"
    },
    onClick: prevHandler
  };
  var customProps = {
    currentSlide,
    slideCount
  };
  var prevArrow;
  if (attrs.prevArrow) {
    prevArrow = cloneElement(attrs.prevArrow(_extends(_extends({}, prevArrowProps), customProps)), {
      key: "0",
      class: prevClasses,
      style: {
        display: "block"
      },
      onClick: prevHandler
    }, false);
  } else {
    prevArrow = createVNode("button", _objectSpread2({
      "key": "0",
      "type": "button"
    }, prevArrowProps), [" ", createTextVNode("Previous")]);
  }
  return prevArrow;
};
PrevArrow.inheritAttrs = false;
var NextArrow = function NextArrow2(_, _ref2) {
  var attrs = _ref2.attrs;
  var clickHandler2 = attrs.clickHandler, currentSlide = attrs.currentSlide, slideCount = attrs.slideCount;
  var nextClasses = {
    "slick-arrow": true,
    "slick-next": true
  };
  var nextHandler = function nextHandler2(e) {
    handler2({
      message: "next"
    }, clickHandler2, e);
  };
  if (!canGoNext(attrs)) {
    nextClasses["slick-disabled"] = true;
    nextHandler = noop$x;
  }
  var nextArrowProps = {
    key: "1",
    "data-role": "none",
    class: classNames(nextClasses),
    style: {
      display: "block"
    },
    onClick: nextHandler
  };
  var customProps = {
    currentSlide,
    slideCount
  };
  var nextArrow;
  if (attrs.nextArrow) {
    nextArrow = cloneElement(attrs.nextArrow(_extends(_extends({}, nextArrowProps), customProps)), {
      key: "1",
      class: classNames(nextClasses),
      style: {
        display: "block"
      },
      onClick: nextHandler
    }, false);
  } else {
    nextArrow = createVNode("button", _objectSpread2({
      "key": "1",
      "type": "button"
    }, nextArrowProps), [" ", createTextVNode("Next")]);
  }
  return nextArrow;
};
NextArrow.inheritAttrs = false;
var __rest$y = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$w() {
}
var InnerSlider = {
  name: "InnerSlider",
  inheritAttrs: false,
  props: _extends({}, defaultProps$3),
  mixins: [BaseMixin],
  data: function data20() {
    this.preProps = _extends({}, this.$props);
    this.list = null;
    this.track = null;
    this.callbackTimers = [];
    this.clickable = true;
    this.debouncedResize = null;
    return _extends(_extends({}, initialState$1), {
      currentSlide: this.initialSlide,
      slideCount: this.children.length
    });
  },
  methods: {
    listRefHandler: function listRefHandler(ref2) {
      this.list = ref2;
    },
    trackRefHandler: function trackRefHandler(ref2) {
      this.track = ref2;
    },
    adaptHeight: function adaptHeight() {
      if (this.adaptiveHeight && this.list) {
        var elem = this.list.querySelector('[data-index="'.concat(this.currentSlide, '"]'));
        this.list.style.height = getHeight(elem) + "px";
      }
    },
    onWindowResized: function onWindowResized(setTrackStyle) {
      var _this = this;
      if (this.debouncedResize)
        this.debouncedResize.cancel();
      this.debouncedResize = debounce$1(function() {
        return _this.resizeWindow(setTrackStyle);
      }, 50);
      this.debouncedResize();
    },
    resizeWindow: function resizeWindow() {
      var _this2 = this;
      var setTrackStyle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (!this.track)
        return;
      var spec = _extends(_extends({
        listRef: this.list,
        trackRef: this.track,
        children: this.children
      }, this.$props), this.$data);
      this.updateState(spec, setTrackStyle, function() {
        if (_this2.autoplay) {
          _this2.handleAutoPlay("update");
        } else {
          _this2.pause("paused");
        }
      });
      this.setState({
        animating: false
      });
      clearTimeout(this.animationEndCallback);
      delete this.animationEndCallback;
    },
    updateState: function updateState(spec, setTrackStyle, callback) {
      var updatedState = initializedState(spec);
      spec = _extends(_extends(_extends({}, spec), updatedState), {
        slideIndex: updatedState.currentSlide
      });
      var targetLeft = getTrackLeft(spec);
      spec = _extends(_extends({}, spec), {
        left: targetLeft
      });
      var trackStyle = getTrackCSS(spec);
      if (setTrackStyle || this.children.length !== spec.children.length) {
        updatedState["trackStyle"] = trackStyle;
      }
      this.setState(updatedState, callback);
    },
    ssrInit: function ssrInit() {
      var children = this.children;
      if (this.variableWidth) {
        var _trackWidth = 0;
        var _trackLeft = 0;
        var childrenWidths = [];
        var preClones = getPreClones(_extends(_extends(_extends({}, this.$props), this.$data), {
          slideCount: children.length
        }));
        var postClones = getPostClones(_extends(_extends(_extends({}, this.$props), this.$data), {
          slideCount: children.length
        }));
        children.forEach(function(child) {
          var _a, _b;
          var childWidth = ((_b = (_a = child.props.style) === null || _a === void 0 ? void 0 : _a.width) === null || _b === void 0 ? void 0 : _b.split("px")[0]) || 0;
          childrenWidths.push(childWidth);
          _trackWidth += childWidth;
        });
        for (var i = 0; i < preClones; i++) {
          _trackLeft += childrenWidths[childrenWidths.length - 1 - i];
          _trackWidth += childrenWidths[childrenWidths.length - 1 - i];
        }
        for (var _i = 0; _i < postClones; _i++) {
          _trackWidth += childrenWidths[_i];
        }
        for (var _i2 = 0; _i2 < this.currentSlide; _i2++) {
          _trackLeft += childrenWidths[_i2];
        }
        var _trackStyle = {
          width: _trackWidth + "px",
          left: -_trackLeft + "px"
        };
        if (this.centerMode) {
          var currentWidth = "".concat(childrenWidths[this.currentSlide], "px");
          _trackStyle.left = "calc(".concat(_trackStyle.left, " + (100% - ").concat(currentWidth, ") / 2 ) ");
        }
        this.setState({
          trackStyle: _trackStyle
        });
        return;
      }
      var childrenCount = children.length;
      var spec = _extends(_extends(_extends({}, this.$props), this.$data), {
        slideCount: childrenCount
      });
      var slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount;
      var trackWidth = 100 / this.slidesToShow * slideCount;
      var slideWidth = 100 / slideCount;
      var trackLeft = -slideWidth * (getPreClones(spec) + this.currentSlide) * trackWidth / 100;
      if (this.centerMode) {
        trackLeft += (100 - slideWidth * trackWidth / 100) / 2;
      }
      var trackStyle = {
        width: trackWidth + "%",
        left: trackLeft + "%"
      };
      this.setState({
        slideWidth: slideWidth + "%",
        trackStyle
      });
    },
    checkImagesLoad: function checkImagesLoad() {
      var _this3 = this;
      var images = document.querySelectorAll(".slick-slide img");
      var imagesCount = images.length;
      var loadedCount = 0;
      Array.prototype.forEach.call(images, function(image) {
        var handler8 = function handler9() {
          return ++loadedCount && loadedCount >= imagesCount && _this3.onWindowResized();
        };
        if (!image.onclick) {
          image.onclick = function() {
            return image.parentNode.focus();
          };
        } else {
          var prevClickHandler = image.onclick;
          image.onclick = function() {
            prevClickHandler();
            image.parentNode.focus();
          };
        }
        if (!image.onload) {
          if (_this3.$props.lazyLoad) {
            image.onload = function() {
              _this3.adaptHeight();
              _this3.callbackTimers.push(setTimeout(_this3.onWindowResized, _this3.speed));
            };
          } else {
            image.onload = handler8;
            image.onerror = function() {
              handler8();
              _this3.__emit("lazyLoadError");
            };
          }
        }
      });
    },
    progressiveLazyLoad: function progressiveLazyLoad() {
      var slidesToLoad = [];
      var spec = _extends(_extends({}, this.$props), this.$data);
      for (var index2 = this.currentSlide; index2 < this.slideCount + getPostClones(spec); index2++) {
        if (this.lazyLoadedList.indexOf(index2) < 0) {
          slidesToLoad.push(index2);
          break;
        }
      }
      for (var _index = this.currentSlide - 1; _index >= -getPreClones(spec); _index--) {
        if (this.lazyLoadedList.indexOf(_index) < 0) {
          slidesToLoad.push(_index);
          break;
        }
      }
      if (slidesToLoad.length > 0) {
        this.setState(function(state) {
          return {
            lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)
          };
        });
        this.__emit("lazyLoad", slidesToLoad);
      } else {
        if (this.lazyLoadTimer) {
          clearInterval(this.lazyLoadTimer);
          delete this.lazyLoadTimer;
        }
      }
    },
    slideHandler: function slideHandler$1(index2) {
      var _this4 = this;
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var _this$$props = this.$props, asNavFor = _this$$props.asNavFor, currentSlide = _this$$props.currentSlide, beforeChange = _this$$props.beforeChange, speed = _this$$props.speed, afterChange = _this$$props.afterChange;
      var _slideHandler2 = slideHandler(_extends(_extends(_extends({
        index: index2
      }, this.$props), this.$data), {
        trackRef: this.track,
        useCSS: this.useCSS && !dontAnimate
      })), state = _slideHandler2.state, nextState = _slideHandler2.nextState;
      if (!state)
        return;
      beforeChange && beforeChange(currentSlide, state.currentSlide);
      var slidesToLoad = state.lazyLoadedList.filter(function(value26) {
        return _this4.lazyLoadedList.indexOf(value26) < 0;
      });
      if (this.$attrs.onLazyLoad && slidesToLoad.length > 0) {
        this.__emit("lazyLoad", slidesToLoad);
      }
      this.setState(state, function() {
        asNavFor && asNavFor.innerSlider.currentSlide !== currentSlide && asNavFor.innerSlider.slideHandler(index2);
        if (!nextState)
          return;
        _this4.animationEndCallback = setTimeout(function() {
          var animating = nextState.animating, firstBatch = __rest$y(nextState, ["animating"]);
          _this4.setState(firstBatch, function() {
            _this4.callbackTimers.push(setTimeout(function() {
              return _this4.setState({
                animating
              });
            }, 10));
            afterChange && afterChange(state.currentSlide);
            delete _this4.animationEndCallback;
          });
        }, speed);
      });
    },
    changeSlide: function changeSlide$1(options2) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var spec = _extends(_extends({}, this.$props), this.$data);
      var targetSlide = changeSlide(spec, options2);
      if (targetSlide !== 0 && !targetSlide)
        return;
      if (dontAnimate === true) {
        this.slideHandler(targetSlide, dontAnimate);
      } else {
        this.slideHandler(targetSlide);
      }
    },
    clickHandler: function clickHandler(e) {
      if (this.clickable === false) {
        e.stopPropagation();
        e.preventDefault();
      }
      this.clickable = true;
    },
    keyHandler: function keyHandler$1(e) {
      var dir = keyHandler(e, this.accessibility, this.rtl);
      dir !== "" && this.changeSlide({
        message: dir
      });
    },
    selectHandler: function selectHandler(options2) {
      this.changeSlide(options2);
    },
    disableBodyScroll: function disableBodyScroll() {
      var preventDefault2 = function preventDefault3(e) {
        e = e || window.event;
        if (e.preventDefault)
          e.preventDefault();
        e.returnValue = false;
      };
      window.ontouchmove = preventDefault2;
    },
    enableBodyScroll: function enableBodyScroll() {
      window.ontouchmove = null;
    },
    swipeStart: function swipeStart$1(e) {
      if (this.verticalSwiping) {
        this.disableBodyScroll();
      }
      var state = swipeStart(e, this.swipe, this.draggable);
      state !== "" && this.setState(state);
    },
    swipeMove: function swipeMove$1(e) {
      var state = swipeMove(e, _extends(_extends(_extends({}, this.$props), this.$data), {
        trackRef: this.track,
        listRef: this.list,
        slideIndex: this.currentSlide
      }));
      if (!state)
        return;
      if (state["swiping"]) {
        this.clickable = false;
      }
      this.setState(state);
    },
    swipeEnd: function swipeEnd$1(e) {
      var state = swipeEnd(e, _extends(_extends(_extends({}, this.$props), this.$data), {
        trackRef: this.track,
        listRef: this.list,
        slideIndex: this.currentSlide
      }));
      if (!state)
        return;
      var triggerSlideHandler = state["triggerSlideHandler"];
      delete state["triggerSlideHandler"];
      this.setState(state);
      if (triggerSlideHandler === void 0)
        return;
      this.slideHandler(triggerSlideHandler);
      if (this.$props.verticalSwiping) {
        this.enableBodyScroll();
      }
    },
    slickPrev: function slickPrev() {
      var _this5 = this;
      this.callbackTimers.push(setTimeout(function() {
        return _this5.changeSlide({
          message: "previous"
        });
      }, 0));
    },
    slickNext: function slickNext() {
      var _this6 = this;
      this.callbackTimers.push(setTimeout(function() {
        return _this6.changeSlide({
          message: "next"
        });
      }, 0));
    },
    slickGoTo: function slickGoTo(slide) {
      var _this7 = this;
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      slide = Number(slide);
      if (isNaN(slide))
        return "";
      this.callbackTimers.push(setTimeout(function() {
        return _this7.changeSlide({
          message: "index",
          index: slide,
          currentSlide: _this7.currentSlide
        }, dontAnimate);
      }, 0));
    },
    play: function play() {
      var nextIndex;
      if (this.rtl) {
        nextIndex = this.currentSlide - this.slidesToScroll;
      } else {
        if (canGoNext(_extends(_extends({}, this.$props), this.$data))) {
          nextIndex = this.currentSlide + this.slidesToScroll;
        } else {
          return false;
        }
      }
      this.slideHandler(nextIndex);
    },
    handleAutoPlay: function handleAutoPlay(playType) {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
      }
      var autoplaying = this.autoplaying;
      if (playType === "update") {
        if (autoplaying === "hovered" || autoplaying === "focused" || autoplaying === "paused") {
          return;
        }
      } else if (playType === "leave") {
        if (autoplaying === "paused" || autoplaying === "focused") {
          return;
        }
      } else if (playType === "blur") {
        if (autoplaying === "paused" || autoplaying === "hovered") {
          return;
        }
      }
      this.autoplayTimer = setInterval(this.play, this.autoplaySpeed + 50);
      this.setState({
        autoplaying: "playing"
      });
    },
    pause: function pause(pauseType) {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
      var autoplaying = this.autoplaying;
      if (pauseType === "paused") {
        this.setState({
          autoplaying: "paused"
        });
      } else if (pauseType === "focused") {
        if (autoplaying === "hovered" || autoplaying === "playing") {
          this.setState({
            autoplaying: "focused"
          });
        }
      } else {
        if (autoplaying === "playing") {
          this.setState({
            autoplaying: "hovered"
          });
        }
      }
    },
    onDotsOver: function onDotsOver() {
      this.autoplay && this.pause("hovered");
    },
    onDotsLeave: function onDotsLeave() {
      this.autoplay && this.autoplaying === "hovered" && this.handleAutoPlay("leave");
    },
    onTrackOver: function onTrackOver() {
      this.autoplay && this.pause("hovered");
    },
    onTrackLeave: function onTrackLeave() {
      this.autoplay && this.autoplaying === "hovered" && this.handleAutoPlay("leave");
    },
    onSlideFocus: function onSlideFocus() {
      this.autoplay && this.pause("focused");
    },
    onSlideBlur: function onSlideBlur() {
      this.autoplay && this.autoplaying === "focused" && this.handleAutoPlay("blur");
    },
    customPaging: function customPaging(_ref) {
      var i = _ref.i;
      return createVNode("button", null, [i + 1]);
    },
    appendDots: function appendDots(_ref2) {
      var dots = _ref2.dots;
      return createVNode("ul", {
        "style": {
          display: "block"
        }
      }, [dots]);
    }
  },
  beforeMount: function beforeMount() {
    this.ssrInit();
    this.__emit("init");
    if (this.lazyLoad) {
      var slidesToLoad = getOnDemandLazySlides(_extends(_extends({}, this.$props), this.$data));
      if (slidesToLoad.length > 0) {
        this.setState(function(prevState) {
          return {
            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
          };
        });
        this.__emit("lazyLoad", slidesToLoad);
      }
    }
  },
  mounted: function mounted12() {
    var _this8 = this;
    this.$nextTick(function() {
      var spec = _extends({
        listRef: _this8.list,
        trackRef: _this8.track,
        children: _this8.children
      }, _this8.$props);
      _this8.updateState(spec, true, function() {
        _this8.adaptHeight();
        _this8.autoplay && _this8.handleAutoPlay("update");
      });
      if (_this8.lazyLoad === "progressive") {
        _this8.lazyLoadTimer = setInterval(_this8.progressiveLazyLoad, 1e3);
      }
      _this8.ro = new index$k(function() {
        if (_this8.animating) {
          _this8.onWindowResized(false);
          _this8.callbackTimers.push(setTimeout(function() {
            return _this8.onWindowResized();
          }, _this8.speed));
        } else {
          _this8.onWindowResized();
        }
      });
      _this8.ro.observe(_this8.list);
      Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"), function(slide) {
        slide.onfocus = _this8.$props.pauseOnFocus ? _this8.onSlideFocus : null;
        slide.onblur = _this8.$props.pauseOnFocus ? _this8.onSlideBlur : null;
      });
      if (!window) {
        return;
      }
      if (window.addEventListener) {
        window.addEventListener("resize", _this8.onWindowResized);
      } else {
        window.attachEvent("onresize", _this8.onWindowResized);
      }
    });
  },
  beforeUnmount: function beforeUnmount9() {
    if (this.animationEndCallback) {
      clearTimeout(this.animationEndCallback);
    }
    if (this.lazyLoadTimer) {
      clearInterval(this.lazyLoadTimer);
    }
    if (this.callbackTimers.length) {
      this.callbackTimers.forEach(function(timer) {
        return clearTimeout(timer);
      });
      this.callbackTimers = [];
    }
    if (window.addEventListener) {
      window.removeEventListener("resize", this.onWindowResized);
    } else {
      window.detachEvent("onresize", this.onWindowResized);
    }
    if (this.autoplayTimer) {
      clearInterval(this.autoplayTimer);
    }
  },
  updated: function updated7() {
    this.checkImagesLoad();
    this.__emit("reInit");
    if (this.lazyLoad) {
      var slidesToLoad = getOnDemandLazySlides(_extends(_extends({}, this.$props), this.$data));
      if (slidesToLoad.length > 0) {
        this.setState(function(prevState) {
          return {
            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
          };
        });
        this.__emit("lazyLoad");
      }
    }
    this.adaptHeight();
  },
  watch: {
    __propsSymbol__: function __propsSymbol__() {
      var _this9 = this;
      var nextProps = this.$props;
      var spec = _extends(_extends({
        listRef: this.list,
        trackRef: this.track
      }, nextProps), this.$data);
      var setTrackStyle = false;
      for (var _i3 = 0, _Object$keys = Object.keys(this.preProps); _i3 < _Object$keys.length; _i3++) {
        var key2 = _Object$keys[_i3];
        if (!nextProps.hasOwnProperty(key2)) {
          setTrackStyle = true;
          break;
        }
        if (_typeof(nextProps[key2]) === "object" || typeof nextProps[key2] === "function" || _typeof(nextProps[key2]) === "symbol") {
          continue;
        }
        if (nextProps[key2] !== this.preProps[key2]) {
          setTrackStyle = true;
          break;
        }
      }
      this.updateState(spec, setTrackStyle, function() {
        if (_this9.currentSlide >= nextProps.children.length) {
          _this9.changeSlide({
            message: "index",
            index: nextProps.children.length - nextProps.slidesToShow,
            currentSlide: _this9.currentSlide
          });
        }
        if (nextProps.autoplay) {
          _this9.handleAutoPlay("update");
        } else {
          _this9.pause("paused");
        }
      });
      this.preProps = _extends({}, nextProps);
    }
  },
  render: function render59() {
    var _listProps, _this10 = this;
    var className = classNames("slick-slider", this.$attrs.class, {
      "slick-vertical": this.vertical,
      "slick-initialized": true
    });
    var spec = _extends(_extends({}, this.$props), this.$data);
    var trackProps = extractObject(spec, ["fade", "cssEase", "speed", "infinite", "centerMode", "focusOnSelect", "currentSlide", "lazyLoad", "lazyLoadedList", "rtl", "slideWidth", "slideHeight", "listHeight", "vertical", "slidesToShow", "slidesToScroll", "slideCount", "trackStyle", "variableWidth", "unslick", "centerPadding"]);
    var pauseOnHover = this.$props.pauseOnHover;
    trackProps = _extends(_extends({}, trackProps), {
      focusOnSelect: this.focusOnSelect ? this.selectHandler : null,
      ref: this.trackRefHandler,
      onMouseleave: pauseOnHover ? this.onTrackLeave : noop$w,
      onMouseover: pauseOnHover ? this.onTrackOver : noop$w
    });
    var dots;
    if (this.dots === true && this.slideCount >= this.slidesToShow) {
      var dotProps = extractObject(spec, ["dotsClass", "slideCount", "slidesToShow", "currentSlide", "slidesToScroll", "clickHandler", "children", "infinite", "appendDots"]);
      dotProps.customPaging = this.customPaging;
      dotProps.appendDots = this.appendDots;
      var _this$$slots = this.$slots, customPaging2 = _this$$slots.customPaging, appendDots2 = _this$$slots.appendDots;
      if (customPaging2) {
        dotProps.customPaging = customPaging2;
      }
      if (appendDots2) {
        dotProps.appendDots = appendDots2;
      }
      var pauseOnDotsHover = this.$props.pauseOnDotsHover;
      dotProps = _extends(_extends({}, dotProps), {
        clickHandler: this.changeSlide,
        onMouseover: pauseOnDotsHover ? this.onDotsOver : noop$w,
        onMouseleave: pauseOnDotsHover ? this.onDotsLeave : noop$w
      });
      dots = createVNode(Dots$1, dotProps, null);
    }
    var prevArrow, nextArrow;
    var arrowProps = extractObject(spec, ["infinite", "centerMode", "currentSlide", "slideCount", "slidesToShow"]);
    arrowProps.clickHandler = this.changeSlide;
    var _this$$slots2 = this.$slots, prevArrowCustom = _this$$slots2.prevArrow, nextArrowCustom = _this$$slots2.nextArrow;
    if (prevArrowCustom) {
      arrowProps.prevArrow = prevArrowCustom;
    }
    if (nextArrowCustom) {
      arrowProps.nextArrow = nextArrowCustom;
    }
    if (this.arrows) {
      prevArrow = createVNode(PrevArrow, arrowProps, null);
      nextArrow = createVNode(NextArrow, arrowProps, null);
    }
    var verticalHeightStyle = null;
    if (this.vertical) {
      verticalHeightStyle = {
        height: typeof this.listHeight === "number" ? "".concat(this.listHeight, "px") : this.listHeight
      };
    }
    var centerPaddingStyle = null;
    if (this.vertical === false) {
      if (this.centerMode === true) {
        centerPaddingStyle = {
          padding: "0px " + this.centerPadding
        };
      }
    } else {
      if (this.centerMode === true) {
        centerPaddingStyle = {
          padding: this.centerPadding + " 0px"
        };
      }
    }
    var listStyle2 = _extends(_extends({}, verticalHeightStyle), centerPaddingStyle);
    var touchMove = this.touchMove;
    var listProps2 = (_listProps = {
      ref: this.listRefHandler,
      class: "slick-list",
      style: listStyle2,
      onClick: this.clickHandler,
      onMousedown: touchMove ? this.swipeStart : noop$w,
      onMousemove: this.dragging && touchMove ? this.swipeMove : noop$w,
      onMouseup: touchMove ? this.swipeEnd : noop$w,
      onMouseleave: this.dragging && touchMove ? this.swipeEnd : noop$w
    }, _defineProperty(_listProps, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", touchMove ? this.swipeStart : noop$w), _defineProperty(_listProps, supportsPassive$1 ? "onTouchmovePassive" : "onTouchmove", this.dragging && touchMove ? this.swipeMove : noop$w), _defineProperty(_listProps, "onTouchend", touchMove ? this.swipeEnd : noop$w), _defineProperty(_listProps, "onTouchcancel", this.dragging && touchMove ? this.swipeEnd : noop$w), _defineProperty(_listProps, "onKeydown", this.accessibility ? this.keyHandler : noop$w), _listProps);
    var innerSliderProps = {
      class: className
    };
    if (this.unslick) {
      listProps2 = {
        class: "slick-list",
        ref: this.listRefHandler
      };
      innerSliderProps = {
        class: className
      };
    }
    return createVNode("div", innerSliderProps, [!this.unslick ? prevArrow : "", createVNode("div", listProps2, [createVNode(Track$3, trackProps, {
      default: function _default8() {
        return [_this10.children];
      }
    })]), !this.unslick ? nextArrow : "", !this.unslick ? dots : ""]);
  }
};
var Slider$2 = defineComponent({
  name: "Slider",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends({}, defaultProps$3),
  data: function data21() {
    this._responsiveMediaHandlers = [];
    return {
      breakpoint: null
    };
  },
  beforeMount: function beforeMount2() {
    var _this = this;
    if (this.responsive) {
      var breakpoints = this.responsive.map(function(breakpt) {
        return breakpt.breakpoint;
      });
      breakpoints.sort(function(x, y) {
        return x - y;
      });
      breakpoints.forEach(function(breakpoint, index2) {
        var bQuery;
        if (index2 === 0) {
          bQuery = json2mq({
            minWidth: 0,
            maxWidth: breakpoint
          });
        } else {
          bQuery = json2mq({
            minWidth: breakpoints[index2 - 1] + 1,
            maxWidth: breakpoint
          });
        }
        canUseDOM() && _this.media(bQuery, function() {
          _this.setState({
            breakpoint
          });
        });
      });
      var query = json2mq({
        minWidth: breakpoints.slice(-1)[0]
      });
      canUseDOM() && this.media(query, function() {
        _this.setState({
          breakpoint: null
        });
      });
    }
  },
  beforeUnmount: function beforeUnmount10() {
    this._responsiveMediaHandlers.forEach(function(obj) {
      obj.mql.removeListener(obj.listener);
    });
  },
  methods: {
    innerSliderRefHandler: function innerSliderRefHandler(ref2) {
      this.innerSlider = ref2;
    },
    media: function media(query, handler8) {
      var mql = window.matchMedia(query);
      var listener = function listener2(_ref) {
        var matches = _ref.matches;
        if (matches) {
          handler8();
        }
      };
      mql.addListener(listener);
      listener(mql);
      this._responsiveMediaHandlers.push({
        mql,
        query,
        listener
      });
    },
    slickPrev: function slickPrev2() {
      this.innerSlider.slickPrev();
    },
    slickNext: function slickNext2() {
      this.innerSlider.slickNext();
    },
    slickGoTo: function slickGoTo2(slide) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      this.innerSlider.slickGoTo(slide, dontAnimate);
    },
    slickPause: function slickPause() {
      this.innerSlider.pause("paused");
    },
    slickPlay: function slickPlay() {
      this.innerSlider.handleAutoPlay("play");
    }
  },
  render: function render60() {
    var _this2 = this;
    var _a;
    var settings;
    var newProps;
    if (this.breakpoint) {
      newProps = this.responsive.filter(function(resp) {
        return resp.breakpoint === _this2.breakpoint;
      });
      settings = newProps[0].settings === "unslick" ? "unslick" : _extends(_extends({}, this.$props), newProps[0].settings);
    } else {
      settings = _extends({}, this.$props);
    }
    if (settings.centerMode) {
      if (settings.slidesToScroll > 1 && false) {
        console.warn("slidesToScroll should be equal to 1 in centerMode, you are using ".concat(settings.slidesToScroll));
      }
      settings.slidesToScroll = 1;
    }
    if (settings.fade) {
      if (settings.slidesToShow > 1 && false) {
        console.warn("slidesToShow should be equal to 1 when fade is true, you're using ".concat(settings.slidesToShow));
      }
      if (settings.slidesToScroll > 1 && false) {
        console.warn("slidesToScroll should be equal to 1 when fade is true, you're using ".concat(settings.slidesToScroll));
      }
      settings.slidesToShow = 1;
      settings.slidesToScroll = 1;
    }
    var children = getSlot(this) || [];
    children = children.filter(function(child) {
      if (typeof child === "string") {
        return !!child.trim();
      }
      return !!child;
    });
    if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {
      console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1");
      settings.variableWidth = false;
    }
    var newChildren = [];
    var currentWidth = null;
    for (var i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {
      var newSlide = [];
      for (var j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {
        var row = [];
        for (var k = j; k < j + settings.slidesPerRow; k += 1) {
          if (settings.variableWidth && ((_a = children[k].props) === null || _a === void 0 ? void 0 : _a.style)) {
            currentWidth = children[k].props.style.width;
          }
          if (k >= children.length)
            break;
          row.push(cloneElement(children[k], {
            key: 100 * i + 10 * j + k,
            tabindex: -1,
            style: {
              width: "".concat(100 / settings.slidesPerRow, "%"),
              display: "inline-block"
            }
          }));
        }
        newSlide.push(createVNode("div", {
          "key": 10 * i + j
        }, [row]));
      }
      if (settings.variableWidth) {
        newChildren.push(createVNode("div", {
          "key": i,
          "style": {
            width: currentWidth
          }
        }, [newSlide]));
      } else {
        newChildren.push(createVNode("div", {
          "key": i
        }, [newSlide]));
      }
    }
    if (settings === "unslick") {
      var className = "regular slider " + (this.className || "");
      return createVNode("div", {
        "class": className
      }, [newChildren]);
    } else if (newChildren.length <= settings.slidesToShow) {
      settings.unslick = true;
    }
    var sliderProps = _extends(_extends(_extends({}, this.$attrs), settings), {
      children: newChildren,
      ref: this.innerSliderRefHandler
    });
    return createVNode(InnerSlider, _objectSpread2(_objectSpread2({}, sliderProps), {}, {
      "__propsSymbol__": []
    }), this.$slots);
  }
});
var __rest$x = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var CarouselProps = {
  effect: PropsTypes.oneOf(tuple("scrollx", "fade")),
  dots: PropsTypes.looseBool.def(true),
  vertical: PropsTypes.looseBool,
  autoplay: PropsTypes.looseBool,
  easing: PropsTypes.string,
  beforeChange: PropsTypes.func,
  afterChange: PropsTypes.func,
  prefixCls: PropsTypes.string,
  accessibility: PropsTypes.looseBool,
  nextArrow: PropsTypes.VNodeChild,
  prevArrow: PropsTypes.VNodeChild,
  pauseOnHover: PropsTypes.looseBool,
  adaptiveHeight: PropsTypes.looseBool,
  arrows: PropsTypes.looseBool.def(false),
  autoplaySpeed: PropsTypes.number,
  centerMode: PropsTypes.looseBool,
  centerPadding: PropsTypes.string,
  cssEase: PropsTypes.string,
  dotsClass: PropsTypes.string,
  draggable: PropsTypes.looseBool.def(false),
  fade: PropsTypes.looseBool,
  focusOnSelect: PropsTypes.looseBool,
  infinite: PropsTypes.looseBool,
  initialSlide: PropsTypes.number,
  lazyLoad: PropsTypes.looseBool,
  rtl: PropsTypes.looseBool,
  slide: PropsTypes.string,
  slidesToShow: PropsTypes.number,
  slidesToScroll: PropsTypes.number,
  speed: PropsTypes.number,
  swipe: PropsTypes.looseBool,
  swipeToSlide: PropsTypes.looseBool,
  touchMove: PropsTypes.looseBool,
  touchThreshold: PropsTypes.number,
  variableWidth: PropsTypes.looseBool,
  useCSS: PropsTypes.looseBool,
  slickGoTo: PropsTypes.number,
  responsive: PropsTypes.array,
  dotPosition: PropsTypes.oneOf(tuple("top", "bottom", "left", "right")),
  verticalSwiping: PropsTypes.looseBool.def(false)
};
var Carousel = defineComponent({
  name: "ACarousel",
  inheritAttrs: false,
  props: CarouselProps,
  setup: function setup71() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      slick: void 0,
      innerSlider: void 0
    };
  },
  beforeMount: function beforeMount3() {
    this.onWindowResized = debounce$1(this.onWindowResized, 500, {
      leading: false
    });
  },
  mounted: function mounted13() {
    if (hasProp$1(this, "vertical")) {
      warning$1(!this.vertical, "Carousel", "`vertical` is deprecated, please use `dotPosition` instead.");
    }
    var autoplay = this.autoplay;
    if (autoplay) {
      window.addEventListener("resize", this.onWindowResized);
    }
    this.innerSlider = this.slick && this.slick.innerSlider;
  },
  beforeUnmount: function beforeUnmount11() {
    var autoplay = this.autoplay;
    if (autoplay) {
      window.removeEventListener("resize", this.onWindowResized);
      this.onWindowResized.cancel();
    }
  },
  methods: {
    getDotPosition: function getDotPosition() {
      if (this.dotPosition) {
        return this.dotPosition;
      }
      if (hasProp$1(this, "vertical")) {
        return this.vertical ? "right" : "bottom";
      }
      return "bottom";
    },
    saveSlick: function saveSlick(node) {
      this.slick = node;
    },
    onWindowResized: function onWindowResized2() {
      var autoplay = this.autoplay;
      if (autoplay && this.slick && this.slick.innerSlider && this.slick.innerSlider.autoPlay) {
        this.slick.innerSlider.autoPlay();
      }
    },
    next: function next() {
      this.slick.slickNext();
    },
    prev: function prev() {
      this.slick.slickPrev();
    },
    goTo: function goTo(slide) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      this.slick.slickGoTo(slide, dontAnimate);
    }
  },
  render: function render61() {
    var _classNames2;
    var props2 = _extends({}, this.$props);
    var $slots = this.$slots;
    if (props2.effect === "fade") {
      props2.fade = true;
    }
    var _a = this.$attrs, cls = _a.class, style3 = _a.style, restAttrs = __rest$x(_a, ["class", "style"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var className = getPrefixCls2("carousel", props2.prefixCls);
    var dotsClass = "slick-dots";
    var dotPosition = this.getDotPosition();
    props2.vertical = dotPosition === "left" || dotPosition === "right";
    props2.dotsClass = classNames("".concat(dotsClass), "".concat(dotsClass, "-").concat(dotPosition || "bottom"), _defineProperty({}, "".concat(props2.dotsClass), !!props2.dotsClass));
    className = classNames((_classNames2 = {}, _defineProperty(_classNames2, cls, !!cls), _defineProperty(_classNames2, className, !!className), _defineProperty(_classNames2, "".concat(className, "-vertical"), props2.vertical), _classNames2));
    var SlickCarouselProps = _extends(_extends(_extends({}, props2), restAttrs), {
      nextArrow: getComponent(this, "nextArrow"),
      prevArrow: getComponent(this, "prevArrow")
    });
    return createVNode("div", {
      "class": className,
      "style": style3
    }, [createVNode(Slider$2, _objectSpread2({
      "ref": this.saveSlick
    }, SlickCarouselProps), $slots)]);
  }
});
var index$e = withInstall(Carousel);
var Menus = {
  name: "CascaderMenus",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    value: PropsTypes.array.def([]),
    activeValue: PropsTypes.array.def([]),
    options: PropsTypes.array,
    prefixCls: PropsTypes.string.def("rc-cascader-menus"),
    expandTrigger: PropsTypes.string.def("click"),
    visible: PropsTypes.looseBool.def(false),
    dropdownMenuColumnStyle: PropsTypes.object,
    defaultFieldNames: PropsTypes.object,
    fieldNames: PropsTypes.object,
    expandIcon: PropsTypes.any,
    loadingIcon: PropsTypes.any
  },
  data: function data22() {
    this.menuItems = {};
    return {};
  },
  watch: {
    visible: function visible3(val) {
      var _this = this;
      if (val) {
        this.$nextTick(function() {
          _this.scrollActiveItemToView();
        });
      }
    }
  },
  mounted: function mounted14() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.scrollActiveItemToView();
    });
  },
  methods: {
    getFieldName: function getFieldName(name2) {
      var _this$$props = this.$props, fieldNames = _this$$props.fieldNames, defaultFieldNames = _this$$props.defaultFieldNames;
      return fieldNames[name2] || defaultFieldNames[name2];
    },
    getOption: function getOption(option, menuIndex) {
      var _this3 = this;
      var prefixCls2 = this.prefixCls, expandTrigger = this.expandTrigger;
      var loadingIcon = getComponent(this, "loadingIcon");
      var expandIcon = getComponent(this, "expandIcon");
      var onSelect6 = function onSelect7(e) {
        _this3.__emit("select", option, menuIndex, e);
      };
      var onItemDoubleClick = function onItemDoubleClick2(e) {
        _this3.__emit("itemDoubleClick", option, menuIndex, e);
      };
      var key2 = option[this.getFieldName("value")];
      var expandProps = {
        onClick: onSelect6,
        onDblclick: onItemDoubleClick
      };
      var menuItemCls = "".concat(prefixCls2, "-menu-item");
      var expandIconNode = null;
      var hasChildren = option[this.getFieldName("children")] && option[this.getFieldName("children")].length > 0;
      if (hasChildren || option.isLeaf === false) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-expand");
        if (!option.loading) {
          expandIconNode = createVNode("span", {
            "class": "".concat(prefixCls2, "-menu-item-expand-icon")
          }, [expandIcon]);
        }
      }
      if (expandTrigger === "hover" && (hasChildren || option.isLeaf === false)) {
        expandProps = {
          onMouseenter: this.delayOnSelect.bind(this, onSelect6),
          onMouseleave: this.delayOnSelect.bind(this),
          onClick: onSelect6
        };
      }
      if (this.isActiveOption(option, menuIndex)) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-active");
        expandProps.ref = this.saveMenuItem(menuIndex);
      }
      if (option.disabled) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-disabled");
      }
      var loadingIconNode = null;
      if (option.loading) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-loading");
        loadingIconNode = loadingIcon || null;
      }
      var title2 = "";
      if (option.title) {
        title2 = option.title;
      } else if (typeof option[this.getFieldName("label")] === "string") {
        title2 = option[this.getFieldName("label")];
      }
      return createVNode("li", _objectSpread2(_objectSpread2({
        "key": Array.isArray(key2) ? key2.join("__ant__") : key2,
        "class": menuItemCls,
        "title": title2
      }, expandProps), {}, {
        "role": "menuitem",
        "onMousedown": function onMousedown2(e) {
          return e.preventDefault();
        }
      }), [option[this.getFieldName("label")], expandIconNode, loadingIconNode]);
    },
    getActiveOptions: function getActiveOptions(values) {
      var _this4 = this;
      var activeValue = values || this.activeValue;
      var options2 = this.options;
      return arrayTreeFilter(options2, function(o, level2) {
        return isEqual$1(o[_this4.getFieldName("value")], activeValue[level2]);
      }, {
        childrenKeyName: this.getFieldName("children")
      });
    },
    getShowOptions: function getShowOptions() {
      var _this5 = this;
      var options2 = this.options;
      var result = this.getActiveOptions().map(function(activeOption) {
        return activeOption[_this5.getFieldName("children")];
      }).filter(function(activeOption) {
        return !!activeOption;
      });
      result.unshift(options2);
      return result;
    },
    delayOnSelect: function delayOnSelect(onSelect6) {
      var _this6 = this;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.delayTimer) {
        clearTimeout(this.delayTimer);
        this.delayTimer = null;
      }
      if (typeof onSelect6 === "function") {
        this.delayTimer = setTimeout(function() {
          onSelect6(args);
          _this6.delayTimer = null;
        }, 150);
      }
    },
    scrollActiveItemToView: function scrollActiveItemToView() {
      var optionsLength = this.getShowOptions().length;
      for (var i = 0; i < optionsLength; i++) {
        var itemComponent = this.menuItems[i];
        if (itemComponent) {
          var target = findDOMNode(itemComponent);
          target.parentNode.scrollTop = target.offsetTop;
        }
      }
    },
    isActiveOption: function isActiveOption(option, menuIndex) {
      var _this$activeValue = this.activeValue, activeValue = _this$activeValue === void 0 ? [] : _this$activeValue;
      return isEqual$1(activeValue[menuIndex], option[this.getFieldName("value")]);
    },
    saveMenuItem: function saveMenuItem(index2) {
      var _this7 = this;
      return function(node) {
        _this7.menuItems[index2] = node;
      };
    }
  },
  render: function render62() {
    var _this8 = this;
    var prefixCls2 = this.prefixCls, dropdownMenuColumnStyle = this.dropdownMenuColumnStyle;
    return createVNode("div", null, [this.getShowOptions().map(function(options2, menuIndex) {
      return createVNode("ul", {
        "class": "".concat(prefixCls2, "-menu"),
        "key": menuIndex,
        "style": dropdownMenuColumnStyle
      }, [options2.map(function(option) {
        return _this8.getOption(option, menuIndex);
      })]);
    })]);
  }
};
var __rest$w = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var BUILT_IN_PLACEMENTS$2 = {
  bottomLeft: {
    points: ["tl", "bl"],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topLeft: {
    points: ["bl", "tl"],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  bottomRight: {
    points: ["tr", "br"],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topRight: {
    points: ["br", "tr"],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  }
};
var Cascader$1 = defineComponent({
  name: "Cascader",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    value: PropsTypes.array,
    defaultValue: PropsTypes.array,
    options: PropsTypes.array,
    popupVisible: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool.def(false),
    transitionName: PropsTypes.string.def(""),
    popupClassName: PropsTypes.string.def(""),
    popupStyle: PropsTypes.object.def(function() {
      return {};
    }),
    popupPlacement: PropsTypes.string.def("bottomLeft"),
    prefixCls: PropsTypes.string.def("rc-cascader"),
    dropdownMenuColumnStyle: PropsTypes.object,
    builtinPlacements: PropsTypes.object.def(BUILT_IN_PLACEMENTS$2),
    loadData: PropsTypes.func,
    changeOnSelect: PropsTypes.looseBool,
    expandTrigger: PropsTypes.string.def("click"),
    fieldNames: PropsTypes.object.def(function() {
      return {
        label: "label",
        value: "value",
        children: "children"
      };
    }),
    expandIcon: PropsTypes.any,
    loadingIcon: PropsTypes.any,
    getPopupContainer: PropsTypes.func
  },
  data: function data23() {
    var initialValue = [];
    var value26 = this.value, defaultValue = this.defaultValue, popupVisible4 = this.popupVisible;
    if (hasProp(this, "value")) {
      initialValue = value26 || [];
    } else if (hasProp(this, "defaultValue")) {
      initialValue = defaultValue || [];
    }
    this.children = void 0;
    this.defaultFieldNames = {
      label: "label",
      value: "value",
      children: "children"
    };
    return {
      sPopupVisible: popupVisible4,
      sActiveValue: initialValue,
      sValue: initialValue
    };
  },
  watch: {
    value: function value9(val, oldValue) {
      if (!shallowEqualArrays(val, oldValue)) {
        var newValues = {
          sValue: val || []
        };
        if (!hasProp(this, "loadData")) {
          newValues.sActiveValue = val || [];
        }
        this.setState(newValues);
      }
    },
    popupVisible: function popupVisible2(val) {
      this.setState({
        sPopupVisible: val
      });
    }
  },
  methods: {
    getPopupDOMNode: function getPopupDOMNode() {
      return this.trigger.getPopupDomNode();
    },
    getFieldName: function getFieldName2(name2) {
      var defaultFieldNames = this.defaultFieldNames, fieldNames = this.fieldNames;
      return fieldNames[name2] || defaultFieldNames[name2];
    },
    getFieldNames: function getFieldNames() {
      return this.fieldNames;
    },
    getCurrentLevelOptions: function getCurrentLevelOptions() {
      var _this = this;
      var _this$options = this.options, options2 = _this$options === void 0 ? [] : _this$options, _this$sActiveValue = this.sActiveValue, sActiveValue = _this$sActiveValue === void 0 ? [] : _this$sActiveValue;
      var result = arrayTreeFilter(options2, function(o, level2) {
        return isEqual$1(o[_this.getFieldName("value")], sActiveValue[level2]);
      }, {
        childrenKeyName: this.getFieldName("children")
      });
      if (result[result.length - 2]) {
        return result[result.length - 2][this.getFieldName("children")];
      }
      return _toConsumableArray(options2).filter(function(o) {
        return !o.disabled;
      });
    },
    getActiveOptions: function getActiveOptions2(activeValue) {
      var _this2 = this;
      return arrayTreeFilter(this.options || [], function(o, level2) {
        return isEqual$1(o[_this2.getFieldName("value")], activeValue[level2]);
      }, {
        childrenKeyName: this.getFieldName("children")
      });
    },
    setPopupVisible: function setPopupVisible2(popupVisible4) {
      if (!hasProp(this, "popupVisible")) {
        this.setState({
          sPopupVisible: popupVisible4
        });
      }
      if (popupVisible4 && !this.sPopupVisible) {
        this.setState({
          sActiveValue: this.sValue
        });
      }
      this.__emit("popupVisibleChange", popupVisible4);
    },
    handleChange: function handleChange8(options2, setProps, e) {
      var _this3 = this;
      if (e.type !== "keydown" || e.keyCode === KeyCode$2.ENTER) {
        var value26 = options2.map(function(o) {
          return o[_this3.getFieldName("value")];
        });
        this.__emit("change", value26, options2);
        this.setPopupVisible(setProps.visible);
      }
    },
    handlePopupVisibleChange: function handlePopupVisibleChange(popupVisible4) {
      this.setPopupVisible(popupVisible4);
    },
    handleMenuSelect: function handleMenuSelect(targetOption, menuIndex, e) {
      var triggerNode = this.trigger.getRootDomNode();
      if (triggerNode && triggerNode.focus) {
        triggerNode.focus();
      }
      var changeOnSelect = this.changeOnSelect, loadData = this.loadData, expandTrigger = this.expandTrigger;
      if (!targetOption || targetOption.disabled) {
        return;
      }
      var sActiveValue = this.sActiveValue;
      sActiveValue = sActiveValue.slice(0, menuIndex + 1);
      sActiveValue[menuIndex] = targetOption[this.getFieldName("value")];
      var activeOptions = this.getActiveOptions(sActiveValue);
      if (targetOption.isLeaf === false && !targetOption[this.getFieldName("children")] && loadData) {
        if (changeOnSelect) {
          this.handleChange(activeOptions, {
            visible: true
          }, e);
        }
        this.setState({
          sActiveValue
        });
        loadData(activeOptions);
        return;
      }
      var newState = {};
      if (!targetOption[this.getFieldName("children")] || !targetOption[this.getFieldName("children")].length) {
        this.handleChange(activeOptions, {
          visible: false
        }, e);
        newState.sValue = sActiveValue;
      } else if (changeOnSelect && (e.type === "click" || e.type === "keydown")) {
        if (expandTrigger === "hover") {
          this.handleChange(activeOptions, {
            visible: false
          }, e);
        } else {
          this.handleChange(activeOptions, {
            visible: true
          }, e);
        }
        newState.sValue = sActiveValue;
      }
      newState.sActiveValue = sActiveValue;
      if (hasProp(this, "value") || e.type === "keydown" && e.keyCode !== KeyCode$2.ENTER) {
        delete newState.sValue;
      }
      this.setState(newState);
    },
    handleItemDoubleClick: function handleItemDoubleClick() {
      var changeOnSelect = this.$props.changeOnSelect;
      if (changeOnSelect) {
        this.setPopupVisible(false);
      }
    },
    handleKeyDown: function handleKeyDown3(e) {
      var _this4 = this;
      var children = this.children;
      if (children) {
        var keydown = getEvents(children).onKeydown;
        if (keydown) {
          keydown(e);
          return;
        }
      }
      var activeValue = _toConsumableArray(this.sActiveValue);
      var currentLevel = activeValue.length - 1 < 0 ? 0 : activeValue.length - 1;
      var currentOptions = this.getCurrentLevelOptions();
      var currentIndex = currentOptions.map(function(o) {
        return o[_this4.getFieldName("value")];
      }).findIndex(function(val) {
        return isEqual$1(activeValue[currentLevel], val);
      });
      if (e.keyCode !== KeyCode$2.DOWN && e.keyCode !== KeyCode$2.UP && e.keyCode !== KeyCode$2.LEFT && e.keyCode !== KeyCode$2.RIGHT && e.keyCode !== KeyCode$2.ENTER && e.keyCode !== KeyCode$2.SPACE && e.keyCode !== KeyCode$2.BACKSPACE && e.keyCode !== KeyCode$2.ESC && e.keyCode !== KeyCode$2.TAB) {
        return;
      }
      if (!this.sPopupVisible && e.keyCode !== KeyCode$2.BACKSPACE && e.keyCode !== KeyCode$2.LEFT && e.keyCode !== KeyCode$2.RIGHT && e.keyCode !== KeyCode$2.ESC && e.keyCode !== KeyCode$2.TAB) {
        this.setPopupVisible(true);
        return;
      }
      if (e.keyCode === KeyCode$2.DOWN || e.keyCode === KeyCode$2.UP) {
        e.preventDefault();
        var nextIndex = currentIndex;
        if (nextIndex !== -1) {
          if (e.keyCode === KeyCode$2.DOWN) {
            nextIndex += 1;
            nextIndex = nextIndex >= currentOptions.length ? 0 : nextIndex;
          } else {
            nextIndex -= 1;
            nextIndex = nextIndex < 0 ? currentOptions.length - 1 : nextIndex;
          }
        } else {
          nextIndex = 0;
        }
        activeValue[currentLevel] = currentOptions[nextIndex][this.getFieldName("value")];
      } else if (e.keyCode === KeyCode$2.LEFT || e.keyCode === KeyCode$2.BACKSPACE) {
        e.preventDefault();
        activeValue.splice(activeValue.length - 1, 1);
      } else if (e.keyCode === KeyCode$2.RIGHT) {
        e.preventDefault();
        if (currentOptions[currentIndex] && currentOptions[currentIndex][this.getFieldName("children")]) {
          activeValue.push(currentOptions[currentIndex][this.getFieldName("children")][0][this.getFieldName("value")]);
        }
      } else if (e.keyCode === KeyCode$2.ESC || e.keyCode === KeyCode$2.TAB) {
        this.setPopupVisible(false);
        return;
      }
      if (!activeValue || activeValue.length === 0) {
        this.setPopupVisible(false);
      }
      var activeOptions = this.getActiveOptions(activeValue);
      var targetOption = activeOptions[activeOptions.length - 1];
      this.handleMenuSelect(targetOption, activeOptions.length - 1, e);
      this.__emit("keydown", e);
    },
    saveTrigger: function saveTrigger2(node) {
      this.trigger = node;
    }
  },
  render: function render63() {
    var $props = this.$props, sActiveValue = this.sActiveValue, handleMenuSelect2 = this.handleMenuSelect, sPopupVisible = this.sPopupVisible, handlePopupVisibleChange3 = this.handlePopupVisibleChange, handleKeyDown7 = this.handleKeyDown;
    var prefixCls2 = $props.prefixCls, transitionName2 = $props.transitionName, popupClassName = $props.popupClassName, _$props$options = $props.options, options2 = _$props$options === void 0 ? [] : _$props$options, disabled = $props.disabled, builtinPlacements = $props.builtinPlacements, popupPlacement = $props.popupPlacement, restProps = __rest$w($props, ["prefixCls", "transitionName", "popupClassName", "options", "disabled", "builtinPlacements", "popupPlacement"]);
    var menus = createVNode("div", null, null);
    var emptyMenuClassName = "";
    if (options2 && options2.length > 0) {
      var loadingIcon = getComponent(this, "loadingIcon");
      var expandIcon = getComponent(this, "expandIcon") || ">";
      var menusProps = _extends(_extends(_extends({}, $props), this.$attrs), {
        fieldNames: this.getFieldNames(),
        defaultFieldNames: this.defaultFieldNames,
        activeValue: sActiveValue,
        visible: sPopupVisible,
        loadingIcon,
        expandIcon,
        onSelect: handleMenuSelect2,
        onItemDoubleClick: this.handleItemDoubleClick
      });
      menus = createVNode(Menus, menusProps, null);
    } else {
      emptyMenuClassName = " ".concat(prefixCls2, "-menus-empty");
    }
    var triggerProps = _extends(_extends(_extends({}, restProps), this.$attrs), {
      disabled,
      popupPlacement,
      builtinPlacements,
      popupTransitionName: transitionName2,
      action: disabled ? [] : ["click"],
      popupVisible: disabled ? false : sPopupVisible,
      prefixCls: "".concat(prefixCls2, "-menus"),
      popupClassName: popupClassName + emptyMenuClassName,
      popup: menus,
      onPopupVisibleChange: handlePopupVisibleChange3,
      ref: this.saveTrigger
    });
    var children = getSlot(this);
    this.children = children;
    return createVNode(Trigger, triggerProps, {
      default: function _default8() {
        return [children && cloneElement(children[0], {
          onKeydown: handleKeyDown7,
          tabindex: disabled ? void 0 : 0
        })];
      }
    });
  }
});
var __rest$v = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$v() {
}
var cascaderProps = {
  options: {
    type: Array,
    default: []
  },
  defaultValue: PropsTypes.array,
  value: PropsTypes.array,
  displayRender: PropsTypes.func,
  transitionName: PropsTypes.string.def("slide-up"),
  popupStyle: PropsTypes.object.def(function() {
    return {};
  }),
  popupClassName: PropsTypes.string,
  popupPlacement: PropsTypes.oneOf(tuple("bottomLeft", "bottomRight", "topLeft", "topRight")).def("bottomLeft"),
  placeholder: PropsTypes.string.def("Please select"),
  size: PropsTypes.oneOf(tuple("large", "default", "small")),
  disabled: PropsTypes.looseBool.def(false),
  allowClear: PropsTypes.looseBool.def(true),
  showSearch: {
    type: [Boolean, Object],
    default: void 0
  },
  notFoundContent: PropsTypes.VNodeChild,
  loadData: PropsTypes.func,
  expandTrigger: PropsTypes.oneOf(tuple("click", "hover")),
  changeOnSelect: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  inputPrefixCls: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  popupVisible: PropsTypes.looseBool,
  fieldNames: {
    type: Object
  },
  autofocus: PropsTypes.looseBool,
  suffixIcon: PropsTypes.VNodeChild,
  showSearchRender: PropsTypes.any,
  onChange: PropsTypes.func,
  onPopupVisibleChange: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func,
  onSearch: PropsTypes.func,
  "onUpdate:value": PropsTypes.func
};
var defaultLimit = 50;
function defaultFilterOption(inputValue, path2, names) {
  return path2.some(function(option) {
    return option[names.label].indexOf(inputValue) > -1;
  });
}
function defaultSortFilteredOption(a, b, inputValue, names) {
  function callback(elem) {
    return elem[names.label].indexOf(inputValue) > -1;
  }
  return a.findIndex(callback) - b.findIndex(callback);
}
function getFilledFieldNames(props2) {
  var fieldNames = props2.fieldNames || {};
  var names = {
    children: fieldNames.children || "children",
    label: fieldNames.label || "label",
    value: fieldNames.value || "value"
  };
  return names;
}
function flattenTree(options2, props2) {
  var ancestor = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  var names = getFilledFieldNames(props2);
  var flattenOptions2 = [];
  var childrenName = names.children;
  options2.forEach(function(option) {
    var path2 = ancestor.concat(option);
    if (props2.changeOnSelect || !option[childrenName] || !option[childrenName].length) {
      flattenOptions2.push(path2);
    }
    if (option[childrenName]) {
      flattenOptions2 = flattenOptions2.concat(flattenTree(option[childrenName], props2, path2));
    }
  });
  return flattenOptions2;
}
var defaultDisplayRender = function defaultDisplayRender2(_ref) {
  var labels = _ref.labels;
  return labels.join(" / ");
};
var Cascader = defineComponent({
  name: "ACascader",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: cascaderProps,
  setup: function setup72() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      localeData: inject("localeData", {}),
      cachedOptions: [],
      popupRef: void 0,
      input: void 0
    };
  },
  data: function data24() {
    var _this$$props = this.$props, value26 = _this$$props.value, defaultValue = _this$$props.defaultValue, popupVisible4 = _this$$props.popupVisible, showSearch = _this$$props.showSearch, options2 = _this$$props.options;
    return {
      sValue: value26 || defaultValue || [],
      inputValue: "",
      inputFocused: false,
      sPopupVisible: popupVisible4,
      flattenOptions: showSearch ? flattenTree(options2, this.$props) : void 0
    };
  },
  watch: {
    value: function value10(val) {
      this.setState({
        sValue: val || []
      });
    },
    popupVisible: function popupVisible3(val) {
      this.setState({
        sPopupVisible: val
      });
    },
    options: function options(val) {
      if (this.showSearch) {
        this.setState({
          flattenOptions: flattenTree(val, this.$props)
        });
      }
    }
  },
  created: function created9() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef4(ref2) {
      this.popupRef = ref2;
    },
    highlightKeyword: function highlightKeyword(str, keyword, prefixCls2) {
      return str.split(keyword).map(function(node, index2) {
        return index2 === 0 ? node : [createVNode("span", {
          "class": "".concat(prefixCls2, "-menu-item-keyword")
        }, [keyword]), node];
      });
    },
    defaultRenderFilteredOption: function defaultRenderFilteredOption(opt) {
      var _this = this;
      var inputValue = opt.inputValue, path2 = opt.path, prefixCls2 = opt.prefixCls, names = opt.names;
      return path2.map(function(option, index2) {
        var label = option[names.label];
        var node = label.indexOf(inputValue) > -1 ? _this.highlightKeyword(label, inputValue, prefixCls2) : label;
        return index2 === 0 ? node : [" / ", node];
      });
    },
    saveInput: function saveInput4(node) {
      this.input = node;
    },
    handleChange: function handleChange9(value26, selectedOptions) {
      this.setState({
        inputValue: ""
      });
      if (selectedOptions[0].__IS_FILTERED_OPTION) {
        var unwrappedValue = value26[0];
        var unwrappedSelectedOptions = selectedOptions[0].path;
        this.setValue(unwrappedValue, unwrappedSelectedOptions);
        return;
      }
      this.setValue(value26, selectedOptions);
    },
    handlePopupVisibleChange: function handlePopupVisibleChange2(popupVisible4) {
      if (!hasProp(this, "popupVisible")) {
        this.setState(function(state) {
          return {
            sPopupVisible: popupVisible4,
            inputFocused: popupVisible4,
            inputValue: popupVisible4 ? state.inputValue : ""
          };
        });
      }
      this.$emit("popupVisibleChange", popupVisible4);
    },
    handleInputFocus: function handleInputFocus2(e) {
      this.$emit("focus", e);
    },
    handleInputBlur: function handleInputBlur2(e) {
      this.setState({
        inputFocused: false
      });
      this.$emit("blur", e);
    },
    handleInputClick: function handleInputClick(e) {
      var inputFocused = this.inputFocused, sPopupVisible = this.sPopupVisible;
      if (inputFocused || sPopupVisible) {
        e.stopPropagation();
        if (e.nativeEvent && e.nativeEvent.stopImmediatePropagation) {
          e.nativeEvent.stopImmediatePropagation();
        }
      }
    },
    handleKeyDown: function handleKeyDown4(e) {
      if (e.keyCode === KeyCode$2.BACKSPACE || e.keyCode === KeyCode$2.SPACE) {
        e.stopPropagation();
      }
    },
    handleInputChange: function handleInputChange(e) {
      var inputValue = e.target.value;
      this.setState({
        inputValue
      });
      this.$emit("search", inputValue);
    },
    setValue: function setValue5(value26) {
      var selectedOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      this.$emit("update:value", value26);
      this.$emit("change", value26, selectedOptions);
    },
    getLabel: function getLabel() {
      var options2 = this.options;
      var names = getFilledFieldNames(this.$props);
      var displayRender = getComponent(this, "displayRender", {}, false) || defaultDisplayRender;
      var value26 = this.sValue;
      var unwrappedValue = Array.isArray(value26[0]) ? value26[0] : value26;
      var selectedOptions = arrayTreeFilter(options2, function(o, level2) {
        return o[names.value] === unwrappedValue[level2];
      }, {
        childrenKeyName: names.children
      });
      var labels = selectedOptions.map(function(o) {
        return o[names.label];
      });
      return displayRender({
        labels,
        selectedOptions
      });
    },
    clearSelection: function clearSelection(e) {
      e.preventDefault();
      e.stopPropagation();
      if (!this.inputValue) {
        this.setValue([]);
        this.handlePopupVisibleChange(false);
      } else {
        this.setState({
          inputValue: ""
        });
      }
    },
    generateFilteredOptions: function generateFilteredOptions(prefixCls2, renderEmpty2) {
      var _ref3;
      var showSearch = this.showSearch, notFoundContent = this.notFoundContent;
      var names = getFilledFieldNames(this.$props);
      var _showSearch$filter = showSearch.filter, filter = _showSearch$filter === void 0 ? defaultFilterOption : _showSearch$filter, _showSearch$sort = showSearch.sort, sort = _showSearch$sort === void 0 ? defaultSortFilteredOption : _showSearch$sort, _showSearch$limit = showSearch.limit, limit = _showSearch$limit === void 0 ? defaultLimit : _showSearch$limit;
      var render165 = showSearch.render || getComponent(this, "showSearchRender") || this.defaultRenderFilteredOption;
      var _this$$data = this.$data, _this$$data$flattenOp = _this$$data.flattenOptions, flattenOptions2 = _this$$data$flattenOp === void 0 ? [] : _this$$data$flattenOp, inputValue = _this$$data.inputValue;
      var filtered;
      if (limit > 0) {
        filtered = [];
        var matchCount = 0;
        flattenOptions2.some(function(path2) {
          var match2 = filter(inputValue, path2, names);
          if (match2) {
            filtered.push(path2);
            matchCount += 1;
          }
          return matchCount >= limit;
        });
      } else {
        warning$1(typeof limit !== "number", "Cascader", "'limit' of showSearch in Cascader should be positive number or false.");
        filtered = flattenOptions2.filter(function(path2) {
          return filter(inputValue, path2, names);
        });
      }
      filtered.sort(function(a, b) {
        return sort(a, b, inputValue, names);
      });
      if (filtered.length > 0) {
        return filtered.map(function(path2) {
          var _ref2;
          return _ref2 = {
            __IS_FILTERED_OPTION: true,
            path: path2
          }, _defineProperty(_ref2, names.label, render165({
            inputValue,
            path: path2,
            prefixCls: prefixCls2,
            names
          })), _defineProperty(_ref2, names.value, path2.map(function(o) {
            return o[names.value];
          })), _defineProperty(_ref2, "disabled", path2.some(function(o) {
            return !!o.disabled;
          })), _ref2;
        });
      }
      return [(_ref3 = {}, _defineProperty(_ref3, names.label, notFoundContent || renderEmpty2("Cascader")), _defineProperty(_ref3, names.value, "ANT_CASCADER_NOT_FOUND"), _defineProperty(_ref3, "disabled", true), _ref3)];
    },
    focus: function focus9() {
      this.input && this.input.focus();
    },
    blur: function blur8() {
      this.input && this.input.blur();
    }
  },
  render: function render64() {
    var _classNames, _classNames2, _classNames3;
    var sPopupVisible = this.sPopupVisible, inputValue = this.inputValue, configProvider = this.configProvider, localeData = this.localeData;
    var _this$$data2 = this.$data, value26 = _this$$data2.sValue, inputFocused = _this$$data2.inputFocused;
    var props2 = getOptionProps(this);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var getContextPopupContainer = configProvider.getPopupContainer;
    var _a = props2, customizePrefixCls = _a.prefixCls, customizeInputPrefixCls = _a.inputPrefixCls, _a$placeholder = _a.placeholder, placeholder = _a$placeholder === void 0 ? localeData.placeholder : _a$placeholder, size = _a.size, disabled = _a.disabled, allowClear = _a.allowClear, _a$showSearch = _a.showSearch, showSearch = _a$showSearch === void 0 ? false : _a$showSearch, notFoundContent = _a.notFoundContent, otherProps = __rest$v(_a, ["prefixCls", "inputPrefixCls", "placeholder", "size", "disabled", "allowClear", "showSearch", "notFoundContent"]);
    var _splitAttrs = splitAttrs(this.$attrs), onEvents = _splitAttrs.onEvents, extraAttrs = _splitAttrs.extraAttrs;
    var className = extraAttrs.class, style3 = extraAttrs.style, restAttrs = __rest$v(extraAttrs, ["class", "style"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var renderEmpty2 = this.configProvider.renderEmpty;
    var prefixCls2 = getPrefixCls2("cascader", customizePrefixCls);
    var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
    var sizeCls = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(inputPrefixCls, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(inputPrefixCls, "-sm"), size === "small"), _classNames));
    var clearIcon = allowClear && !disabled && value26.length > 0 || inputValue ? createVNode(CloseCircleFilled, {
      "class": "".concat(prefixCls2, "-picker-clear"),
      "onClick": this.clearSelection,
      "key": "clear-icon"
    }, null) : null;
    var arrowCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-picker-arrow"), true), _defineProperty(_classNames2, "".concat(prefixCls2, "-picker-arrow-expand"), sPopupVisible), _classNames2));
    var pickerCls = classNames(className, "".concat(prefixCls2, "-picker"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls2, "-picker-with-value"), inputValue), _defineProperty(_classNames3, "".concat(prefixCls2, "-picker-disabled"), disabled), _defineProperty(_classNames3, "".concat(prefixCls2, "-picker-").concat(size), !!size), _defineProperty(_classNames3, "".concat(prefixCls2, "-picker-show-search"), !!showSearch), _defineProperty(_classNames3, "".concat(prefixCls2, "-picker-focused"), inputFocused), _classNames3));
    var tempInputProps = omit(otherProps, ["popupStyle", "options", "popupPlacement", "transitionName", "displayRender", "changeOnSelect", "expandTrigger", "popupVisible", "getPopupContainer", "loadData", "popupClassName", "filterOption", "renderFilteredOption", "sortFilteredOption", "notFoundContent", "defaultValue", "fieldNames", "onChange", "onPopupVisibleChange", "onFocus", "onBlur", "onSearch", "onUpdate:value"]);
    var options2 = props2.options;
    var names = getFilledFieldNames(this.$props);
    if (options2 && options2.length > 0) {
      if (inputValue) {
        options2 = this.generateFilteredOptions(prefixCls2, renderEmpty2);
      }
    } else {
      var _ref4;
      options2 = [(_ref4 = {}, _defineProperty(_ref4, names.label, notFoundContent || renderEmpty2("Cascader")), _defineProperty(_ref4, names.value, "ANT_CASCADER_NOT_FOUND"), _defineProperty(_ref4, "disabled", true), _ref4)];
    }
    if (!sPopupVisible) {
      options2 = this.cachedOptions;
    } else {
      this.cachedOptions = options2;
    }
    var dropdownMenuColumnStyle = {};
    var isNotFound = (options2 || []).length === 1 && options2[0].value === "ANT_CASCADER_NOT_FOUND";
    if (isNotFound) {
      dropdownMenuColumnStyle.height = "auto";
    }
    var resultListMatchInputWidth = showSearch.matchInputWidth !== false;
    if (resultListMatchInputWidth && (inputValue || isNotFound) && this.input) {
      dropdownMenuColumnStyle.width = findDOMNode(this.input.input).offsetWidth + "px";
    }
    var inputProps2 = _extends(_extends(_extends({}, restAttrs), tempInputProps), {
      prefixCls: inputPrefixCls,
      placeholder: value26 && value26.length > 0 ? void 0 : placeholder,
      value: inputValue,
      disabled,
      readonly: !showSearch,
      autocomplete: "off",
      class: "".concat(prefixCls2, "-input ").concat(sizeCls),
      onFocus: this.handleInputFocus,
      onClick: showSearch ? this.handleInputClick : noop$v,
      onBlur: showSearch ? this.handleInputBlur : props2.onBlur,
      onKeydown: this.handleKeyDown,
      onChange: showSearch ? this.handleInputChange : noop$v
    });
    var children = getSlot(this);
    var inputIcon = suffixIcon && (isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
      class: "".concat(prefixCls2, "-picker-arrow")
    }) : createVNode("span", {
      "class": "".concat(prefixCls2, "-picker-arrow")
    }, [suffixIcon])) || createVNode(DownOutlined, {
      "class": arrowCls
    }, null);
    var input = children.length ? children : createVNode("span", {
      "class": pickerCls,
      "style": style3
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-picker-label")
    }, [this.getLabel()]), createVNode(Input, _objectSpread2(_objectSpread2({}, inputProps2), {}, {
      "ref": this.saveInput
    }), null), clearIcon, inputIcon]);
    var expandIcon = createVNode(RightOutlined, null, null);
    var loadingIcon = createVNode("span", {
      "class": "".concat(prefixCls2, "-menu-item-loading-icon")
    }, [createVNode(RedoOutlined, {
      "spin": true
    }, null)]);
    var getPopupContainer = props2.getPopupContainer || getContextPopupContainer;
    var cascaderProps2 = _extends(_extends(_extends(_extends({}, props2), {
      getPopupContainer,
      options: options2,
      prefixCls: prefixCls2,
      value: value26,
      popupVisible: sPopupVisible,
      dropdownMenuColumnStyle,
      expandIcon,
      loadingIcon
    }), onEvents), {
      onPopupVisibleChange: this.handlePopupVisibleChange,
      onChange: this.handleChange
    });
    return createVNode(Cascader$1, cascaderProps2, {
      default: function _default8() {
        return [input];
      }
    });
  }
});
var index$d = withInstall(Cascader);
var __rest$u = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$u() {
}
var Checkbox = defineComponent({
  name: "ACheckbox",
  inheritAttrs: false,
  __ANT_CHECKBOX: true,
  props: {
    prefixCls: PropsTypes.string,
    defaultChecked: PropsTypes.looseBool,
    checked: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    isGroup: PropsTypes.looseBool,
    value: PropsTypes.any,
    name: PropsTypes.string,
    id: PropsTypes.string,
    indeterminate: PropsTypes.looseBool,
    type: PropsTypes.string.def("checkbox"),
    autofocus: PropsTypes.looseBool,
    onChange: PropsTypes.func,
    "onUpdate:checked": PropsTypes.func
  },
  emits: ["change", "update:checked"],
  setup: function setup73() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      checkboxGroupContext: inject("checkboxGroupContext", void 0)
    };
  },
  watch: {
    value: function value11(_value, prevValue) {
      var _this = this;
      nextTick(function() {
        var _this$checkboxGroupCo = _this.checkboxGroupContext, checkboxGroup = _this$checkboxGroupCo === void 0 ? {} : _this$checkboxGroupCo;
        if (checkboxGroup.registerValue && checkboxGroup.cancelValue) {
          checkboxGroup.cancelValue(prevValue);
          checkboxGroup.registerValue(_value);
        }
      });
    }
  },
  mounted: function mounted15() {
    var value26 = this.value, _this$checkboxGroupCo2 = this.checkboxGroupContext, checkboxGroup = _this$checkboxGroupCo2 === void 0 ? {} : _this$checkboxGroupCo2;
    if (checkboxGroup.registerValue) {
      checkboxGroup.registerValue(value26);
    }
    warning$1(hasProp$1(this, "checked") || this.checkboxGroupContext || !hasProp$1(this, "value"), "Checkbox", "`value` is not validate prop, do you mean `checked`?");
  },
  beforeUnmount: function beforeUnmount12() {
    var value26 = this.value, _this$checkboxGroupCo3 = this.checkboxGroupContext, checkboxGroup = _this$checkboxGroupCo3 === void 0 ? {} : _this$checkboxGroupCo3;
    if (checkboxGroup.cancelValue) {
      checkboxGroup.cancelValue(value26);
    }
  },
  methods: {
    handleChange: function handleChange10(event) {
      var targetChecked = event.target.checked;
      this.$emit("update:checked", targetChecked);
      this.$emit("change", event);
    },
    focus: function focus10() {
      this.$refs.vcCheckbox.focus();
    },
    blur: function blur9() {
      this.$refs.vcCheckbox.blur();
    }
  },
  render: function render65() {
    var _this2 = this, _classNames;
    var props2 = getOptionProps(this);
    var checkboxGroup = this.checkboxGroupContext, $attrs = this.$attrs;
    var children = getSlot(this);
    var indeterminate = props2.indeterminate, customizePrefixCls = props2.prefixCls, restProps = __rest$u(props2, ["indeterminate", "prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("checkbox", customizePrefixCls);
    var _$attrs$onMouseenter = $attrs.onMouseenter, onMouseenter2 = _$attrs$onMouseenter === void 0 ? noop$u : _$attrs$onMouseenter, _$attrs$onMouseleave = $attrs.onMouseleave, onMouseleave2 = _$attrs$onMouseleave === void 0 ? noop$u : _$attrs$onMouseleave;
    $attrs.onInput;
    var className = $attrs.class, style3 = $attrs.style, restAttrs = __rest$u($attrs, ["onMouseenter", "onMouseleave", "onInput", "class", "style"]);
    var checkboxProps = _extends(_extends(_extends({}, restProps), {
      prefixCls: prefixCls2
    }), restAttrs);
    if (checkboxGroup) {
      checkboxProps.onChange = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2.$emit.apply(_this2, ["change"].concat(args));
        checkboxGroup.toggleOption({
          label: children,
          value: props2.value
        });
      };
      checkboxProps.name = checkboxGroup.name;
      checkboxProps.checked = checkboxGroup.sValue.indexOf(props2.value) !== -1;
      checkboxProps.disabled = props2.disabled || checkboxGroup.disabled;
      checkboxProps.indeterminate = indeterminate;
    } else {
      checkboxProps.onChange = this.handleChange;
    }
    var classString = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-wrapper"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-wrapper-checked"), checkboxProps.checked), _defineProperty(_classNames, "".concat(prefixCls2, "-wrapper-disabled"), checkboxProps.disabled), _classNames), className);
    var checkboxClass = classNames(_defineProperty({}, "".concat(prefixCls2, "-indeterminate"), indeterminate));
    return createVNode("label", {
      "class": classString,
      "style": style3,
      "onMouseenter": onMouseenter2,
      "onMouseleave": onMouseleave2
    }, [createVNode(Checkbox$1, _objectSpread2(_objectSpread2({}, checkboxProps), {}, {
      "class": checkboxClass,
      "ref": "vcCheckbox"
    }), null), children.length ? createVNode("span", null, [children]) : null]);
  }
});
function noop$t() {
}
var CheckboxGroup = defineComponent({
  name: "ACheckboxGroup",
  props: {
    name: PropsTypes.string,
    prefixCls: PropsTypes.string,
    defaultValue: {
      type: Array
    },
    value: {
      type: Array
    },
    options: {
      type: Array
    },
    disabled: PropsTypes.looseBool,
    onChange: PropsTypes.func
  },
  emits: ["change", "update:value"],
  setup: function setup74() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data25() {
    var value26 = this.value, defaultValue = this.defaultValue;
    return {
      sValue: value26 || defaultValue || [],
      registeredValues: []
    };
  },
  watch: {
    value: function value12(val) {
      this.sValue = val || [];
    }
  },
  created: function created10() {
    provide("checkboxGroupContext", this);
  },
  methods: {
    getOptions: function getOptions() {
      var _this$options = this.options, options2 = _this$options === void 0 ? [] : _this$options, $slots = this.$slots;
      return options2.map(function(option) {
        if (typeof option === "string") {
          return {
            label: option,
            value: option
          };
        }
        var label = option.label;
        if (label === void 0 && $slots.label) {
          label = $slots.label(option);
        }
        return _extends(_extends({}, option), {
          label
        });
      });
    },
    cancelValue: function cancelValue(value26) {
      this.registeredValues = this.registeredValues.filter(function(val) {
        return val !== value26;
      });
    },
    registerValue: function registerValue(value26) {
      this.registeredValues = [].concat(_toConsumableArray(this.registeredValues), [value26]);
    },
    toggleOption: function toggleOption(option) {
      var registeredValues = this.registeredValues;
      var optionIndex = this.sValue.indexOf(option.value);
      var value26 = _toConsumableArray(this.sValue);
      if (optionIndex === -1) {
        value26.push(option.value);
      } else {
        value26.splice(optionIndex, 1);
      }
      if (!hasProp$1(this, "value")) {
        this.sValue = value26;
      }
      var options2 = this.getOptions();
      var val = value26.filter(function(val2) {
        return registeredValues.indexOf(val2) !== -1;
      }).sort(function(a, b) {
        var indexA = options2.findIndex(function(opt) {
          return opt.value === a;
        });
        var indexB = options2.findIndex(function(opt) {
          return opt.value === b;
        });
        return indexA - indexB;
      });
      this.$emit("update:value", val);
      this.$emit("change", val);
    }
  },
  render: function render66() {
    var props2 = this.$props, state = this.$data;
    var customizePrefixCls = props2.prefixCls, options2 = props2.options;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("checkbox", customizePrefixCls);
    var children = getSlot(this);
    var groupPrefixCls = "".concat(prefixCls2, "-group");
    if (options2 && options2.length > 0) {
      children = this.getOptions().map(function(option) {
        return createVNode(Checkbox, {
          "prefixCls": prefixCls2,
          "key": option.value.toString(),
          "disabled": "disabled" in option ? option.disabled : props2.disabled,
          "indeterminate": option.indeterminate,
          "value": option.value,
          "checked": state.sValue.indexOf(option.value) !== -1,
          "onChange": option.onChange || noop$t,
          "class": "".concat(groupPrefixCls, "-item")
        }, {
          default: function _default8() {
            return [option.label];
          }
        });
      });
    }
    return createVNode("div", {
      "class": groupPrefixCls
    }, [children]);
  }
});
Checkbox.Group = CheckboxGroup;
Checkbox.install = function(app) {
  app.component(Checkbox.name, Checkbox);
  app.component(CheckboxGroup.name, CheckboxGroup);
  return app;
};
var commentProps = {
  actions: PropsTypes.array,
  author: PropsTypes.VNodeChild,
  avatar: PropsTypes.VNodeChild,
  content: PropsTypes.VNodeChild,
  prefixCls: PropsTypes.string,
  datetime: PropsTypes.VNodeChild
};
var Comment = defineComponent({
  name: "AComment",
  props: commentProps,
  slots: ["actions", "author", "avatar", "content", "datetime"],
  setup: function setup75(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("comment", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var renderNested = function renderNested2(prefixCls3, children) {
      return createVNode("div", {
        "class": "".concat(prefixCls3, "-nested")
      }, [children]);
    };
    var getAction2 = function getAction3(actions) {
      if (!actions || !actions.length) {
        return null;
      }
      var actionList = actions.map(function(action, index2) {
        return createVNode("li", {
          "key": "action-".concat(index2)
        }, [action]);
      });
      return actionList;
    };
    return function() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
      var pre = prefixCls2.value;
      var actions = (_a = props2.actions) !== null && _a !== void 0 ? _a : (_b = slots.actions) === null || _b === void 0 ? void 0 : _b.call(slots);
      var author = (_c = props2.author) !== null && _c !== void 0 ? _c : (_d = slots.author) === null || _d === void 0 ? void 0 : _d.call(slots);
      var avatar = (_e = props2.avatar) !== null && _e !== void 0 ? _e : (_f = slots.avatar) === null || _f === void 0 ? void 0 : _f.call(slots);
      var content = (_g = props2.content) !== null && _g !== void 0 ? _g : (_h = slots.content) === null || _h === void 0 ? void 0 : _h.call(slots);
      var datetime = (_j = props2.datetime) !== null && _j !== void 0 ? _j : (_k = slots.datetime) === null || _k === void 0 ? void 0 : _k.call(slots);
      var avatarDom = createVNode("div", {
        "class": "".concat(pre, "-avatar")
      }, [typeof avatar === "string" ? createVNode("img", {
        "src": avatar,
        "alt": "comment-avatar"
      }, null) : avatar]);
      var actionDom = actions ? createVNode("ul", {
        "class": "".concat(pre, "-actions")
      }, [getAction2(Array.isArray(actions) ? actions : [actions])]) : null;
      var authorContent = createVNode("div", {
        "class": "".concat(pre, "-content-author")
      }, [author && createVNode("span", {
        "class": "".concat(pre, "-content-author-name")
      }, [author]), datetime && createVNode("span", {
        "class": "".concat(pre, "-content-author-time")
      }, [datetime])]);
      var contentDom = createVNode("div", {
        "class": "".concat(pre, "-content")
      }, [authorContent, createVNode("div", {
        "class": "".concat(pre, "-content-detail")
      }, [content]), actionDom]);
      var comment = createVNode("div", {
        "class": "".concat(pre, "-inner")
      }, [avatarDom, contentDom]);
      var children = flattenChildren((_l = slots.default) === null || _l === void 0 ? void 0 : _l.call(slots));
      return createVNode("div", {
        "class": [pre, _defineProperty({}, "".concat(pre, "-rtl"), direction.value === "rtl")]
      }, [comment, children && children.length ? renderNested(pre, children) : null]);
    };
  }
});
var index$c = withInstall(Comment);
function goYear$3(direction) {
  this.changeYear(direction);
}
function noop$s() {
}
var MonthPanel = {
  name: "MonthPanel",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    cellRender: PropsTypes.any,
    contentRender: PropsTypes.any,
    locale: PropsTypes.any,
    rootPrefixCls: PropsTypes.string,
    disabledDate: PropsTypes.func,
    renderFooter: PropsTypes.func,
    changeYear: PropsTypes.func.def(noop$s)
  },
  data: function data26() {
    var value26 = this.value, defaultValue = this.defaultValue;
    this.nextYear = goYear$3.bind(this, 1);
    this.previousYear = goYear$3.bind(this, -1);
    return {
      sValue: value26 || defaultValue
    };
  },
  watch: {
    value: function value13(val) {
      this.setState({
        sValue: val
      });
    }
  },
  methods: {
    setAndSelectValue: function setAndSelectValue2(value26) {
      this.setValue(value26);
      this.__emit("select", value26);
    },
    setValue: function setValue6(value26) {
      if (hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
    }
  },
  render: function render67() {
    var sValue = this.sValue, cellRender = this.cellRender, contentRender = this.contentRender, locale2 = this.locale, rootPrefixCls = this.rootPrefixCls, disabledDate = this.disabledDate, renderFooter5 = this.renderFooter;
    var year = sValue.year();
    var prefixCls2 = "".concat(rootPrefixCls, "-month-panel");
    var footer = renderFooter5 && renderFooter5("month");
    return createVNode("div", {
      "class": prefixCls2
    }, [createVNode("div", null, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-year-btn"),
      "role": "button",
      "onClick": this.previousYear,
      "title": locale2.previousYear
    }, null), createVNode("a", {
      "class": "".concat(prefixCls2, "-year-select"),
      "role": "button",
      "onClick": this.$attrs.onYearPanelShow || noop$s,
      "title": locale2.yearSelect
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-year-select-content")
    }, [year]), createVNode("span", {
      "class": "".concat(prefixCls2, "-year-select-arrow")
    }, [createTextVNode("x")])]), createVNode("a", {
      "class": "".concat(prefixCls2, "-next-year-btn"),
      "role": "button",
      "onClick": this.nextYear,
      "title": locale2.nextYear
    }, null)]), createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode(MonthTable$1, {
      "disabledDate": disabledDate,
      "onSelect": this.setAndSelectValue,
      "locale": locale2,
      "value": sValue,
      "cellRender": cellRender,
      "contentRender": contentRender,
      "prefixCls": prefixCls2
    }, null)]), footer && createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footer])])]);
  }
};
var MonthPanel$1 = MonthPanel;
var ROW$1 = 4;
var COL$1 = 3;
function noop$r() {
}
function goYear$2(direction) {
  var value26 = this.sValue.clone();
  value26.add(direction, "year");
  this.setState({
    sValue: value26
  });
}
function chooseYear(year) {
  var value26 = this.sValue.clone();
  value26.year(year);
  value26.month(this.sValue.month());
  this.sValue = value26;
  this.__emit("select", value26);
}
var YearPanel = {
  name: "YearPanel",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    rootPrefixCls: PropsTypes.string,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    locale: PropsTypes.object,
    renderFooter: PropsTypes.func
  },
  data: function data27() {
    this.nextDecade = goYear$2.bind(this, 10);
    this.previousDecade = goYear$2.bind(this, -10);
    return {
      sValue: this.value || this.defaultValue
    };
  },
  watch: {
    value: function value14(val) {
      this.sValue = val;
    }
  },
  methods: {
    years: function years() {
      var value26 = this.sValue;
      var currentYear = value26.year();
      var startYear = parseInt(currentYear / 10, 10) * 10;
      var previousYear = startYear - 1;
      var years2 = [];
      var index2 = 0;
      for (var rowIndex = 0; rowIndex < ROW$1; rowIndex++) {
        years2[rowIndex] = [];
        for (var colIndex = 0; colIndex < COL$1; colIndex++) {
          var year = previousYear + index2;
          var content = String(year);
          years2[rowIndex][colIndex] = {
            content,
            year,
            title: content
          };
          index2++;
        }
      }
      return years2;
    }
  },
  render: function render68() {
    var _this = this;
    var value26 = this.sValue, locale2 = this.locale, renderFooter5 = this.renderFooter;
    var onDecadePanelShow = this.$attrs.onDecadePanelShow || noop$r;
    var years2 = this.years();
    var currentYear = value26.year();
    var startYear = parseInt(currentYear / 10, 10) * 10;
    var endYear = startYear + 9;
    var prefixCls2 = "".concat(this.rootPrefixCls, "-year-panel");
    var yeasEls = years2.map(function(row, index2) {
      var tds = row.map(function(yearData) {
        var _classNameMap;
        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, "".concat(prefixCls2, "-cell"), 1), _defineProperty(_classNameMap, "".concat(prefixCls2, "-selected-cell"), yearData.year === currentYear), _defineProperty(_classNameMap, "".concat(prefixCls2, "-last-decade-cell"), yearData.year < startYear), _defineProperty(_classNameMap, "".concat(prefixCls2, "-next-decade-cell"), yearData.year > endYear), _classNameMap);
        var clickHandler2 = noop$r;
        if (yearData.year < startYear) {
          clickHandler2 = _this.previousDecade;
        } else if (yearData.year > endYear) {
          clickHandler2 = _this.nextDecade;
        } else {
          clickHandler2 = chooseYear.bind(_this, yearData.year);
        }
        return createVNode("td", {
          "role": "gridcell",
          "title": yearData.title,
          "key": yearData.content,
          "onClick": clickHandler2,
          "class": classNameMap
        }, [createVNode("a", {
          "class": "".concat(prefixCls2, "-year")
        }, [yearData.content])]);
      });
      return createVNode("tr", {
        "key": index2,
        "role": "row"
      }, [tds]);
    });
    var footer = renderFooter5 && renderFooter5("year");
    return createVNode("div", {
      "class": prefixCls2
    }, [createVNode("div", null, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-decade-btn"),
      "role": "button",
      "onClick": this.previousDecade,
      "title": locale2.previousDecade
    }, null), createVNode("a", {
      "class": "".concat(prefixCls2, "-decade-select"),
      "role": "button",
      "onClick": onDecadePanelShow,
      "title": locale2.decadeSelect
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-decade-select-content")
    }, [startYear, createTextVNode("-"), endYear]), createVNode("span", {
      "class": "".concat(prefixCls2, "-decade-select-arrow")
    }, [createTextVNode("x")])]), createVNode("a", {
      "class": "".concat(prefixCls2, "-next-decade-btn"),
      "role": "button",
      "onClick": this.nextDecade,
      "title": locale2.nextDecade
    }, null)]), createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode("table", {
      "class": "".concat(prefixCls2, "-table"),
      "cellspacing": "0",
      "role": "grid"
    }, [createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [yeasEls])])]), footer && createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footer])])]);
  }
};
var ROW = 4;
var COL = 3;
function noop$q() {
}
function goYear$1(direction) {
  var next3 = this.sValue.clone();
  next3.add(direction, "years");
  this.setState({
    sValue: next3
  });
}
function chooseDecade(year, event) {
  var next3 = this.sValue.clone();
  next3.year(year);
  next3.month(this.sValue.month());
  this.__emit("select", next3);
  event.preventDefault();
}
var DecadePanel = {
  name: "DecadePanel",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    rootPrefixCls: PropsTypes.string,
    renderFooter: PropsTypes.func
  },
  data: function data28() {
    this.nextCentury = goYear$1.bind(this, 100);
    this.previousCentury = goYear$1.bind(this, -100);
    return {
      sValue: this.value || this.defaultValue
    };
  },
  watch: {
    value: function value15(val) {
      this.sValue = val;
    }
  },
  render: function render69() {
    var _this = this;
    var value26 = this.sValue;
    var _this$$props = this.$props, locale2 = _this$$props.locale, renderFooter5 = _this$$props.renderFooter;
    var currentYear = value26.year();
    var startYear = parseInt(currentYear / 100, 10) * 100;
    var preYear = startYear - 10;
    var endYear = startYear + 99;
    var decades = [];
    var index2 = 0;
    var prefixCls2 = "".concat(this.rootPrefixCls, "-decade-panel");
    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
      decades[rowIndex] = [];
      for (var colIndex = 0; colIndex < COL; colIndex++) {
        var startDecade = preYear + index2 * 10;
        var endDecade = preYear + index2 * 10 + 9;
        decades[rowIndex][colIndex] = {
          startDecade,
          endDecade
        };
        index2++;
      }
    }
    var footer = renderFooter5 && renderFooter5("decade");
    var decadesEls = decades.map(function(row, decadeIndex) {
      var tds = row.map(function(decadeData) {
        var _classNameMap;
        var dStartDecade = decadeData.startDecade;
        var dEndDecade = decadeData.endDecade;
        var isLast = dStartDecade < startYear;
        var isNext = dEndDecade > endYear;
        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, "".concat(prefixCls2, "-cell"), 1), _defineProperty(_classNameMap, "".concat(prefixCls2, "-selected-cell"), dStartDecade <= currentYear && currentYear <= dEndDecade), _defineProperty(_classNameMap, "".concat(prefixCls2, "-last-century-cell"), isLast), _defineProperty(_classNameMap, "".concat(prefixCls2, "-next-century-cell"), isNext), _classNameMap);
        var content = "".concat(dStartDecade, "-").concat(dEndDecade);
        var clickHandler2 = noop$q;
        if (isLast) {
          clickHandler2 = _this.previousCentury;
        } else if (isNext) {
          clickHandler2 = _this.nextCentury;
        } else {
          clickHandler2 = chooseDecade.bind(_this, dStartDecade);
        }
        return createVNode("td", {
          "key": dStartDecade,
          "onClick": clickHandler2,
          "role": "gridcell",
          "class": classNameMap
        }, [createVNode("a", {
          "class": "".concat(prefixCls2, "-decade")
        }, [content])]);
      });
      return createVNode("tr", {
        "key": decadeIndex,
        "role": "row"
      }, [tds]);
    });
    return createVNode("div", {
      "class": prefixCls2
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-century-btn"),
      "role": "button",
      "onClick": this.previousCentury,
      "title": locale2.previousCentury
    }, null), createVNode("div", {
      "class": "".concat(prefixCls2, "-century")
    }, [startYear, createTextVNode("-"), endYear]), createVNode("a", {
      "class": "".concat(prefixCls2, "-next-century-btn"),
      "role": "button",
      "onClick": this.nextCentury,
      "title": locale2.nextCentury
    }, null)]), createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode("table", {
      "class": "".concat(prefixCls2, "-table"),
      "cellspacing": "0",
      "role": "grid"
    }, [createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [decadesEls])])]), footer && createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footer])]);
  }
};
function noop$p() {
}
function goMonth(direction) {
  var next3 = this.value.clone();
  next3.add(direction, "months");
  this.__emit("valueChange", next3);
}
function goYear(direction) {
  var next3 = this.value.clone();
  next3.add(direction, "years");
  this.__emit("valueChange", next3);
}
function showIf(condition, el) {
  return condition ? el : null;
}
var CalendarHeader = {
  name: "CalendarHeader",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    value: PropsTypes.object,
    showTimePicker: PropsTypes.looseBool,
    locale: PropsTypes.object,
    enablePrev: PropsTypes.any.def(1),
    enableNext: PropsTypes.any.def(1),
    disabledMonth: PropsTypes.func,
    mode: PropsTypes.any,
    monthCellRender: PropsTypes.func,
    monthCellContentRender: PropsTypes.func,
    renderFooter: PropsTypes.func
  },
  data: function data29() {
    this.nextMonth = goMonth.bind(this, 1);
    this.previousMonth = goMonth.bind(this, -1);
    this.nextYear = goYear.bind(this, 1);
    this.previousYear = goYear.bind(this, -1);
    return {
      yearPanelReferer: null
    };
  },
  methods: {
    onMonthSelect: function onMonthSelect2(value26) {
      this.__emit("panelChange", value26, "date");
      if (this.$attrs.onMonthSelect) {
        this.__emit("monthSelect", value26);
      } else {
        this.__emit("valueChange", value26);
      }
    },
    onYearSelect: function onYearSelect(value26) {
      var referer = this.yearPanelReferer;
      this.setState({
        yearPanelReferer: null
      });
      this.__emit("panelChange", value26, referer);
      this.__emit("valueChange", value26);
    },
    onDecadeSelect: function onDecadeSelect(value26) {
      this.__emit("panelChange", value26, "year");
      this.__emit("valueChange", value26);
    },
    changeYear: function changeYear(direction) {
      if (direction > 0) {
        this.nextYear();
      } else {
        this.previousYear();
      }
    },
    monthYearElement: function monthYearElement(showTimePicker) {
      var _this = this;
      var props2 = this.$props;
      var prefixCls2 = props2.prefixCls;
      var locale2 = props2.locale;
      var value26 = props2.value;
      var localeData = value26.localeData();
      var monthBeforeYear = locale2.monthBeforeYear;
      var selectClassName = "".concat(prefixCls2, "-").concat(monthBeforeYear ? "my-select" : "ym-select");
      var timeClassName = showTimePicker ? " ".concat(prefixCls2, "-time-status") : "";
      var year = createVNode("a", {
        "class": "".concat(prefixCls2, "-year-select").concat(timeClassName),
        "role": "button",
        "onClick": showTimePicker ? noop$p : function() {
          return _this.showYearPanel("date");
        },
        "title": showTimePicker ? null : locale2.yearSelect
      }, [value26.format(locale2.yearFormat)]);
      var month = createVNode("a", {
        "class": "".concat(prefixCls2, "-month-select").concat(timeClassName),
        "role": "button",
        "onClick": showTimePicker ? noop$p : this.showMonthPanel,
        "title": showTimePicker ? null : locale2.monthSelect
      }, [locale2.monthFormat ? value26.format(locale2.monthFormat) : localeData.monthsShort(value26)]);
      var day;
      if (showTimePicker) {
        day = createVNode("a", {
          "class": "".concat(prefixCls2, "-day-select").concat(timeClassName),
          "role": "button"
        }, [value26.format(locale2.dayFormat)]);
      }
      var my = [];
      if (monthBeforeYear) {
        my = [month, day, year];
      } else {
        my = [year, month, day];
      }
      return createVNode("span", {
        "class": selectClassName
      }, [my]);
    },
    showMonthPanel: function showMonthPanel() {
      this.__emit("panelChange", null, "month");
    },
    showYearPanel: function showYearPanel(referer) {
      this.setState({
        yearPanelReferer: referer
      });
      this.__emit("panelChange", null, "year");
    },
    showDecadePanel: function showDecadePanel() {
      this.__emit("panelChange", null, "decade");
    }
  },
  render: function render70() {
    var _this2 = this;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, locale2 = props2.locale, mode4 = props2.mode, value26 = props2.value, showTimePicker = props2.showTimePicker, enableNext = props2.enableNext, enablePrev = props2.enablePrev, disabledMonth = props2.disabledMonth, renderFooter5 = props2.renderFooter;
    var panel = null;
    if (mode4 === "month") {
      panel = createVNode(MonthPanel$1, {
        "locale": locale2,
        "value": value26,
        "rootPrefixCls": prefixCls2,
        "onSelect": this.onMonthSelect,
        "onYearPanelShow": function onYearPanelShow() {
          return _this2.showYearPanel("month");
        },
        "disabledDate": disabledMonth,
        "cellRender": props2.monthCellRender,
        "contentRender": props2.monthCellContentRender,
        "renderFooter": renderFooter5,
        "changeYear": this.changeYear
      }, null);
    }
    if (mode4 === "year") {
      panel = createVNode(YearPanel, {
        "locale": locale2,
        "value": value26,
        "rootPrefixCls": prefixCls2,
        "onSelect": this.onYearSelect,
        "onDecadePanelShow": this.showDecadePanel,
        "renderFooter": renderFooter5
      }, null);
    }
    if (mode4 === "decade") {
      panel = createVNode(DecadePanel, {
        "locale": locale2,
        "value": value26,
        "rootPrefixCls": prefixCls2,
        "onSelect": this.onDecadeSelect,
        "renderFooter": renderFooter5
      }, null);
    }
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("div", {
      "style": {
        position: "relative"
      }
    }, [showIf(enablePrev && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-year-btn"),
      "role": "button",
      "onClick": this.previousYear,
      "title": locale2.previousYear
    }, null)), showIf(enablePrev && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-month-btn"),
      "role": "button",
      "onClick": this.previousMonth,
      "title": locale2.previousMonth
    }, null)), this.monthYearElement(showTimePicker), showIf(enableNext && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-next-month-btn"),
      "onClick": this.nextMonth,
      "title": locale2.nextMonth
    }, null)), showIf(enableNext && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-next-year-btn"),
      "onClick": this.nextYear,
      "title": locale2.nextYear
    }, null))]), panel]);
  }
};
var CalendarHeader$1 = CalendarHeader;
function noop$o() {
}
var TodayButton = function TodayButton2(_, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, locale2 = attrs.locale, value26 = attrs.value, timePicker = attrs.timePicker, disabled = attrs.disabled, disabledDate = attrs.disabledDate, onToday3 = attrs.onToday, text = attrs.text;
  var localeNow = (!text && timePicker ? locale2.now : text) || locale2.today;
  var disabledToday = disabledDate && !isAllowedDate(getTodayTime(value26), disabledDate);
  var isDisabled2 = disabledToday || disabled;
  var disabledTodayClass = isDisabled2 ? "".concat(prefixCls2, "-today-btn-disabled") : "";
  return createVNode("a", {
    "class": "".concat(prefixCls2, "-today-btn ").concat(disabledTodayClass),
    "role": "button",
    "onClick": isDisabled2 ? noop$o : onToday3,
    "title": getTodayTimeStr(value26)
  }, [localeNow]);
};
TodayButton.inheritAttrs = false;
var TodayButton$1 = TodayButton;
function noop$n() {
}
var OkButton = function OkButton2(_, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, locale2 = attrs.locale, okDisabled = attrs.okDisabled, onOk3 = attrs.onOk;
  var className = "".concat(prefixCls2, "-ok-btn");
  if (okDisabled) {
    className += " ".concat(prefixCls2, "-ok-btn-disabled");
  }
  return createVNode("a", {
    "class": className,
    "role": "button",
    "onClick": okDisabled ? noop$n : onOk3
  }, [locale2.ok]);
};
OkButton.inheritAttrs = false;
var OkButton$1 = OkButton;
function noop$m() {
}
var TimePickerButton = function TimePickerButton2(_, _ref) {
  var _className;
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, locale2 = attrs.locale, showTimePicker = attrs.showTimePicker, timePickerDisabled = attrs.timePickerDisabled, _attrs$onCloseTimePic = attrs.onCloseTimePicker, onCloseTimePicker2 = _attrs$onCloseTimePic === void 0 ? noop$m : _attrs$onCloseTimePic, _attrs$onOpenTimePick = attrs.onOpenTimePicker, onOpenTimePicker2 = _attrs$onOpenTimePick === void 0 ? noop$m : _attrs$onOpenTimePick;
  var className = (_className = {}, _defineProperty(_className, "".concat(prefixCls2, "-time-picker-btn"), true), _defineProperty(_className, "".concat(prefixCls2, "-time-picker-btn-disabled"), timePickerDisabled), _className);
  var onClick7 = noop$m;
  if (!timePickerDisabled) {
    onClick7 = showTimePicker ? onCloseTimePicker2 : onOpenTimePicker2;
  }
  return createVNode("a", {
    "class": className,
    "role": "button",
    "onClick": onClick7
  }, [showTimePicker ? locale2.dateSelect : locale2.timeSelect]);
};
TimePickerButton.inheritAttrs = false;
var TimePickerButton$1 = TimePickerButton;
var CalendarFooter = {
  name: "CalendarFooter",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    showDateInput: PropsTypes.looseBool,
    disabledTime: PropsTypes.any,
    timePicker: PropsTypes.any,
    selectedValue: PropsTypes.any,
    showOk: PropsTypes.looseBool,
    value: PropsTypes.object,
    renderFooter: PropsTypes.func,
    defaultValue: PropsTypes.object,
    locale: PropsTypes.object,
    showToday: PropsTypes.looseBool,
    disabledDate: PropsTypes.func,
    showTimePicker: PropsTypes.looseBool,
    okDisabled: PropsTypes.looseBool,
    mode: PropsTypes.string
  },
  methods: {
    onSelect: function onSelect2(value26) {
      this.__emit("select", value26);
    },
    getRootDOMNode: function getRootDOMNode() {
      return findDOMNode(this);
    }
  },
  render: function render71() {
    var props2 = getOptionProps(this);
    var value26 = props2.value, prefixCls2 = props2.prefixCls, showOk = props2.showOk, timePicker = props2.timePicker, renderFooter5 = props2.renderFooter, showToday = props2.showToday, mode4 = props2.mode;
    var footerEl = null;
    var extraFooter = renderFooter5 && renderFooter5(mode4);
    if (showToday || timePicker || extraFooter) {
      var _cls;
      var btnProps = _extends(_extends(_extends({}, props2), this.$attrs), {
        value: value26
      });
      var nowEl = null;
      if (showToday) {
        nowEl = createVNode(TodayButton$1, _objectSpread2({
          "key": "todayButton"
        }, btnProps), null);
      }
      delete btnProps.value;
      var okBtn = null;
      if (showOk === true || showOk !== false && !!timePicker) {
        okBtn = createVNode(OkButton$1, _objectSpread2({
          "key": "okButton"
        }, btnProps), null);
      }
      var timePickerBtn = null;
      if (timePicker) {
        timePickerBtn = createVNode(TimePickerButton$1, _objectSpread2({
          "key": "timePickerButton"
        }, btnProps), null);
      }
      var footerBtn;
      if (nowEl || timePickerBtn || okBtn || extraFooter) {
        footerBtn = createVNode("span", {
          "class": "".concat(prefixCls2, "-footer-btn")
        }, [extraFooter, nowEl, timePickerBtn, okBtn]);
      }
      var cls = (_cls = {}, _defineProperty(_cls, "".concat(prefixCls2, "-footer"), true), _defineProperty(_cls, "".concat(prefixCls2, "-footer-show-ok"), !!okBtn), _cls);
      footerEl = createVNode("div", {
        "class": cls
      }, [footerBtn]);
    }
    return footerEl;
  }
};
var CalendarFooter$1 = CalendarFooter;
var cachedSelectionStart;
var cachedSelectionEnd;
var dateInputInstance;
var DateInput = {
  name: "DateInput",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    timePicker: PropsTypes.object,
    value: PropsTypes.object,
    disabledTime: PropsTypes.any,
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string), PropsTypes.func]),
    locale: PropsTypes.object,
    disabledDate: PropsTypes.func,
    placeholder: PropsTypes.string,
    selectedValue: PropsTypes.object,
    clearIcon: PropsTypes.any,
    inputMode: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    showClear: PropsTypes.looseBool
  },
  data: function data30() {
    var selectedValue6 = this.selectedValue;
    return {
      str: formatDate$1(selectedValue6, this.format),
      invalid: false,
      hasFocus: false
    };
  },
  watch: {
    selectedValue: function selectedValue3() {
      this.setState();
    },
    format: function format() {
      this.setState();
    }
  },
  updated: function updated8() {
    var _this = this;
    this.$nextTick(function() {
      if (dateInputInstance && _this.$data.hasFocus && !_this.invalid && !(cachedSelectionStart === 0 && cachedSelectionEnd === 0)) {
        dateInputInstance.setSelectionRange(cachedSelectionStart, cachedSelectionEnd);
      }
    });
  },
  getInstance: function getInstance() {
    return dateInputInstance;
  },
  methods: {
    getDerivedStateFromProps: function getDerivedStateFromProps(nextProps, state) {
      var newState = {};
      if (dateInputInstance) {
        cachedSelectionStart = dateInputInstance.selectionStart;
        cachedSelectionEnd = dateInputInstance.selectionEnd;
      }
      var selectedValue6 = nextProps.selectedValue;
      if (!state.hasFocus) {
        newState = {
          str: formatDate$1(selectedValue6, this.format),
          invalid: false
        };
      }
      return newState;
    },
    onClear: function onClear() {
      this.setState({
        str: ""
      });
      this.__emit("clear", null);
    },
    onInputChange: function onInputChange(e) {
      var _e$target = e.target, str = _e$target.value, composing = _e$target.composing;
      var _this$str = this.str, oldStr = _this$str === void 0 ? "" : _this$str;
      if (e.isComposing || composing || oldStr === str)
        return;
      var _this$$props = this.$props, disabledDate = _this$$props.disabledDate, format3 = _this$$props.format, selectedValue6 = _this$$props.selectedValue;
      if (!str) {
        this.__emit("change", null);
        this.setState({
          invalid: false,
          str
        });
        return;
      }
      var parsed = hooks(str, format3, true);
      if (!parsed.isValid()) {
        this.setState({
          invalid: true,
          str
        });
        return;
      }
      var value26 = this.value.clone();
      value26.year(parsed.year()).month(parsed.month()).date(parsed.date()).hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());
      if (!value26 || disabledDate && disabledDate(value26)) {
        this.setState({
          invalid: true,
          str
        });
        return;
      }
      if (selectedValue6 !== value26 || selectedValue6 && value26 && !selectedValue6.isSame(value26)) {
        this.setState({
          invalid: false,
          str
        });
        this.__emit("change", value26);
      }
    },
    onFocus: function onFocus2() {
      this.setState({
        hasFocus: true
      });
    },
    onBlur: function onBlur2() {
      this.setState(function(prevState, prevProps) {
        return {
          hasFocus: false,
          str: formatDate$1(prevProps.value, prevProps.format)
        };
      });
    },
    onKeyDown: function onKeyDown3(event) {
      var keyCode = event.keyCode;
      var _this$$props2 = this.$props, value26 = _this$$props2.value, disabledDate = _this$$props2.disabledDate;
      if (keyCode === KeyCode$2.ENTER) {
        var validateDate = !disabledDate || !disabledDate(value26);
        if (validateDate) {
          this.__emit("select", value26.clone());
        }
        event.preventDefault();
      }
    },
    getRootDOMNode: function getRootDOMNode2() {
      return findDOMNode(this);
    },
    focus: function focus11() {
      if (dateInputInstance) {
        dateInputInstance.focus();
      }
    },
    saveDateInput: function saveDateInput(dateInput) {
      dateInputInstance = dateInput;
    }
  },
  render: function render72() {
    var invalid = this.invalid, str = this.str, locale2 = this.locale, prefixCls2 = this.prefixCls, placeholder = this.placeholder, disabled = this.disabled, showClear = this.showClear, inputMode = this.inputMode, inputReadOnly = this.inputReadOnly;
    var clearIcon = getComponent(this, "clearIcon");
    var invalidClass = invalid ? "".concat(prefixCls2, "-input-invalid") : "";
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-input-wrap")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-date-input-wrap")
    }, [withDirectives(createVNode("input", {
      "ref": this.saveDateInput,
      "class": "".concat(prefixCls2, "-input ").concat(invalidClass),
      "value": str,
      "disabled": disabled,
      "placeholder": placeholder,
      "onInput": this.onInputChange,
      "onChange": this.onInputChange,
      "onKeydown": this.onKeyDown,
      "onFocus": this.onFocus,
      "onBlur": this.onBlur,
      "inputMode": inputMode,
      "readonly": inputReadOnly
    }, null), [[antInput$1]])]), showClear ? createVNode("a", {
      "role": "button",
      "title": locale2.clear,
      "onClick": this.onClear
    }, [clearIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-clear-btn")
    }, null)]) : null]);
  }
};
var DateInput$1 = DateInput;
function goStartMonth(time) {
  return time.clone().startOf("month");
}
function goEndMonth(time) {
  return time.clone().endOf("month");
}
function goTime(time, direction, unit) {
  return time.clone().add(direction, unit);
}
function includesTime() {
  var timeList = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var time = arguments.length > 1 ? arguments[1] : void 0;
  var unit = arguments.length > 2 ? arguments[2] : void 0;
  return timeList.some(function(t) {
    return t.isSame(time, unit);
  });
}
var getMomentObjectIfValid = function getMomentObjectIfValid2(date) {
  if (hooks.isMoment(date) && date.isValid()) {
    return date;
  }
  return false;
};
var Calendar = defineComponent({
  name: "Calendar",
  mixins: [BaseMixin, CommonMixin, CalendarMixin$1],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string), PropsTypes.func]),
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    defaultValue: PropsTypes.object,
    value: PropsTypes.object,
    selectedValue: PropsTypes.object,
    defaultSelectedValue: PropsTypes.object,
    mode: PropsTypes.oneOf(["time", "date", "month", "year", "decade"]),
    showDateInput: PropsTypes.looseBool.def(true),
    showWeekNumber: PropsTypes.looseBool,
    showToday: PropsTypes.looseBool.def(true),
    showOk: PropsTypes.looseBool,
    timePicker: PropsTypes.any,
    dateInputPlaceholder: PropsTypes.any,
    disabledDate: PropsTypes.func,
    disabledTime: PropsTypes.any,
    dateRender: PropsTypes.func,
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    }),
    clearIcon: PropsTypes.any,
    focusablePanel: PropsTypes.looseBool.def(true),
    inputMode: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool,
    monthCellRender: PropsTypes.func,
    monthCellContentRender: PropsTypes.func
  },
  data: function data31() {
    var props2 = this.$props;
    return {
      sMode: this.mode || "date",
      sValue: getMomentObjectIfValid(props2.value) || getMomentObjectIfValid(props2.defaultValue) || hooks(),
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  watch: {
    mode: function mode2(val) {
      this.setState({
        sMode: val
      });
    },
    value: function value16(val) {
      this.setState({
        sValue: getMomentObjectIfValid(val) || getMomentObjectIfValid(this.defaultValue) || getNowByCurrentStateValue(this.sValue)
      });
    },
    selectedValue: function selectedValue4(val) {
      this.setState({
        sSelectedValue: val
      });
    }
  },
  mounted: function mounted16() {
    var _this = this;
    this.$nextTick(function() {
      _this.saveFocusElement(DateInput$1.getInstance());
    });
  },
  methods: {
    onPanelChange: function onPanelChange(value26, mode4) {
      var sValue = this.sValue;
      if (!hasProp(this, "mode")) {
        this.setState({
          sMode: mode4
        });
      }
      this.__emit("panelChange", value26 || sValue, mode4);
    },
    onKeyDown: function onKeyDown4(event) {
      if (event.target.nodeName.toLowerCase() === "input") {
        return void 0;
      }
      var keyCode = event.keyCode;
      var ctrlKey = event.ctrlKey || event.metaKey;
      var disabledDate = this.disabledDate, value26 = this.sValue;
      switch (keyCode) {
        case KeyCode$2.DOWN:
          this.goTime(1, "weeks");
          event.preventDefault();
          return 1;
        case KeyCode$2.UP:
          this.goTime(-1, "weeks");
          event.preventDefault();
          return 1;
        case KeyCode$2.LEFT:
          if (ctrlKey) {
            this.goTime(-1, "years");
          } else {
            this.goTime(-1, "days");
          }
          event.preventDefault();
          return 1;
        case KeyCode$2.RIGHT:
          if (ctrlKey) {
            this.goTime(1, "years");
          } else {
            this.goTime(1, "days");
          }
          event.preventDefault();
          return 1;
        case KeyCode$2.HOME:
          this.setValue(goStartMonth(value26));
          event.preventDefault();
          return 1;
        case KeyCode$2.END:
          this.setValue(goEndMonth(value26));
          event.preventDefault();
          return 1;
        case KeyCode$2.PAGE_DOWN:
          this.goTime(1, "month");
          event.preventDefault();
          return 1;
        case KeyCode$2.PAGE_UP:
          this.goTime(-1, "month");
          event.preventDefault();
          return 1;
        case KeyCode$2.ENTER:
          if (!disabledDate || !disabledDate(value26)) {
            this.onSelect(value26, {
              source: "keyboard"
            });
          }
          event.preventDefault();
          return 1;
        default:
          this.__emit("keydown", event);
          return 1;
      }
    },
    onClear: function onClear2() {
      this.onSelect(null);
      this.__emit("clear");
    },
    onOk: function onOk() {
      var sSelectedValue = this.sSelectedValue;
      if (this.isAllowedDate(sSelectedValue)) {
        this.__emit("ok", sSelectedValue);
      }
    },
    onDateInputChange: function onDateInputChange(value26) {
      this.onSelect(value26, {
        source: "dateInput"
      });
    },
    onDateInputSelect: function onDateInputSelect(value26) {
      this.onSelect(value26, {
        source: "dateInputSelect"
      });
    },
    onDateTableSelect: function onDateTableSelect(value26) {
      var timePicker = this.timePicker, sSelectedValue = this.sSelectedValue;
      if (!sSelectedValue && timePicker) {
        var timePickerProps3 = getOptionProps(timePicker);
        var timePickerDefaultValue = timePickerProps3.defaultValue;
        if (timePickerDefaultValue) {
          syncTime(timePickerDefaultValue, value26);
        }
      }
      this.onSelect(value26);
    },
    onToday: function onToday() {
      var sValue = this.sValue;
      var now2 = getTodayTime(sValue);
      this.onSelect(now2, {
        source: "todayButton"
      });
    },
    onBlur: function onBlur3(event) {
      var _this2 = this;
      setTimeout(function() {
        var dateInput = DateInput$1.getInstance();
        var rootInstance = _this2.rootInstance;
        if (!rootInstance || rootInstance.contains(document.activeElement) || dateInput && dateInput.contains(document.activeElement)) {
          return;
        }
        _this2.__emit("blur", event);
      }, 0);
    },
    getRootDOMNode: function getRootDOMNode3() {
      return findDOMNode(this);
    },
    openTimePicker: function openTimePicker() {
      this.onPanelChange(null, "time");
    },
    closeTimePicker: function closeTimePicker() {
      this.onPanelChange(null, "date");
    },
    goTime: function goTime$1(direction, unit) {
      this.setValue(goTime(this.sValue, direction, unit));
    }
  },
  render: function render73() {
    var locale2 = this.locale, prefixCls2 = this.prefixCls, disabledDate = this.disabledDate, dateInputPlaceholder = this.dateInputPlaceholder, timePicker = this.timePicker, disabledTime = this.disabledTime, showDateInput = this.showDateInput, sValue = this.sValue, sSelectedValue = this.sSelectedValue, sMode = this.sMode, renderFooter5 = this.renderFooter, inputMode = this.inputMode, inputReadOnly = this.inputReadOnly, monthCellRender = this.monthCellRender, monthCellContentRender = this.monthCellContentRender, props2 = this.$props;
    var clearIcon = getComponent(this, "clearIcon");
    var showTimePicker = sMode === "time";
    var disabledTimeConfig = showTimePicker && disabledTime && timePicker ? getTimeConfig(sSelectedValue, disabledTime) : null;
    var timePickerEle = null;
    if (timePicker && showTimePicker) {
      var timePickerOriginProps = getOptionProps(timePicker);
      var timePickerProps3 = _extends(_extends(_extends({
        showHour: true,
        showSecond: true,
        showMinute: true
      }, timePickerOriginProps), disabledTimeConfig), {
        value: sSelectedValue,
        disabledTime,
        onChange: this.onDateInputChange
      });
      if (timePickerOriginProps.defaultValue !== void 0) {
        timePickerProps3.defaultOpenValue = timePickerOriginProps.defaultValue;
      }
      timePickerEle = cloneElement(timePicker, timePickerProps3);
    }
    var dateInputElement = showDateInput ? createVNode(DateInput$1, {
      "format": this.getFormat(),
      "key": "date-input",
      "value": sValue,
      "locale": locale2,
      "placeholder": dateInputPlaceholder,
      "showClear": true,
      "disabledTime": disabledTime,
      "disabledDate": disabledDate,
      "onClear": this.onClear,
      "prefixCls": prefixCls2,
      "selectedValue": sSelectedValue,
      "onChange": this.onDateInputChange,
      "clearIcon": clearIcon,
      "onSelect": this.onDateInputSelect,
      "inputMode": inputMode,
      "inputReadOnly": inputReadOnly
    }, null) : null;
    var children = [];
    if (props2.renderSidebar) {
      children.push(props2.renderSidebar());
    }
    children.push(createVNode("div", {
      "class": "".concat(prefixCls2, "-panel"),
      "key": "panel"
    }, [dateInputElement, createVNode("div", {
      "tabindex": props2.focusablePanel ? 0 : void 0,
      "class": "".concat(prefixCls2, "-date-panel")
    }, [createVNode(CalendarHeader$1, {
      "locale": locale2,
      "mode": sMode,
      "value": sValue,
      "onValueChange": this.setValue,
      "onPanelChange": this.onPanelChange,
      "renderFooter": renderFooter5,
      "showTimePicker": showTimePicker,
      "prefixCls": prefixCls2,
      "monthCellRender": monthCellRender,
      "monthCellContentRender": monthCellContentRender
    }, null), timePicker && showTimePicker ? createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker-panel")
    }, [timePickerEle])]) : null, createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode(DateTable$1, {
      "locale": locale2,
      "value": sValue,
      "selectedValue": sSelectedValue,
      "prefixCls": prefixCls2,
      "dateRender": props2.dateRender,
      "onSelect": this.onDateTableSelect,
      "disabledDate": disabledDate,
      "showWeekNumber": props2.showWeekNumber
    }, null)]), createVNode(CalendarFooter$1, {
      "showOk": props2.showOk,
      "mode": sMode,
      "renderFooter": props2.renderFooter,
      "locale": locale2,
      "prefixCls": prefixCls2,
      "showToday": props2.showToday,
      "disabledTime": disabledTime,
      "showTimePicker": showTimePicker,
      "showDateInput": props2.showDateInput,
      "timePicker": timePicker,
      "selectedValue": sSelectedValue,
      "timePickerDisabled": !sSelectedValue,
      "value": sValue,
      "disabledDate": disabledDate,
      "okDisabled": props2.showOk !== false && (!sSelectedValue || !this.isAllowedDate(sSelectedValue)),
      "onOk": this.onOk,
      "onSelect": this.onSelect,
      "onToday": this.onToday,
      "onOpenTimePicker": this.openTimePicker,
      "onCloseTimePicker": this.closeTimePicker
    }, null)])]));
    return this.renderRoot({
      children,
      class: props2.showWeekNumber ? "".concat(prefixCls2, "-week-number") : ""
    });
  }
});
var Calendar$1 = Calendar;
var MonthCalendar = defineComponent({
  name: "MonthCalendar",
  mixins: [BaseMixin, CommonMixin, CalendarMixin$1],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    format: PropsTypes.string,
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    monthCellRender: PropsTypes.func,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    selectedValue: PropsTypes.object,
    defaultSelectedValue: PropsTypes.object,
    disabledDate: PropsTypes.func,
    monthCellContentRender: PropsTypes.func,
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    })
  },
  data: function data32() {
    var props2 = this.$props;
    return {
      mode: "month",
      sValue: props2.value || props2.defaultValue || hooks(),
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  methods: {
    onKeyDown: function onKeyDown5(event) {
      var keyCode = event.keyCode;
      var ctrlKey = event.ctrlKey || event.metaKey;
      var stateValue = this.sValue;
      var disabledDate = this.disabledDate;
      var value26 = stateValue;
      switch (keyCode) {
        case KeyCode$2.DOWN:
          value26 = stateValue.clone();
          value26.add(3, "months");
          break;
        case KeyCode$2.UP:
          value26 = stateValue.clone();
          value26.add(-3, "months");
          break;
        case KeyCode$2.LEFT:
          value26 = stateValue.clone();
          if (ctrlKey) {
            value26.add(-1, "years");
          } else {
            value26.add(-1, "months");
          }
          break;
        case KeyCode$2.RIGHT:
          value26 = stateValue.clone();
          if (ctrlKey) {
            value26.add(1, "years");
          } else {
            value26.add(1, "months");
          }
          break;
        case KeyCode$2.ENTER:
          if (!disabledDate || !disabledDate(stateValue)) {
            this.onSelect(stateValue);
          }
          event.preventDefault();
          return 1;
        default:
          return void 0;
      }
      if (value26 !== stateValue) {
        this.setValue(value26);
        event.preventDefault();
        return 1;
      }
    },
    handlePanelChange: function handlePanelChange(_, mode4) {
      if (mode4 !== "date") {
        this.setState({
          mode: mode4
        });
      }
    }
  },
  render: function render74() {
    var mode4 = this.mode, value26 = this.sValue, props2 = this.$props, $slots = this.$slots;
    var prefixCls2 = props2.prefixCls, locale2 = props2.locale, disabledDate = props2.disabledDate;
    var monthCellRender = this.monthCellRender || $slots.monthCellRender;
    var monthCellContentRender = this.monthCellContentRender || $slots.monthCellContentRender;
    var renderFooter5 = this.renderFooter || $slots.renderFooter;
    var children = createVNode("div", {
      "class": "".concat(prefixCls2, "-month-calendar-content")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-month-header-wrap")
    }, [createVNode(CalendarHeader$1, {
      "prefixCls": prefixCls2,
      "mode": mode4,
      "value": value26,
      "locale": locale2,
      "disabledMonth": disabledDate,
      "monthCellRender": monthCellRender,
      "monthCellContentRender": monthCellContentRender,
      "onMonthSelect": this.onSelect,
      "onValueChange": this.setValue,
      "onPanelChange": this.handlePanelChange
    }, null)]), createVNode(CalendarFooter$1, {
      "prefixCls": prefixCls2,
      "renderFooter": renderFooter5
    }, null)]);
    return this.renderRoot({
      class: "".concat(props2.prefixCls, "-month-calendar"),
      children
    });
  }
});
var MonthCalendar$1 = MonthCalendar;
function createChainedFunction() {
  var args = [].slice.call(arguments, 0);
  if (args.length === 1) {
    return args[0];
  }
  return function chainedFunction() {
    for (var i = 0; i < args.length; i++) {
      if (args[i] && args[i].apply) {
        args[i].apply(this, arguments);
      }
    }
  };
}
var autoAdjustOverflow$1 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset$1 = [0, 0];
var placements$2 = {
  bottomLeft: {
    points: ["tl", "tl"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -3],
    targetOffset: targetOffset$1
  },
  bottomRight: {
    points: ["tr", "tr"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -3],
    targetOffset: targetOffset$1
  },
  topRight: {
    points: ["br", "br"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 3],
    targetOffset: targetOffset$1
  },
  topLeft: {
    points: ["bl", "bl"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 3],
    targetOffset: targetOffset$1
  }
};
var placements$3 = placements$2;
var TimeType = {
  validator: function validator3(value26) {
    if (Array.isArray(value26)) {
      return value26.length === 0 || value26.findIndex(function(val) {
        return !isNil(val) && !hooks.isMoment(val);
      }) === -1;
    } else {
      return isNil(value26) || hooks.isMoment(value26);
    }
  }
};
function refFn$1(field, component) {
  this[field] = component;
}
var Picker = defineComponent({
  name: "Picker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    animation: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.string]),
    disabled: PropsTypes.looseBool,
    transitionName: PropsTypes.string,
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array, PropsTypes.func]),
    getCalendarContainer: PropsTypes.func,
    calendar: PropsTypes.any,
    open: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool.def(false),
    prefixCls: PropsTypes.string.def("rc-calendar-picker"),
    placement: PropsTypes.any.def("bottomLeft"),
    value: TimeType,
    defaultValue: TimeType,
    align: PropsTypes.object.def(function() {
      return {};
    }),
    dropdownClassName: PropsTypes.string,
    dateRender: PropsTypes.func,
    children: PropsTypes.func
  },
  data: function data33() {
    var props2 = this.$props;
    this.calendarElement = null;
    this.saveCalendarRef = refFn$1.bind(this, "calendarInstance");
    var open6;
    if (hasProp(this, "open")) {
      open6 = props2.open;
    } else {
      open6 = props2.defaultOpen;
    }
    var value26 = props2.value || props2.defaultValue;
    return {
      sOpen: open6,
      sValue: value26
    };
  },
  watch: {
    value: function value17(val) {
      this.setState({
        sValue: val
      });
    },
    open: function open2(val) {
      this.setState({
        sOpen: val
      });
    }
  },
  mounted: function mounted17() {
    this.preSOpen = this.sOpen;
  },
  updated: function updated9() {
    if (!this.preSOpen && this.sOpen) {
      this.focusTimeout = setTimeout(this.focusCalendar, 100);
    }
    this.preSOpen = this.sOpen;
  },
  beforeUnmount: function beforeUnmount13() {
    clearTimeout(this.focusTimeout);
  },
  methods: {
    onCalendarKeyDown: function onCalendarKeyDown(event) {
      if (event.keyCode === KeyCode$2.ESC) {
        event.stopPropagation();
        this.closeCalendar(this.focus);
      }
    },
    onCalendarSelect: function onCalendarSelect(value26) {
      var cause = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var props2 = this.$props;
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      var calendarProps = getOptionProps(props2.calendar);
      if (cause.source === "keyboard" || cause.source === "dateInputSelect" || !calendarProps.timePicker && cause.source !== "dateInput" || cause.source === "todayButton") {
        this.closeCalendar(this.focus);
      }
      this.__emit("change", value26);
    },
    onKeyDown: function onKeyDown6(event) {
      if (!this.sOpen && (event.keyCode === KeyCode$2.DOWN || event.keyCode === KeyCode$2.ENTER)) {
        this.openCalendar();
        event.preventDefault();
      }
    },
    onCalendarOk: function onCalendarOk() {
      this.closeCalendar(this.focus);
    },
    onCalendarClear: function onCalendarClear() {
      this.closeCalendar(this.focus);
    },
    onCalendarBlur: function onCalendarBlur() {
      this.setOpen(false);
    },
    onVisibleChange: function onVisibleChange3(open6) {
      this.setOpen(open6);
    },
    getCalendarElement: function getCalendarElement() {
      var props2 = this.$props;
      var calendarProps = getOptionProps(props2.calendar);
      var calendarEvents = getEvents(props2.calendar);
      var value26 = this.sValue;
      var defaultValue = value26;
      var extraProps = {
        ref: this.saveCalendarRef,
        defaultValue: defaultValue || calendarProps.defaultValue,
        selectedValue: value26,
        onKeydown: this.onCalendarKeyDown,
        onOk: createChainedFunction(calendarEvents.onOk, this.onCalendarOk),
        onSelect: createChainedFunction(calendarEvents.onSelect, this.onCalendarSelect),
        onClear: createChainedFunction(calendarEvents.onClear, this.onCalendarClear),
        onBlur: createChainedFunction(calendarEvents.onBlur, this.onCalendarBlur)
      };
      return cloneElement(props2.calendar, extraProps);
    },
    setOpen: function setOpen(open6, callback) {
      if (this.sOpen !== open6) {
        if (!hasProp(this, "open")) {
          this.setState({
            sOpen: open6
          }, callback);
        }
        this.__emit("openChange", open6);
      }
    },
    openCalendar: function openCalendar(callback) {
      this.setOpen(true, callback);
    },
    closeCalendar: function closeCalendar(callback) {
      this.setOpen(false, callback);
    },
    focus: function focus12() {
      if (!this.sOpen) {
        findDOMNode(this).focus();
      }
    },
    focusCalendar: function focusCalendar() {
      if (this.sOpen && !!this.calendarInstance) {
        this.calendarInstance.focus();
      }
    }
  },
  render: function render75() {
    var _this = this;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, placement2 = props2.placement, getCalendarContainer = props2.getCalendarContainer, align = props2.align, animation2 = props2.animation, disabled = props2.disabled, dropdownClassName = props2.dropdownClassName, transitionName2 = props2.transitionName;
    var sValue = this.sValue, sOpen2 = this.sOpen;
    var childrenState = {
      value: sValue,
      open: sOpen2
    };
    var children = this.$slots.default(childrenState);
    if (this.sOpen || !this.calendarElement) {
      this.calendarElement = this.getCalendarElement();
    }
    return createVNode(Trigger, {
      "popupAlign": align,
      "builtinPlacements": placements$3,
      "popupPlacement": placement2,
      "action": disabled && !sOpen2 ? [] : ["click"],
      "destroyPopupOnHide": true,
      "getPopupContainer": getCalendarContainer,
      "popupStyle": this.$attrs.style || {},
      "popupAnimation": animation2,
      "popupTransitionName": transitionName2,
      "popupVisible": sOpen2,
      "onPopupVisibleChange": this.onVisibleChange,
      "prefixCls": prefixCls2,
      "popupClassName": dropdownClassName,
      "popup": this.calendarElement
    }, {
      default: function _default8() {
        return [cloneElement(children, {
          onKeydown: _this.onKeyDown
        })];
      }
    });
  }
});
var VcDatePicker = Picker;
function formatDate(value26, format3) {
  if (!value26) {
    return "";
  }
  if (Array.isArray(format3)) {
    format3 = format3[0];
  }
  if (typeof format3 === "function") {
    return format3(value26);
  }
  return value26.format(format3);
}
function createPicker(TheCalendar, props2, name2) {
  return defineComponent({
    name: name2,
    mixins: [BaseMixin],
    inheritAttrs: false,
    props: _extends(_extends({}, props2), {
      allowClear: PropsTypes.looseBool.def(true),
      showToday: PropsTypes.looseBool.def(true)
    }),
    setup: function setup161() {
      return {
        configProvider: inject("configProvider", defaultConfigProvider),
        input: void 0,
        sPrefixCls: void 0
      };
    },
    data: function data79() {
      var value26 = this.value || this.defaultValue;
      return {
        sValue: value26,
        showDate: value26,
        sOpen: !!this.open
      };
    },
    watch: {
      open: function open6(val) {
        var props3 = getOptionProps(this);
        var state = {};
        state.sOpen = val;
        if ("value" in props3 && !val && props3.value !== this.showDate) {
          state.showDate = props3.value;
        }
        this.setState(state);
      },
      value: function value26(val) {
        var state = {};
        state.sValue = val;
        if (val !== this.sValue) {
          state.showDate = val;
        }
        this.setState(state);
      },
      sOpen: function sOpen2(val, oldVal) {
        var _this = this;
        nextTick(function() {
          if (!hasProp(_this, "open") && oldVal && !val) {
            _this.focus();
          }
        });
      }
    },
    methods: {
      saveInput: function saveInput7(node) {
        this.input = node;
      },
      clearSelection: function clearSelection4(e) {
        e.preventDefault();
        e.stopPropagation();
        this.handleChange(null);
      },
      handleChange: function handleChange22(value26) {
        if (!hasProp(this, "value")) {
          this.setState({
            sValue: value26,
            showDate: value26
          });
        }
        this.$emit("change", value26, formatDate(value26, this.format));
      },
      handleCalendarChange: function handleCalendarChange(value26) {
        this.setState({
          showDate: value26
        });
      },
      handleOpenChange: function handleOpenChange3(open6) {
        var props3 = getOptionProps(this);
        if (!("open" in props3)) {
          this.setState({
            sOpen: open6
          });
        }
        this.$emit("openChange", open6);
      },
      focus: function focus27() {
        var _a;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus();
      },
      blur: function blur24() {
        var _a;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.blur();
      },
      renderFooter: function renderFooter5() {
        var $slots = this.$slots, prefixCls2 = this.sPrefixCls;
        var renderExtraFooter = this.renderExtraFooter || $slots.renderExtraFooter;
        return renderExtraFooter ? createVNode("div", {
          "class": "".concat(prefixCls2, "-footer-extra")
        }, [typeof renderExtraFooter === "function" ? renderExtraFooter.apply(void 0, arguments) : renderExtraFooter]) : null;
      },
      onMouseEnter: function onMouseEnter4(e) {
        this.$emit("mouseenter", e);
      },
      onMouseLeave: function onMouseLeave5(e) {
        this.$emit("mouseleave", e);
      }
    },
    render: function render165() {
      var _classNames, _this2 = this;
      var $slots = this.$slots;
      var _this$$data = this.$data, value26 = _this$$data.sValue, showDate = _this$$data.showDate, open6 = _this$$data.sOpen;
      var suffixIcon = getComponent(this, "suffixIcon");
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var props3 = omit$1(_extends(_extends({}, getOptionProps(this)), this.$attrs), ["onChange"]);
      var customizePrefixCls = props3.prefixCls, locale2 = props3.locale, localeCode = props3.localeCode, inputReadOnly = props3.inputReadOnly;
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
      this.sPrefixCls = prefixCls2;
      var dateRender = props3.dateRender || $slots.dateRender;
      var monthCellContentRender = props3.monthCellContentRender || $slots.monthCellContentRender;
      var placeholder = "placeholder" in props3 ? props3.placeholder : locale2.lang.placeholder;
      var disabledTime = props3.showTime ? props3.disabledTime : null;
      var calendarClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-time"), props3.showTime), _defineProperty(_classNames, "".concat(prefixCls2, "-month"), MonthCalendar$1 === TheCalendar), _classNames));
      if (value26 && localeCode) {
        value26.locale(localeCode);
      }
      var pickerProps = {};
      var calendarProps = {};
      var pickerStyle = {};
      if (props3.showTime) {
        calendarProps.onSelect = this.handleChange;
        pickerStyle.minWidth = "195px";
      } else {
        pickerProps.onChange = this.handleChange;
      }
      if ("mode" in props3) {
        calendarProps.mode = props3.mode;
      }
      var theCalendarProps = _extends(_extends({}, calendarProps), {
        disabledDate: props3.disabledDate,
        disabledTime,
        locale: locale2.lang,
        timePicker: props3.timePicker,
        defaultValue: props3.defaultPickerValue || interopDefault(hooks)(),
        dateInputPlaceholder: placeholder,
        prefixCls: prefixCls2,
        dateRender,
        format: props3.format,
        showToday: props3.showToday,
        monthCellContentRender,
        renderFooter: this.renderFooter,
        value: showDate,
        inputReadOnly,
        onOk: props3.onOk,
        onPanelChange: props3.onPanelChange,
        onChange: this.handleCalendarChange,
        class: calendarClassName
      });
      var calendar = createVNode(TheCalendar, theCalendarProps, $slots);
      var clearIcon = !props3.disabled && props3.allowClear && value26 ? createVNode(CloseCircleFilled, {
        "class": "".concat(prefixCls2, "-picker-clear"),
        "onClick": this.clearSelection
      }, null) : null;
      var inputIcon = suffixIcon && (isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
        class: "".concat(prefixCls2, "-picker-icon")
      }) : createVNode("span", {
        "class": "".concat(prefixCls2, "-picker-icon")
      }, [suffixIcon])) || createVNode(CalendarOutlined, {
        "class": "".concat(prefixCls2, "-picker-icon")
      }, null);
      var input = function input2(_ref) {
        var inputValue = _ref.value;
        return createVNode("div", null, [createVNode("input", {
          "ref": _this2.saveInput,
          "disabled": props3.disabled,
          "onFocus": props3.onFocus,
          "onBlur": props3.onBlur,
          "readonly": true,
          "value": formatDate(inputValue, _this2.format),
          "placeholder": placeholder,
          "class": props3.pickerInputClass,
          "tabindex": props3.tabindex,
          "name": _this2.name
        }, null), clearIcon, inputIcon]);
      };
      var vcDatePickerProps = _extends(_extends(_extends({}, props3), pickerProps), {
        calendar,
        value: value26,
        prefixCls: "".concat(prefixCls2, "-picker-container"),
        open: open6,
        onOpenChange: this.handleOpenChange,
        style: props3.popupStyle
      });
      return createVNode("span", _objectSpread2(_objectSpread2({
        "id": props3.id,
        "class": classNames(props3.class, props3.pickerClass),
        "style": _extends(_extends({}, pickerStyle), props3.style)
      }, getDataAndAriaProps$1(this.$attrs)), {}, {
        "onMouseenter": this.onMouseEnter,
        "onMouseleave": this.onMouseLeave
      }), [createVNode(VcDatePicker, vcDatePickerProps, _extends(_extends({}, $slots), {
        default: isEmptySlot($slots.default) ? input : $slots.default
      }))]);
    }
  });
}
var Header$1 = {
  inheritAttrs: false,
  name: "Header",
  mixins: [BaseMixin],
  props: {
    format: PropsTypes.string,
    prefixCls: PropsTypes.string,
    disabledDate: PropsTypes.func,
    placeholder: PropsTypes.string,
    clearText: PropsTypes.string,
    value: PropsTypes.object,
    inputReadOnly: PropsTypes.looseBool.def(false),
    hourOptions: PropsTypes.array,
    minuteOptions: PropsTypes.array,
    secondOptions: PropsTypes.array,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    allowEmpty: PropsTypes.looseBool,
    defaultOpenValue: PropsTypes.object,
    currentSelectPanel: PropsTypes.string,
    focusOnOpen: PropsTypes.looseBool,
    clearIcon: PropsTypes.any
  },
  data: function data34() {
    var value26 = this.value, format3 = this.format;
    return {
      str: value26 && value26.format(format3) || "",
      invalid: false
    };
  },
  mounted: function mounted18() {
    var _this = this;
    if (this.focusOnOpen) {
      var requestAnimationFrame2 = window.requestAnimationFrame || window.setTimeout;
      requestAnimationFrame2(function() {
        _this.refInput.focus();
        _this.refInput.select();
      });
    }
  },
  watch: {
    value: function value18(val) {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.setState({
          str: val && val.format(_this2.format) || "",
          invalid: false
        });
      });
    }
  },
  methods: {
    onInputChange: function onInputChange2(e) {
      var _e$target = e.target, str = _e$target.value, composing = _e$target.composing;
      var _this$str = this.str, oldStr = _this$str === void 0 ? "" : _this$str;
      if (e.isComposing || composing || oldStr === str)
        return;
      this.setState({
        str
      });
      var format3 = this.format, hourOptions = this.hourOptions, minuteOptions = this.minuteOptions, secondOptions = this.secondOptions, disabledHours3 = this.disabledHours, disabledMinutes2 = this.disabledMinutes, disabledSeconds2 = this.disabledSeconds, originalValue = this.value;
      if (str) {
        var value26 = this.getProtoValue().clone();
        var parsed = hooks(str, format3, true);
        if (!parsed.isValid()) {
          this.setState({
            invalid: true
          });
          return;
        }
        value26.hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());
        if (hourOptions.indexOf(value26.hour()) < 0 || minuteOptions.indexOf(value26.minute()) < 0 || secondOptions.indexOf(value26.second()) < 0) {
          this.setState({
            invalid: true
          });
          return;
        }
        var disabledHourOptions = disabledHours3();
        var disabledMinuteOptions = disabledMinutes2(value26.hour());
        var disabledSecondOptions = disabledSeconds2(value26.hour(), value26.minute());
        if (disabledHourOptions && disabledHourOptions.indexOf(value26.hour()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(value26.minute()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(value26.second()) >= 0) {
          this.setState({
            invalid: true
          });
          return;
        }
        if (originalValue) {
          if (originalValue.hour() !== value26.hour() || originalValue.minute() !== value26.minute() || originalValue.second() !== value26.second()) {
            var changedValue = originalValue.clone();
            changedValue.hour(value26.hour());
            changedValue.minute(value26.minute());
            changedValue.second(value26.second());
            this.__emit("change", changedValue);
          }
        } else if (originalValue !== value26) {
          this.__emit("change", value26);
        }
      } else {
        this.__emit("change", null);
      }
      this.setState({
        invalid: false
      });
    },
    onKeyDown: function onKeyDown7(e) {
      if (e.keyCode === 27) {
        this.__emit("esc");
      }
      this.__emit("keydown", e);
    },
    getProtoValue: function getProtoValue() {
      return this.value || this.defaultOpenValue;
    },
    getInput: function getInput() {
      var _this3 = this;
      var prefixCls2 = this.prefixCls, placeholder = this.placeholder, inputReadOnly = this.inputReadOnly, invalid = this.invalid, str = this.str;
      var invalidClass = invalid ? "".concat(prefixCls2, "-input-invalid") : "";
      return withDirectives(createVNode("input", {
        "class": "".concat(prefixCls2, "-input ").concat(invalidClass),
        "ref": function ref2(_ref) {
          _this3.refInput = _ref;
        },
        "onKeydown": this.onKeyDown,
        "value": str,
        "placeholder": placeholder,
        "onInput": this.onInputChange,
        "onChange": this.onInputChange,
        "readonly": !!inputReadOnly
      }, null), [[antInput$1]]);
    }
  },
  render: function render76() {
    var prefixCls2 = this.prefixCls;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-input-wrap")
    }, [this.getInput()]);
  }
};
var Header$2 = Header$1;
function noop$l() {
}
var scrollTo = function scrollTo2(element, to, duration2) {
  if (duration2 <= 0) {
    requestAnimationFrame(function() {
      element.scrollTop = to;
    });
    return;
  }
  var difference = to - element.scrollTop;
  var perTick = difference / duration2 * 10;
  requestAnimationFrame(function() {
    element.scrollTop += perTick;
    if (element.scrollTop === to)
      return;
    scrollTo2(element, to, duration2 - 10);
  });
};
var Select$2 = {
  name: "Select",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    options: PropsTypes.array,
    selectedIndex: PropsTypes.number,
    type: PropsTypes.string
  },
  data: function data35() {
    return {
      active: false
    };
  },
  mounted: function mounted19() {
    var _this = this;
    this.$nextTick(function() {
      _this.scrollToSelected(0);
    });
  },
  watch: {
    selectedIndex: function selectedIndex() {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.scrollToSelected(120);
      });
    }
  },
  methods: {
    onSelect: function onSelect3(value26) {
      var type2 = this.type;
      this.__emit("select", type2, value26);
    },
    onEsc: function onEsc(e) {
      this.__emit("esc", e);
    },
    getOptions: function getOptions2() {
      var _this3 = this;
      var options2 = this.options, selectedIndex2 = this.selectedIndex, prefixCls2 = this.prefixCls;
      return options2.map(function(item, index2) {
        var _classnames;
        var cls = classNames((_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls2, "-select-option-selected"), selectedIndex2 === index2), _defineProperty(_classnames, "".concat(prefixCls2, "-select-option-disabled"), item.disabled), _classnames));
        var onClick7 = item.disabled ? noop$l : function() {
          _this3.onSelect(item.value);
        };
        var onKeyDown14 = function onKeyDown15(e) {
          if (e.keyCode === 13)
            onClick7();
          else if (e.keyCode === 27)
            _this3.onEsc();
        };
        return createVNode("li", {
          "role": "button",
          "onClick": onClick7,
          "class": cls,
          "key": index2,
          "disabled": item.disabled,
          "tabindex": "0",
          "onKeydown": onKeyDown14
        }, [item.value]);
      });
    },
    handleMouseEnter: function handleMouseEnter(e) {
      this.setState({
        active: true
      });
      this.__emit("mouseenter", e);
    },
    handleMouseLeave: function handleMouseLeave() {
      this.setState({
        active: false
      });
    },
    scrollToSelected: function scrollToSelected(duration2) {
      var select2 = findDOMNode(this);
      var list = this.$refs.list;
      if (!list) {
        return;
      }
      var index2 = this.selectedIndex;
      if (index2 < 0) {
        index2 = 0;
      }
      var topOption = list.children[index2];
      var to = topOption.offsetTop;
      scrollTo(select2, to, duration2);
    }
  },
  render: function render77() {
    var _cls;
    var prefixCls2 = this.prefixCls, options2 = this.options, active = this.active;
    if (options2.length === 0) {
      return null;
    }
    var cls = (_cls = {}, _defineProperty(_cls, "".concat(prefixCls2, "-select"), 1), _defineProperty(_cls, "".concat(prefixCls2, "-select-active"), active), _cls);
    return createVNode("div", {
      "class": cls,
      "onMouseenter": this.handleMouseEnter,
      "onMouseleave": this.handleMouseLeave
    }, [createVNode("ul", {
      "ref": "list"
    }, [this.getOptions()])]);
  }
};
var Select$3 = Select$2;
var formatOption = function formatOption2(option, disabledOptions) {
  var value26 = "".concat(option);
  if (option < 10) {
    value26 = "0".concat(option);
  }
  var disabled = false;
  if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
    disabled = true;
  }
  return {
    value: value26,
    disabled
  };
};
var Combobox = {
  inheritAttrs: false,
  mixins: [BaseMixin],
  name: "Combobox",
  props: {
    format: PropsTypes.string,
    defaultOpenValue: PropsTypes.object,
    prefixCls: PropsTypes.string,
    value: PropsTypes.object,
    showHour: PropsTypes.looseBool,
    showMinute: PropsTypes.looseBool,
    showSecond: PropsTypes.looseBool,
    hourOptions: PropsTypes.array,
    minuteOptions: PropsTypes.array,
    secondOptions: PropsTypes.array,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    use12Hours: PropsTypes.looseBool,
    isAM: PropsTypes.looseBool
  },
  methods: {
    onItemChange: function onItemChange(type2, itemValue) {
      var defaultOpenValue = this.defaultOpenValue, use12Hours = this.use12Hours, propValue = this.value, isAM2 = this.isAM;
      var value26 = (propValue || defaultOpenValue).clone();
      if (type2 === "hour") {
        if (use12Hours) {
          if (isAM2) {
            value26.hour(+itemValue % 12);
          } else {
            value26.hour(+itemValue % 12 + 12);
          }
        } else {
          value26.hour(+itemValue);
        }
      } else if (type2 === "minute") {
        value26.minute(+itemValue);
      } else if (type2 === "ampm") {
        var ampm = itemValue.toUpperCase();
        if (use12Hours) {
          if (ampm === "PM" && value26.hour() < 12) {
            value26.hour(value26.hour() % 12 + 12);
          }
          if (ampm === "AM") {
            if (value26.hour() >= 12) {
              value26.hour(value26.hour() - 12);
            }
          }
        }
        this.__emit("amPmChange", ampm);
      } else {
        value26.second(+itemValue);
      }
      this.__emit("change", value26);
    },
    onEnterSelectPanel: function onEnterSelectPanel(range) {
      this.__emit("currentSelectPanelChange", range);
    },
    onEsc: function onEsc2(e) {
      this.__emit("esc", e);
    },
    getHourSelect: function getHourSelect(hour) {
      var _this = this;
      var prefixCls2 = this.prefixCls, hourOptions = this.hourOptions, disabledHours3 = this.disabledHours, showHour = this.showHour, use12Hours = this.use12Hours;
      if (!showHour) {
        return null;
      }
      var disabledOptions = disabledHours3();
      var hourOptionsAdj;
      var hourAdj;
      if (use12Hours) {
        hourOptionsAdj = [12].concat(hourOptions.filter(function(h2) {
          return h2 < 12 && h2 > 0;
        }));
        hourAdj = hour % 12 || 12;
      } else {
        hourOptionsAdj = hourOptions;
        hourAdj = hour;
      }
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": hourOptionsAdj.map(function(option) {
          return formatOption(option, disabledOptions);
        }),
        "selectedIndex": hourOptionsAdj.indexOf(hourAdj),
        "type": "hour",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this.onEnterSelectPanel("hour");
        },
        "onEsc": this.onEsc
      }, null);
    },
    getMinuteSelect: function getMinuteSelect(minute) {
      var _this2 = this;
      var prefixCls2 = this.prefixCls, minuteOptions = this.minuteOptions, disabledMinutes2 = this.disabledMinutes, defaultOpenValue = this.defaultOpenValue, showMinute = this.showMinute, propValue = this.value;
      if (!showMinute) {
        return null;
      }
      var value26 = propValue || defaultOpenValue;
      var disabledOptions = disabledMinutes2(value26.hour());
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": minuteOptions.map(function(option) {
          return formatOption(option, disabledOptions);
        }),
        "selectedIndex": minuteOptions.indexOf(minute),
        "type": "minute",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this2.onEnterSelectPanel("minute");
        },
        "onEsc": this.onEsc
      }, null);
    },
    getSecondSelect: function getSecondSelect(second) {
      var _this3 = this;
      var prefixCls2 = this.prefixCls, secondOptions = this.secondOptions, disabledSeconds2 = this.disabledSeconds, showSecond = this.showSecond, defaultOpenValue = this.defaultOpenValue, propValue = this.value;
      if (!showSecond) {
        return null;
      }
      var value26 = propValue || defaultOpenValue;
      var disabledOptions = disabledSeconds2(value26.hour(), value26.minute());
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": secondOptions.map(function(option) {
          return formatOption(option, disabledOptions);
        }),
        "selectedIndex": secondOptions.indexOf(second),
        "type": "second",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this3.onEnterSelectPanel("second");
        },
        "onEsc": this.onEsc
      }, null);
    },
    getAMPMSelect: function getAMPMSelect() {
      var _this4 = this;
      var prefixCls2 = this.prefixCls, use12Hours = this.use12Hours, format3 = this.format, isAM2 = this.isAM;
      if (!use12Hours) {
        return null;
      }
      var AMPMOptions = ["am", "pm"].map(function(c) {
        return format3.match(/\sA/) ? c.toUpperCase() : c;
      }).map(function(c) {
        return {
          value: c
        };
      });
      var selected = isAM2 ? 0 : 1;
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": AMPMOptions,
        "selectedIndex": selected,
        "type": "ampm",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this4.onEnterSelectPanel("ampm");
        },
        "onEsc": this.onEsc
      }, null);
    }
  },
  render: function render78() {
    var prefixCls2 = this.prefixCls, defaultOpenValue = this.defaultOpenValue, propValue = this.value;
    var value26 = propValue || defaultOpenValue;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-combobox")
    }, [this.getHourSelect(value26.hour()), this.getMinuteSelect(value26.minute()), this.getSecondSelect(value26.second()), this.getAMPMSelect(value26.hour())]);
  }
};
var Combobox$1 = Combobox;
function noop$k() {
}
function generateOptions$1(length, disabledOptions, hideDisabledOptions) {
  var step = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
  var arr = [];
  for (var value26 = 0; value26 < length; value26 += step) {
    if (!disabledOptions || disabledOptions.indexOf(value26) < 0 || !hideDisabledOptions) {
      arr.push(value26);
    }
  }
  return arr;
}
function toNearestValidTime(time, hourOptions, minuteOptions, secondOptions) {
  var hour = hourOptions.slice().sort(function(a, b) {
    return Math.abs(time.hour() - a) - Math.abs(time.hour() - b);
  })[0];
  var minute = minuteOptions.slice().sort(function(a, b) {
    return Math.abs(time.minute() - a) - Math.abs(time.minute() - b);
  })[0];
  var second = secondOptions.slice().sort(function(a, b) {
    return Math.abs(time.second() - a) - Math.abs(time.second() - b);
  })[0];
  return hooks("".concat(hour, ":").concat(minute, ":").concat(second), "HH:mm:ss");
}
var Panel = defineComponent({
  name: "Panel",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    clearText: PropsTypes.string,
    prefixCls: PropsTypes.string.def("rc-time-picker-panel"),
    defaultOpenValue: {
      type: Object,
      default: function _default4() {
        return hooks();
      }
    },
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    placeholder: PropsTypes.string,
    format: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool.def(false),
    disabledHours: PropsTypes.func.def(noop$k),
    disabledMinutes: PropsTypes.func.def(noop$k),
    disabledSeconds: PropsTypes.func.def(noop$k),
    hideDisabledOptions: PropsTypes.looseBool,
    allowEmpty: PropsTypes.looseBool,
    showHour: PropsTypes.looseBool,
    showMinute: PropsTypes.looseBool,
    showSecond: PropsTypes.looseBool,
    use12Hours: PropsTypes.looseBool.def(false),
    hourStep: PropsTypes.number,
    minuteStep: PropsTypes.number,
    secondStep: PropsTypes.number,
    addon: PropsTypes.func.def(noop$k),
    focusOnOpen: PropsTypes.looseBool,
    clearIcon: PropsTypes.any
  },
  data: function data36() {
    return {
      sValue: this.value,
      selectionRange: [],
      currentSelectPanel: ""
    };
  },
  watch: {
    value: function value19(val) {
      this.setState({
        sValue: val
      });
    }
  },
  methods: {
    onChange: function onChange(newValue) {
      this.setState({
        sValue: newValue
      });
      this.__emit("change", newValue);
    },
    onAmPmChange: function onAmPmChange(ampm) {
      this.__emit("amPmChange", ampm);
    },
    onCurrentSelectPanelChange: function onCurrentSelectPanelChange(currentSelectPanel) {
      this.setState({
        currentSelectPanel
      });
    },
    close: function close2() {
      this.__emit("esc");
    },
    onEsc: function onEsc3(e) {
      this.__emit("esc", e);
    },
    disabledHours2: function disabledHours2() {
      var use12Hours = this.use12Hours, disabledHours3 = this.disabledHours;
      var disabledOptions = disabledHours3();
      if (use12Hours && Array.isArray(disabledOptions)) {
        if (this.isAM()) {
          disabledOptions = disabledOptions.filter(function(h2) {
            return h2 < 12;
          }).map(function(h2) {
            return h2 === 0 ? 12 : h2;
          });
        } else {
          disabledOptions = disabledOptions.map(function(h2) {
            return h2 === 12 ? 12 : h2 - 12;
          });
        }
      }
      return disabledOptions;
    },
    isAM: function isAM() {
      var value26 = this.sValue || this.defaultOpenValue;
      return value26.hour() >= 0 && value26.hour() < 12;
    }
  },
  render: function render79() {
    var prefixCls2 = this.prefixCls, placeholder = this.placeholder, disabledMinutes2 = this.disabledMinutes, addon = this.addon, disabledSeconds2 = this.disabledSeconds, hideDisabledOptions = this.hideDisabledOptions, showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, format3 = this.format, defaultOpenValue = this.defaultOpenValue, clearText = this.clearText, use12Hours = this.use12Hours, focusOnOpen = this.focusOnOpen, hourStep = this.hourStep, minuteStep = this.minuteStep, secondStep = this.secondStep, inputReadOnly = this.inputReadOnly, sValue = this.sValue, currentSelectPanel = this.currentSelectPanel;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, _this$$attrs$onEsc = _this$$attrs.onEsc, onEsc5 = _this$$attrs$onEsc === void 0 ? noop$k : _this$$attrs$onEsc, _this$$attrs$onKeydow = _this$$attrs.onKeydown, onKeydown2 = _this$$attrs$onKeydow === void 0 ? noop$k : _this$$attrs$onKeydow;
    var clearIcon = getComponent(this, "clearIcon");
    var disabledHourOptions = this.disabledHours2();
    var disabledMinuteOptions = disabledMinutes2(sValue ? sValue.hour() : null);
    var disabledSecondOptions = disabledSeconds2(sValue ? sValue.hour() : null, sValue ? sValue.minute() : null);
    var hourOptions = generateOptions$1(24, disabledHourOptions, hideDisabledOptions, hourStep);
    var minuteOptions = generateOptions$1(60, disabledMinuteOptions, hideDisabledOptions, minuteStep);
    var secondOptions = generateOptions$1(60, disabledSecondOptions, hideDisabledOptions, secondStep);
    var validDefaultOpenValue = toNearestValidTime(defaultOpenValue, hourOptions, minuteOptions, secondOptions);
    return createVNode("div", {
      "className": classNames(className, "".concat(prefixCls2, "-inner"))
    }, [createVNode(Header$2, {
      "clearText": clearText,
      "prefixCls": prefixCls2,
      "defaultOpenValue": validDefaultOpenValue,
      "value": sValue,
      "currentSelectPanel": currentSelectPanel,
      "onEsc": onEsc5,
      "format": format3,
      "placeholder": placeholder,
      "hourOptions": hourOptions,
      "minuteOptions": minuteOptions,
      "secondOptions": secondOptions,
      "disabledHours": this.disabledHours2,
      "disabledMinutes": disabledMinutes2,
      "disabledSeconds": disabledSeconds2,
      "onChange": this.onChange,
      "focusOnOpen": focusOnOpen,
      "onKeydown": onKeydown2,
      "inputReadOnly": inputReadOnly,
      "clearIcon": clearIcon
    }, null), createVNode(Combobox$1, {
      "prefixCls": prefixCls2,
      "value": sValue,
      "defaultOpenValue": validDefaultOpenValue,
      "format": format3,
      "onChange": this.onChange,
      "onAmPmChange": this.onAmPmChange,
      "showHour": showHour,
      "showMinute": showMinute,
      "showSecond": showSecond,
      "hourOptions": hourOptions,
      "minuteOptions": minuteOptions,
      "secondOptions": secondOptions,
      "disabledHours": this.disabledHours2,
      "disabledMinutes": disabledMinutes2,
      "disabledSeconds": disabledSeconds2,
      "onCurrentSelectPanelChange": this.onCurrentSelectPanelChange,
      "use12Hours": use12Hours,
      "onEsc": this.onEsc,
      "isAM": this.isAM()
    }, null), addon(this)]);
  }
});
var TimePickerPanel = Panel;
var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements = {
  bottomLeft: {
    points: ["tl", "tl"],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset
  },
  bottomRight: {
    points: ["tr", "tr"],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset
  },
  topRight: {
    points: ["br", "br"],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset
  },
  topLeft: {
    points: ["bl", "bl"],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset
  }
};
var placements$1 = placements;
function noop$j() {
}
function refFn(field, component) {
  this[field] = component;
}
var VcTimePicker = defineComponent({
  name: "VcTimePicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    clearText: PropsTypes.string,
    value: PropsTypes.any,
    defaultOpenValue: {
      type: Object,
      default: function _default5() {
        return hooks();
      }
    },
    pickerInputClass: String,
    inputReadOnly: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    allowEmpty: PropsTypes.looseBool,
    defaultValue: PropsTypes.any,
    open: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool,
    align: PropsTypes.object,
    placement: PropsTypes.any,
    transitionName: PropsTypes.string,
    getPopupContainer: PropsTypes.func,
    placeholder: PropsTypes.string,
    format: PropsTypes.string,
    showHour: PropsTypes.looseBool,
    showMinute: PropsTypes.looseBool,
    showSecond: PropsTypes.looseBool,
    popupClassName: PropsTypes.string,
    popupStyle: PropsTypes.object,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    hideDisabledOptions: PropsTypes.looseBool,
    name: PropsTypes.string,
    autocomplete: PropsTypes.string,
    use12Hours: PropsTypes.looseBool,
    hourStep: PropsTypes.number,
    minuteStep: PropsTypes.number,
    secondStep: PropsTypes.number,
    focusOnOpen: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    id: PropsTypes.string,
    inputIcon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    addon: PropsTypes.func
  }, {
    clearText: "clear",
    prefixCls: "rc-time-picker",
    defaultOpen: false,
    inputReadOnly: false,
    popupClassName: "",
    popupStyle: {},
    align: {},
    allowEmpty: true,
    showHour: true,
    showMinute: true,
    showSecond: true,
    disabledHours: noop$j,
    disabledMinutes: noop$j,
    disabledSeconds: noop$j,
    hideDisabledOptions: false,
    placement: "bottomLeft",
    use12Hours: false,
    focusOnOpen: false
  }),
  data: function data37() {
    this.saveInputRef = refFn.bind(this, "picker");
    this.savePanelRef = refFn.bind(this, "panelInstance");
    var defaultOpen = this.defaultOpen, defaultValue = this.defaultValue, _this$open = this.open, open6 = _this$open === void 0 ? defaultOpen : _this$open, _this$value = this.value, value26 = _this$value === void 0 ? defaultValue : _this$value;
    return {
      sOpen: open6,
      sValue: value26
    };
  },
  watch: {
    value: function value20(val) {
      this.setState({
        sValue: val
      });
    },
    open: function open3(val) {
      if (val !== void 0) {
        this.setState({
          sOpen: val
        });
      }
    }
  },
  mounted: function mounted20() {
    var _this = this;
    this.$nextTick(function() {
      if (_this.autofocus) {
        _this.focus();
      }
    });
  },
  methods: {
    onPanelChange: function onPanelChange2(value26) {
      this.setValue(value26);
    },
    onAmPmChange: function onAmPmChange2(ampm) {
      this.__emit("amPmChange", ampm);
    },
    onClear: function onClear3(event) {
      event.stopPropagation();
      this.setValue(null);
      this.setOpen(false);
    },
    onVisibleChange: function onVisibleChange4(open6) {
      this.setOpen(open6);
    },
    onEsc: function onEsc4() {
      this.setOpen(false);
      this.focus();
    },
    onKeyDown: function onKeyDown8(e) {
      if (e.keyCode === 40) {
        this.setOpen(true);
      }
    },
    onKeyDown2: function onKeyDown22(e) {
      this.__emit("keydown", e);
    },
    setValue: function setValue7(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      this.__emit("change", value26);
    },
    getFormat: function getFormat2() {
      var format3 = this.format, showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, use12Hours = this.use12Hours;
      if (format3) {
        return format3;
      }
      if (use12Hours) {
        var fmtString = [showHour ? "h" : "", showMinute ? "mm" : "", showSecond ? "ss" : ""].filter(function(item) {
          return !!item;
        }).join(":");
        return fmtString.concat(" a");
      }
      return [showHour ? "HH" : "", showMinute ? "mm" : "", showSecond ? "ss" : ""].filter(function(item) {
        return !!item;
      }).join(":");
    },
    getPanelElement: function getPanelElement() {
      var prefixCls2 = this.prefixCls, placeholder = this.placeholder, disabledHours3 = this.disabledHours, addon = this.addon, disabledMinutes2 = this.disabledMinutes, disabledSeconds2 = this.disabledSeconds, hideDisabledOptions = this.hideDisabledOptions, inputReadOnly = this.inputReadOnly, showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, defaultOpenValue = this.defaultOpenValue, clearText = this.clearText, use12Hours = this.use12Hours, focusOnOpen = this.focusOnOpen, onKeyDown23 = this.onKeyDown2, hourStep = this.hourStep, minuteStep = this.minuteStep, secondStep = this.secondStep, sValue = this.sValue;
      var clearIcon = getComponent(this, "clearIcon");
      return createVNode(TimePickerPanel, {
        "clearText": clearText,
        "prefixCls": "".concat(prefixCls2, "-panel"),
        "ref": this.savePanelRef,
        "value": sValue,
        "inputReadOnly": inputReadOnly,
        "onChange": this.onPanelChange,
        "onAmPmChange": this.onAmPmChange,
        "defaultOpenValue": defaultOpenValue,
        "showHour": showHour,
        "showMinute": showMinute,
        "showSecond": showSecond,
        "onEsc": this.onEsc,
        "format": this.getFormat(),
        "placeholder": placeholder,
        "disabledHours": disabledHours3,
        "disabledMinutes": disabledMinutes2,
        "disabledSeconds": disabledSeconds2,
        "hideDisabledOptions": hideDisabledOptions,
        "use12Hours": use12Hours,
        "hourStep": hourStep,
        "minuteStep": minuteStep,
        "secondStep": secondStep,
        "focusOnOpen": focusOnOpen,
        "onKeydown": onKeyDown23,
        "clearIcon": clearIcon,
        "addon": addon
      }, null);
    },
    getPopupClassName: function getPopupClassName() {
      var showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, use12Hours = this.use12Hours, prefixCls2 = this.prefixCls, popupClassName = this.popupClassName;
      var selectColumnCount = 0;
      if (showHour) {
        selectColumnCount += 1;
      }
      if (showMinute) {
        selectColumnCount += 1;
      }
      if (showSecond) {
        selectColumnCount += 1;
      }
      if (use12Hours) {
        selectColumnCount += 1;
      }
      return classNames(popupClassName, _defineProperty({}, "".concat(prefixCls2, "-panel-narrow"), (!showHour || !showMinute || !showSecond) && !use12Hours), "".concat(prefixCls2, "-panel-column-").concat(selectColumnCount));
    },
    setOpen: function setOpen2(open6) {
      if (this.sOpen !== open6) {
        if (!hasProp(this, "open")) {
          this.setState({
            sOpen: open6
          });
        }
        if (open6) {
          this.__emit("open", {
            open: open6
          });
        } else {
          this.__emit("close", {
            open: open6
          });
        }
      }
    },
    focus: function focus13() {
      this.picker.focus();
    },
    blur: function blur10() {
      this.picker.blur();
    },
    onFocus: function onFocus3(e) {
      this.__emit("focus", e);
    },
    onBlur: function onBlur4(e) {
      this.__emit("blur", e);
    },
    renderClearButton: function renderClearButton() {
      var _this2 = this;
      var sValue = this.sValue;
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, allowEmpty = _this$$props.allowEmpty, clearText = _this$$props.clearText, disabled = _this$$props.disabled;
      if (!allowEmpty || !sValue || disabled) {
        return null;
      }
      var clearIcon = getComponent(this, "clearIcon");
      if (isValidElement(clearIcon)) {
        var _ref = getEvents(clearIcon) || {}, _onClick = _ref.onClick;
        return cloneElement(clearIcon, {
          onClick: function onClick7() {
            if (_onClick)
              _onClick.apply(void 0, arguments);
            _this2.onClear.apply(_this2, arguments);
          }
        });
      }
      return createVNode("a", {
        "role": "button",
        "class": "".concat(prefixCls2, "-clear"),
        "title": clearText,
        "onClick": this.onClear,
        "tabindex": 0
      }, [clearIcon || createVNode("i", {
        "class": "".concat(prefixCls2, "-clear-icon")
      }, null)]);
    }
  },
  render: function render80() {
    var _this3 = this;
    var prefixCls2 = this.prefixCls, placeholder = this.placeholder, placement2 = this.placement, align = this.align, id2 = this.id, disabled = this.disabled, transitionName2 = this.transitionName, getPopupContainer = this.getPopupContainer, name2 = this.name, autocomplete = this.autocomplete, autofocus = this.autofocus, sOpen2 = this.sOpen, sValue = this.sValue, onFocus6 = this.onFocus, onBlur7 = this.onBlur, popupStyle = this.popupStyle, pickerInputClass = this.pickerInputClass;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var popupClassName = this.getPopupClassName();
    var inputIcon = getComponent(this, "inputIcon");
    return createVNode(Trigger, {
      "prefixCls": "".concat(prefixCls2, "-panel"),
      "popupClassName": popupClassName,
      "popupStyle": popupStyle,
      "popupAlign": align,
      "builtinPlacements": placements$1,
      "popupPlacement": placement2,
      "action": disabled ? [] : ["click"],
      "destroyPopupOnHide": true,
      "getPopupContainer": getPopupContainer,
      "popupTransitionName": transitionName2,
      "popupVisible": sOpen2,
      "onPopupVisibleChange": this.onVisibleChange,
      "popup": this.getPanelElement()
    }, {
      default: function _default8() {
        return [createVNode("span", {
          "class": classNames(prefixCls2, className),
          "style": style3
        }, [createVNode("input", {
          "class": pickerInputClass,
          "ref": _this3.saveInputRef,
          "type": "text",
          "placeholder": placeholder,
          "name": name2,
          "onKeydown": _this3.onKeyDown,
          "disabled": disabled,
          "value": sValue && sValue.format(_this3.getFormat()) || "",
          "autocomplete": autocomplete,
          "onFocus": onFocus6,
          "onBlur": onBlur7,
          "autofocus": autofocus,
          "readonly": true,
          "id": id2
        }, null), inputIcon || createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, null), _this3.renderClearButton()])];
      }
    });
  }
});
function generateShowHourMinuteSecond(format3) {
  return {
    showHour: format3.indexOf("H") > -1 || format3.indexOf("h") > -1 || format3.indexOf("k") > -1,
    showMinute: format3.indexOf("m") > -1,
    showSecond: format3.indexOf("s") > -1
  };
}
var timePickerProps = function timePickerProps2() {
  return {
    size: PropsTypes.oneOf(tuple("large", "default", "small")),
    value: TimeOrTimesType,
    defaultValue: TimeOrTimesType,
    open: PropsTypes.looseBool,
    format: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    placeholder: PropsTypes.string,
    prefixCls: PropsTypes.string,
    hideDisabledOptions: PropsTypes.looseBool,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    getPopupContainer: PropsTypes.func,
    use12Hours: PropsTypes.looseBool,
    focusOnOpen: PropsTypes.looseBool,
    hourStep: PropsTypes.number,
    minuteStep: PropsTypes.number,
    secondStep: PropsTypes.number,
    allowEmpty: PropsTypes.looseBool,
    allowClear: PropsTypes.looseBool,
    inputReadOnly: PropsTypes.looseBool,
    clearText: PropsTypes.string,
    defaultOpenValue: PropsTypes.object,
    popupClassName: PropsTypes.string,
    popupStyle: PropsTypes.style,
    suffixIcon: PropsTypes.any,
    align: PropsTypes.object,
    placement: PropsTypes.any,
    transitionName: PropsTypes.string,
    autofocus: PropsTypes.looseBool,
    addon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    locale: PropsTypes.object,
    valueFormat: PropsTypes.string,
    onChange: PropsTypes.func,
    onAmPmChange: PropsTypes.func,
    onOpen: PropsTypes.func,
    onClose: PropsTypes.func,
    onFocus: PropsTypes.func,
    onBlur: PropsTypes.func,
    onKeydown: PropsTypes.func,
    onOpenChange: PropsTypes.func
  };
};
var TimePicker = defineComponent({
  name: "ATimePicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(timePickerProps(), {
    align: {
      offset: [0, -2]
    },
    disabled: false,
    disabledHours: void 0,
    disabledMinutes: void 0,
    disabledSeconds: void 0,
    hideDisabledOptions: false,
    placement: "bottomLeft",
    transitionName: "slide-up",
    focusOnOpen: true,
    allowClear: true
  }),
  emits: ["update:value", "update:open", "change", "openChange", "focus", "blur", "keydown"],
  setup: function setup76() {
    return {
      popupRef: null,
      timePickerRef: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data38() {
    var value26 = this.value, defaultValue = this.defaultValue, valueFormat = this.valueFormat;
    checkValidate("TimePicker", defaultValue, "defaultValue", valueFormat);
    checkValidate("TimePicker", value26, "value", valueFormat);
    warning$1(!hasProp(this, "allowEmpty"), "TimePicker", "`allowEmpty` is deprecated. Please use `allowClear` instead.");
    return {
      sValue: stringToMoment(value26 || defaultValue, valueFormat)
    };
  },
  watch: {
    value: function value21(val) {
      checkValidate("TimePicker", val, "value", this.valueFormat);
      this.setState({
        sValue: stringToMoment(val, this.valueFormat)
      });
    }
  },
  created: function created11() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    getDefaultFormat: function getDefaultFormat() {
      var format3 = this.format, use12Hours = this.use12Hours;
      if (format3) {
        return format3;
      } else if (use12Hours) {
        return "h:mm:ss a";
      }
      return "HH:mm:ss";
    },
    getAllowClear: function getAllowClear() {
      var _this$$props = this.$props, allowClear = _this$$props.allowClear, allowEmpty = _this$$props.allowEmpty;
      if (hasProp(this, "allowClear")) {
        return allowClear;
      }
      return allowEmpty;
    },
    getDefaultLocale: function getDefaultLocale2() {
      var defaultLocale2 = _extends(_extends({}, enUS$1), this.$props.locale);
      return defaultLocale2;
    },
    savePopupRef: function savePopupRef5(ref2) {
      this.popupRef = ref2;
    },
    saveTimePicker: function saveTimePicker(timePickerRef) {
      this.timePickerRef = timePickerRef;
    },
    handleChange: function handleChange11(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      var _this$format = this.format, format3 = _this$format === void 0 ? "HH:mm:ss" : _this$format;
      var val = this.valueFormat ? momentToString(value26, this.valueFormat) : value26;
      this.$emit("update:value", val);
      this.$emit("change", val, value26 && value26.format(format3) || "");
    },
    handleOpenClose: function handleOpenClose(_ref) {
      var open6 = _ref.open;
      this.$emit("update:open", open6);
      this.$emit("openChange", open6);
    },
    focus: function focus14() {
      this.timePickerRef.focus();
    },
    blur: function blur11() {
      this.timePickerRef.blur();
    },
    renderInputIcon: function renderInputIcon(prefixCls2) {
      var suffixIcon = getComponent(this, "suffixIcon");
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var clockIcon = suffixIcon && isValidElement(suffixIcon) && cloneElement(suffixIcon, {
        class: "".concat(prefixCls2, "-clock-icon")
      }) || createVNode(ClockCircleOutlined, {
        "class": "".concat(prefixCls2, "-clock-icon")
      }, null);
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-icon")
      }, [clockIcon]);
    },
    renderClearIcon: function renderClearIcon2(prefixCls2) {
      var clearIcon = getComponent(this, "clearIcon");
      var clearIconPrefixCls = "".concat(prefixCls2, "-clear");
      if (clearIcon && isValidElement(clearIcon)) {
        return cloneElement(clearIcon, {
          class: clearIconPrefixCls
        });
      }
      return createVNode(CloseCircleFilled, {
        "class": clearIconPrefixCls
      }, null);
    },
    renderTimePicker: function renderTimePicker(locale2) {
      var _pickerClassName;
      var props2 = getOptionProps(this);
      props2 = omit(props2, ["defaultValue", "suffixIcon", "allowEmpty", "allowClear"]);
      var className = this.$attrs.class;
      var _props = props2, customizePrefixCls = _props.prefixCls, getPopupContainer = _props.getPopupContainer, placeholder = _props.placeholder, size = _props.size;
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("time-picker", customizePrefixCls);
      var inputPrefixCls = getPrefixCls2("input");
      var pickerInputClass = classNames("".concat(prefixCls2, "-input"), inputPrefixCls);
      var format3 = this.getDefaultFormat();
      var pickerClassName = (_pickerClassName = {}, _defineProperty(_pickerClassName, className, className), _defineProperty(_pickerClassName, "".concat(prefixCls2, "-").concat(size), !!size), _pickerClassName);
      var tempAddon = getComponent(this, "addon", {}, false);
      var pickerAddon = function pickerAddon2(panel) {
        return tempAddon ? createVNode("div", {
          "class": "".concat(prefixCls2, "-panel-addon")
        }, [typeof tempAddon === "function" ? tempAddon(panel) : tempAddon]) : null;
      };
      var inputIcon = this.renderInputIcon(prefixCls2);
      var clearIcon = this.renderClearIcon(prefixCls2);
      var getContextPopupContainer = this.configProvider.getPopupContainer;
      var timeProps = _extends(_extends(_extends(_extends({}, generateShowHourMinuteSecond(format3)), props2), this.$attrs), {
        allowEmpty: this.getAllowClear(),
        prefixCls: prefixCls2,
        pickerInputClass,
        getPopupContainer: getPopupContainer || getContextPopupContainer,
        format: format3,
        value: this.sValue,
        placeholder: placeholder === void 0 ? locale2.placeholder : placeholder,
        addon: pickerAddon,
        inputIcon,
        clearIcon,
        class: pickerClassName,
        ref: this.saveTimePicker,
        onChange: this.handleChange,
        onOpen: this.handleOpenClose,
        onClose: this.handleOpenClose
      });
      return createVNode(VcTimePicker, timeProps, null);
    }
  },
  render: function render81() {
    return createVNode(LocaleReceiver, {
      "componentName": "TimePicker",
      "defaultLocale": this.getDefaultLocale(),
      "children": this.renderTimePicker
    }, null);
  }
});
var index$b = withInstall(TimePicker);
var DEFAULT_FORMAT = {
  date: "YYYY-MM-DD",
  dateTime: "YYYY-MM-DD HH:mm:ss",
  week: "gggg-wo",
  month: "YYYY-MM"
};
var LOCALE_FORMAT_MAPPING = {
  date: "dateFormat",
  dateTime: "dateTimeFormat",
  week: "weekFormat",
  month: "monthFormat"
};
function getColumns(_ref) {
  var showHour = _ref.showHour, showMinute = _ref.showMinute, showSecond = _ref.showSecond, use12Hours = _ref.use12Hours;
  var column = 0;
  if (showHour) {
    column += 1;
  }
  if (showMinute) {
    column += 1;
  }
  if (showSecond) {
    column += 1;
  }
  if (use12Hours) {
    column += 1;
  }
  return column;
}
function wrapPicker(Picker2, props2, pickerType) {
  return defineComponent({
    name: Picker2.name,
    inheritAttrs: false,
    props: _extends(_extends({}, props2), {
      transitionName: PropsTypes.string.def("slide-up"),
      popupStyle: PropsTypes.style,
      locale: PropsTypes.any.def({})
    }),
    emits: ["update:value", "openChange", "focus", "blur", "mouseenter", "mouseleave", "change", "ok", "calendarChange"],
    setup: function setup161() {
      return {
        configProvider: inject("configProvider", defaultConfigProvider),
        picker: void 0,
        popupRef: void 0
      };
    },
    watch: {
      value: function value26(val) {
        checkValidate("DatePicker", val, "value", this.valueFormat);
      }
    },
    created: function created26() {
      provide("savePopupRef", this.savePopupRef);
    },
    mounted: function mounted45() {
      var _this = this;
      var _this$$props = this.$props, autofocus = _this$$props.autofocus, disabled = _this$$props.disabled, value26 = _this$$props.value, defaultValue = _this$$props.defaultValue, valueFormat = _this$$props.valueFormat;
      checkValidate("DatePicker", defaultValue, "defaultValue", valueFormat);
      checkValidate("DatePicker", value26, "value", valueFormat);
      if (autofocus && !disabled) {
        nextTick(function() {
          _this.focus();
        });
      }
    },
    methods: {
      savePicker: function savePicker2(node) {
        this.picker = node;
      },
      getDefaultLocale: function getDefaultLocale3() {
        var result = _extends(_extends({}, enUS), this.locale);
        result.lang = _extends(_extends({}, result.lang), (this.locale || {}).lang);
        return result;
      },
      savePopupRef: function savePopupRef6(ref2) {
        this.popupRef = ref2;
      },
      handleOpenChange: function handleOpenChange3(open6) {
        this.$emit("openChange", open6);
      },
      handleFocus: function handleFocus2(e) {
        this.$emit("focus", e);
      },
      handleBlur: function handleBlur4(e) {
        this.$emit("blur", e);
      },
      handleMouseEnter: function handleMouseEnter2(e) {
        this.$emit("mouseenter", e);
      },
      handleMouseLeave: function handleMouseLeave2(e) {
        this.$emit("mouseleave", e);
      },
      handleChange: function handleChange22(date, dateString) {
        var value26 = this.valueFormat ? momentToString(date, this.valueFormat) : date;
        this.$emit("update:value", value26);
        this.$emit("change", value26, dateString);
      },
      handleOk: function handleOk2(val) {
        this.$emit("ok", this.valueFormat ? momentToString(val, this.valueFormat) : val);
      },
      handleCalendarChange: function handleCalendarChange(date, dateString) {
        this.$emit("calendarChange", this.valueFormat ? momentToString(date, this.valueFormat) : date, dateString);
      },
      focus: function focus27() {
        this.picker.focus();
      },
      blur: function blur24() {
        this.picker.blur();
      },
      transformValue: function transformValue(props3) {
        if ("value" in props3) {
          props3.value = stringToMoment(props3.value, this.valueFormat);
        }
        if ("defaultValue" in props3) {
          props3.defaultValue = stringToMoment(props3.defaultValue, this.valueFormat);
        }
        if ("defaultPickerValue" in props3) {
          props3.defaultPickerValue = stringToMoment(props3.defaultPickerValue, this.valueFormat);
        }
      },
      renderPicker: function renderPicker(locale2, localeCode) {
        var _classNames2;
        var props3 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
        this.transformValue(props3);
        var customizePrefixCls = props3.prefixCls, customizeInputPrefixCls = props3.inputPrefixCls, getCalendarContainer = props3.getCalendarContainer, size = props3.size, showTime = props3.showTime, disabled = props3.disabled, format3 = props3.format;
        var mergedPickerType = showTime ? "".concat(pickerType, "Time") : pickerType;
        var mergedFormat = format3 || locale2[LOCALE_FORMAT_MAPPING[mergedPickerType]] || DEFAULT_FORMAT[mergedPickerType];
        var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, getContextPopupContainer = _this$configProvider.getPopupContainer;
        var getPopupContainer = getCalendarContainer || getContextPopupContainer;
        var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
        var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
        var pickerClass = classNames("".concat(prefixCls2, "-picker"), _defineProperty({}, "".concat(prefixCls2, "-picker-").concat(size), !!size));
        var pickerInputClass = classNames("".concat(prefixCls2, "-picker-input"), inputPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(inputPrefixCls, "-lg"), size === "large"), _defineProperty(_classNames2, "".concat(inputPrefixCls, "-sm"), size === "small"), _defineProperty(_classNames2, "".concat(inputPrefixCls, "-disabled"), disabled), _classNames2));
        var timeFormat = showTime && showTime.format || "HH:mm:ss";
        var vcTimePickerProps = _extends(_extends({}, generateShowHourMinuteSecond(timeFormat)), {
          format: timeFormat,
          use12Hours: showTime && showTime.use12Hours
        });
        var columns2 = getColumns(vcTimePickerProps);
        var timePickerCls = "".concat(prefixCls2, "-time-picker-column-").concat(columns2);
        var timePickerPanelProps = _extends(_extends(_extends({}, vcTimePickerProps), showTime), {
          prefixCls: "".concat(prefixCls2, "-time-picker"),
          placeholder: locale2.timePickerLocale.placeholder,
          transitionName: "slide-up",
          class: timePickerCls,
          onEsc: function onEsc5() {
          }
        });
        var timePicker = showTime ? createVNode(TimePickerPanel, timePickerPanelProps, null) : null;
        var pickerProps = _extends(_extends({}, props3), {
          getCalendarContainer: getPopupContainer,
          format: mergedFormat,
          pickerClass,
          pickerInputClass,
          locale: locale2,
          localeCode,
          timePicker,
          onOpenChange: this.handleOpenChange,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onMouseenter: this.handleMouseEnter,
          onMouseleave: this.handleMouseLeave,
          onChange: this.handleChange,
          onOk: this.handleOk,
          onCalendarChange: this.handleCalendarChange,
          ref: this.savePicker
        });
        return createVNode(Picker2, pickerProps, this.$slots);
      }
    },
    render: function render165() {
      return createVNode(LocaleReceiver, {
        "componentName": "DatePicker",
        "defaultLocale": this.getDefaultLocale,
        "children": this.renderPicker
      }, null);
    }
  });
}
function noop$i() {
}
var CalendarPart = {
  name: "CalendarPart",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    value: PropsTypes.any,
    hoverValue: PropsTypes.any,
    selectedValue: PropsTypes.any,
    direction: PropsTypes.any,
    locale: PropsTypes.any,
    showDateInput: PropsTypes.looseBool,
    showTimePicker: PropsTypes.looseBool,
    showWeekNumber: PropsTypes.looseBool,
    format: PropsTypes.any,
    placeholder: PropsTypes.any,
    disabledDate: PropsTypes.any,
    timePicker: PropsTypes.any,
    disabledTime: PropsTypes.any,
    disabledMonth: PropsTypes.any,
    mode: PropsTypes.any,
    timePickerDisabledTime: PropsTypes.object,
    enableNext: PropsTypes.any,
    enablePrev: PropsTypes.any,
    clearIcon: PropsTypes.any,
    dateRender: PropsTypes.func,
    inputMode: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool
  },
  render: function render82() {
    var props2 = this.$props;
    var prefixCls2 = props2.prefixCls, value26 = props2.value, hoverValue2 = props2.hoverValue, selectedValue6 = props2.selectedValue, mode4 = props2.mode, direction = props2.direction, locale2 = props2.locale, format3 = props2.format, placeholder = props2.placeholder, disabledDate = props2.disabledDate, timePicker = props2.timePicker, disabledTime = props2.disabledTime, timePickerDisabledTime = props2.timePickerDisabledTime, showTimePicker = props2.showTimePicker, enablePrev = props2.enablePrev, enableNext = props2.enableNext, disabledMonth = props2.disabledMonth, showDateInput = props2.showDateInput, dateRender = props2.dateRender, showWeekNumber = props2.showWeekNumber, showClear = props2.showClear, inputMode = props2.inputMode, inputReadOnly = props2.inputReadOnly;
    var clearIcon = getComponent(this, "clearIcon");
    var _this$$attrs = this.$attrs, _this$$attrs$onInputC = _this$$attrs.onInputChange, onInputChange3 = _this$$attrs$onInputC === void 0 ? noop$i : _this$$attrs$onInputC, _this$$attrs$onInputS = _this$$attrs.onInputSelect, onInputSelect2 = _this$$attrs$onInputS === void 0 ? noop$i : _this$$attrs$onInputS, _this$$attrs$onValueC = _this$$attrs.onValueChange, onValueChange = _this$$attrs$onValueC === void 0 ? noop$i : _this$$attrs$onValueC, _this$$attrs$onPanelC = _this$$attrs.onPanelChange, onPanelChange3 = _this$$attrs$onPanelC === void 0 ? noop$i : _this$$attrs$onPanelC, _this$$attrs$onSelect = _this$$attrs.onSelect, onSelect6 = _this$$attrs$onSelect === void 0 ? noop$i : _this$$attrs$onSelect, _this$$attrs$onDayHov = _this$$attrs.onDayHover, onDayHover2 = _this$$attrs$onDayHov === void 0 ? noop$i : _this$$attrs$onDayHov;
    var shouldShowTimePicker = showTimePicker && timePicker;
    var disabledTimeConfig = shouldShowTimePicker && disabledTime ? getTimeConfig(selectedValue6, disabledTime) : null;
    var rangeClassName = "".concat(prefixCls2, "-range");
    var newProps = {
      locale: locale2,
      value: value26,
      prefixCls: prefixCls2,
      showTimePicker
    };
    var index2 = direction === "left" ? 0 : 1;
    var timePickerEle = null;
    if (shouldShowTimePicker) {
      var timePickerProps3 = getOptionProps(timePicker);
      timePickerEle = cloneElement(timePicker, _extends(_extends(_extends(_extends({
        showHour: true,
        showMinute: true,
        showSecond: true
      }, timePickerProps3), disabledTimeConfig), timePickerDisabledTime), {
        defaultOpenValue: value26,
        value: selectedValue6[index2],
        onChange: onInputChange3
      }));
    }
    var dateInputElement = showDateInput && createVNode(DateInput$1, {
      "format": format3,
      "locale": locale2,
      "prefixCls": prefixCls2,
      "timePicker": timePicker,
      "disabledDate": disabledDate,
      "placeholder": placeholder,
      "disabledTime": disabledTime,
      "value": value26,
      "showClear": showClear || false,
      "selectedValue": selectedValue6[index2],
      "onChange": onInputChange3,
      "onSelect": onInputSelect2,
      "clearIcon": clearIcon,
      "inputMode": inputMode,
      "inputReadOnly": inputReadOnly
    }, null);
    var headerProps = _extends(_extends({}, newProps), {
      mode: mode4,
      enableNext,
      enablePrev,
      disabledMonth,
      onValueChange,
      onPanelChange: onPanelChange3
    });
    var tableProps2 = _extends(_extends({}, newProps), {
      hoverValue: hoverValue2,
      selectedValue: selectedValue6,
      dateRender,
      disabledDate,
      showWeekNumber,
      onSelect: onSelect6,
      onDayHover: onDayHover2
    });
    return createVNode("div", {
      "class": "".concat(rangeClassName, "-part ").concat(rangeClassName, "-").concat(direction)
    }, [dateInputElement, createVNode("div", {
      "style": {
        outline: "none"
      }
    }, [createVNode(CalendarHeader$1, headerProps, null), showTimePicker ? createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker-panel")
    }, [timePickerEle])]) : null, createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode(DateTable$1, tableProps2, null)])])]);
  }
};
var CalendarPart$1 = CalendarPart;
function noop$h() {
}
function isEmptyArray$1(arr) {
  return Array.isArray(arr) && (arr.length === 0 || arr.every(function(i) {
    return !i;
  }));
}
function isArraysEqual(a, b) {
  if (a === b)
    return true;
  if (a === null || typeof a === "undefined" || b === null || typeof b === "undefined") {
    return false;
  }
  if (a.length !== b.length)
    return false;
  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i])
      return false;
  }
  return true;
}
function getValueFromSelectedValue(selectedValue6) {
  var _selectedValue = _slicedToArray(selectedValue6, 2), start = _selectedValue[0], end = _selectedValue[1];
  if (end && (start === void 0 || start === null)) {
    start = end.clone().subtract(1, "month");
  }
  if (start && (end === void 0 || end === null)) {
    end = start.clone().add(1, "month");
  }
  return [start, end];
}
function normalizeAnchor(props2, init) {
  var selectedValue6 = props2.selectedValue || init && props2.defaultSelectedValue;
  var value26 = props2.value || init && props2.defaultValue;
  var normalizedValue = value26 ? getValueFromSelectedValue(value26) : getValueFromSelectedValue(selectedValue6);
  return !isEmptyArray$1(normalizedValue) ? normalizedValue : init && [hooks(), hooks().add(1, "months")];
}
function generateOptions(length, extraOptionGen) {
  var arr = extraOptionGen ? extraOptionGen().concat() : [];
  for (var value26 = 0; value26 < length; value26++) {
    if (arr.indexOf(value26) === -1) {
      arr.push(value26);
    }
  }
  return arr;
}
function onInputSelect(direction, value26, cause) {
  if (!value26) {
    return;
  }
  var originalValue = this.sSelectedValue;
  var selectedValue6 = originalValue.concat();
  var index2 = direction === "left" ? 0 : 1;
  selectedValue6[index2] = value26;
  if (selectedValue6[0] && this.compare(selectedValue6[0], selectedValue6[1]) > 0) {
    selectedValue6[1 - index2] = this.sShowTimePicker ? selectedValue6[index2] : void 0;
  }
  this.__emit("inputSelect", selectedValue6);
  this.fireSelectValueChange(selectedValue6, null, cause || {
    source: "dateInput"
  });
}
var RangeCalendar = defineComponent({
  name: "RangeCalendar",
  mixins: [BaseMixin, CommonMixin],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    dateInputPlaceholder: PropsTypes.any,
    seperator: PropsTypes.string.def("~"),
    defaultValue: PropsTypes.any,
    value: PropsTypes.any,
    hoverValue: PropsTypes.any,
    mode: PropsTypes.arrayOf(PropsTypes.oneOf(["time", "date", "month", "year", "decade"])),
    showDateInput: PropsTypes.looseBool.def(true),
    timePicker: PropsTypes.any,
    showOk: PropsTypes.looseBool,
    showToday: PropsTypes.looseBool.def(true),
    defaultSelectedValue: PropsTypes.array.def([]),
    selectedValue: PropsTypes.array,
    showClear: PropsTypes.looseBool,
    showWeekNumber: PropsTypes.looseBool,
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string), PropsTypes.func]),
    type: PropsTypes.any.def("both"),
    disabledDate: PropsTypes.func,
    disabledTime: PropsTypes.func.def(noop$h),
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    }),
    dateRender: PropsTypes.func,
    clearIcon: PropsTypes.any,
    inputReadOnly: PropsTypes.looseBool
  },
  data: function data39() {
    var props2 = this.$props;
    var selectedValue6 = props2.selectedValue || props2.defaultSelectedValue;
    var value26 = normalizeAnchor(props2, 1);
    return {
      sSelectedValue: selectedValue6,
      prevSelectedValue: selectedValue6,
      firstSelectedValue: null,
      sHoverValue: props2.hoverValue || [],
      sValue: value26,
      sShowTimePicker: false,
      sMode: props2.mode || ["date", "date"],
      sPanelTriggerSource: ""
    };
  },
  watch: {
    value: function value22() {
      var newState = {};
      newState.sValue = normalizeAnchor(this.$props, 0);
      this.setState(newState);
    },
    hoverValue: function hoverValue(val) {
      if (!isArraysEqual(this.sHoverValue, val)) {
        this.setState({
          sHoverValue: val
        });
      }
    },
    selectedValue: function selectedValue5(val) {
      var newState = {};
      newState.sSelectedValue = val;
      newState.prevSelectedValue = val;
      this.setState(newState);
    },
    mode: function mode3(val) {
      if (!isArraysEqual(this.sMode, val)) {
        this.setState({
          sMode: val
        });
      }
    }
  },
  methods: {
    onDatePanelEnter: function onDatePanelEnter() {
      if (this.hasSelectedValue()) {
        this.fireHoverValueChange(this.sSelectedValue.concat());
      }
    },
    onDatePanelLeave: function onDatePanelLeave() {
      if (this.hasSelectedValue()) {
        this.fireHoverValueChange([]);
      }
    },
    onSelect: function onSelect4(value26) {
      var type2 = this.type, sSelectedValue = this.sSelectedValue, prevSelectedValue = this.prevSelectedValue, firstSelectedValue = this.firstSelectedValue;
      var nextSelectedValue;
      if (type2 === "both") {
        if (!firstSelectedValue) {
          syncTime(prevSelectedValue[0], value26);
          nextSelectedValue = [value26];
        } else if (this.compare(firstSelectedValue, value26) < 0) {
          syncTime(prevSelectedValue[1], value26);
          nextSelectedValue = [firstSelectedValue, value26];
        } else {
          syncTime(prevSelectedValue[0], value26);
          syncTime(prevSelectedValue[1], firstSelectedValue);
          nextSelectedValue = [value26, firstSelectedValue];
        }
      } else if (type2 === "start") {
        syncTime(prevSelectedValue[0], value26);
        var endValue = sSelectedValue[1];
        nextSelectedValue = endValue && this.compare(endValue, value26) > 0 ? [value26, endValue] : [value26];
      } else {
        var startValue = sSelectedValue[0];
        if (startValue && this.compare(startValue, value26) <= 0) {
          syncTime(prevSelectedValue[1], value26);
          nextSelectedValue = [startValue, value26];
        } else {
          syncTime(prevSelectedValue[0], value26);
          nextSelectedValue = [value26];
        }
      }
      this.fireSelectValueChange(nextSelectedValue);
    },
    onKeyDown: function onKeyDown9(event) {
      var _this = this;
      if (event.target.nodeName.toLowerCase() === "input") {
        return;
      }
      var keyCode = event.keyCode;
      var ctrlKey = event.ctrlKey || event.metaKey;
      var _this$$data = this.$data, selectedValue6 = _this$$data.sSelectedValue, hoverValue2 = _this$$data.sHoverValue, firstSelectedValue = _this$$data.firstSelectedValue, value26 = _this$$data.sValue;
      var disabledDate = this.$props.disabledDate;
      var updateHoverPoint = function updateHoverPoint2(func) {
        var currentHoverTime;
        var nextHoverTime;
        var nextHoverValue;
        if (!firstSelectedValue) {
          currentHoverTime = hoverValue2[0] || selectedValue6[0] || value26[0] || hooks();
          nextHoverTime = func(currentHoverTime);
          nextHoverValue = [nextHoverTime];
          _this.fireHoverValueChange(nextHoverValue);
        } else {
          if (hoverValue2.length === 1) {
            currentHoverTime = hoverValue2[0].clone();
            nextHoverTime = func(currentHoverTime);
            nextHoverValue = _this.onDayHover(nextHoverTime);
          } else {
            currentHoverTime = hoverValue2[0].isSame(firstSelectedValue, "day") ? hoverValue2[1] : hoverValue2[0];
            nextHoverTime = func(currentHoverTime);
            nextHoverValue = _this.onDayHover(nextHoverTime);
          }
        }
        if (nextHoverValue.length >= 2) {
          var miss = nextHoverValue.some(function(ht) {
            return !includesTime(value26, ht, "month");
          });
          if (miss) {
            var newValue = nextHoverValue.slice().sort(function(t1, t2) {
              return t1.valueOf() - t2.valueOf();
            });
            if (newValue[0].isSame(newValue[1], "month")) {
              newValue[1] = newValue[0].clone().add(1, "month");
            }
            _this.fireValueChange(newValue);
          }
        } else if (nextHoverValue.length === 1) {
          var oriValueIndex = value26.findIndex(function(time) {
            return time.isSame(currentHoverTime, "month");
          });
          if (oriValueIndex === -1)
            oriValueIndex = 0;
          if (value26.every(function(time) {
            return !time.isSame(nextHoverTime, "month");
          })) {
            var _newValue = value26.slice();
            _newValue[oriValueIndex] = nextHoverTime.clone();
            _this.fireValueChange(_newValue);
          }
        }
        event.preventDefault();
        return nextHoverTime;
      };
      switch (keyCode) {
        case KeyCode$2.DOWN:
          updateHoverPoint(function(time) {
            return goTime(time, 1, "weeks");
          });
          return;
        case KeyCode$2.UP:
          updateHoverPoint(function(time) {
            return goTime(time, -1, "weeks");
          });
          return;
        case KeyCode$2.LEFT:
          if (ctrlKey) {
            updateHoverPoint(function(time) {
              return goTime(time, -1, "years");
            });
          } else {
            updateHoverPoint(function(time) {
              return goTime(time, -1, "days");
            });
          }
          return;
        case KeyCode$2.RIGHT:
          if (ctrlKey) {
            updateHoverPoint(function(time) {
              return goTime(time, 1, "years");
            });
          } else {
            updateHoverPoint(function(time) {
              return goTime(time, 1, "days");
            });
          }
          return;
        case KeyCode$2.HOME:
          updateHoverPoint(function(time) {
            return goStartMonth(time);
          });
          return;
        case KeyCode$2.END:
          updateHoverPoint(function(time) {
            return goEndMonth(time);
          });
          return;
        case KeyCode$2.PAGE_DOWN:
          updateHoverPoint(function(time) {
            return goTime(time, 1, "month");
          });
          return;
        case KeyCode$2.PAGE_UP:
          updateHoverPoint(function(time) {
            return goTime(time, -1, "month");
          });
          return;
        case KeyCode$2.ENTER: {
          var lastValue;
          if (hoverValue2.length === 0) {
            lastValue = updateHoverPoint(function(time) {
              return time;
            });
          } else if (hoverValue2.length === 1) {
            lastValue = hoverValue2[0];
          } else {
            lastValue = hoverValue2[0].isSame(firstSelectedValue, "day") ? hoverValue2[1] : hoverValue2[0];
          }
          if (lastValue && (!disabledDate || !disabledDate(lastValue))) {
            this.onSelect(lastValue);
          }
          event.preventDefault();
          return;
        }
        default:
          this.__emit("keydown", event);
      }
    },
    onDayHover: function onDayHover(value26) {
      var hoverValue2 = [];
      var sSelectedValue = this.sSelectedValue, firstSelectedValue = this.firstSelectedValue, type2 = this.type;
      if (type2 === "start" && sSelectedValue[1]) {
        hoverValue2 = this.compare(value26, sSelectedValue[1]) < 0 ? [value26, sSelectedValue[1]] : [value26];
      } else if (type2 === "end" && sSelectedValue[0]) {
        hoverValue2 = this.compare(value26, sSelectedValue[0]) > 0 ? [sSelectedValue[0], value26] : [];
      } else {
        if (!firstSelectedValue) {
          if (this.sHoverValue.length) {
            this.setState({
              sHoverValue: []
            });
          }
          return hoverValue2;
        }
        hoverValue2 = this.compare(value26, firstSelectedValue) < 0 ? [value26, firstSelectedValue] : [firstSelectedValue, value26];
      }
      this.fireHoverValueChange(hoverValue2);
      return hoverValue2;
    },
    onToday: function onToday2() {
      var startValue = getTodayTime(this.sValue[0]);
      var endValue = startValue.clone().add(1, "months");
      this.setState({
        sValue: [startValue, endValue]
      });
    },
    onOpenTimePicker: function onOpenTimePicker() {
      this.setState({
        sShowTimePicker: true
      });
    },
    onCloseTimePicker: function onCloseTimePicker() {
      this.setState({
        sShowTimePicker: false
      });
    },
    onOk: function onOk2() {
      var sSelectedValue = this.sSelectedValue;
      if (this.isAllowedDateAndTime(sSelectedValue)) {
        this.__emit("ok", sSelectedValue);
      }
    },
    onStartInputChange: function onStartInputChange() {
      for (var _len = arguments.length, oargs = new Array(_len), _key = 0; _key < _len; _key++) {
        oargs[_key] = arguments[_key];
      }
      var args = ["left"].concat(oargs);
      return onInputSelect.apply(this, args);
    },
    onEndInputChange: function onEndInputChange() {
      for (var _len2 = arguments.length, oargs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        oargs[_key2] = arguments[_key2];
      }
      var args = ["right"].concat(oargs);
      return onInputSelect.apply(this, args);
    },
    onStartInputSelect: function onStartInputSelect(value26) {
      var args = ["left", value26, {
        source: "dateInputSelect"
      }];
      return onInputSelect.apply(this, args);
    },
    onEndInputSelect: function onEndInputSelect(value26) {
      var args = ["right", value26, {
        source: "dateInputSelect"
      }];
      return onInputSelect.apply(this, args);
    },
    onStartValueChange: function onStartValueChange(leftValue) {
      var value26 = _toConsumableArray(this.sValue);
      value26[0] = leftValue;
      return this.fireValueChange(value26);
    },
    onEndValueChange: function onEndValueChange(rightValue) {
      var value26 = _toConsumableArray(this.sValue);
      value26[1] = rightValue;
      return this.fireValueChange(value26);
    },
    onStartPanelChange: function onStartPanelChange(value26, mode4) {
      var sMode = this.sMode, sValue = this.sValue;
      var newMode = [mode4, sMode[1]];
      var newValue = [value26 || sValue[0], sValue[1]];
      this.__emit("panelChange", newValue, newMode);
      var newState = {
        sPanelTriggerSource: "start"
      };
      if (!hasProp(this, "mode")) {
        newState.sMode = newMode;
      }
      this.setState(newState);
    },
    onEndPanelChange: function onEndPanelChange(value26, mode4) {
      var sMode = this.sMode, sValue = this.sValue;
      var newMode = [sMode[0], mode4];
      var newValue = [sValue[0], value26 || sValue[1]];
      this.__emit("panelChange", newValue, newMode);
      var newState = {
        sPanelTriggerSource: "end"
      };
      if (!hasProp(this, "mode")) {
        newState.sMode = newMode;
      }
      this.setState(newState);
    },
    getStartValue: function getStartValue() {
      var _this$$data2 = this.$data, selectedValue6 = _this$$data2.sSelectedValue, showTimePicker = _this$$data2.sShowTimePicker, value26 = _this$$data2.sValue, mode4 = _this$$data2.sMode, panelTriggerSource = _this$$data2.sPanelTriggerSource;
      var startValue = value26[0];
      if (selectedValue6[0] && this.$props.timePicker) {
        startValue = startValue.clone();
        syncTime(selectedValue6[0], startValue);
      }
      if (showTimePicker && selectedValue6[0]) {
        startValue = selectedValue6[0];
      }
      if (panelTriggerSource === "end" && mode4[0] === "date" && mode4[1] === "date" && startValue.isSame(value26[1], "month")) {
        startValue = startValue.clone().subtract(1, "month");
      }
      return startValue;
    },
    getEndValue: function getEndValue() {
      var _this$$data3 = this.$data, selectedValue6 = _this$$data3.sSelectedValue, showTimePicker = _this$$data3.sShowTimePicker, value26 = _this$$data3.sValue, mode4 = _this$$data3.sMode, panelTriggerSource = _this$$data3.sPanelTriggerSource;
      var endValue = value26[1] ? value26[1].clone() : value26[0].clone().add(1, "month");
      if (selectedValue6[1] && this.$props.timePicker) {
        syncTime(selectedValue6[1], endValue);
      }
      if (showTimePicker) {
        endValue = selectedValue6[1] ? selectedValue6[1] : this.getStartValue();
      }
      if (!showTimePicker && panelTriggerSource !== "end" && mode4[0] === "date" && mode4[1] === "date" && endValue.isSame(value26[0], "month")) {
        endValue = endValue.clone().add(1, "month");
      }
      return endValue;
    },
    getEndDisableTime: function getEndDisableTime() {
      var sSelectedValue = this.sSelectedValue, sValue = this.sValue, disabledTime = this.disabledTime;
      var userSettingDisabledTime = disabledTime(sSelectedValue, "end") || {};
      var startValue = sSelectedValue && sSelectedValue[0] || sValue[0].clone();
      if (!sSelectedValue[1] || startValue.isSame(sSelectedValue[1], "day")) {
        var hours = startValue.hour();
        var minutes = startValue.minute();
        var second = startValue.second();
        var _disabledHours = userSettingDisabledTime.disabledHours, _disabledMinutes = userSettingDisabledTime.disabledMinutes, _disabledSeconds = userSettingDisabledTime.disabledSeconds;
        var oldDisabledMinutes = _disabledMinutes ? _disabledMinutes() : [];
        var olddisabledSeconds = _disabledSeconds ? _disabledSeconds() : [];
        _disabledHours = generateOptions(hours, _disabledHours);
        _disabledMinutes = generateOptions(minutes, _disabledMinutes);
        _disabledSeconds = generateOptions(second, _disabledSeconds);
        return {
          disabledHours: function disabledHours3() {
            return _disabledHours;
          },
          disabledMinutes: function disabledMinutes2(hour) {
            if (hour === hours) {
              return _disabledMinutes;
            }
            return oldDisabledMinutes;
          },
          disabledSeconds: function disabledSeconds2(hour, minute) {
            if (hour === hours && minute === minutes) {
              return _disabledSeconds;
            }
            return olddisabledSeconds;
          }
        };
      }
      return userSettingDisabledTime;
    },
    isAllowedDateAndTime: function isAllowedDateAndTime(selectedValue6) {
      return isAllowedDate(selectedValue6[0], this.disabledDate, this.disabledStartTime) && isAllowedDate(selectedValue6[1], this.disabledDate, this.disabledEndTime);
    },
    isMonthYearPanelShow: function isMonthYearPanelShow(mode4) {
      return ["month", "year", "decade"].indexOf(mode4) > -1;
    },
    hasSelectedValue: function hasSelectedValue() {
      var sSelectedValue = this.sSelectedValue;
      return !!sSelectedValue[1] && !!sSelectedValue[0];
    },
    compare: function compare(v1, v2) {
      if (this.timePicker) {
        return v1.diff(v2);
      }
      return v1.diff(v2, "days");
    },
    fireSelectValueChange: function fireSelectValueChange(selectedValue6, direct, cause) {
      var timePicker = this.timePicker, prevSelectedValue = this.prevSelectedValue;
      if (timePicker) {
        var timePickerProps3 = getOptionProps(timePicker);
        if (timePickerProps3.defaultValue) {
          var timePickerDefaultValue = timePickerProps3.defaultValue;
          if (!prevSelectedValue[0] && selectedValue6[0]) {
            syncTime(timePickerDefaultValue[0], selectedValue6[0]);
          }
          if (!prevSelectedValue[1] && selectedValue6[1]) {
            syncTime(timePickerDefaultValue[1], selectedValue6[1]);
          }
        }
      }
      if (!this.sSelectedValue[0] || !this.sSelectedValue[1]) {
        var startValue = selectedValue6[0] || hooks();
        var endValue = selectedValue6[1] || startValue.clone().add(1, "months");
        this.setState({
          sSelectedValue: selectedValue6,
          sValue: selectedValue6 && selectedValue6.length === 2 ? getValueFromSelectedValue([startValue, endValue]) : this.sValue
        });
      }
      if (selectedValue6[0] && !selectedValue6[1]) {
        this.setState({
          firstSelectedValue: selectedValue6[0]
        });
        this.fireHoverValueChange(selectedValue6.concat());
      }
      this.__emit("change", selectedValue6);
      if (direct || selectedValue6[0] && selectedValue6[1]) {
        this.setState({
          prevSelectedValue: selectedValue6,
          firstSelectedValue: null
        });
        this.fireHoverValueChange([]);
        this.__emit("select", selectedValue6, cause);
      }
      if (!hasProp(this, "selectedValue")) {
        this.setState({
          sSelectedValue: selectedValue6
        });
      }
    },
    fireValueChange: function fireValueChange(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      this.__emit("valueChange", value26);
    },
    fireHoverValueChange: function fireHoverValueChange(hoverValue2) {
      if (!hasProp(this, "hoverValue")) {
        this.setState({
          sHoverValue: hoverValue2
        });
      }
      this.__emit("hoverChange", hoverValue2);
    },
    clear: function clear() {
      this.fireSelectValueChange([], true);
      this.__emit("clear");
    },
    disabledStartTime: function disabledStartTime(time) {
      return this.disabledTime(time, "start");
    },
    disabledEndTime: function disabledEndTime(time) {
      return this.disabledTime(time, "end");
    },
    disabledStartMonth: function disabledStartMonth(month) {
      var sValue = this.sValue;
      return month.isAfter(sValue[1], "month");
    },
    disabledEndMonth: function disabledEndMonth(month) {
      var sValue = this.sValue;
      return month.isBefore(sValue[0], "month");
    }
  },
  render: function render83() {
    var _className, _cls;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, dateInputPlaceholder = props2.dateInputPlaceholder, timePicker = props2.timePicker, showOk = props2.showOk, locale2 = props2.locale, showClear = props2.showClear, showToday = props2.showToday, type2 = props2.type, seperator = props2.seperator;
    var clearIcon = getComponent(this, "clearIcon");
    var sHoverValue = this.sHoverValue, sSelectedValue = this.sSelectedValue, mode4 = this.sMode, sShowTimePicker = this.sShowTimePicker, sValue = this.sValue;
    var className = (_className = {}, _defineProperty(_className, this.$attrs.class, !!this.$attrs.class), _defineProperty(_className, prefixCls2, 1), _defineProperty(_className, "".concat(prefixCls2, "-hidden"), !props2.visible), _defineProperty(_className, "".concat(prefixCls2, "-range"), 1), _defineProperty(_className, "".concat(prefixCls2, "-show-time-picker"), sShowTimePicker), _defineProperty(_className, "".concat(prefixCls2, "-week-number"), props2.showWeekNumber), _className);
    var baseProps3 = _extends(_extends({}, props2), this.$attrs);
    var newProps = {
      selectedValue: sSelectedValue,
      onSelect: this.onSelect,
      onDayHover: type2 === "start" && sSelectedValue[1] || type2 === "end" && sSelectedValue[0] || !!sHoverValue.length ? this.onDayHover : noop$h
    };
    var placeholder1;
    var placeholder2;
    if (dateInputPlaceholder) {
      if (Array.isArray(dateInputPlaceholder)) {
        var _dateInputPlaceholder = _slicedToArray(dateInputPlaceholder, 2);
        placeholder1 = _dateInputPlaceholder[0];
        placeholder2 = _dateInputPlaceholder[1];
      } else {
        placeholder1 = placeholder2 = dateInputPlaceholder;
      }
    }
    var showOkButton = showOk === true || showOk !== false && !!timePicker;
    var cls = (_cls = {}, _defineProperty(_cls, "".concat(prefixCls2, "-footer"), true), _defineProperty(_cls, "".concat(prefixCls2, "-range-bottom"), true), _defineProperty(_cls, "".concat(prefixCls2, "-footer-show-ok"), showOkButton), _cls);
    var startValue = this.getStartValue();
    var endValue = this.getEndValue();
    var todayTime = getTodayTime(startValue);
    var thisMonth = todayTime.month();
    var thisYear = todayTime.year();
    var isTodayInView = startValue.year() === thisYear && startValue.month() === thisMonth || endValue.year() === thisYear && endValue.month() === thisMonth;
    var nextMonthOfStart = startValue.clone().add(1, "months");
    var isClosestMonths = nextMonthOfStart.year() === endValue.year() && nextMonthOfStart.month() === endValue.month();
    var leftPartProps = _extends(_extends(_extends({}, baseProps3), newProps), {
      hoverValue: sHoverValue,
      direction: "left",
      disabledTime: this.disabledStartTime,
      disabledMonth: this.disabledStartMonth,
      format: this.getFormat(),
      value: startValue,
      mode: mode4[0],
      placeholder: placeholder1,
      showDateInput: this.showDateInput,
      timePicker,
      showTimePicker: sShowTimePicker || mode4[0] === "time",
      enablePrev: true,
      enableNext: !isClosestMonths || this.isMonthYearPanelShow(mode4[1]),
      clearIcon,
      onInputChange: this.onStartInputChange,
      onInputSelect: this.onStartInputSelect,
      onValueChange: this.onStartValueChange,
      onPanelChange: this.onStartPanelChange
    });
    var rightPartProps = _extends(_extends(_extends({}, baseProps3), newProps), {
      hoverValue: sHoverValue,
      direction: "right",
      format: this.getFormat(),
      timePickerDisabledTime: this.getEndDisableTime(),
      placeholder: placeholder2,
      value: endValue,
      mode: mode4[1],
      showDateInput: this.showDateInput,
      timePicker,
      showTimePicker: sShowTimePicker || mode4[1] === "time",
      disabledTime: this.disabledEndTime,
      disabledMonth: this.disabledEndMonth,
      enablePrev: !isClosestMonths || this.isMonthYearPanelShow(mode4[0]),
      enableNext: true,
      clearIcon,
      onInputChange: this.onEndInputChange,
      onInputSelect: this.onEndInputSelect,
      onValueChange: this.onEndValueChange,
      onPanelChange: this.onEndPanelChange
    });
    var TodayButtonNode = null;
    if (showToday) {
      var todayButtonProps = _extends(_extends({}, baseProps3), {
        disabled: isTodayInView,
        value: sValue[0],
        text: locale2.backToToday,
        onToday: this.onToday
      });
      TodayButtonNode = createVNode(TodayButton$1, _objectSpread2({
        "key": "todayButton"
      }, todayButtonProps), null);
    }
    var TimePickerButtonNode = null;
    if (props2.timePicker) {
      var timePickerButtonProps = _extends(_extends({}, baseProps3), {
        showTimePicker: sShowTimePicker || mode4[0] === "time" && mode4[1] === "time",
        timePickerDisabled: !this.hasSelectedValue() || sHoverValue.length,
        onOpenTimePicker: this.onOpenTimePicker,
        onCloseTimePicker: this.onCloseTimePicker
      });
      TimePickerButtonNode = createVNode(TimePickerButton$1, _objectSpread2({
        "key": "timePickerButton"
      }, timePickerButtonProps), null);
    }
    var OkButtonNode = null;
    if (showOkButton) {
      var okButtonProps = _extends(_extends({}, baseProps3), {
        okDisabled: !this.isAllowedDateAndTime(sSelectedValue) || !this.hasSelectedValue() || sHoverValue.length,
        onOk: this.onOk
      });
      OkButtonNode = createVNode(OkButton$1, _objectSpread2({
        "key": "okButtonNode"
      }, okButtonProps), null);
    }
    var extraFooter = this.renderFooter(mode4);
    return createVNode("div", {
      "ref": "rootInstance",
      "class": className,
      "tabindex": "0",
      "onKeydown": this.onKeyDown
    }, [props2.renderSidebar(), createVNode("div", {
      "class": "".concat(prefixCls2, "-panel")
    }, [showClear && sSelectedValue[0] && sSelectedValue[1] ? createVNode("a", {
      "role": "button",
      "title": locale2.clear,
      "onClick": this.clear
    }, [clearIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-clear-btn")
    }, null)]) : null, createVNode("div", {
      "class": "".concat(prefixCls2, "-date-panel"),
      "onMouseleave": type2 !== "both" ? this.onDatePanelLeave : noop$h,
      "onMouseenter": type2 !== "both" ? this.onDatePanelEnter : noop$h
    }, [createVNode(CalendarPart$1, leftPartProps, null), createVNode("span", {
      "class": "".concat(prefixCls2, "-range-middle")
    }, [seperator]), createVNode(CalendarPart$1, rightPartProps, null)]), createVNode("div", {
      "class": cls
    }, [showToday || props2.timePicker || showOkButton || extraFooter ? createVNode("div", {
      "class": "".concat(prefixCls2, "-footer-btn")
    }, [extraFooter, TodayButtonNode, TimePickerButtonNode, OkButtonNode]) : null])])]);
  }
});
var RangeCalendar$1 = RangeCalendar;
var CheckableTag = defineComponent({
  name: "ACheckableTag",
  props: {
    prefixCls: PropsTypes.string,
    checked: PropsTypes.looseBool,
    onChange: {
      type: Function
    },
    onClick: {
      type: Function
    }
  },
  emits: ["update:checked", "change", "click"],
  setup: function setup77(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var _useConfigInject = useConfigInject("tag", props2), prefixCls2 = _useConfigInject.prefixCls;
    var handleClick5 = function handleClick6(e) {
      var checked2 = props2.checked;
      emit("update:checked", !checked2);
      emit("change", !checked2);
      emit("click", e);
    };
    var cls = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2.value, "-checkable"), true), _defineProperty(_classNames, "".concat(prefixCls2.value, "-checkable-checked"), props2.checked), _classNames));
    });
    return function() {
      var _a;
      return createVNode("span", {
        "class": cls.value,
        "onClick": handleClick5
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var CheckableTag$1 = CheckableTag;
var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
var PresetStatusColorRegex = new RegExp("^(".concat(PresetStatusColorTypes.join("|"), ")$"));
var tagProps = {
  prefixCls: PropsTypes.string,
  color: {
    type: String
  },
  closable: PropsTypes.looseBool.def(false),
  closeIcon: PropsTypes.VNodeChild,
  visible: PropsTypes.looseBool,
  onClose: {
    type: Function
  },
  icon: PropsTypes.VNodeChild
};
var Tag = defineComponent({
  name: "ATag",
  props: tagProps,
  emits: ["update:visible", "close"],
  slots: ["closeIcon", "icon"],
  setup: function setup78(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("tag", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var visible9 = ref(true);
    watchEffect(function() {
      if (props2.visible !== void 0) {
        visible9.value = props2.visible;
      }
    });
    var handleCloseClick = function handleCloseClick2(e) {
      e.stopPropagation();
      emit("update:visible", false);
      emit("close", e);
      if (e.defaultPrevented) {
        return;
      }
      if (props2.visible === void 0) {
        visible9.value = false;
      }
    };
    var isPresetColor2 = computed(function() {
      var color = props2.color;
      if (!color) {
        return false;
      }
      return PresetColorRegex.test(color) || PresetStatusColorRegex.test(color);
    });
    var tagClassName = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2.value, "-").concat(props2.color), isPresetColor2.value), _defineProperty(_classNames, "".concat(prefixCls2.value, "-has-color"), props2.color && !isPresetColor2.value), _defineProperty(_classNames, "".concat(prefixCls2.value, "-hidden"), !visible9.value), _defineProperty(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _classNames));
    });
    return function() {
      var _a, _b, _c;
      var _props$icon = props2.icon, icon = _props$icon === void 0 ? (_a = slots.icon) === null || _a === void 0 ? void 0 : _a.call(slots) : _props$icon, color = props2.color, _props$closeIcon = props2.closeIcon, closeIcon = _props$closeIcon === void 0 ? (_b = slots.closeIcon) === null || _b === void 0 ? void 0 : _b.call(slots) : _props$closeIcon, _props$closable = props2.closable, closable = _props$closable === void 0 ? false : _props$closable;
      var renderCloseIcon2 = function renderCloseIcon3() {
        if (closable) {
          return closeIcon ? createVNode("div", {
            "class": "".concat(prefixCls2.value, "-close-icon"),
            "onClick": handleCloseClick
          }, [closeIcon]) : createVNode(CloseOutlined, {
            "class": "".concat(prefixCls2.value, "-close-icon"),
            "onClick": handleCloseClick
          }, null);
        }
        return null;
      };
      var tagStyle = {
        backgroundColor: color && !isPresetColor2.value ? color : void 0
      };
      var iconNode = icon || null;
      var children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);
      var kids = iconNode ? createVNode(Fragment, null, [iconNode, createVNode("span", null, [children])]) : children;
      var isNeedWave = "onClick" in attrs;
      var tagNode = createVNode("span", {
        "class": tagClassName.value,
        "style": tagStyle
      }, [kids, renderCloseIcon2()]);
      return isNeedWave ? createVNode(Wave, null, {
        default: function _default8() {
          return [tagNode];
        }
      }) : tagNode;
    };
  }
});
Tag.CheckableTag = CheckableTag$1;
Tag.install = function(app) {
  app.component(Tag.name, Tag);
  app.component(CheckableTag$1.name, CheckableTag$1);
  return app;
};
var Tag$1 = Tag;
var PickerProps = {
  name: PropsTypes.string,
  transitionName: PropsTypes.string,
  prefixCls: PropsTypes.string,
  inputPrefixCls: PropsTypes.string,
  format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array, PropsTypes.func]),
  disabled: PropsTypes.looseBool,
  allowClear: PropsTypes.looseBool,
  suffixIcon: PropsTypes.any,
  popupStyle: PropsTypes.object,
  dropdownClassName: PropsTypes.string,
  locale: PropsTypes.any,
  localeCode: PropsTypes.string,
  size: PropsTypes.oneOf(tuple("large", "small", "default")),
  getCalendarContainer: PropsTypes.func,
  open: PropsTypes.looseBool,
  disabledDate: PropsTypes.func,
  showToday: PropsTypes.looseBool,
  dateRender: PropsTypes.any,
  pickerClass: PropsTypes.string,
  pickerInputClass: PropsTypes.string,
  timePicker: PropsTypes.any,
  autofocus: PropsTypes.looseBool,
  tagPrefixCls: PropsTypes.string,
  tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  align: PropsTypes.object.def(function() {
    return {};
  }),
  inputReadOnly: PropsTypes.looseBool,
  valueFormat: PropsTypes.string,
  onOpenChange: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func,
  onMouseenter: PropsTypes.func,
  onMouseleave: PropsTypes.func
};
var SinglePickerProps = {
  value: {
    type: [String, Object]
  },
  defaultValue: {
    type: [String, Object]
  },
  defaultPickerValue: {
    type: [String, Object]
  },
  renderExtraFooter: PropsTypes.any,
  placeholder: PropsTypes.string,
  onChange: PropsTypes.func
};
var DatePickerProps = _extends(_extends(_extends({}, PickerProps), SinglePickerProps), {
  showTime: withUndefined(PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool])),
  open: PropsTypes.looseBool,
  disabledTime: PropsTypes.func,
  mode: PropsTypes.oneOf(tuple("time", "date", "month", "year", "decade")),
  onOpenChange: PropsTypes.func,
  onPanelChange: PropsTypes.func,
  onOk: PropsTypes.func
});
var MonthPickerProps = _extends(_extends(_extends({}, PickerProps), SinglePickerProps), {
  placeholder: PropsTypes.string,
  monthCellContentRender: PropsTypes.func
});
var RangePickerProps = _extends(_extends({}, PickerProps), {
  tagPrefixCls: PropsTypes.string,
  value: {
    type: Array
  },
  defaultValue: {
    type: Array
  },
  defaultPickerValue: {
    type: Array
  },
  timePicker: PropsTypes.any,
  showTime: withUndefined(PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool])),
  ranges: PropsTypes.object,
  placeholder: PropsTypes.arrayOf(String),
  mode: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(String)]),
  separator: PropsTypes.any,
  disabledTime: PropsTypes.func,
  showToday: PropsTypes.looseBool,
  renderExtraFooter: PropsTypes.any,
  onChange: PropsTypes.func,
  onCalendarChange: PropsTypes.func,
  onOk: PropsTypes.func,
  onPanelChange: PropsTypes.func,
  onMouseenter: PropsTypes.func,
  onMouseleave: PropsTypes.func
});
var WeekPickerProps = _extends(_extends(_extends({}, PickerProps), SinglePickerProps), {
  placeholder: PropsTypes.string
});
var InputIcon = function InputIcon2(_, _ref) {
  var _classNames;
  var attrs = _ref.attrs;
  var _a, _b;
  var suffixIcon = attrs.suffixIcon, prefixCls2 = attrs.prefixCls;
  return (suffixIcon && isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
    class: classNames((_classNames = {}, _defineProperty(_classNames, (_a = suffixIcon.props) === null || _a === void 0 ? void 0 : _a.class, (_b = suffixIcon.props) === null || _b === void 0 ? void 0 : _b.class), _defineProperty(_classNames, "".concat(prefixCls2, "-picker-icon"), true), _classNames))
  }) : createVNode("span", {
    "class": "".concat(prefixCls2, "-picker-icon")
  }, [suffixIcon])) || createVNode(CalendarOutlined, {
    "class": "".concat(prefixCls2, "-picker-icon")
  }, null);
};
InputIcon.inheritAttrs = false;
var InputIcon$1 = InputIcon;
function getShowDateFromValue(value26, mode4) {
  var _value = _slicedToArray(value26, 2), start = _value[0], end = _value[1];
  if (!start && !end) {
    return;
  }
  if (mode4 && mode4[0] === "month") {
    return [start, end];
  }
  var newEnd = end && end.isSame(start, "month") ? end.clone().add(1, "month") : end;
  return [start, newEnd];
}
function pickerValueAdapter(value26) {
  if (!value26) {
    return;
  }
  if (Array.isArray(value26)) {
    return value26;
  }
  return [value26, value26.clone().add(1, "month")];
}
function isEmptyArray(arr) {
  if (Array.isArray(arr)) {
    return arr.length === 0 || arr.every(function(i) {
      return !i;
    });
  }
  return false;
}
function fixLocale(value26, localeCode) {
  if (!localeCode) {
    return;
  }
  if (!value26 || value26.length === 0) {
    return;
  }
  var _value2 = _slicedToArray(value26, 2), start = _value2[0], end = _value2[1];
  if (start) {
    start.locale(localeCode);
  }
  if (end) {
    end.locale(localeCode);
  }
}
var RangePicker = defineComponent({
  name: "ARangePicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(RangePickerProps, {
    allowClear: true,
    showToday: false,
    separator: "~"
  }),
  setup: function setup79() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      picker: null,
      sTagPrefixCls: void 0,
      sPrefixCls: ""
    };
  },
  data: function data40() {
    var value26 = this.value || this.defaultValue || [];
    var _value3 = _slicedToArray(value26, 2), start = _value3[0], end = _value3[1];
    if (start && !interopDefault(hooks).isMoment(start) || end && !interopDefault(hooks).isMoment(end)) {
      throw new Error("The value/defaultValue of RangePicker must be a moment object array after `antd@2.0`, see: https://u.ant.design/date-picker-value");
    }
    var pickerValue = !value26 || isEmptyArray(value26) ? this.defaultPickerValue : value26;
    return {
      sValue: value26,
      sShowDate: pickerValueAdapter(pickerValue || interopDefault(hooks)()),
      sOpen: this.open,
      sHoverValue: []
    };
  },
  watch: {
    value: function value23(val) {
      var value26 = val || [];
      var state = {
        sValue: value26
      };
      if (!shallowEqual$1(val, this.sValue)) {
        state = _extends(_extends({}, state), {
          sShowDate: getShowDateFromValue(value26, this.mode) || this.sShowDate
        });
      }
      this.setState(state);
    },
    open: function open4(val) {
      var state = {
        sOpen: val
      };
      this.setState(state);
    },
    sOpen: function sOpen(val, oldVal) {
      var _this = this;
      nextTick(function() {
        if (!hasProp(_this, "open") && oldVal && !val) {
          _this.focus();
        }
      });
    }
  },
  methods: {
    setValue: function setValue8(value26, hidePanel) {
      this.handleChange(value26);
      if ((hidePanel || !this.showTime) && !hasProp(this, "open")) {
        this.setState({
          sOpen: false
        });
      }
    },
    savePicker: function savePicker(node) {
      this.picker = node;
    },
    clearSelection: function clearSelection2(e) {
      e.preventDefault();
      e.stopPropagation();
      this.setState({
        sValue: []
      });
      this.handleChange([]);
    },
    clearHoverValue: function clearHoverValue() {
      this.setState({
        sHoverValue: []
      });
    },
    handleChange: function handleChange12(value26) {
      if (!hasProp(this, "value")) {
        this.setState(function(_ref) {
          var sShowDate = _ref.sShowDate;
          return {
            sValue: value26,
            sShowDate: getShowDateFromValue(value26) || sShowDate
          };
        });
      }
      if (value26[0] && value26[1] && value26[0].diff(value26[1]) > 0) {
        value26[1] = void 0;
      }
      var _value4 = _slicedToArray(value26, 2), start = _value4[0], end = _value4[1];
      this.$emit("change", value26, [formatDate(start, this.format), formatDate(end, this.format)]);
    },
    handleOpenChange: function handleOpenChange(open6) {
      if (!hasProp(this, "open")) {
        this.setState({
          sOpen: open6
        });
      }
      if (open6 === false) {
        this.clearHoverValue();
      }
      this.$emit("openChange", open6);
    },
    handleShowDateChange: function handleShowDateChange(showDate) {
      this.setState({
        sShowDate: showDate
      });
    },
    handleHoverChange: function handleHoverChange(hoverValue2) {
      this.setState({
        sHoverValue: hoverValue2
      });
    },
    handleRangeMouseLeave: function handleRangeMouseLeave() {
      if (this.sOpen) {
        this.clearHoverValue();
      }
    },
    handleCalendarInputSelect: function handleCalendarInputSelect(value26) {
      var _value5 = _slicedToArray(value26, 1), start = _value5[0];
      if (!start) {
        return;
      }
      this.setState(function(_ref2) {
        var sShowDate = _ref2.sShowDate;
        return {
          sValue: value26,
          sShowDate: getShowDateFromValue(value26) || sShowDate
        };
      });
    },
    handleRangeClick: function handleRangeClick(value26) {
      if (typeof value26 === "function") {
        value26 = value26();
      }
      this.setValue(value26, true);
      this.$emit("ok", value26);
      this.$emit("openChange", false);
    },
    onMouseEnter: function onMouseEnter(e) {
      this.$emit("mouseenter", e);
    },
    onMouseLeave: function onMouseLeave(e) {
      this.$emit("mouseleave", e);
    },
    focus: function focus15() {
      this.picker.focus();
    },
    blur: function blur12() {
      this.picker.blur();
    },
    renderFooter: function renderFooter() {
      var _this2 = this;
      var ranges = this.ranges, $slots = this.$slots;
      var prefixCls2 = this.sPrefixCls, tagPrefixCls = this.sTagPrefixCls;
      var renderExtraFooter = this.renderExtraFooter || $slots.renderExtraFooter;
      if (!ranges && !renderExtraFooter) {
        return null;
      }
      var customFooter = renderExtraFooter ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer-extra"),
        "key": "extra"
      }, [typeof renderExtraFooter === "function" ? renderExtraFooter() : renderExtraFooter]) : null;
      var operations = ranges && Object.keys(ranges).map(function(range) {
        var value26 = ranges[range];
        var hoverValue2 = typeof value26 === "function" ? value26.call(_this2) : value26;
        return createVNode(Tag$1, {
          "key": range,
          "prefixCls": tagPrefixCls,
          "color": "blue",
          "onClick": function onClick7() {
            return _this2.handleRangeClick(value26);
          },
          "onMouseenter": function onMouseenter2() {
            return _this2.setState({
              sHoverValue: hoverValue2
            });
          },
          "onMouseleave": _this2.handleRangeMouseLeave
        }, {
          default: function _default8() {
            return [range];
          }
        });
      });
      var rangeNode = operations && operations.length > 0 ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer-extra ").concat(prefixCls2, "-range-quick-selector"),
        "key": "range"
      }, [operations]) : null;
      return [rangeNode, customFooter];
    }
  },
  render: function render84() {
    var _classNames, _this3 = this;
    var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var value26 = this.sValue, showDate = this.sShowDate, hoverValue2 = this.sHoverValue, open6 = this.sOpen, $slots = this.$slots;
    var customizePrefixCls = props2.prefixCls, customizeTagPrefixCls = props2.tagPrefixCls, popupStyle = props2.popupStyle, disabledDate = props2.disabledDate, disabledTime = props2.disabledTime, showTime = props2.showTime, showToday = props2.showToday, ranges = props2.ranges, locale2 = props2.locale, localeCode = props2.localeCode, format3 = props2.format, separator = props2.separator, inputReadOnly = props2.inputReadOnly, style3 = props2.style, onCalendarChange = props2.onCalendarChange, onOk3 = props2.onOk, onBlur7 = props2.onBlur, onFocus6 = props2.onFocus, onPanelChange3 = props2.onPanelChange;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
    var tagPrefixCls = getPrefixCls2("tag", customizeTagPrefixCls);
    this.sPrefixCls = prefixCls2;
    this.sTagPrefixCls = tagPrefixCls;
    var dateRender = props2.dateRender || $slots.dateRender;
    fixLocale(value26, localeCode);
    fixLocale(showDate, localeCode);
    var calendarClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-time"), showTime), _defineProperty(_classNames, "".concat(prefixCls2, "-range-with-ranges"), ranges), _classNames));
    var pickerChangeHandler = {
      onChange: this.handleChange
    };
    var calendarProps = {
      onOk: this.handleChange
    };
    if (props2.timePicker) {
      pickerChangeHandler.onChange = function(changedValue) {
        return _this3.handleChange(changedValue);
      };
    } else {
      calendarProps = {};
    }
    if ("mode" in props2) {
      calendarProps.mode = props2.mode;
    }
    var startPlaceholder = Array.isArray(props2.placeholder) ? props2.placeholder[0] : locale2.lang.rangePlaceholder[0];
    var endPlaceholder = Array.isArray(props2.placeholder) ? props2.placeholder[1] : locale2.lang.rangePlaceholder[1];
    var rangeCalendarProps = _extends(_extends({}, calendarProps), {
      separator,
      format: format3,
      prefixCls: prefixCls2,
      renderFooter: this.renderFooter,
      timePicker: props2.timePicker,
      disabledDate,
      disabledTime,
      dateInputPlaceholder: [startPlaceholder, endPlaceholder],
      locale: locale2.lang,
      dateRender,
      value: showDate,
      hoverValue: hoverValue2,
      showToday,
      inputReadOnly,
      onChange: onCalendarChange,
      onOk: onOk3,
      onValueChange: this.handleShowDateChange,
      onHoverChange: this.handleHoverChange,
      onPanelChange: onPanelChange3,
      onInputSelect: this.handleCalendarInputSelect,
      class: calendarClassName
    });
    var calendar = createVNode(RangeCalendar$1, rangeCalendarProps, $slots);
    var pickerStyle = {};
    if (props2.showTime) {
      pickerStyle.width = "350px";
    }
    var _value6 = _slicedToArray(value26, 2), startValue = _value6[0], endValue = _value6[1];
    var clearIcon = !props2.disabled && props2.allowClear && value26 && (startValue || endValue) ? createVNode(CloseCircleFilled, {
      "class": "".concat(prefixCls2, "-picker-clear"),
      "onClick": this.clearSelection
    }, null) : null;
    var inputIcon = createVNode(InputIcon$1, {
      "suffixIcon": suffixIcon,
      "prefixCls": prefixCls2
    }, null);
    var input = function input2(_ref3) {
      var inputValue = _ref3.value;
      var _inputValue = _slicedToArray(inputValue, 2), start = _inputValue[0], end = _inputValue[1];
      return createVNode("span", {
        "class": props2.pickerInputClass
      }, [createVNode("input", {
        "disabled": props2.disabled,
        "readonly": true,
        "value": formatDate(start, props2.format),
        "placeholder": startPlaceholder,
        "class": "".concat(prefixCls2, "-range-picker-input"),
        "tabindex": -1
      }, null), createVNode("span", {
        "class": "".concat(prefixCls2, "-range-picker-separator")
      }, [createTextVNode(" "), separator, createTextVNode(" ")]), createVNode("input", {
        "disabled": props2.disabled,
        "readonly": true,
        "value": formatDate(end, props2.format),
        "placeholder": endPlaceholder,
        "class": "".concat(prefixCls2, "-range-picker-input"),
        "tabindex": -1
      }, null), clearIcon, inputIcon]);
    };
    var vcDatePickerProps = _extends(_extends(_extends({}, props2), pickerChangeHandler), {
      calendar,
      value: value26,
      open: open6,
      prefixCls: "".concat(prefixCls2, "-picker-container"),
      onOpenChange: this.handleOpenChange,
      style: popupStyle
    });
    return createVNode("span", _objectSpread2({
      "ref": this.savePicker,
      "id": props2.id,
      "class": classNames(props2.class, props2.pickerClass),
      "style": _extends(_extends({}, pickerStyle), style3),
      "tabindex": props2.disabled ? -1 : 0,
      "onFocus": onFocus6,
      "onBlur": onBlur7,
      "onMouseenter": this.onMouseEnter,
      "onMouseleave": this.onMouseLeave
    }, getDataAndAriaProps$1(props2)), [createVNode(VcDatePicker, vcDatePickerProps, _extends({
      default: input
    }, $slots))]);
  }
});
function formatValue(value26, format3) {
  return value26 && value26.format(format3) || "";
}
function noop$g() {
}
var WeekPicker = defineComponent({
  name: "AWeekPicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(WeekPickerProps, {
    allowClear: true
  }),
  setup: function setup80() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      prevState: {},
      input: void 0,
      sPrefixCls: void 0
    };
  },
  data: function data41() {
    var value26 = this.value || this.defaultValue;
    if (value26 && !interopDefault(hooks).isMoment(value26)) {
      throw new Error("The value/defaultValue of WeekPicker or MonthPicker must be a moment object");
    }
    return {
      _value: value26,
      _open: this.open
    };
  },
  watch: {
    value: function value24(val) {
      var state = {
        _value: val
      };
      this.setState(state);
      this.prevState = _extends(_extends({}, this.$data), state);
    },
    open: function open5(val) {
      var state = {
        _open: val
      };
      this.setState(state);
      this.prevState = _extends(_extends({}, this.$data), state);
    },
    _open: function _open(val, oldVal) {
      var _this = this;
      nextTick(function() {
        if (!hasProp(_this, "open") && oldVal && !val) {
          _this.focus();
        }
      });
    }
  },
  mounted: function mounted21() {
    this.prevState = _extends({}, this.$data);
  },
  updated: function updated10() {
    var _this2 = this;
    nextTick(function() {
      if (!hasProp(_this2, "open") && _this2.prevState._open && !_this2._open) {
        _this2.focus();
      }
    });
  },
  methods: {
    saveInput: function saveInput5(node) {
      this.input = node;
    },
    weekDateRender: function weekDateRender(_ref) {
      var current2 = _ref.current;
      var selectedValue6 = this.$data._value;
      var prefixCls2 = this.sPrefixCls, $slots = this.$slots;
      var dateRender = this.dateRender || $slots.dateRender;
      var dateNode = dateRender ? dateRender({
        current: current2
      }) : current2.date();
      if (selectedValue6 && current2.year() === selectedValue6.year() && current2.week() === selectedValue6.week()) {
        return createVNode("div", {
          "class": "".concat(prefixCls2, "-selected-day")
        }, [createVNode("div", {
          "class": "".concat(prefixCls2, "-date")
        }, [dateNode])]);
      }
      return createVNode("div", {
        "class": "".concat(prefixCls2, "-date")
      }, [dateNode]);
    },
    handleChange: function handleChange13(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          _value: value26
        });
      }
      this.$emit("change", value26, formatValue(value26, this.format));
    },
    handleOpenChange: function handleOpenChange2(open6) {
      if (!hasProp(this, "open")) {
        this.setState({
          _open: open6
        });
      }
      this.$emit("openChange", open6);
    },
    clearSelection: function clearSelection3(e) {
      e.preventDefault();
      e.stopPropagation();
      this.handleChange(null);
    },
    focus: function focus16() {
      this.input.focus();
    },
    blur: function blur13() {
      this.input.blur();
    },
    renderFooter: function renderFooter2() {
      var prefixCls2 = this.sPrefixCls, $slots = this.$slots;
      var renderExtraFooter = this.renderExtraFooter || $slots.renderExtraFooter;
      return renderExtraFooter ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer-extra")
      }, [renderExtraFooter.apply(void 0, arguments)]) : null;
    }
  },
  render: function render85() {
    var _this3 = this;
    var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var customizePrefixCls = this.prefixCls, disabled = this.disabled, pickerClass = this.pickerClass, popupStyle = this.popupStyle, pickerInputClass = this.pickerInputClass, format3 = this.format, allowClear = this.allowClear, locale2 = this.locale, localeCode = this.localeCode, disabledDate = this.disabledDate, defaultPickerValue = this.defaultPickerValue, $data = this.$data, $slots = this.$slots;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
    this.sPrefixCls = prefixCls2;
    var pickerValue = $data._value, open6 = $data._open;
    var className = props2.class, style3 = props2.style, id2 = props2.id, _props$onFocus = props2.onFocus, onFocus6 = _props$onFocus === void 0 ? noop$g : _props$onFocus, _props$onBlur = props2.onBlur, onBlur7 = _props$onBlur === void 0 ? noop$g : _props$onBlur;
    if (pickerValue && localeCode) {
      pickerValue.locale(localeCode);
    }
    var placeholder = hasProp(this, "placeholder") ? this.placeholder : locale2.lang.placeholder;
    var weekDateRender2 = this.dateRender || $slots.dateRender || this.weekDateRender;
    var calendar = createVNode(Calendar$1, {
      "showWeekNumber": true,
      "dateRender": weekDateRender2,
      "prefixCls": prefixCls2,
      "format": format3,
      "locale": locale2.lang,
      "showDateInput": false,
      "showToday": false,
      "disabledDate": disabledDate,
      "renderFooter": this.renderFooter,
      "defaultValue": defaultPickerValue
    }, null);
    var clearIcon = !disabled && allowClear && $data._value ? createVNode(CloseCircleFilled, {
      "class": "".concat(prefixCls2, "-picker-clear"),
      "onClick": this.clearSelection
    }, null) : null;
    var inputIcon = createVNode(InputIcon$1, {
      "suffixIcon": suffixIcon,
      "prefixCls": prefixCls2
    }, null);
    var input = function input2(_ref2) {
      var value26 = _ref2.value;
      return createVNode("span", {
        "style": {
          display: "inline-block",
          width: "100%"
        }
      }, [createVNode("input", {
        "ref": _this3.saveInput,
        "disabled": disabled,
        "readonly": true,
        "value": value26 && value26.format(format3) || "",
        "placeholder": placeholder,
        "class": pickerInputClass,
        "onFocus": onFocus6,
        "onBlur": onBlur7
      }, null), clearIcon, inputIcon]);
    };
    var vcDatePickerProps = _extends(_extends({}, props2), {
      calendar,
      prefixCls: "".concat(prefixCls2, "-picker-container"),
      value: pickerValue,
      open: open6,
      onChange: this.handleChange,
      onOpenChange: this.handleOpenChange,
      style: popupStyle
    });
    return createVNode("span", _objectSpread2({
      "class": classNames(className, pickerClass),
      "style": style3,
      "id": id2
    }, getDataAndAriaProps$1(props2)), [createVNode(VcDatePicker, vcDatePickerProps, _extends({
      default: input
    }, $slots))]);
  }
});
var WrappedRangePicker = wrapPicker(RangePicker, RangePickerProps, "date");
var WrappedWeekPicker = wrapPicker(WeekPicker, WeekPickerProps, "week");
var DatePicker = wrapPicker(createPicker(Calendar$1, DatePickerProps, "ADatePicker"), DatePickerProps, "date");
var MonthPicker = wrapPicker(createPicker(MonthCalendar$1, MonthPickerProps, "AMonthPicker"), MonthPickerProps, "month");
_extends(DatePicker, {
  RangePicker: WrappedRangePicker,
  MonthPicker,
  WeekPicker: WrappedWeekPicker
});
DatePicker.install = function(app) {
  app.component(DatePicker.name, DatePicker);
  app.component(DatePicker.RangePicker.name, DatePicker.RangePicker);
  app.component(DatePicker.MonthPicker.name, DatePicker.MonthPicker);
  app.component(DatePicker.WeekPicker.name, DatePicker.WeekPicker);
  return app;
};
var DatePicker$1 = DatePicker;
function notEmpty(val) {
  return val !== void 0 && val !== null;
}
var Cell = function Cell2(props2) {
  var itemPrefixCls = props2.itemPrefixCls, component = props2.component, span = props2.span, labelStyle = props2.labelStyle, contentStyle = props2.contentStyle, bordered = props2.bordered, label = props2.label, content = props2.content, colon = props2.colon;
  var Component = component;
  if (bordered) {
    var _ref;
    return createVNode(Component, {
      "class": [(_ref = {}, _defineProperty(_ref, "".concat(itemPrefixCls, "-item-label"), notEmpty(label)), _defineProperty(_ref, "".concat(itemPrefixCls, "-item-content"), notEmpty(content)), _ref)],
      "colSpan": span
    }, {
      default: function _default8() {
        return [notEmpty(label) && createVNode("span", {
          "style": labelStyle
        }, [label]), notEmpty(content) && createVNode("span", {
          "style": contentStyle
        }, [content])];
      }
    });
  }
  return createVNode(Component, {
    "class": ["".concat(itemPrefixCls, "-item")],
    "colSpan": span
  }, {
    default: function _default8() {
      return [createVNode("div", {
        "class": "".concat(itemPrefixCls, "-item-container")
      }, [label && createVNode("span", {
        "class": ["".concat(itemPrefixCls, "-item-label"), _defineProperty({}, "".concat(itemPrefixCls, "-item-no-colon"), !colon)],
        "style": labelStyle
      }, [label]), content && createVNode("span", {
        "class": "".concat(itemPrefixCls, "-item-content"),
        "style": contentStyle
      }, [content])])];
    }
  });
};
var Cell$1 = Cell;
var Row = function Row2(props2) {
  var renderCells = function renderCells2(items, _ref, _ref2) {
    var colon = _ref.colon, prefixCls3 = _ref.prefixCls, bordered2 = _ref.bordered;
    var component = _ref2.component, type2 = _ref2.type, showLabel = _ref2.showLabel, showContent = _ref2.showContent, rootLabelStyle = _ref2.labelStyle, rootContentStyle = _ref2.contentStyle;
    return items.map(function(item, index3) {
      var _a, _b;
      var _ref3 = item.props || {}, _ref3$prefixCls = _ref3.prefixCls, itemPrefixCls = _ref3$prefixCls === void 0 ? prefixCls3 : _ref3$prefixCls, _ref3$span = _ref3.span, span = _ref3$span === void 0 ? 1 : _ref3$span, labelStyle2 = _ref3.labelStyle, contentStyle2 = _ref3.contentStyle, _ref3$label = _ref3.label, label = _ref3$label === void 0 ? (_b = (_a = item.children) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.call(_a) : _ref3$label;
      var children = getSlot(item);
      var className = getClass(item);
      var style3 = getStyle$1(item);
      var key2 = item.key;
      if (typeof component === "string") {
        return createVNode(Cell$1, {
          "key": "".concat(type2, "-").concat(String(key2) || index3),
          "class": className,
          "style": style3,
          "labelStyle": _extends(_extends({}, rootLabelStyle.value), labelStyle2),
          "contentStyle": _extends(_extends({}, rootContentStyle.value), contentStyle2),
          "span": span,
          "colon": colon,
          "component": component,
          "itemPrefixCls": itemPrefixCls,
          "bordered": bordered2,
          "label": showLabel ? label : null,
          "content": showContent ? children : null
        }, null);
      }
      return [createVNode(Cell$1, {
        "key": "label-".concat(String(key2) || index3),
        "class": className,
        "style": _extends(_extends(_extends({}, rootLabelStyle.value), style3), labelStyle2),
        "span": 1,
        "colon": colon,
        "component": component[0],
        "itemPrefixCls": itemPrefixCls,
        "bordered": bordered2,
        "label": label
      }, null), createVNode(Cell$1, {
        "key": "content-".concat(String(key2) || index3),
        "class": className,
        "style": _extends(_extends(_extends({}, rootContentStyle.value), style3), contentStyle2),
        "span": span * 2 - 1,
        "component": component[1],
        "itemPrefixCls": itemPrefixCls,
        "bordered": bordered2,
        "content": children
      }, null)];
    });
  };
  var prefixCls2 = props2.prefixCls, vertical = props2.vertical, row = props2.row, index2 = props2.index, bordered = props2.bordered;
  var _inject = inject(descriptionsContext, {
    labelStyle: ref({}),
    contentStyle: ref({})
  }), labelStyle = _inject.labelStyle, contentStyle = _inject.contentStyle;
  if (vertical) {
    return createVNode(Fragment, null, [createVNode("tr", {
      "key": "label-".concat(index2),
      "class": "".concat(prefixCls2, "-row")
    }, [renderCells(row, props2, {
      component: "th",
      type: "label",
      showLabel: true,
      labelStyle,
      contentStyle
    })]), createVNode("tr", {
      "key": "content-".concat(index2),
      "class": "".concat(prefixCls2, "-row")
    }, [renderCells(row, props2, {
      component: "td",
      type: "content",
      showContent: true,
      labelStyle,
      contentStyle
    })])]);
  }
  return createVNode("tr", {
    "key": index2,
    "class": "".concat(prefixCls2, "-row")
  }, [renderCells(row, props2, {
    component: bordered ? ["th", "td"] : "td",
    type: "item",
    showLabel: true,
    showContent: true,
    labelStyle,
    contentStyle
  })]);
};
var Row$1 = Row;
({
  prefixCls: PropsTypes.string,
  label: PropsTypes.any,
  span: PropsTypes.number
});
var descriptionsItemProp = {
  prefixCls: PropsTypes.string,
  label: PropsTypes.VNodeChild,
  labelStyle: PropsTypes.style,
  contentStyle: PropsTypes.style,
  span: PropsTypes.number.def(1)
};
var DescriptionsItem = defineComponent({
  name: "ADescriptionsItem",
  props: descriptionsItemProp,
  slots: ["label"],
  setup: function setup81(_, _ref) {
    var slots = _ref.slots;
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var DEFAULT_COLUMN_MAP = {
  xxl: 3,
  xl: 3,
  lg: 3,
  md: 3,
  sm: 2,
  xs: 1
};
function getColumn(column, screens2) {
  if (typeof column === "number") {
    return column;
  }
  if (_typeof(column) === "object") {
    for (var i = 0; i < responsiveArray.length; i++) {
      var breakpoint = responsiveArray[i];
      if (screens2[breakpoint] && column[breakpoint] !== void 0) {
        return column[breakpoint] || DEFAULT_COLUMN_MAP[breakpoint];
      }
    }
  }
  return 3;
}
function getFilledItem(node, span, rowRestCol) {
  var clone = node;
  if (span === void 0 || span > rowRestCol) {
    clone = cloneElement(node, {
      span: rowRestCol
    });
    warning$1(span === void 0, "Descriptions", "Sum of column `span` in a line not match `column` of Descriptions.");
  }
  return clone;
}
function getRows(children, column) {
  var childNodes = flattenChildren(children);
  var rows = [];
  var tmpRow = [];
  var rowRestCol = column;
  childNodes.forEach(function(node, index2) {
    var _a;
    var span = (_a = node.props) === null || _a === void 0 ? void 0 : _a.span;
    var mergedSpan = span || 1;
    if (index2 === childNodes.length - 1) {
      tmpRow.push(getFilledItem(node, span, rowRestCol));
      rows.push(tmpRow);
      return;
    }
    if (mergedSpan < rowRestCol) {
      rowRestCol -= mergedSpan;
      tmpRow.push(node);
    } else {
      tmpRow.push(getFilledItem(node, mergedSpan, rowRestCol));
      rows.push(tmpRow);
      rowRestCol = column;
      tmpRow = [];
    }
  });
  return rows;
}
var descriptionsProps = {
  prefixCls: PropsTypes.string,
  bordered: PropsTypes.looseBool,
  size: PropsTypes.oneOf(tuple("default", "middle", "small")).def("default"),
  title: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  column: {
    type: [Number, Object],
    default: function _default6() {
      return DEFAULT_COLUMN_MAP;
    }
  },
  layout: PropsTypes.oneOf(tuple("horizontal", "vertical")),
  colon: PropsTypes.looseBool,
  labelStyle: PropsTypes.style,
  contentStyle: PropsTypes.style
};
var descriptionsContext = Symbol("descriptionsContext");
var Descriptions = defineComponent({
  name: "ADescriptions",
  props: descriptionsProps,
  slots: ["title", "extra"],
  Item: DescriptionsItem,
  setup: function setup82(props2, _ref2) {
    var slots = _ref2.slots;
    var _useConfigInject = useConfigInject("descriptions", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var token;
    var screens2 = ref({});
    onMounted(function() {
      token = ResponsiveObserve.subscribe(function(screen) {
        if (_typeof(props2.column) !== "object") {
          return;
        }
        screens2.value = screen;
      });
    });
    onBeforeUnmount(function() {
      ResponsiveObserve.unsubscribe(token);
    });
    provide(descriptionsContext, {
      labelStyle: toRef(props2, "labelStyle"),
      contentStyle: toRef(props2, "contentStyle")
    });
    var mergeColumn = computed(function() {
      return getColumn(props2.column, screens2.value);
    });
    return function() {
      var _ref3;
      var _a, _b, _c;
      var size = props2.size, _props$bordered = props2.bordered, bordered = _props$bordered === void 0 ? false : _props$bordered, _props$layout = props2.layout, layout = _props$layout === void 0 ? "horizontal" : _props$layout, _props$colon = props2.colon, colon = _props$colon === void 0 ? true : _props$colon, _props$title = props2.title, title2 = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots) : _props$title, _props$extra = props2.extra, extra = _props$extra === void 0 ? (_b = slots.extra) === null || _b === void 0 ? void 0 : _b.call(slots) : _props$extra;
      var children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);
      var rows = getRows(children, mergeColumn.value);
      return createVNode("div", {
        "class": [prefixCls2.value, (_ref3 = {}, _defineProperty(_ref3, "".concat(prefixCls2.value, "-").concat(size), size !== "default"), _defineProperty(_ref3, "".concat(prefixCls2.value, "-bordered"), !!bordered), _defineProperty(_ref3, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _ref3)]
      }, [(title2 || extra) && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-header")
      }, [title2 && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-title")
      }, [title2]), extra && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-extra")
      }, [extra])]), createVNode("div", {
        "class": "".concat(prefixCls2.value, "-view")
      }, [createVNode("table", null, [createVNode("tbody", null, [rows.map(function(row, index2) {
        return createVNode(Row$1, {
          "key": index2,
          "index": index2,
          "colon": colon,
          "prefixCls": prefixCls2.value,
          "vertical": layout === "vertical",
          "bordered": bordered,
          "row": row
        }, null);
      })])])])]);
    };
  }
});
Descriptions.install = function(app) {
  app.component(Descriptions.name, Descriptions);
  app.component(Descriptions.Item.name, Descriptions.Item);
  return app;
};
var Descriptions$1 = Descriptions;
var dividerProps = {
  prefixCls: String,
  type: {
    type: String,
    default: "horizontal"
  },
  dashed: {
    type: Boolean,
    default: false
  },
  orientation: {
    type: String,
    default: "center"
  },
  plain: {
    type: Boolean,
    default: false
  }
};
var Divider = defineComponent({
  name: "ADivider",
  props: dividerProps,
  setup: function setup83(props2, _ref) {
    var slots = _ref.slots;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var prefixClsRef = computed(function() {
      return configProvider.getPrefixCls("divider", props2.prefixCls);
    });
    var classString = computed(function() {
      var _ref2;
      var type2 = props2.type, dashed = props2.dashed, plain = props2.plain;
      var prefixCls2 = prefixClsRef.value;
      return _ref2 = {}, _defineProperty(_ref2, prefixCls2, true), _defineProperty(_ref2, "".concat(prefixCls2, "-").concat(type2), true), _defineProperty(_ref2, "".concat(prefixCls2, "-dashed"), !!dashed), _defineProperty(_ref2, "".concat(prefixCls2, "-plain"), !!plain), _defineProperty(_ref2, "".concat(prefixCls2, "-rtl"), configProvider.direction === "rtl"), _ref2;
    });
    var orientationPrefix = computed(function() {
      return props2.orientation.length > 0 ? "-" + props2.orientation : props2.orientation;
    });
    return function() {
      var _a;
      var children = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      return createVNode("div", {
        "class": [classString.value, children.length ? "".concat(prefixClsRef.value, "-with-text ").concat(prefixClsRef.value, "-with-text").concat(orientationPrefix.value) : ""],
        "role": "separator"
      }, [children.length ? createVNode("span", {
        "class": "".concat(prefixClsRef.value, "-inner-text")
      }, [children]) : null]);
    };
  }
});
var index$a = withInstall(Divider);
Dropdown$1.Button = DropdownButton;
Dropdown$1.install = function(app) {
  app.component(Dropdown$1.name, Dropdown$1);
  app.component(DropdownButton.name, DropdownButton);
  return app;
};
var cached;
function getScrollBarSize(fresh) {
  if (fresh || cached === void 0) {
    var inner = document.createElement("div");
    inner.style.width = "100%";
    inner.style.height = "200px";
    var outer = document.createElement("div");
    var outerStyle = outer.style;
    outerStyle.position = "absolute";
    outerStyle.top = 0;
    outerStyle.left = 0;
    outerStyle.pointerEvents = "none";
    outerStyle.visibility = "hidden";
    outerStyle.width = "200px";
    outerStyle.height = "150px";
    outerStyle.overflow = "hidden";
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var widthContained = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var widthScroll = inner.offsetWidth;
    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }
    document.body.removeChild(outer);
    cached = widthContained - widthScroll;
  }
  return cached;
}
var IProps = {
  width: PropsTypes.any,
  height: PropsTypes.any,
  defaultOpen: PropsTypes.looseBool,
  firstEnter: PropsTypes.looseBool,
  open: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  placement: PropsTypes.string,
  level: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array]),
  levelMove: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.func, PropsTypes.array]),
  ease: PropsTypes.string,
  duration: PropsTypes.string,
  handler: PropsTypes.any,
  showMask: PropsTypes.looseBool,
  maskStyle: PropsTypes.object,
  className: PropsTypes.string,
  wrapStyle: PropsTypes.object,
  maskClosable: PropsTypes.looseBool,
  afterVisibleChange: PropsTypes.func,
  keyboard: PropsTypes.looseBool
};
var IDrawerProps = _extends(_extends({}, IProps), {
  wrapperClassName: PropsTypes.string,
  forceRender: PropsTypes.looseBool,
  getContainer: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func, PropsTypes.object, PropsTypes.looseBool])
});
_extends(_extends({}, IProps), {
  getContainer: PropsTypes.func,
  getOpenCount: PropsTypes.func,
  switchScrollingEffect: PropsTypes.func
});
function dataToArray(vars) {
  if (Array.isArray(vars)) {
    return vars;
  }
  return [vars];
}
var transitionEndObject = {
  transition: "transitionend",
  WebkitTransition: "webkitTransitionEnd",
  MozTransition: "transitionend",
  OTransition: "oTransitionEnd otransitionend"
};
var transitionStr = Object.keys(transitionEndObject).filter(function(key2) {
  if (typeof document === "undefined") {
    return false;
  }
  var html = document.getElementsByTagName("html")[0];
  return key2 in (html ? html.style : {});
})[0];
var transitionEnd = transitionEndObject[transitionStr];
function addEventListener(target, eventType, callback, options2) {
  if (target.addEventListener) {
    target.addEventListener(eventType, callback, options2);
  } else if (target.attachEvent) {
    target.attachEvent("on".concat(eventType), callback);
  }
}
function removeEventListener(target, eventType, callback, options2) {
  if (target.removeEventListener) {
    target.removeEventListener(eventType, callback, options2);
  } else if (target.attachEvent) {
    target.detachEvent("on".concat(eventType), callback);
  }
}
function transformArguments(arg, cb) {
  var result;
  if (typeof arg === "function") {
    result = arg(cb);
  } else {
    result = arg;
  }
  if (Array.isArray(result)) {
    if (result.length === 2) {
      return result;
    }
    return [result[0], result[1]];
  }
  return [result];
}
var isNumeric2 = function isNumeric3(value26) {
  return !isNaN(parseFloat(value26)) && isFinite(value26);
};
var __rest$t = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$f() {
}
var currentDrawer = {};
var windowIsUndefined$1 = !(typeof window !== "undefined" && window.document && window.document.createElement);
var Drawer$1 = defineComponent({
  name: "Drawer",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(IDrawerProps, {
    prefixCls: "drawer",
    placement: "left",
    getContainer: "body",
    level: "all",
    duration: ".3s",
    ease: "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
    firstEnter: false,
    showMask: true,
    handler: true,
    maskStyle: {},
    wrapperClassName: ""
  }),
  data: function data42() {
    this.levelDom = [];
    this.contentDom = null;
    this.maskDom = null;
    this.handlerdom = null;
    this.mousePos = null;
    this.sFirstEnter = this.firstEnter;
    this.timeout = null;
    this.children = null;
    this.dom = null;
    this.drawerId = Number((Date.now() + Math.random()).toString().replace(".", Math.round(Math.random() * 9))).toString(16);
    var open6 = this.open !== void 0 ? this.open : !!this.defaultOpen;
    currentDrawer[this.drawerId] = open6;
    this.orignalOpen = this.open;
    this.preProps = _extends({}, this.$props);
    return {
      sOpen: open6,
      isOpenChange: void 0,
      passive: void 0,
      container: void 0
    };
  },
  watch: {
    open: function(_open3) {
      function open6(_x) {
        return _open3.apply(this, arguments);
      }
      open6.toString = function() {
        return _open3.toString();
      };
      return open6;
    }(function(val) {
      var _this = this;
      if (val !== void 0 && val !== this.preProps.open) {
        this.isOpenChange = true;
        if (!this.container) {
          this.getDefault(this.$props);
        }
        this.setState({
          sOpen: open
        });
      }
      this.preProps.open = val;
      if (val) {
        setTimeout(function() {
          _this.domFocus();
        });
      }
    }),
    placement: function placement(val) {
      if (val !== this.preProps.placement) {
        this.contentDom = null;
      }
      this.preProps.placement = val;
    },
    level: function level(val) {
      if (this.preProps.level !== val) {
        this.getParentAndLevelDom(this.$props);
      }
      this.preProps.level = val;
    }
  },
  mounted: function mounted22() {
    var _this2 = this;
    nextTick(function() {
      if (!windowIsUndefined$1) {
        _this2.passive = supportsPassive$1 ? {
          passive: false
        } : false;
      }
      var open6 = _this2.getOpen();
      if (_this2.handler || open6 || _this2.sFirstEnter) {
        _this2.getDefault(_this2.$props);
        if (open6) {
          _this2.isOpenChange = true;
          nextTick(function() {
            _this2.domFocus();
          });
        }
        _this2.$forceUpdate();
      }
    });
  },
  updated: function updated11() {
    var _this3 = this;
    nextTick(function() {
      if (!_this3.sFirstEnter && _this3.container) {
        _this3.$forceUpdate();
        _this3.sFirstEnter = true;
      }
    });
  },
  beforeUnmount: function beforeUnmount14() {
    delete currentDrawer[this.drawerId];
    delete this.isOpenChange;
    if (this.container) {
      if (this.sOpen) {
        this.setLevelDomTransform(false, true);
      }
      document.body.style.overflow = "";
    }
    this.sFirstEnter = false;
    clearTimeout(this.timeout);
  },
  methods: {
    domFocus: function domFocus() {
      if (this.dom) {
        this.dom.focus();
      }
    },
    onKeyDown: function onKeyDown10(e) {
      if (e.keyCode === KeyCode$2.ESC) {
        e.stopPropagation();
        this.__emit("close", e);
      }
    },
    onMaskTouchEnd: function onMaskTouchEnd(e) {
      this.__emit("close", e);
      this.onTouchEnd(e, true);
    },
    onIconTouchEnd: function onIconTouchEnd(e) {
      this.__emit("handleClick", e);
      this.onTouchEnd(e);
    },
    onTouchEnd: function onTouchEnd(e, close7) {
      if (this.open !== void 0) {
        return;
      }
      var open6 = close7 || this.sOpen;
      this.isOpenChange = true;
      this.setState({
        sOpen: !open6
      });
    },
    onWrapperTransitionEnd: function onWrapperTransitionEnd(e) {
      if (e.target === this.contentWrapper && e.propertyName.match(/transform$/)) {
        var _open22 = this.getOpen();
        this.dom.style.transition = "";
        if (!_open22 && this.getCurrentDrawerSome()) {
          document.body.style.overflowX = "";
          if (this.maskDom) {
            this.maskDom.style.left = "";
            this.maskDom.style.width = "";
          }
        }
        if (this.afterVisibleChange) {
          this.afterVisibleChange(!!_open22);
        }
      }
    },
    getDefault: function getDefault(props2) {
      this.getParentAndLevelDom(props2);
      if (props2.getContainer || props2.parent) {
        this.container = this.defaultGetContainer();
      }
    },
    getCurrentDrawerSome: function getCurrentDrawerSome() {
      return !Object.keys(currentDrawer).some(function(key2) {
        return currentDrawer[key2];
      });
    },
    getSelfContainer: function getSelfContainer() {
      return this.container;
    },
    getParentAndLevelDom: function getParentAndLevelDom(props2) {
      var _this4 = this;
      if (windowIsUndefined$1) {
        return;
      }
      var level2 = props2.level, getContainer5 = props2.getContainer;
      this.levelDom = [];
      if (getContainer5) {
        if (typeof getContainer5 === "string") {
          var dom = document.querySelectorAll(getContainer5)[0];
          this.parent = dom;
        }
        if (typeof getContainer5 === "function") {
          this.parent = getContainer5();
        }
        if (_typeof(getContainer5) === "object" && getContainer5 instanceof window.HTMLElement) {
          this.parent = getContainer5;
        }
      }
      if (!getContainer5 && this.container) {
        this.parent = this.container.parentNode;
      }
      if (level2 === "all") {
        var children = Array.prototype.slice.call(this.parent.children);
        children.forEach(function(child) {
          if (child.nodeName !== "SCRIPT" && child.nodeName !== "STYLE" && child.nodeName !== "LINK" && child !== _this4.container) {
            _this4.levelDom.push(child);
          }
        });
      } else if (level2) {
        dataToArray(level2).forEach(function(key2) {
          document.querySelectorAll(key2).forEach(function(item) {
            _this4.levelDom.push(item);
          });
        });
      }
    },
    setLevelDomTransform: function setLevelDomTransform(open6, openTransition, placementName, value26) {
      var _this5 = this;
      var _this$$props = this.$props, placement2 = _this$$props.placement, levelMove = _this$$props.levelMove, duration2 = _this$$props.duration, ease = _this$$props.ease, getContainer5 = _this$$props.getContainer;
      if (!windowIsUndefined$1) {
        this.levelDom.forEach(function(dom) {
          if (dom && (_this5.isOpenChange || openTransition)) {
            dom.style.transition = "transform ".concat(duration2, " ").concat(ease);
            addEventListener(dom, transitionEnd, _this5.trnasitionEnd);
            var levelValue = open6 ? value26 : 0;
            if (levelMove) {
              var $levelMove = transformArguments(levelMove, {
                target: dom,
                open: open6
              });
              levelValue = open6 ? $levelMove[0] : $levelMove[1] || 0;
            }
            var $value = typeof levelValue === "number" ? "".concat(levelValue, "px") : levelValue;
            var placementPos = placement2 === "left" || placement2 === "top" ? $value : "-".concat($value);
            dom.style.transform = levelValue ? "".concat(placementName, "(").concat(placementPos, ")") : "";
            dom.style.msTransform = levelValue ? "".concat(placementName, "(").concat(placementPos, ")") : "";
          }
        });
        if (getContainer5 === "body") {
          var eventArray = ["touchstart"];
          var domArray = [document.body, this.maskDom, this.handlerdom, this.contentDom];
          var right = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth ? getScrollBarSize(1) : 0;
          var widthTransition = "width ".concat(duration2, " ").concat(ease);
          var trannsformTransition = "transform ".concat(duration2, " ").concat(ease);
          if (open6 && document.body.style.overflow !== "hidden") {
            document.body.style.overflow = "hidden";
            if (right) {
              document.body.style.position = "relative";
              document.body.style.width = "calc(100% - ".concat(right, "px)");
              clearTimeout(this.timeout);
              if (this.dom) {
                this.dom.style.transition = "none";
                switch (placement2) {
                  case "right":
                    this.dom.style.transform = "translateX(-".concat(right, "px)");
                    this.dom.style.msTransform = "translateX(-".concat(right, "px)");
                    break;
                  case "top":
                  case "bottom":
                    this.dom.style.width = "calc(100% - ".concat(right, "px)");
                    this.dom.style.transform = "translateZ(0)";
                    break;
                }
                this.timeout = setTimeout(function() {
                  _this5.dom.style.transition = "".concat(trannsformTransition, ",").concat(widthTransition);
                  _this5.dom.style.width = "";
                  _this5.dom.style.transform = "";
                  _this5.dom.style.msTransform = "";
                });
              }
            }
            domArray.forEach(function(item, i) {
              if (!item) {
                return;
              }
              addEventListener(item, eventArray[i] || "touchmove", i ? _this5.removeMoveHandler : _this5.removeStartHandler, _this5.passive);
            });
          } else if (this.getCurrentDrawerSome()) {
            document.body.style.overflow = "";
            if ((this.isOpenChange || openTransition) && right) {
              document.body.style.position = "";
              document.body.style.width = "";
              if (transitionStr) {
                document.body.style.overflowX = "hidden";
              }
              if (placement2 === "right" && this.maskDom) {
                this.maskDom.style.left = "-".concat(right, "px");
                this.maskDom.style.width = "calc(100% + ".concat(right, "px)");
              }
              clearTimeout(this.timeout);
              if (this.dom) {
                this.dom.style.transition = "none";
                var heightTransition;
                switch (placement2) {
                  case "right": {
                    this.dom.style.transform = "translateX(".concat(right, "px)");
                    this.dom.style.msTransform = "translateX(".concat(right, "px)");
                    this.dom.style.width = "100%";
                    widthTransition = "width 0s ".concat(ease, " ").concat(duration2);
                    break;
                  }
                  case "top":
                  case "bottom": {
                    this.dom.style.width = "calc(100% + ".concat(right, "px)");
                    this.dom.style.height = "100%";
                    this.dom.style.transform = "translateZ(0)";
                    heightTransition = "height 0s ".concat(ease, " ").concat(duration2);
                    break;
                  }
                }
                this.timeout = setTimeout(function() {
                  _this5.dom.style.transition = "".concat(trannsformTransition, ",").concat(heightTransition ? "".concat(heightTransition, ",") : "").concat(widthTransition);
                  _this5.dom.style.transform = "";
                  _this5.dom.style.msTransform = "";
                  _this5.dom.style.width = "";
                  _this5.dom.style.height = "";
                });
              }
            }
            domArray.forEach(function(item, i) {
              if (!item) {
                return;
              }
              removeEventListener(item, eventArray[i] || "touchmove", i ? _this5.removeMoveHandler : _this5.removeStartHandler, _this5.passive);
            });
          }
        }
      }
      var onChange9 = this.$attrs.onChange;
      if (onChange9 && this.isOpenChange && this.sFirstEnter) {
        onChange9(open6);
        this.isOpenChange = false;
      }
    },
    getChildToRender: function getChildToRender(open6) {
      var _classnames, _this6 = this, _touchEvents;
      var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, placement2 = _this$$props2.placement, handler8 = _this$$props2.handler, showMask = _this$$props2.showMask, maskStyle = _this$$props2.maskStyle, width = _this$$props2.width, height = _this$$props2.height, wrapStyle = _this$$props2.wrapStyle, keyboard = _this$$props2.keyboard, maskClosable = _this$$props2.maskClosable;
      var _a = this.$attrs, cls = _a.class, style3 = _a.style, restAttrs = __rest$t(_a, ["class", "style"]);
      var children = getSlot(this);
      var wrapperClassname = classNames(prefixCls2, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls2, "-").concat(placement2), true), _defineProperty(_classnames, "".concat(prefixCls2, "-open"), open6), _defineProperty(_classnames, "no-mask", !showMask), _defineProperty(_classnames, cls, cls), _classnames));
      var isOpenChange = this.isOpenChange;
      var isHorizontal = placement2 === "left" || placement2 === "right";
      var placementName = "translate".concat(isHorizontal ? "X" : "Y");
      var placementPos = placement2 === "left" || placement2 === "top" ? "-100%" : "100%";
      var transform = open6 ? "" : "".concat(placementName, "(").concat(placementPos, ")");
      if (isOpenChange === void 0 || isOpenChange) {
        var contentValue = this.contentDom ? this.contentDom.getBoundingClientRect()[isHorizontal ? "width" : "height"] : 0;
        var value26 = (isHorizontal ? width : height) || contentValue;
        this.setLevelDomTransform(open6, false, placementName, value26);
      }
      var handlerChildren;
      if (handler8 !== false) {
        var handlerDefalut = createVNode("div", {
          "class": "drawer-handle",
          "onClick": function onClick7() {
          }
        }, [createVNode("i", {
          "class": "drawer-handle-icon"
        }, null)]);
        var handlerSlot = this.handler;
        var handlerSlotVnode = handlerSlot || handlerDefalut;
        var handleIconClick = handlerSlotVnode.props && handlerSlotVnode.props.onClick;
        handlerChildren = cloneElement(handlerSlotVnode, {
          onClick: function onClick7(e) {
            handleIconClick && handleIconClick(e);
            _this6.onIconTouchEnd(e);
          },
          ref: function ref2(c) {
            _this6.handlerdom = c;
          }
        });
      }
      var domContProps = _extends(_extends({}, restAttrs), {
        class: wrapperClassname,
        onTransitionend: this.onWrapperTransitionEnd,
        onKeydown: open6 && keyboard ? this.onKeyDown : noop$f,
        style: _extends(_extends({}, wrapStyle), style3)
      });
      var touchEvents = (_touchEvents = {}, _defineProperty(_touchEvents, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", open6 ? this.removeStartHandler : noop$f), _defineProperty(_touchEvents, supportsPassive$1 ? "onTouchmovePassive" : "onTouchmove", open6 ? this.removeMoveHandler : noop$f), _touchEvents);
      return createVNode("div", _objectSpread2(_objectSpread2({
        "ref": function ref2(c) {
          _this6.dom = c;
        }
      }, domContProps), {}, {
        "tabindex": -1
      }), [showMask && createVNode("div", {
        "key": open6,
        "class": "".concat(prefixCls2, "-mask"),
        "onClick": maskClosable ? this.onMaskTouchEnd : noop$f,
        "style": maskStyle,
        "ref": function ref2(c) {
          _this6.maskDom = c;
        }
      }, null), createVNode("div", {
        "class": "".concat(prefixCls2, "-content-wrapper"),
        "style": {
          transform,
          msTransform: transform,
          width: isNumeric2(width) ? "".concat(width, "px") : width,
          height: isNumeric2(height) ? "".concat(height, "px") : height
        },
        "ref": function ref2(c) {
          _this6.contentWrapper = c;
        }
      }, [createVNode("div", _objectSpread2({
        "class": "".concat(prefixCls2, "-content"),
        "ref": function ref2(c) {
          _this6.contentDom = c;
        }
      }, touchEvents), [children]), handlerChildren])]);
    },
    getOpen: function getOpen() {
      return this.open !== void 0 ? this.open : this.sOpen;
    },
    getTouchParentScroll: function getTouchParentScroll(root, currentTarget, differX, differY) {
      if (!currentTarget || currentTarget === document) {
        return false;
      }
      if (currentTarget === root.parentNode) {
        return true;
      }
      var isY = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differY);
      var isX = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differX);
      var scrollY = currentTarget.scrollHeight - currentTarget.clientHeight;
      var scrollX = currentTarget.scrollWidth - currentTarget.clientWidth;
      var t = currentTarget.scrollTop;
      var l = currentTarget.scrollLeft;
      if (currentTarget.scrollTo) {
        currentTarget.scrollTo(currentTarget.scrollLeft + 1, currentTarget.scrollTop + 1);
      }
      var currentT = currentTarget.scrollTop;
      var currentL = currentTarget.scrollLeft;
      if (currentTarget.scrollTo) {
        currentTarget.scrollTo(currentTarget.scrollLeft - 1, currentTarget.scrollTop - 1);
      }
      if (isY && (!scrollY || !(currentT - t) || scrollY && (currentTarget.scrollTop >= scrollY && differY < 0 || currentTarget.scrollTop <= 0 && differY > 0)) || isX && (!scrollX || !(currentL - l) || scrollX && (currentTarget.scrollLeft >= scrollX && differX < 0 || currentTarget.scrollLeft <= 0 && differX > 0))) {
        return this.getTouchParentScroll(root, currentTarget.parentNode, differX, differY);
      }
      return false;
    },
    removeStartHandler: function removeStartHandler(e) {
      if (e.touches.length > 1) {
        return;
      }
      this.startPos = {
        x: e.touches[0].clientX,
        y: e.touches[0].clientY
      };
    },
    removeMoveHandler: function removeMoveHandler(e) {
      if (e.changedTouches.length > 1) {
        return;
      }
      var currentTarget = e.currentTarget;
      var differX = e.changedTouches[0].clientX - this.startPos.x;
      var differY = e.changedTouches[0].clientY - this.startPos.y;
      if (currentTarget === this.maskDom || currentTarget === this.handlerdom || currentTarget === this.contentDom && this.getTouchParentScroll(currentTarget, e.target, differX, differY)) {
        e.preventDefault();
      }
    },
    trnasitionEnd: function trnasitionEnd(e) {
      removeEventListener(e.target, transitionEnd, this.trnasitionEnd);
      e.target.style.transition = "";
    },
    defaultGetContainer: function defaultGetContainer() {
      if (windowIsUndefined$1) {
        return null;
      }
      var container = document.createElement("div");
      this.parent.appendChild(container);
      if (this.wrapperClassName) {
        container.className = this.wrapperClassName;
      }
      return container;
    }
  },
  render: function render86() {
    var _this7 = this;
    var _this$$props3 = this.$props, getContainer5 = _this$$props3.getContainer, wrapperClassName = _this$$props3.wrapperClassName, handler8 = _this$$props3.handler, forceRender = _this$$props3.forceRender;
    var open6 = this.getOpen();
    var portal = null;
    currentDrawer[this.drawerId] = open6 ? this.container : open6;
    var children = this.getChildToRender(this.sFirstEnter ? open6 : false);
    if (!getContainer5) {
      return createVNode("div", {
        "class": wrapperClassName,
        "ref": function ref2(c) {
          _this7.container = c;
        }
      }, [children]);
    }
    if (!this.container || !open6 && !this.sFirstEnter) {
      return null;
    }
    var $forceRender = !!handler8 || forceRender;
    if ($forceRender || open6 || this.dom) {
      portal = createVNode(Teleport, {
        "to": this.getSelfContainer()
      }, {
        default: function _default8() {
          return [children];
        }
      });
    }
    return portal;
  }
});
var Drawer$2 = Drawer$1;
var __rest$s = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var PlacementTypes = tuple("top", "right", "bottom", "left");
var Drawer = defineComponent({
  name: "ADrawer",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    closable: PropsTypes.looseBool.def(true),
    destroyOnClose: PropsTypes.looseBool,
    getContainer: PropsTypes.any,
    maskClosable: PropsTypes.looseBool.def(true),
    mask: PropsTypes.looseBool.def(true),
    maskStyle: PropsTypes.object,
    wrapStyle: PropsTypes.object,
    bodyStyle: PropsTypes.object,
    headerStyle: PropsTypes.object,
    drawerStyle: PropsTypes.object,
    title: PropsTypes.VNodeChild,
    visible: PropsTypes.looseBool,
    width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).def(256),
    height: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).def(256),
    zIndex: PropsTypes.number,
    prefixCls: PropsTypes.string,
    placement: PropsTypes.oneOf(PlacementTypes).def("right"),
    level: PropsTypes.any.def(null),
    wrapClassName: PropsTypes.string,
    handle: PropsTypes.VNodeChild,
    afterVisibleChange: PropsTypes.func,
    keyboard: PropsTypes.looseBool.def(true),
    onClose: PropsTypes.func,
    "onUpdate:visible": PropsTypes.func
  },
  setup: function setup84(props2) {
    var configProvider = inject("configProvider", defaultConfigProvider);
    return {
      configProvider,
      destroyClose: false,
      preVisible: props2.visible,
      parentDrawer: inject("parentDrawer", null)
    };
  },
  data: function data43() {
    return {
      sPush: false
    };
  },
  beforeCreate: function beforeCreate() {
    provide("parentDrawer", this);
  },
  mounted: function mounted23() {
    var visible9 = this.visible;
    if (visible9 && this.parentDrawer) {
      this.parentDrawer.push();
    }
  },
  updated: function updated12() {
    var _this = this;
    nextTick(function() {
      if (_this.preVisible !== _this.visible && _this.parentDrawer) {
        if (_this.visible) {
          _this.parentDrawer.push();
        } else {
          _this.parentDrawer.pull();
        }
      }
      _this.preVisible = _this.visible;
    });
  },
  beforeUnmount: function beforeUnmount15() {
    if (this.parentDrawer) {
      this.parentDrawer.pull();
    }
  },
  methods: {
    domFocus: function domFocus2() {
      if (this.$refs.vcDrawer) {
        this.$refs.vcDrawer.domFocus();
      }
    },
    close: function close3(e) {
      this.$emit("update:visible", false);
      this.$emit("close", e);
    },
    push: function push() {
      this.setState({
        sPush: true
      });
    },
    pull: function pull() {
      var _this2 = this;
      this.setState({
        sPush: false
      }, function() {
        _this2.domFocus();
      });
    },
    onDestroyTransitionEnd: function onDestroyTransitionEnd() {
      var isDestroyOnClose = this.getDestroyOnClose();
      if (!isDestroyOnClose) {
        return;
      }
      if (!this.visible) {
        this.destroyClose = true;
        this.$forceUpdate();
      }
    },
    getDestroyOnClose: function getDestroyOnClose() {
      return this.destroyOnClose && !this.visible;
    },
    getPushTransform: function getPushTransform(placement2) {
      if (placement2 === "left" || placement2 === "right") {
        return "translateX(".concat(placement2 === "left" ? 180 : -180, "px)");
      }
      if (placement2 === "top" || placement2 === "bottom") {
        return "translateY(".concat(placement2 === "top" ? 180 : -180, "px)");
      }
    },
    getRcDrawerStyle: function getRcDrawerStyle() {
      var _this$$props = this.$props, zIndex = _this$$props.zIndex, placement2 = _this$$props.placement, wrapStyle = _this$$props.wrapStyle;
      var push2 = this.$data.sPush;
      return _extends({
        zIndex,
        transform: push2 ? this.getPushTransform(placement2) : void 0
      }, wrapStyle);
    },
    renderHeader: function renderHeader(prefixCls2) {
      var _this$$props2 = this.$props, closable = _this$$props2.closable, headerStyle = _this$$props2.headerStyle;
      var title2 = getComponent(this, "title");
      if (!title2 && !closable) {
        return null;
      }
      var headerClassName = title2 ? "".concat(prefixCls2, "-header") : "".concat(prefixCls2, "-header-no-title");
      return createVNode("div", {
        "class": headerClassName,
        "style": headerStyle
      }, [title2 && createVNode("div", {
        "class": "".concat(prefixCls2, "-title")
      }, [title2]), closable ? this.renderCloseIcon(prefixCls2) : null]);
    },
    renderCloseIcon: function renderCloseIcon(prefixCls2) {
      var closable = this.closable;
      return closable && createVNode("button", {
        "key": "closer",
        "onClick": this.close,
        "aria-label": "Close",
        "class": "".concat(prefixCls2, "-close")
      }, [createVNode(CloseOutlined, null, null)]);
    },
    renderBody: function renderBody(prefixCls2) {
      var _a, _b;
      if (this.destroyClose && !this.visible) {
        return null;
      }
      this.destroyClose = false;
      var _this$$props3 = this.$props, bodyStyle = _this$$props3.bodyStyle, drawerStyle = _this$$props3.drawerStyle;
      var containerStyle = {};
      var isDestroyOnClose = this.getDestroyOnClose();
      if (isDestroyOnClose) {
        containerStyle.opacity = 0;
        containerStyle.transition = "opacity .3s";
      }
      return createVNode("div", {
        "class": "".concat(prefixCls2, "-wrapper-body"),
        "style": _extends(_extends({}, containerStyle), drawerStyle),
        "onTransitionend": this.onDestroyTransitionEnd
      }, [this.renderHeader(prefixCls2), createVNode("div", {
        "key": "body",
        "class": "".concat(prefixCls2, "-body"),
        "style": bodyStyle
      }, [(_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)])]);
    }
  },
  render: function render87() {
    var _classnames, _this3 = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, width = props2.width, height = props2.height, visible9 = props2.visible, placement2 = props2.placement, wrapClassName = props2.wrapClassName, mask = props2.mask, rest = __rest$s(props2, ["prefixCls", "width", "height", "visible", "placement", "wrapClassName", "mask"]);
    var haveMask = mask ? "" : "no-mask";
    var offsetStyle = {};
    if (placement2 === "left" || placement2 === "right") {
      offsetStyle.width = typeof width === "number" ? "".concat(width, "px") : width;
    } else {
      offsetStyle.height = typeof height === "number" ? "".concat(height, "px") : height;
    }
    var handler8 = getComponent(this, "handle") || false;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("drawer", customizePrefixCls);
    var className = this.$attrs.class;
    var vcDrawerProps = _extends(_extends(_extends(_extends(_extends({}, this.$attrs), omit(rest, ["closable", "destroyOnClose", "drawerStyle", "headerStyle", "bodyStyle", "title", "push", "visible", "getPopupContainer", "rootPrefixCls", "getPrefixCls", "renderEmpty", "csp", "pageHeader", "autoInsertSpaceInButton"])), {
      onClose: this.close,
      handler: handler8
    }), offsetStyle), {
      prefixCls: prefixCls2,
      open: visible9,
      showMask: mask,
      placement: placement2,
      class: classNames((_classnames = {}, _defineProperty(_classnames, className, !!className), _defineProperty(_classnames, wrapClassName, !!wrapClassName), _defineProperty(_classnames, haveMask, !!haveMask), _classnames)),
      wrapStyle: this.getRcDrawerStyle(),
      ref: "vcDrawer"
    });
    return createVNode(Drawer$2, vcDrawerProps, {
      default: function _default8() {
        return [_this3.renderBody(prefixCls2)];
      }
    });
  }
});
var index$9 = withInstall(Drawer);
function toArray$3(value26) {
  if (value26 === void 0 || value26 === null) {
    return [];
  }
  return Array.isArray(value26) ? value26 : [value26];
}
function getNamePath(path2) {
  return toArray$3(path2);
}
function containsNamePath(namePathList, namePath) {
  return namePathList && namePathList.some(function(path2) {
    return matchNamePath(path2, namePath);
  });
}
function isObject2(obj) {
  return _typeof(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
}
function internalSetValues(store, values) {
  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _extends({}, store);
  if (!values) {
    return newStore;
  }
  Object.keys(values).forEach(function(key2) {
    var prevValue = newStore[key2];
    var value26 = values[key2];
    var recursive = isObject2(prevValue) && isObject2(value26);
    newStore[key2] = recursive ? internalSetValues(prevValue, value26 || {}) : value26;
  });
  return newStore;
}
function setValues(store) {
  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    restValues[_key - 1] = arguments[_key];
  }
  return restValues.reduce(function(current2, newStore) {
    return internalSetValues(current2, newStore);
  }, store);
}
function matchNamePath(namePath, changedNamePath) {
  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
    return false;
  }
  return namePath.every(function(nameUnit, i) {
    return changedNamePath[i] === nameUnit;
  });
}
var typeTemplate = "'${name}' is not a valid ${type}";
var defaultValidateMessages = {
  default: "Validation error on field '${name}'",
  required: "'${name}' is required",
  enum: "'${name}' must be one of [${enum}]",
  whitespace: "'${name}' cannot be empty",
  date: {
    format: "'${name}' is invalid for format date",
    parse: "'${name}' could not be parsed as date",
    invalid: "'${name}' is invalid date"
  },
  types: {
    string: typeTemplate,
    method: typeTemplate,
    array: typeTemplate,
    object: typeTemplate,
    number: typeTemplate,
    date: typeTemplate,
    boolean: typeTemplate,
    integer: typeTemplate,
    float: typeTemplate,
    regexp: typeTemplate,
    email: typeTemplate,
    url: typeTemplate,
    hex: typeTemplate
  },
  string: {
    len: "'${name}' must be exactly ${len} characters",
    min: "'${name}' must be at least ${min} characters",
    max: "'${name}' cannot be longer than ${max} characters",
    range: "'${name}' must be between ${min} and ${max} characters"
  },
  number: {
    len: "'${name}' must equal ${len}",
    min: "'${name}' cannot be less than ${min}",
    max: "'${name}' cannot be greater than ${max}",
    range: "'${name}' must be between ${min} and ${max}"
  },
  array: {
    len: "'${name}' must be exactly ${len} in length",
    min: "'${name}' cannot be less than ${min} in length",
    max: "'${name}' cannot be greater than ${max} in length",
    range: "'${name}' must be between ${min} and ${max} in length"
  },
  pattern: {
    mismatch: "'${name}' does not match pattern ${pattern}"
  }
};
var __awaiter = function(thisArg, _arguments, P, generator2) {
  function adopt(value26) {
    return value26 instanceof P ? value26 : new P(function(resolve) {
      resolve(value26);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value26) {
      try {
        step(generator2.next(value26));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value26) {
      try {
        step(generator2["throw"](value26));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
  });
};
var AsyncValidator = Schema;
function replaceMessage(template, kv) {
  return template.replace(/\$\{\w+\}/g, function(str) {
    var key2 = str.slice(2, -1);
    return kv[key2];
  });
}
function validateRule(name2, value26, rule, options2, messageVariables) {
  return __awaiter(this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee() {
    var cloneRule, subRuleField, validator4, messages, result, subResults, kv, fillVariableResult;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cloneRule = _extends({}, rule);
            delete cloneRule.ruleIndex;
            subRuleField = null;
            if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
              subRuleField = cloneRule.defaultField;
              delete cloneRule.defaultField;
            }
            validator4 = new AsyncValidator(_defineProperty({}, name2, [cloneRule]));
            messages = setValues({}, defaultValidateMessages, options2.validateMessages);
            validator4.messages(messages);
            result = [];
            _context.prev = 8;
            _context.next = 11;
            return Promise.resolve(validator4.validate(_defineProperty({}, name2, value26), _extends({}, options2)));
          case 11:
            _context.next = 16;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](8);
            if (_context.t0.errors) {
              result = _context.t0.errors.map(function(_ref, index2) {
                var message2 = _ref.message;
                return isValidElement(message2) ? cloneVNode(message2, {
                  key: "error_".concat(index2)
                }) : message2;
              });
            } else {
              console.error(_context.t0);
              result = [messages.default()];
            }
          case 16:
            if (!(!result.length && subRuleField)) {
              _context.next = 21;
              break;
            }
            _context.next = 19;
            return Promise.all(value26.map(function(subValue, i) {
              return validateRule("".concat(name2, ".").concat(i), subValue, subRuleField, options2, messageVariables);
            }));
          case 19:
            subResults = _context.sent;
            return _context.abrupt("return", subResults.reduce(function(prev3, errors) {
              return [].concat(_toConsumableArray(prev3), _toConsumableArray(errors));
            }, []));
          case 21:
            kv = _extends(_extends(_extends({}, rule), {
              name: name2,
              enum: (rule.enum || []).join(", ")
            }), messageVariables);
            fillVariableResult = result.map(function(error3) {
              if (typeof error3 === "string") {
                return replaceMessage(error3, kv);
              }
              return error3;
            });
            return _context.abrupt("return", fillVariableResult);
          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 13]]);
  }));
}
function validateRules(namePath, value26, rules, options2, validateFirst, messageVariables) {
  var _this = this;
  var name2 = namePath.join(".");
  var filledRules = rules.map(function(currentRule, ruleIndex) {
    var originValidatorFunc = currentRule.validator;
    var cloneRule = _extends(_extends({}, currentRule), {
      ruleIndex
    });
    if (originValidatorFunc) {
      cloneRule.validator = function(rule, val, callback) {
        var hasPromise = false;
        var wrappedCallback = function wrappedCallback2() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          Promise.resolve().then(function() {
            if (!hasPromise) {
              callback.apply(void 0, args);
            }
          });
        };
        var promise = originValidatorFunc(rule, val, wrappedCallback);
        hasPromise = promise && typeof promise.then === "function" && typeof promise.catch === "function";
        if (hasPromise) {
          promise.then(function() {
            callback();
          }).catch(function(err) {
            callback(err || " ");
          });
        }
      };
    }
    return cloneRule;
  }).sort(function(_ref2, _ref3) {
    var w1 = _ref2.warningOnly, i1 = _ref2.ruleIndex;
    var w2 = _ref3.warningOnly, i2 = _ref3.ruleIndex;
    if (!!w1 === !!w2) {
      return i1 - i2;
    }
    if (w1) {
      return 1;
    }
    return -1;
  });
  var summaryPromise;
  if (validateFirst === true) {
    summaryPromise = new Promise(function(resolve, reject) {
      return __awaiter(_this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee2() {
        var i, rule, errors;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                i = 0;
              case 1:
                if (!(i < filledRules.length)) {
                  _context2.next = 12;
                  break;
                }
                rule = filledRules[i];
                _context2.next = 5;
                return validateRule(name2, value26, rule, options2, messageVariables);
              case 5:
                errors = _context2.sent;
                if (!errors.length) {
                  _context2.next = 9;
                  break;
                }
                reject([{
                  errors,
                  rule
                }]);
                return _context2.abrupt("return");
              case 9:
                i += 1;
                _context2.next = 1;
                break;
              case 12:
                resolve([]);
              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    });
  } else {
    var rulePromises = filledRules.map(function(rule) {
      return validateRule(name2, value26, rule, options2, messageVariables).then(function(errors) {
        return {
          errors,
          rule
        };
      });
    });
    summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
      return Promise.reject(errors);
    });
  }
  summaryPromise.catch(function(e) {
    return e;
  });
  return summaryPromise;
}
function finishOnAllFailed(rulePromises) {
  return __awaiter(this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee3() {
    return regenerator.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
              var _ref4;
              var errors = (_ref4 = []).concat.apply(_ref4, _toConsumableArray(errorsList));
              return errors;
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
}
function finishOnFirstFailed(rulePromises) {
  return __awaiter(this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee4() {
    var count;
    return regenerator.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            count = 0;
            return _context4.abrupt("return", new Promise(function(resolve) {
              rulePromises.forEach(function(promise) {
                promise.then(function(ruleError) {
                  if (ruleError.errors.length) {
                    resolve([ruleError]);
                  }
                  count += 1;
                  if (count === rulePromises.length) {
                    resolve([]);
                  }
                });
              });
            }));
          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
}
var FormContextKey = Symbol("formContextKey");
var useProvideForm = function useProvideForm2(state) {
  provide(FormContextKey, state);
};
var useInjectForm = function useInjectForm2() {
  return inject(FormContextKey, {
    labelAlign: computed(function() {
      return "right";
    }),
    vertical: computed(function() {
      return false;
    }),
    addField: function addField(_eventKey, _field) {
    },
    removeField: function removeField(_eventKey) {
    },
    model: computed(function() {
      return void 0;
    }),
    rules: computed(function() {
      return void 0;
    }),
    requiredMark: computed(function() {
      return false;
    })
  });
};
var FormItemPrefixContextKey = Symbol("formItemPrefixContextKey");
var useProvideFormItemPrefix = function useProvideFormItemPrefix2(state) {
  provide(FormItemPrefixContextKey, state);
};
var useInjectFormItemPrefix = function useInjectFormItemPrefix2() {
  return inject(FormItemPrefixContextKey, {
    prefixCls: computed(function() {
      return "";
    })
  });
};
var FormItemLabel = function FormItemLabel2(props2, _ref) {
  var _classNames;
  var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs;
  var _a, _b, _c, _d, _e;
  var _Object$assign = _extends(_extends({}, props2), attrs), prefixCls2 = _Object$assign.prefixCls, htmlFor = _Object$assign.htmlFor, labelCol = _Object$assign.labelCol, labelAlign = _Object$assign.labelAlign, colon = _Object$assign.colon, required = _Object$assign.required, requiredMark = _Object$assign.requiredMark;
  var _useLocaleReceiver = useLocaleReceiver("Form"), _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1), formLocale = _useLocaleReceiver2[0];
  var label = (_a = props2.label) !== null && _a !== void 0 ? _a : (_b = slots.label) === null || _b === void 0 ? void 0 : _b.call(slots);
  if (!label)
    return null;
  var _useInjectForm = useInjectForm(), vertical = _useInjectForm.vertical, contextLabelAlign = _useInjectForm.labelAlign, contextLabelCol = _useInjectForm.labelCol, contextColon = _useInjectForm.colon;
  var mergedLabelCol = labelCol || (contextLabelCol === null || contextLabelCol === void 0 ? void 0 : contextLabelCol.value) || {};
  var mergedLabelAlign = labelAlign || (contextLabelAlign === null || contextLabelAlign === void 0 ? void 0 : contextLabelAlign.value);
  var labelClsBasic = "".concat(prefixCls2, "-item-label");
  var labelColClassName = classNames(labelClsBasic, mergedLabelAlign === "left" && "".concat(labelClsBasic, "-left"), mergedLabelCol.class);
  var labelChildren = label;
  var computedColon = colon === true || (contextColon === null || contextColon === void 0 ? void 0 : contextColon.value) !== false && colon !== false;
  var haveColon = computedColon && !vertical.value;
  if (haveColon && typeof label === "string" && label.trim() !== "") {
    labelChildren = label.replace(/[:|：]\s*$/, "");
  }
  labelChildren = createVNode(Fragment, null, [labelChildren, (_c = slots.tooltip) === null || _c === void 0 ? void 0 : _c.call(slots, {
    class: "".concat(prefixCls2, "-item-tooltip")
  })]);
  if (requiredMark === "optional" && !required) {
    labelChildren = createVNode(Fragment, null, [labelChildren, createVNode("span", {
      "class": "".concat(prefixCls2, "-item-optional")
    }, [((_d = formLocale.value) === null || _d === void 0 ? void 0 : _d.optional) || ((_e = defaultLocale.Form) === null || _e === void 0 ? void 0 : _e.optional)])]);
  }
  var labelClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-item-required"), required), _defineProperty(_classNames, "".concat(prefixCls2, "-item-required-mark-optional"), requiredMark === "optional"), _defineProperty(_classNames, "".concat(prefixCls2, "-item-no-colon"), !computedColon), _classNames));
  return createVNode(Col$1, _objectSpread2(_objectSpread2({}, mergedLabelCol), {}, {
    "class": labelColClassName
  }), {
    default: function _default8() {
      return [createVNode("label", {
        "html-for": htmlFor,
        "class": labelClassName,
        "title": typeof label === "string" ? label : "",
        "onClick": function onClick7(e) {
          return emit("click", e);
        }
      }, [labelChildren])];
    }
  });
};
FormItemLabel.displayName = "FormItemLabel";
FormItemLabel.inheritAttrs = false;
var FormItemLabel$1 = FormItemLabel;
var ErrorList = defineComponent({
  name: "ErrorList",
  props: ["errors", "help", "onDomErrorVisibleChange"],
  setup: function setup85(props2) {
    var _useConfigInject = useConfigInject("", props2), rootPrefixCls = _useConfigInject.prefixCls;
    var _useInjectFormItemPre = useInjectFormItemPrefix(), prefixCls2 = _useInjectFormItemPre.prefixCls, status = _useInjectFormItemPre.status;
    var visible9 = ref(!!(props2.errors && props2.errors.length));
    var innerStatus = ref(status.value);
    var timeout = ref();
    var cacheErrors = ref(_toConsumableArray(props2.errors));
    watch([function() {
      return _toConsumableArray(props2.errors);
    }, function() {
      return props2.help;
    }], function(newValues) {
      window.clearTimeout(timeout.value);
      if (props2.help) {
        visible9.value = !!(props2.errors && props2.errors.length);
        if (visible9.value) {
          cacheErrors.value = newValues[0];
        }
      } else {
        timeout.value = window.setTimeout(function() {
          visible9.value = !!(props2.errors && props2.errors.length);
          if (visible9.value) {
            cacheErrors.value = newValues[0];
          }
        });
      }
    });
    onBeforeUnmount(function() {
      window.clearTimeout(timeout.value);
    });
    watch([visible9, status], function() {
      if (visible9.value && status.value) {
        innerStatus.value = status.value;
      }
    });
    watch(visible9, function() {
      var _a;
      if (visible9.value) {
        (_a = props2.onDomErrorVisibleChange) === null || _a === void 0 ? void 0 : _a.call(props2, true);
      }
    }, {
      immediate: true,
      flush: "post"
    });
    return function() {
      var _a;
      var baseClassName = "".concat(prefixCls2.value, "-item-explain");
      var transitionProps = getTransitionProps("".concat(rootPrefixCls.value, "-show-help"), {
        onAfterLeave: function onAfterLeave() {
          var _a2;
          (_a2 = props2.onDomErrorVisibleChange) === null || _a2 === void 0 ? void 0 : _a2.call(props2, false);
        }
      });
      return createVNode(Transition$1, transitionProps, {
        default: function _default8() {
          return [visible9.value ? createVNode("div", {
            "class": classNames(baseClassName, _defineProperty({}, "".concat(baseClassName, "-").concat(innerStatus.value), innerStatus.value)),
            "key": "help"
          }, [(_a = cacheErrors.value) === null || _a === void 0 ? void 0 : _a.map(function(error3, index2) {
            return createVNode("div", {
              "key": index2,
              "role": "alert"
            }, [error3]);
          })]) : null];
        }
      });
    };
  }
});
var iconMap$1 = {
  success: CheckCircleFilled,
  warning: ExclamationCircleFilled,
  error: CloseCircleFilled,
  validating: LoadingOutlined
};
var FormItemInput = defineComponent({
  slots: ["help", "extra", "errors"],
  inheritAttrs: false,
  props: ["prefixCls", "errors", "hasFeedback", "validateStatus", "onDomErrorVisibleChange", "wrapperCol", "help", "extra", "status"],
  setup: function setup86(props2, _ref) {
    var slots = _ref.slots;
    var formContext = useInjectForm();
    var contextWrapperCol = formContext.wrapperCol;
    var subFormContext = _extends({}, formContext);
    delete subFormContext.labelCol;
    delete subFormContext.wrapperCol;
    useProvideForm(subFormContext);
    useProvideFormItemPrefix({
      prefixCls: computed(function() {
        return props2.prefixCls;
      }),
      status: computed(function() {
        return props2.status;
      })
    });
    onUnmounted(function() {
      props2.onDomErrorVisibleChange(false);
    });
    return function() {
      var _a, _b, _c, _d;
      var prefixCls2 = props2.prefixCls, wrapperCol = props2.wrapperCol, _props$help = props2.help, help = _props$help === void 0 ? (_a = slots.help) === null || _a === void 0 ? void 0 : _a.call(slots) : _props$help, _props$errors = props2.errors, errors = _props$errors === void 0 ? (_b = slots.errors) === null || _b === void 0 ? void 0 : _b.call(slots) : _props$errors, onDomErrorVisibleChange = props2.onDomErrorVisibleChange, hasFeedback = props2.hasFeedback, validateStatus = props2.validateStatus, _props$extra = props2.extra, extra = _props$extra === void 0 ? (_c = slots.extra) === null || _c === void 0 ? void 0 : _c.call(slots) : _props$extra;
      var baseClassName = "".concat(prefixCls2, "-item");
      var mergedWrapperCol = wrapperCol || (contextWrapperCol === null || contextWrapperCol === void 0 ? void 0 : contextWrapperCol.value) || {};
      var className = classNames("".concat(baseClassName, "-control"), mergedWrapperCol.class);
      var IconNode = validateStatus && iconMap$1[validateStatus];
      var icon = hasFeedback && IconNode ? createVNode("span", {
        "class": "".concat(baseClassName, "-children-icon")
      }, [createVNode(IconNode, null, null)]) : null;
      var inputDom = createVNode("div", {
        "class": "".concat(baseClassName, "-control-input")
      }, [createVNode("div", {
        "class": "".concat(baseClassName, "-control-input-content")
      }, [(_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots)]), icon]);
      var errorListDom = createVNode(ErrorList, {
        "errors": errors,
        "help": help,
        "onDomErrorVisibleChange": onDomErrorVisibleChange
      }, null);
      var extraDom = extra ? createVNode("div", {
        "class": "".concat(baseClassName, "-extra")
      }, [extra]) : null;
      return createVNode(Col$1, _objectSpread2(_objectSpread2({}, mergedWrapperCol), {}, {
        "class": className
      }), {
        default: function _default8() {
          return [inputDom, errorListDom, extraDom];
        }
      });
    };
  }
});
var FormItemInput$1 = FormItemInput;
tuple("success", "warning", "error", "validating", "");
function getPropByPath$1(obj, namePathList, strict) {
  var tempObj = obj;
  var keyArr = namePathList;
  var i = 0;
  try {
    for (var len = keyArr.length; i < len - 1; ++i) {
      if (!tempObj && !strict)
        break;
      var key2 = keyArr[i];
      if (key2 in tempObj) {
        tempObj = tempObj[key2];
      } else {
        if (strict) {
          throw Error("please transfer a valid name path to form item!");
        }
        break;
      }
    }
    if (strict && !tempObj) {
      throw Error("please transfer a valid name path to form item!");
    }
  } catch (error3) {
    console.error("please transfer a valid name path to form item!");
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : void 0
  };
}
var formItemProps = {
  id: PropsTypes.string,
  htmlFor: PropsTypes.string,
  prefixCls: PropsTypes.string,
  label: PropsTypes.VNodeChild,
  help: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  labelCol: {
    type: Object
  },
  wrapperCol: {
    type: Object
  },
  hasFeedback: PropsTypes.looseBool.def(false),
  colon: PropsTypes.looseBool,
  labelAlign: PropsTypes.oneOf(tuple("left", "right")),
  prop: {
    type: [String, Number, Array]
  },
  name: {
    type: [String, Number, Array]
  },
  rules: PropsTypes.oneOfType([Array, Object]),
  autoLink: PropsTypes.looseBool.def(true),
  required: PropsTypes.looseBool,
  validateFirst: PropsTypes.looseBool,
  validateStatus: PropsTypes.oneOf(tuple("", "success", "warning", "error", "validating")),
  validateTrigger: {
    type: [String, Array]
  },
  messageVariables: {
    type: Object
  },
  hidden: Boolean
};
var indexGuid = 0;
var FormItem = defineComponent({
  name: "AFormItem",
  mixins: [BaseMixin],
  inheritAttrs: false,
  __ANT_NEW_FORM_ITEM: true,
  props: formItemProps,
  slots: ["help", "label", "extra"],
  setup: function setup87(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, expose = _ref.expose;
    warning$2(props2.prop === void 0);
    var eventKey = "form-item-".concat(++indexGuid);
    var _useConfigInject = useConfigInject("form", props2), prefixCls2 = _useConfigInject.prefixCls;
    var formContext = useInjectForm();
    var fieldName = computed(function() {
      return props2.name || props2.prop;
    });
    var errors = ref([]);
    var validateDisabled = ref(false);
    var domErrorVisible = ref(false);
    var inputRef = ref();
    var namePath = computed(function() {
      var val = fieldName.value;
      return getNamePath(val);
    });
    var fieldId = computed(function() {
      var id2 = props2.id;
      if (id2) {
        return id2;
      } else if (!namePath.value.length) {
        return void 0;
      } else {
        var formName = formContext.name.value;
        var mergedId = namePath.value.join("_");
        return formName ? "".concat(formName, "_").concat(mergedId) : mergedId;
      }
    });
    var fieldValue = computed(function() {
      var model = formContext.model.value;
      if (!model || !fieldName.value) {
        return;
      }
      return getPropByPath$1(model, namePath.value, true).v;
    });
    var initialValue = ref(cloneDeep(fieldValue.value));
    var mergedValidateTrigger = computed(function() {
      var validateTrigger = props2.validateTrigger !== void 0 ? props2.validateTrigger : formContext.validateTrigger.value;
      validateTrigger = validateTrigger === void 0 ? "change" : validateTrigger;
      return toArray$3(validateTrigger);
    });
    var rulesRef = computed(function() {
      var formRules = formContext.rules.value;
      var selfRules = props2.rules;
      var requiredRule = props2.required !== void 0 ? {
        required: !!props2.required,
        trigger: mergedValidateTrigger.value
      } : [];
      var prop = getPropByPath$1(formRules, namePath.value);
      formRules = formRules ? prop.o[prop.k] || prop.v : [];
      var rules = [].concat(selfRules || formRules || []);
      if (find(rules, function(rule) {
        return rule.required;
      })) {
        return rules;
      } else {
        return rules.concat(requiredRule);
      }
    });
    var isRequired2 = computed(function() {
      var rules = rulesRef.value;
      var isRequired3 = false;
      if (rules && rules.length) {
        rules.every(function(rule) {
          if (rule.required) {
            isRequired3 = true;
            return false;
          }
          return true;
        });
      }
      return isRequired3 || props2.required;
    });
    var validateState = ref();
    watchEffect(function() {
      validateState.value = props2.validateStatus;
    });
    var validateRules$1 = function validateRules$12(options2) {
      var _props$validateFirst = props2.validateFirst, validateFirst = _props$validateFirst === void 0 ? false : _props$validateFirst, messageVariables = props2.messageVariables;
      var _ref2 = options2 || {}, triggerName = _ref2.triggerName;
      var filteredRules = rulesRef.value;
      if (triggerName) {
        filteredRules = filteredRules.filter(function(rule) {
          var trigger2 = rule.trigger;
          if (!trigger2 && !mergedValidateTrigger.value.length) {
            return true;
          }
          var triggerList = toArray$3(trigger2 || mergedValidateTrigger.value);
          return triggerList.includes(triggerName);
        });
      }
      if (!filteredRules.length) {
        return Promise.resolve();
      }
      var promise = validateRules(namePath.value, fieldValue.value, filteredRules, options2, validateFirst, messageVariables);
      validateState.value = "validating";
      errors.value = [];
      promise.catch(function(e) {
        return e;
      }).then(function() {
        var results = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        if (validateState.value === "validating") {
          var res = results.filter(function(result) {
            return result && result.errors.length;
          });
          validateState.value = res.length ? "error" : "success";
          errors.value = res.map(function(r) {
            return r.errors;
          });
        }
      });
      return promise;
    };
    var onFieldBlur = function onFieldBlur2() {
      validateRules$1({
        triggerName: "blur"
      });
    };
    var onFieldChange = function onFieldChange2() {
      if (validateDisabled.value) {
        validateDisabled.value = false;
        return;
      }
      validateRules$1({
        triggerName: "change"
      });
    };
    var clearValidate = function clearValidate2() {
      validateState.value = "";
      validateDisabled.value = false;
      errors.value = [];
    };
    var resetField = function resetField2() {
      validateState.value = "";
      validateDisabled.value = true;
      errors.value = [];
      var model = formContext.model.value || {};
      var value26 = fieldValue.value;
      var prop = getPropByPath$1(model, namePath.value, true);
      if (Array.isArray(value26)) {
        prop.o[prop.k] = [].concat(initialValue.value);
      } else {
        prop.o[prop.k] = initialValue.value;
      }
      nextTick(function() {
        validateDisabled.value = false;
      });
    };
    var onLabelClick = function onLabelClick2() {
      var id2 = fieldId.value;
      if (!id2 || !inputRef.value) {
        return;
      }
      var control = inputRef.value.$el.querySelector('[id="'.concat(id2, '"]'));
      if (control && control.focus) {
        control.focus();
      }
    };
    expose({
      onFieldBlur,
      onFieldChange,
      clearValidate,
      resetField
    });
    var registered = false;
    watch(fieldName, function(val) {
      if (val) {
        if (!registered) {
          registered = true;
          formContext.addField(eventKey, {
            fieldValue,
            fieldId,
            fieldName,
            resetField,
            clearValidate,
            namePath,
            validateRules: validateRules$1,
            rules: rulesRef
          });
        }
      } else {
        registered = false;
        formContext.removeField(eventKey);
      }
    }, {
      immediate: true
    });
    onBeforeUnmount(function() {
      formContext.removeField(eventKey);
    });
    var itemClassName = computed(function() {
      var _ref3;
      return _ref3 = {}, _defineProperty(_ref3, "".concat(prefixCls2.value, "-item"), true), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-has-feedback"), validateState.value && props2.hasFeedback), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-has-success"), validateState.value === "success"), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-has-warning"), validateState.value === "warning"), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-has-error"), validateState.value === "error"), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-is-validating"), validateState.value === "validating"), _defineProperty(_ref3, "".concat(prefixCls2.value, "-item-hidden"), props2.hidden), _ref3;
    });
    return function() {
      var _a, _b, _c, _d, _e, _f;
      var help = (_a = props2.help) !== null && _a !== void 0 ? _a : slots.help ? filterEmpty(slots.help()) : null;
      var children = flattenChildren((_b = slots.default) === null || _b === void 0 ? void 0 : _b.call(slots));
      var firstChildren = children[0];
      if (fieldName.value && props2.autoLink && isValidElement(firstChildren)) {
        var originalEvents = firstChildren.props || {};
        var originalBlur = originalEvents.onBlur;
        var originalChange = originalEvents.onChange;
        firstChildren = cloneElement(firstChildren, _extends(_extends({}, fieldId.value ? {
          id: fieldId.value
        } : void 0), {
          onBlur: function onBlur7() {
            if (Array.isArray(originalChange)) {
              for (var i = 0, l = originalChange.length; i < l; i++) {
                originalBlur[i].apply(originalBlur, arguments);
              }
            } else if (originalBlur) {
              originalBlur.apply(void 0, arguments);
            }
            onFieldBlur();
          },
          onChange: function onChange9() {
            if (Array.isArray(originalChange)) {
              for (var i = 0, l = originalChange.length; i < l; i++) {
                originalChange[i].apply(originalChange, arguments);
              }
            } else if (originalChange) {
              originalChange.apply(void 0, arguments);
            }
            onFieldChange();
          }
        }));
      }
      return createVNode(Row$3, _objectSpread2(_objectSpread2({}, attrs), {}, {
        "class": [itemClassName.value, domErrorVisible.value || !!help ? "".concat(prefixCls2.value, "-item-with-help") : "", attrs.class],
        "key": "row"
      }), {
        default: function _default8() {
          return [createVNode(FormItemLabel$1, _objectSpread2(_objectSpread2({}, props2), {}, {
            "htmlFor": fieldId.value,
            "required": isRequired2.value,
            "requiredMark": formContext.requiredMark.value,
            "prefixCls": prefixCls2.value,
            "onClick": onLabelClick,
            "label": (_c = props2.label) !== null && _c !== void 0 ? _c : (_d = slots.label) === null || _d === void 0 ? void 0 : _d.call(slots)
          }), null), createVNode(FormItemInput$1, _objectSpread2(_objectSpread2({}, props2), {}, {
            "errors": help !== void 0 && help !== null ? toArray$3(help) : errors.value,
            "prefixCls": prefixCls2.value,
            "status": validateState.value,
            "onDomErrorVisibleChange": function onDomErrorVisibleChange(v) {
              return domErrorVisible.value = v;
            },
            "validateStatus": validateState.value,
            "ref": inputRef,
            "help": help,
            "extra": (_e = props2.extra) !== null && _e !== void 0 ? _e : (_f = slots.extra) === null || _f === void 0 ? void 0 : _f.call(slots)
          }), {
            default: function _default9() {
              return [[firstChildren, children.slice(1)]];
            }
          })];
        }
      });
    };
  }
});
function allPromiseFinish(promiseList) {
  var hasError = false;
  var count = promiseList.length;
  var results = [];
  if (!promiseList.length) {
    return Promise.resolve([]);
  }
  return new Promise(function(resolve, reject) {
    promiseList.forEach(function(promise, index2) {
      promise.catch(function(e) {
        hasError = true;
        return e;
      }).then(function(result) {
        count -= 1;
        results[index2] = result;
        if (count > 0) {
          return;
        }
        if (hasError) {
          reject(results);
        }
        resolve(results);
      });
    });
  });
}
function isRequired(rules) {
  var isRequired2 = false;
  if (rules && rules.length) {
    rules.every(function(rule) {
      if (rule.required) {
        isRequired2 = true;
        return false;
      }
      return true;
    });
  }
  return isRequired2;
}
function toArray$2(value26) {
  if (value26 === void 0 || value26 === null) {
    return [];
  }
  return Array.isArray(value26) ? value26 : [value26];
}
function getPropByPath(obj, path2, strict) {
  var tempObj = obj;
  path2 = path2.replace(/\[(\w+)\]/g, ".$1");
  path2 = path2.replace(/^\./, "");
  var keyArr = path2.split(".");
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict)
      break;
    var key2 = keyArr[i];
    if (key2 in tempObj) {
      tempObj = tempObj[key2];
    } else {
      if (strict) {
        throw new Error("please transfer a valid name path to validate!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null,
    isValid: tempObj && keyArr[i] in tempObj
  };
}
function useForm(modelRef, rulesRef, options2) {
  var initialModel = cloneDeep(unref(modelRef));
  var validateInfos = reactive({});
  var rulesKeys = computed(function() {
    return rulesRef ? Object.keys(unref(rulesRef)) : [];
  });
  watch(rulesKeys, function() {
    var newValidateInfos = {};
    rulesKeys.value.forEach(function(key3) {
      newValidateInfos[key3] = validateInfos[key3] || {
        autoLink: false,
        required: isRequired(unref(rulesRef)[key3])
      };
      delete validateInfos[key3];
    });
    for (var key2 in validateInfos) {
      if (Object.prototype.hasOwnProperty.call(validateInfos, key2)) {
        delete validateInfos[key2];
      }
    }
    _extends(validateInfos, newValidateInfos);
  }, {
    immediate: true
  });
  var resetFields = function resetFields2(newValues) {
    _extends(unref(modelRef), _extends(_extends({}, cloneDeep(initialModel)), newValues));
    nextTick(function() {
      Object.keys(validateInfos).forEach(function(key2) {
        validateInfos[key2] = {
          autoLink: false,
          required: isRequired(unref(rulesRef)[key2])
        };
      });
    });
  };
  var filterRules = function filterRules2() {
    var rules = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var trigger2 = arguments.length > 1 ? arguments[1] : void 0;
    if (!trigger2.length) {
      return rules;
    } else {
      return rules.filter(function(rule) {
        var triggerList = toArray$2(rule.trigger || "change");
        return intersection(triggerList, trigger2).length;
      });
    }
  };
  var lastValidatePromise = null;
  var validateFields = function validateFields2(names) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var strict = arguments.length > 2 ? arguments[2] : void 0;
    var promiseList = [];
    var values = {};
    var _loop = function _loop2(i2) {
      var name2 = names[i2];
      var prop = getPropByPath(unref(modelRef), name2, strict);
      if (!prop.isValid)
        return "continue";
      values[name2] = prop.v;
      var rules = filterRules(unref(rulesRef)[name2], toArray$2(option && option.trigger));
      if (rules.length) {
        promiseList.push(validateField(name2, prop.v, rules, option || {}).then(function() {
          return {
            name: name2,
            errors: [],
            warnings: []
          };
        }).catch(function(ruleErrors) {
          var mergedErrors = [];
          var mergedWarnings = [];
          ruleErrors.forEach(function(_ref) {
            var warningOnly = _ref.rule.warningOnly, errors = _ref.errors;
            if (warningOnly) {
              mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
            } else {
              mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
            }
          });
          if (mergedErrors.length) {
            return Promise.reject({
              name: name2,
              errors: mergedErrors,
              warnings: mergedWarnings
            });
          }
          return {
            name: name2,
            errors: mergedErrors,
            warnings: mergedWarnings
          };
        }));
      }
    };
    for (var i = 0; i < names.length; i++) {
      var _ret = _loop(i);
      if (_ret === "continue")
        continue;
    }
    var summaryPromise = allPromiseFinish(promiseList);
    lastValidatePromise = summaryPromise;
    var returnPromise = summaryPromise.then(function() {
      if (lastValidatePromise === summaryPromise) {
        return Promise.resolve(values);
      }
      return Promise.reject([]);
    }).catch(function(results) {
      var errorList = results.filter(function(result) {
        return result && result.errors.length;
      });
      return Promise.reject({
        values,
        errorFields: errorList,
        outOfDate: lastValidatePromise !== summaryPromise
      });
    });
    returnPromise.catch(function(e) {
      return e;
    });
    return returnPromise;
  };
  var validateField = function validateField2(name2, value26, rules) {
    var option = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var promise = validateRules([name2], value26, rules, _extends({
      validateMessages: defaultValidateMessages
    }, option), !!option.validateFirst);
    if (!validateInfos[name2]) {
      return promise.catch(function(e) {
        return e;
      });
    }
    validateInfos[name2].validateStatus = "validating";
    promise.catch(function(e) {
      return e;
    }).then(function() {
      var results = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (validateInfos[name2].validateStatus === "validating") {
        var res = results.filter(function(result) {
          return result && result.errors.length;
        });
        validateInfos[name2].validateStatus = res.length ? "error" : "success";
        validateInfos[name2].help = res.length ? res.map(function(r) {
          return r.errors;
        }) : "";
      }
    });
    return promise;
  };
  var validate = function validate2(names, option) {
    var keys = [];
    var strict = true;
    if (!names) {
      strict = false;
      keys = rulesKeys.value;
    } else if (Array.isArray(names)) {
      keys = names;
    } else {
      keys = [names];
    }
    var promises = validateFields(keys, option || {}, strict);
    promises.catch(function(e) {
      return e;
    });
    return promises;
  };
  var clearValidate = function clearValidate2(names) {
    var keys = [];
    if (!names) {
      keys = rulesKeys.value;
    } else if (Array.isArray(names)) {
      keys = names;
    } else {
      keys = [names];
    }
    keys.forEach(function(key2) {
      validateInfos[key2] && _extends(validateInfos[key2], {
        validateStatus: "",
        help: ""
      });
    });
  };
  var mergeValidateInfo = function mergeValidateInfo2(items) {
    var info3 = {
      autoLink: false
    };
    var help = [];
    var infos = Array.isArray(items) ? items : [items];
    for (var i = 0; i < infos.length; i++) {
      var arg = infos[i];
      if ((arg === null || arg === void 0 ? void 0 : arg.validateStatus) === "error") {
        info3.validateStatus = "error";
        arg.help && help.push(arg.help);
      }
      info3.required = info3.required || (arg === null || arg === void 0 ? void 0 : arg.required);
    }
    info3.help = help;
    return info3;
  };
  var oldModel = initialModel;
  var isFirstTime = true;
  var modelFn = function modelFn2(model) {
    var names = [];
    rulesKeys.value.forEach(function(key2) {
      var prop = getPropByPath(model, key2, false);
      var oldProp = getPropByPath(oldModel, key2, false);
      var isFirstValidation = isFirstTime && (options2 === null || options2 === void 0 ? void 0 : options2.immediate) && prop.isValid;
      if (isFirstValidation || !isEqual$1(prop.v, oldProp.v)) {
        names.push(key2);
      }
    });
    validate(names, {
      trigger: "change"
    });
    isFirstTime = false;
    oldModel = cloneDeep(model);
  };
  var debounceOptions = options2 === null || options2 === void 0 ? void 0 : options2.debounce;
  watch(modelRef, debounceOptions && debounceOptions.wait ? debounce$1(modelFn, debounceOptions.wait, omit$1(debounceOptions, ["wait"])) : modelFn, {
    immediate: options2 && !!options2.immediate,
    deep: true
  });
  watch(rulesRef, function() {
    if (options2 && options2.validateOnRuleChange) {
      validate();
    }
  }, {
    deep: true
  });
  return {
    modelRef,
    rulesRef,
    initialModel,
    validateInfos,
    resetFields,
    validate,
    validateField,
    mergeValidateInfo,
    clearValidate
  };
}
var formProps = {
  layout: PropsTypes.oneOf(tuple("horizontal", "inline", "vertical")),
  labelCol: {
    type: Object
  },
  wrapperCol: {
    type: Object
  },
  colon: PropsTypes.looseBool,
  labelAlign: PropsTypes.oneOf(tuple("left", "right")),
  prefixCls: PropsTypes.string,
  requiredMark: {
    type: [String, Boolean],
    default: void 0
  },
  hideRequiredMark: PropsTypes.looseBool,
  model: PropsTypes.object,
  rules: {
    type: Object
  },
  validateMessages: PropsTypes.object,
  validateOnRuleChange: PropsTypes.looseBool,
  scrollToFirstError: {
    type: [Boolean, Object]
  },
  onSubmit: PropsTypes.func,
  onFinish: PropsTypes.func,
  onFinishFailed: PropsTypes.func,
  name: PropsTypes.string,
  validateTrigger: {
    type: [String, Array]
  },
  size: {
    type: String
  }
};
function isEqualName(name1, name2) {
  return isEqual$1(toArray$3(name1), toArray$3(name2));
}
var Form = defineComponent({
  name: "AForm",
  inheritAttrs: false,
  props: initDefaultProps$1(formProps, {
    layout: "horizontal",
    hideRequiredMark: false,
    colon: true
  }),
  Item: FormItem,
  useForm,
  emits: ["finishFailed", "submit", "finish"],
  setup: function setup88(props2, _ref) {
    var emit = _ref.emit, slots = _ref.slots, expose = _ref.expose, attrs = _ref.attrs;
    var size = useInjectSize(props2);
    var _useConfigInject = useConfigInject("form", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, contextForm = _useConfigInject.form;
    var requiredMark = computed(function() {
      return props2.requiredMark === "" || props2.requiredMark;
    });
    var mergedRequiredMark = computed(function() {
      var _a;
      if (requiredMark.value !== void 0) {
        return requiredMark.value;
      }
      if (contextForm && ((_a = contextForm.value) === null || _a === void 0 ? void 0 : _a.requiredMark) !== void 0) {
        return contextForm.value.requiredMark;
      }
      if (props2.hideRequiredMark) {
        return false;
      }
      return true;
    });
    var formClassName = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2.value, "-").concat(props2.layout), true), _defineProperty(_classNames, "".concat(prefixCls2.value, "-hide-required-mark"), mergedRequiredMark.value === false), _defineProperty(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty(_classNames, "".concat(prefixCls2.value, "-").concat(size.value), size.value), _classNames));
    });
    var lastValidatePromise = ref();
    var fields = {};
    var addField = function addField2(eventKey, field) {
      fields[eventKey] = field;
    };
    var removeField = function removeField2(eventKey) {
      delete fields[eventKey];
    };
    var getFieldsByNameList = function getFieldsByNameList2(nameList) {
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? toArray$3(nameList).map(getNamePath) : [];
      if (!provideNameList) {
        return Object.values(fields);
      } else {
        return Object.values(fields).filter(function(field) {
          return namePathList.findIndex(function(namePath) {
            return isEqualName(namePath, field.fieldName.value);
          }) > -1;
        });
      }
    };
    var resetFields = function resetFields2(name2) {
      if (!props2.model) {
        warning$1(false, "Form", "model is required for resetFields to work.");
        return;
      }
      getFieldsByNameList(name2).forEach(function(field) {
        field.resetField();
      });
    };
    var clearValidate = function clearValidate2(name2) {
      getFieldsByNameList(name2).forEach(function(field) {
        field.clearValidate();
      });
    };
    var handleFinishFailed = function handleFinishFailed2(errorInfo) {
      var scrollToFirstError = props2.scrollToFirstError;
      emit("finishFailed", errorInfo);
      if (scrollToFirstError && errorInfo.errorFields.length) {
        var scrollToFieldOptions = {};
        if (_typeof(scrollToFirstError) === "object") {
          scrollToFieldOptions = scrollToFirstError;
        }
        scrollToField(errorInfo.errorFields[0].name, scrollToFieldOptions);
      }
    };
    var validate = function validate2() {
      return validateField.apply(void 0, arguments);
    };
    var scrollToField = function scrollToField2(name2) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var fields2 = getFieldsByNameList(name2);
      if (fields2.length) {
        var fieldId = fields2[0].fieldId.value;
        var node = fieldId ? document.getElementById(fieldId) : null;
        if (node) {
          scrollIntoView(node, _extends({
            scrollMode: "if-needed",
            block: "nearest"
          }, options2));
        }
      }
    };
    var getFieldsValue = function getFieldsValue2() {
      var nameList = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      var values = {};
      Object.values(fields).forEach(function(_ref2) {
        var fieldName = _ref2.fieldName, fieldValue = _ref2.fieldValue;
        values[fieldName.value] = fieldValue.value;
      });
      if (nameList === true) {
        return values;
      } else {
        var res = {};
        toArray$3(nameList).forEach(function(namePath) {
          return res[namePath] = values[namePath];
        });
        return res;
      }
    };
    var validateFields = function validateFields2(nameList, options2) {
      warning$1(!(nameList instanceof Function), "Form", "validateFields/validateField/validate not support callback, please use promise instead");
      if (!props2.model) {
        warning$1(false, "Form", "model is required for validateFields to work.");
        return Promise.reject("Form `model` is required for validateFields to work.");
      }
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? toArray$3(nameList).map(getNamePath) : [];
      var promiseList = [];
      Object.values(fields).forEach(function(field) {
        var _a;
        if (!provideNameList) {
          namePathList.push(field.namePath.value);
        }
        if (!((_a = field.rules) === null || _a === void 0 ? void 0 : _a.value.length)) {
          return;
        }
        var fieldNamePath = field.namePath.value;
        if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
          var promise = field.validateRules(_extends({
            validateMessages: _extends(_extends({}, defaultValidateMessages), props2.validateMessages)
          }, options2));
          promiseList.push(promise.then(function() {
            return {
              name: fieldNamePath,
              errors: [],
              warnings: []
            };
          }).catch(function(ruleErrors) {
            var mergedErrors = [];
            var mergedWarnings = [];
            ruleErrors.forEach(function(_ref3) {
              var warningOnly = _ref3.rule.warningOnly, errors = _ref3.errors;
              if (warningOnly) {
                mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
              } else {
                mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
              }
            });
            if (mergedErrors.length) {
              return Promise.reject({
                name: fieldNamePath,
                errors: mergedErrors,
                warnings: mergedWarnings
              });
            }
            return {
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            };
          }));
        }
      });
      var summaryPromise = allPromiseFinish(promiseList);
      lastValidatePromise.value = summaryPromise;
      var returnPromise = summaryPromise.then(function() {
        if (lastValidatePromise.value === summaryPromise) {
          return Promise.resolve(getFieldsValue(namePathList));
        }
        return Promise.reject([]);
      }).catch(function(results) {
        var errorList = results.filter(function(result) {
          return result && result.errors.length;
        });
        return Promise.reject({
          values: getFieldsValue(namePathList),
          errorFields: errorList,
          outOfDate: lastValidatePromise.value !== summaryPromise
        });
      });
      returnPromise.catch(function(e) {
        return e;
      });
      return returnPromise;
    };
    var validateField = function validateField2() {
      return validateFields.apply(void 0, arguments);
    };
    var handleSubmit = function handleSubmit2(e) {
      e.preventDefault();
      e.stopPropagation();
      emit("submit", e);
      if (props2.model) {
        var res = validateFields();
        res.then(function(values) {
          emit("finish", values);
        }).catch(function(errors) {
          handleFinishFailed(errors);
        });
      }
    };
    expose({
      resetFields,
      clearValidate,
      validateFields,
      getFieldsValue,
      validate,
      scrollToField
    });
    useProvideForm({
      model: computed(function() {
        return props2.model;
      }),
      name: computed(function() {
        return props2.name;
      }),
      labelAlign: computed(function() {
        return props2.labelAlign;
      }),
      labelCol: computed(function() {
        return props2.labelCol;
      }),
      wrapperCol: computed(function() {
        return props2.wrapperCol;
      }),
      vertical: computed(function() {
        return props2.layout === "vertical";
      }),
      colon: computed(function() {
        return props2.colon;
      }),
      requiredMark: mergedRequiredMark,
      validateTrigger: computed(function() {
        return props2.validateTrigger;
      }),
      rules: computed(function() {
        return props2.rules;
      }),
      addField,
      removeField
    });
    watch(function() {
      return props2.rules;
    }, function() {
      if (props2.validateOnRuleChange) {
        validateFields();
      }
    });
    return function() {
      var _a;
      return createVNode("form", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "onSubmit": handleSubmit,
        "class": [formClassName.value, attrs.class]
      }), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var Form$1 = Form;
Form$1.install = function(app) {
  app.component(Form$1.name, Form$1);
  app.component(Form$1.Item.name, Form$1.Item);
  return app;
};
function getClientSize() {
  var width = document.documentElement.clientWidth;
  var height = window.innerHeight || document.documentElement.clientHeight;
  return {
    width,
    height
  };
}
function getOffset(node) {
  var box = node.getBoundingClientRect();
  var docElem = document.documentElement;
  return {
    left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
    top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
  };
}
var ILazyRenderBoxPropTypes = {
  visible: PropsTypes.looseBool,
  hiddenClassName: PropsTypes.string,
  forceRender: PropsTypes.looseBool
};
var LazyRenderBox = {
  props: ILazyRenderBoxPropTypes,
  render: function render88() {
    return createVNode("div", null, [getSlot(this)]);
  }
};
var _switchScrollingEffect = function(close7) {
  var bodyIsOverflowing = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
  if (!bodyIsOverflowing) {
    return;
  }
  if (close7) {
    document.body.style.position = "";
    document.body.style.width = "";
    return;
  }
  var scrollBarSize = getScrollBarSize();
  if (scrollBarSize) {
    document.body.style.position = "relative";
    document.body.style.width = "calc(100% - ".concat(scrollBarSize, "px)");
  }
};
function IDialogPropTypes$3() {
  return {
    keyboard: PropsTypes.looseBool,
    mask: PropsTypes.looseBool,
    afterClose: PropsTypes.func,
    closable: PropsTypes.looseBool,
    maskClosable: PropsTypes.looseBool,
    visible: PropsTypes.looseBool,
    destroyOnClose: PropsTypes.looseBool,
    mousePosition: PropsTypes.shape({
      x: PropsTypes.number,
      y: PropsTypes.number
    }).loose,
    title: PropsTypes.any,
    footer: PropsTypes.any,
    transitionName: PropsTypes.string,
    maskTransitionName: PropsTypes.string,
    animation: PropsTypes.any,
    maskAnimation: PropsTypes.any,
    wrapStyle: PropsTypes.object,
    bodyStyle: PropsTypes.object,
    maskStyle: PropsTypes.object,
    prefixCls: PropsTypes.string,
    wrapClassName: PropsTypes.string,
    width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    height: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    zIndex: PropsTypes.number,
    bodyProps: PropsTypes.any,
    maskProps: PropsTypes.any,
    wrapProps: PropsTypes.any,
    getContainer: PropsTypes.any,
    dialogStyle: PropsTypes.object,
    dialogClass: PropsTypes.string,
    closeIcon: PropsTypes.any,
    forceRender: PropsTypes.looseBool,
    getOpenCount: PropsTypes.func,
    focusTriggerAfterClose: PropsTypes.looseBool,
    onClose: PropsTypes.func
  };
}
var IDialogPropTypes$2 = IDialogPropTypes$3();
var uuid$1 = 0;
function noop$e() {
}
function getScroll$1(w, top) {
  var ret = w["page".concat(top ? "Y" : "X", "Offset")];
  var method = "scroll".concat(top ? "Top" : "Left");
  if (typeof ret !== "number") {
    var d = w.document;
    ret = d.documentElement[method];
    if (typeof ret !== "number") {
      ret = d.body[method];
    }
  }
  return ret;
}
function setTransformOrigin(node, value26) {
  var style3 = node.style;
  ["Webkit", "Moz", "Ms", "ms"].forEach(function(prefix) {
    style3["".concat(prefix, "TransformOrigin")] = value26;
  });
  style3["transformOrigin"] = value26;
}
function offset(el) {
  var rect = el.getBoundingClientRect();
  var pos = {
    left: rect.left,
    top: rect.top
  };
  var doc = el.ownerDocument;
  var w = doc.defaultView || doc.parentWindow;
  pos.left += getScroll$1(w);
  pos.top += getScroll$1(w, true);
  return pos;
}
var cacheOverflow$1 = {};
var Dialog = defineComponent({
  name: "VcDialog",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(IDialogPropTypes$2, {
    mask: true,
    visible: false,
    keyboard: true,
    closable: true,
    maskClosable: true,
    destroyOnClose: false,
    prefixCls: "rc-dialog",
    getOpenCount: function getOpenCount() {
      return null;
    },
    focusTriggerAfterClose: true
  }),
  data: function data44() {
    warning$1(!this.dialogClass, "Modal", "dialogClass is deprecated, please use class instead.");
    warning$1(!this.dialogStyle, "Modal", "dialogStyle is deprecated, please use style instead.");
    return {
      inTransition: false,
      titleId: "rcDialogTitle".concat(uuid$1++),
      dialogMouseDown: void 0
    };
  },
  watch: {
    visible: function visible4(val) {
      var _this = this;
      this.$nextTick(function() {
        _this.updatedCallback(!val);
      });
    }
  },
  created: function created12() {
    provide("dialogContext", this);
  },
  mounted: function mounted24() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.updatedCallback(false);
      if ((_this2.forceRender || _this2.getContainer === false && !_this2.visible) && _this2.$refs.wrap) {
        _this2.$refs.wrap.style.display = "none";
      }
    });
  },
  beforeUnmount: function beforeUnmount16() {
    var visible9 = this.visible, getOpenCount2 = this.getOpenCount;
    if ((visible9 || this.inTransition) && !getOpenCount2()) {
      this.switchScrollingEffect();
    }
    clearTimeout(this.timeoutId);
  },
  methods: {
    getDialogWrap: function getDialogWrap() {
      return this.$refs.wrap;
    },
    updatedCallback: function updatedCallback(visible9) {
      var mousePosition2 = this.mousePosition;
      var mask = this.mask, focusTriggerAfterClose = this.focusTriggerAfterClose;
      if (this.visible) {
        if (!visible9) {
          this.openTime = Date.now();
          this.switchScrollingEffect();
          this.tryFocus();
          var dialogNode = findDOMNode(this.$refs.dialog);
          if (mousePosition2) {
            var elOffset = offset(dialogNode);
            setTransformOrigin(dialogNode, "".concat(mousePosition2.x - elOffset.left, "px ").concat(mousePosition2.y - elOffset.top, "px"));
          } else {
            setTransformOrigin(dialogNode, "");
          }
        }
      } else if (visible9) {
        this.inTransition = true;
        if (mask && this.lastOutSideFocusNode && focusTriggerAfterClose) {
          try {
            this.lastOutSideFocusNode.focus();
          } catch (e) {
            this.lastOutSideFocusNode = null;
          }
          this.lastOutSideFocusNode = null;
        }
      }
    },
    tryFocus: function tryFocus() {
      if (!contains(this.$refs.wrap, document.activeElement)) {
        this.lastOutSideFocusNode = document.activeElement;
        this.$refs.sentinelStart.focus();
      }
    },
    onAnimateLeave: function onAnimateLeave() {
      var afterClose = this.afterClose;
      if (this.$refs.wrap) {
        this.$refs.wrap.style.display = "none";
      }
      this.inTransition = false;
      this.switchScrollingEffect();
      if (afterClose) {
        afterClose();
      }
    },
    onDialogMouseDown: function onDialogMouseDown() {
      this.dialogMouseDown = true;
    },
    onMaskMouseUp: function onMaskMouseUp() {
      var _this3 = this;
      if (this.dialogMouseDown) {
        this.timeoutId = setTimeout(function() {
          _this3.dialogMouseDown = false;
        }, 0);
      }
    },
    onMaskClick: function onMaskClick(e) {
      if (Date.now() - this.openTime < 300) {
        return;
      }
      if (e.target === e.currentTarget && !this.dialogMouseDown) {
        this.close(e);
      }
    },
    onKeydown: function onKeydown(e) {
      var props2 = this.$props;
      if (props2.keyboard && e.keyCode === KeyCode$2.ESC) {
        e.stopPropagation();
        this.close(e);
        return;
      }
      if (props2.visible) {
        if (e.keyCode === KeyCode$2.TAB) {
          var activeElement = document.activeElement;
          var sentinelStart = this.$refs.sentinelStart;
          if (e.shiftKey) {
            if (activeElement === sentinelStart) {
              this.$refs.sentinelEnd.focus();
            }
          } else if (activeElement === this.$refs.sentinelEnd) {
            sentinelStart.focus();
          }
        }
      }
    },
    getDialogElement: function getDialogElement() {
      var _this4 = this;
      var closable = this.closable, prefixCls2 = this.prefixCls, width = this.width, height = this.height, title2 = this.title, tempFooter = this.footer, bodyStyle = this.bodyStyle, visible9 = this.visible, bodyProps = this.bodyProps, forceRender = this.forceRender, closeIcon = this.closeIcon, _this$dialogStyle = this.dialogStyle, dialogStyle = _this$dialogStyle === void 0 ? {} : _this$dialogStyle, _this$dialogClass = this.dialogClass, dialogClass = _this$dialogClass === void 0 ? "" : _this$dialogClass;
      var dest = _extends({}, dialogStyle);
      if (width !== void 0) {
        dest.width = typeof width === "number" ? "".concat(width, "px") : width;
      }
      if (height !== void 0) {
        dest.height = typeof height === "number" ? "".concat(height, "px") : height;
      }
      var footer;
      if (tempFooter) {
        footer = createVNode("div", {
          "key": "footer",
          "class": "".concat(prefixCls2, "-footer"),
          "ref": "footer"
        }, [tempFooter]);
      }
      var header;
      if (title2) {
        header = createVNode("div", {
          "key": "header",
          "class": "".concat(prefixCls2, "-header"),
          "ref": "header"
        }, [createVNode("div", {
          "class": "".concat(prefixCls2, "-title"),
          "id": this.titleId
        }, [title2])]);
      }
      var closer;
      if (closable) {
        closer = createVNode("button", {
          "type": "button",
          "key": "close",
          "onClick": this.close || noop$e,
          "aria-label": "Close",
          "class": "".concat(prefixCls2, "-close")
        }, [closeIcon || createVNode("span", {
          "class": "".concat(prefixCls2, "-close-x")
        }, null)]);
      }
      var _this$$attrs = this.$attrs, stl = _this$$attrs.style, className = _this$$attrs.class;
      var style3 = _extends(_extends({}, stl), dest);
      var sentinelStyle2 = {
        width: 0,
        height: 0,
        overflow: "hidden"
      };
      var cls = [prefixCls2, className, dialogClass];
      var transitionName2 = this.getTransitionName();
      var dialogElement = withDirectives(createVNode(LazyRenderBox, {
        "key": "dialog-element",
        "role": "document",
        "ref": "dialog",
        "style": style3,
        "class": cls,
        "forceRender": forceRender,
        "onMousedown": this.onDialogMouseDown
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "tabindex": 0,
            "ref": "sentinelStart",
            "style": sentinelStyle2,
            "aria-hidden": "true"
          }, null), createVNode("div", {
            "class": "".concat(prefixCls2, "-content")
          }, [closer, header, createVNode("div", _objectSpread2({
            "key": "body",
            "class": "".concat(prefixCls2, "-body"),
            "style": bodyStyle,
            "ref": "body"
          }, bodyProps), [getSlot(_this4)]), footer]), createVNode("div", {
            "tabindex": 0,
            "ref": "sentinelEnd",
            "style": sentinelStyle2,
            "aria-hidden": "true"
          }, null)];
        }
      }), [[vShow, visible9]]);
      var dialogTransitionProps = getTransitionProps(transitionName2, {
        onAfterLeave: this.onAnimateLeave
      });
      return createVNode(Transition, _objectSpread2({
        "key": "dialog"
      }, dialogTransitionProps), {
        default: function _default8() {
          return [visible9 || !_this4.destroyOnClose ? dialogElement : null];
        }
      });
    },
    getZIndexStyle: function getZIndexStyle2() {
      var style3 = {};
      var props2 = this.$props;
      if (props2.zIndex !== void 0) {
        style3.zIndex = props2.zIndex;
      }
      return style3;
    },
    getWrapStyle: function getWrapStyle() {
      return _extends(_extends({}, this.getZIndexStyle()), this.wrapStyle);
    },
    getMaskStyle: function getMaskStyle() {
      return _extends(_extends({}, this.getZIndexStyle()), this.maskStyle);
    },
    getMaskElement: function getMaskElement2() {
      var props2 = this.$props;
      var maskElement;
      if (props2.mask) {
        var maskTransition = this.getMaskTransitionName();
        var tempMaskElement = withDirectives(createVNode(LazyRenderBox, _objectSpread2({
          "style": this.getMaskStyle(),
          "key": "mask",
          "class": "".concat(props2.prefixCls, "-mask")
        }, props2.maskProps || {}), null), [[vShow, props2.visible]]);
        if (maskTransition) {
          var maskTransitionProps = getTransitionProps(maskTransition);
          maskElement = createVNode(Transition, _objectSpread2({
            "key": "mask"
          }, maskTransitionProps), {
            default: function _default8() {
              return [tempMaskElement];
            }
          });
        } else {
          maskElement = tempMaskElement;
        }
      }
      return maskElement;
    },
    getMaskTransitionName: function getMaskTransitionName2() {
      var props2 = this.$props;
      var transitionName2 = props2.maskTransitionName;
      var animation2 = props2.maskAnimation;
      if (!transitionName2 && animation2) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    getTransitionName: function getTransitionName3() {
      var props2 = this.$props;
      var transitionName2 = props2.transitionName;
      var animation2 = props2.animation;
      if (!transitionName2 && animation2) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    switchScrollingEffect: function switchScrollingEffect() {
      var getOpenCount2 = this.getOpenCount;
      var openCount2 = getOpenCount2();
      if (openCount2 === 1) {
        if (cacheOverflow$1.hasOwnProperty("overflowX")) {
          return;
        }
        cacheOverflow$1 = {
          overflowX: document.body.style.overflowX,
          overflowY: document.body.style.overflowY,
          overflow: document.body.style.overflow
        };
        _switchScrollingEffect();
        document.body.style.overflow = "hidden";
      } else if (!openCount2) {
        if (cacheOverflow$1.overflow !== void 0) {
          document.body.style.overflow = cacheOverflow$1.overflow;
        }
        if (cacheOverflow$1.overflowX !== void 0) {
          document.body.style.overflowX = cacheOverflow$1.overflowX;
        }
        if (cacheOverflow$1.overflowY !== void 0) {
          document.body.style.overflowY = cacheOverflow$1.overflowY;
        }
        cacheOverflow$1 = {};
        _switchScrollingEffect(true);
      }
    },
    close: function close4(e) {
      this.__emit("close", e);
    }
  },
  render: function render89() {
    var prefixCls2 = this.prefixCls, maskClosable = this.maskClosable, visible9 = this.visible, wrapClassName = this.wrapClassName, title2 = this.title, wrapProps = this.wrapProps;
    var style3 = this.getWrapStyle();
    if (visible9) {
      style3.display = null;
    }
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-root")
    }, [this.getMaskElement(), createVNode("div", _objectSpread2({
      "tabindex": -1,
      "onKeydown": this.onKeydown,
      "class": "".concat(prefixCls2, "-wrap ").concat(wrapClassName || ""),
      "ref": "wrap",
      "onClick": maskClosable ? this.onMaskClick : noop$e,
      "onMouseup": maskClosable ? this.onMaskMouseUp : noop$e,
      "role": "dialog",
      "aria-labelledby": title2 ? this.titleId : null,
      "style": style3
    }, wrapProps), [this.getDialogElement()])]);
  }
});
function setStyle(style3) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _options$element = options2.element, element = _options$element === void 0 ? document.body : _options$element;
  var oldStyle = {};
  var styleKeys = Object.keys(style3);
  styleKeys.forEach(function(key2) {
    oldStyle[key2] = element.style[key2];
  });
  styleKeys.forEach(function(key2) {
    element.style[key2] = style3[key2];
  });
  return oldStyle;
}
var openCount = 0;
var windowIsUndefined = !(typeof window !== "undefined" && window.document && window.document.createElement);
var cacheOverflow = {};
var Portal = defineComponent({
  name: "PortalWrapper",
  props: {
    wrapperClassName: PropsTypes.string,
    forceRender: PropsTypes.looseBool,
    getContainer: PropsTypes.any,
    children: PropsTypes.func,
    visible: PropsTypes.looseBool
  },
  data: function data45() {
    this._component = null;
    var visible9 = this.$props.visible;
    openCount = visible9 ? openCount + 1 : openCount;
    return {};
  },
  watch: {
    visible: function visible5(val) {
      openCount = val ? openCount + 1 : openCount - 1;
    },
    getContainer: function getContainer2(_getContainer, prevGetContainer) {
      var getContainerIsFunc = typeof _getContainer === "function" && typeof prevGetContainer === "function";
      if (getContainerIsFunc ? _getContainer.toString() !== prevGetContainer.toString() : _getContainer !== prevGetContainer) {
        this.removeCurrentContainer(false);
      }
    }
  },
  updated: function updated13() {
    this.setWrapperClassName();
  },
  beforeUnmount: function beforeUnmount17() {
    var visible9 = this.$props.visible;
    openCount = visible9 && openCount ? openCount - 1 : openCount;
    this.removeCurrentContainer(visible9);
  },
  methods: {
    getParent: function getParent() {
      var getContainer5 = this.$props.getContainer;
      if (getContainer5) {
        if (typeof getContainer5 === "string") {
          return document.querySelectorAll(getContainer5)[0];
        }
        if (typeof getContainer5 === "function") {
          return getContainer5();
        }
        if (_typeof(getContainer5) === "object" && getContainer5 instanceof window.HTMLElement) {
          return getContainer5;
        }
      }
      return document.body;
    },
    getDomContainer: function getDomContainer() {
      if (windowIsUndefined) {
        return null;
      }
      if (!this.container) {
        this.container = document.createElement("div");
        var parent = this.getParent();
        if (parent) {
          parent.appendChild(this.container);
        }
      }
      this.setWrapperClassName();
      return this.container;
    },
    setWrapperClassName: function setWrapperClassName() {
      var wrapperClassName = this.$props.wrapperClassName;
      if (this.container && wrapperClassName && wrapperClassName !== this.container.className) {
        this.container.className = wrapperClassName;
      }
    },
    savePortal: function savePortal(c) {
      this._component = c;
    },
    removeCurrentContainer: function removeCurrentContainer() {
      this.container = null;
      this._component = null;
    },
    switchScrollingEffect: function switchScrollingEffect2() {
      if (openCount === 1 && !Object.keys(cacheOverflow).length) {
        _switchScrollingEffect();
        cacheOverflow = setStyle({
          overflow: "hidden",
          overflowX: "hidden",
          overflowY: "hidden"
        });
      } else if (!openCount) {
        setStyle(cacheOverflow);
        cacheOverflow = {};
        _switchScrollingEffect(true);
      }
    }
  },
  render: function render90() {
    var _this$$props = this.$props, children = _this$$props.children, forceRender = _this$$props.forceRender, visible9 = _this$$props.visible;
    var portal = null;
    var childProps = {
      getOpenCount: function getOpenCount2() {
        return openCount;
      },
      getContainer: this.getDomContainer,
      switchScrollingEffect: this.switchScrollingEffect
    };
    if (forceRender || visible9 || this._component) {
      portal = createVNode(Portal$1, {
        "getContainer": this.getDomContainer,
        "children": children(childProps),
        "ref": this.savePortal
      }, null);
    }
    return portal;
  }
});
var IDialogPropTypes$1 = IDialogPropTypes$3();
var DialogWrap = defineComponent({
  inheritAttrs: false,
  props: _extends(_extends({}, IDialogPropTypes$1), {
    visible: IDialogPropTypes$1.visible.def(false)
  }),
  render: function render91() {
    var _this = this;
    var _this$$props = this.$props, visible9 = _this$$props.visible, getContainer5 = _this$$props.getContainer, forceRender = _this$$props.forceRender;
    var dialogProps = _extends(_extends(_extends({}, this.$props), this.$attrs), {
      ref: "_component",
      key: "dialog"
    });
    if (getContainer5 === false) {
      return createVNode(Dialog, _objectSpread2(_objectSpread2({}, dialogProps), {}, {
        "getOpenCount": function getOpenCount2() {
          return 2;
        }
      }), {
        default: function _default8() {
          return [getSlot(_this)];
        }
      });
    }
    return createVNode(Portal, {
      "visible": visible9,
      "forceRender": forceRender,
      "getContainer": getContainer5,
      "children": function children(childProps) {
        dialogProps = _extends(_extends({}, dialogProps), childProps);
        return createVNode(Dialog, dialogProps, {
          default: function _default8() {
            return [getSlot(_this)];
          }
        });
      }
    }, null);
  }
});
var DialogWrap$1 = DialogWrap;
function useFrameSetState(initial) {
  var frame = ref(null);
  var state = reactive(_extends({}, initial));
  var queue = ref([]);
  var setFrameState = function setFrameState2(newState) {
    if (frame.value === null) {
      queue.value = [];
      frame.value = wrapperRaf(function() {
        var memoState;
        queue.value.forEach(function(queueState) {
          memoState = _extends(_extends({}, memoState), queueState);
        });
        _extends(state, memoState);
        frame.value = null;
      });
    }
    queue.value.push(newState);
  };
  onMounted(function() {
    frame.value && wrapperRaf.cancel(frame.value);
  });
  return [state, setFrameState];
}
function fixPoint(key2, start, width, clientWidth) {
  var startAddWidth = start + width;
  var offsetStart = (width - clientWidth) / 2;
  if (width > clientWidth) {
    if (start > 0) {
      return _defineProperty({}, key2, offsetStart);
    }
    if (start < 0 && startAddWidth < clientWidth) {
      return _defineProperty({}, key2, -offsetStart);
    }
  } else if (start < 0 || startAddWidth > clientWidth) {
    return _defineProperty({}, key2, start < 0 ? offsetStart : -offsetStart);
  }
  return {};
}
function getFixScaleEleTransPosition(width, height, left, top) {
  var _getClientSize = getClientSize(), clientWidth = _getClientSize.width, clientHeight = _getClientSize.height;
  var fixPos = null;
  if (width <= clientWidth && height <= clientHeight) {
    fixPos = {
      x: 0,
      y: 0
    };
  } else if (width > clientWidth || height > clientHeight) {
    fixPos = _extends(_extends({}, fixPoint("x", left, width, clientWidth)), fixPoint("y", top, height, clientHeight));
  }
  return fixPos;
}
var previewGroupContext = Symbol("previewGroupContext");
var context = {
  provide: function provide$1(val) {
    provide(previewGroupContext, val);
  },
  inject: function inject$1() {
    return inject(previewGroupContext, {
      isPreviewGroup: ref(false),
      previewUrls: reactive({}),
      setPreviewUrls: function setPreviewUrls() {
      },
      current: ref(null),
      setCurrent: function setCurrent() {
      },
      setShowPreview: function setShowPreview() {
      },
      setMousePosition: function setMousePosition() {
      },
      registerImage: null
    });
  }
};
var Group = defineComponent({
  name: "PreviewGroup",
  inheritAttrs: false,
  props: {
    previewPrefixCls: String
  },
  setup: function setup89(props2, _ref) {
    var slots = _ref.slots;
    var previewUrls = reactive({});
    var current2 = ref();
    var isShowPreview = ref(false);
    var mousePosition2 = ref(null);
    var setPreviewUrls = function setPreviewUrls2(val) {
      _extends(previewUrls, val);
    };
    var setCurrent = function setCurrent2(val) {
      current2.value = val;
    };
    var setMousePosition = function setMousePosition2(val) {
      mousePosition2.value = val;
    };
    var setShowPreview = function setShowPreview2(val) {
      isShowPreview.value = val;
    };
    var registerImage = function registerImage2(id2, url) {
      previewUrls[id2] = url;
      return function() {
        delete previewUrls[id2];
      };
    };
    var onPreviewClose = function onPreviewClose2(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      isShowPreview.value = false;
      mousePosition2.value = null;
    };
    context.provide({
      isPreviewGroup: ref(true),
      previewUrls,
      setPreviewUrls,
      current: current2,
      setCurrent,
      setShowPreview,
      setMousePosition,
      registerImage
    });
    return function() {
      return createVNode(Fragment, null, [slots.default && slots.default(), createVNode(Preview$1, {
        "ria-hidden": !isShowPreview.value,
        "visible": isShowPreview.value,
        "prefixCls": props2.previewPrefixCls,
        "onClose": onPreviewClose,
        "mousePosition": mousePosition2.value,
        "src": previewUrls[current2.value]
      }, null)]);
    };
  }
});
var PreviewGroup$1 = Group;
var IDialogPropTypes = IDialogPropTypes$3();
var initialPosition = {
  x: 0,
  y: 0
};
var PreviewType = _extends({
  src: PropsTypes.string,
  alt: PropsTypes.string
}, IDialogPropTypes);
var Preview = defineComponent({
  name: "Preview",
  inheritAttrs: false,
  props: PreviewType,
  emits: ["close", "afterClose"],
  setup: function setup90(props2, _ref) {
    var emit = _ref.emit, attrs = _ref.attrs;
    var scale = ref(1);
    var rotate = ref(0);
    var _useFrameSetState = useFrameSetState(initialPosition), _useFrameSetState2 = _slicedToArray(_useFrameSetState, 2), position = _useFrameSetState2[0], setPosition = _useFrameSetState2[1];
    var onClose = function onClose2() {
      return emit("close");
    };
    var imgRef = ref();
    var originPositionRef = reactive({
      originX: 0,
      originY: 0,
      deltaX: 0,
      deltaY: 0
    });
    var isMoving = ref(false);
    var groupContext = context.inject();
    var previewUrls = groupContext.previewUrls, current2 = groupContext.current, isPreviewGroup = groupContext.isPreviewGroup, setCurrent = groupContext.setCurrent;
    var previewGroupCount = computed(function() {
      return Object.keys(previewUrls).length;
    });
    var previewUrlsKeys = computed(function() {
      return Object.keys(previewUrls);
    });
    var currentPreviewIndex = computed(function() {
      return previewUrlsKeys.value.indexOf(String(current2.value));
    });
    var combinationSrc = computed(function() {
      return isPreviewGroup.value ? previewUrls[current2.value] : props2.src;
    });
    var showLeftOrRightSwitches = computed(function() {
      return isPreviewGroup.value && previewGroupCount.value > 1;
    });
    var onAfterClose = function onAfterClose2() {
      scale.value = 1;
      rotate.value = 0;
      setPosition(initialPosition);
    };
    var onZoomIn = function onZoomIn2() {
      scale.value++;
      setPosition(initialPosition);
    };
    var onZoomOut = function onZoomOut2() {
      if (scale.value > 1) {
        scale.value--;
      }
      setPosition(initialPosition);
    };
    var onRotateRight = function onRotateRight2() {
      rotate.value += 90;
    };
    var onRotateLeft = function onRotateLeft2() {
      rotate.value -= 90;
    };
    var onSwitchLeft = function onSwitchLeft2(event) {
      event.preventDefault();
      event.stopPropagation();
      if (currentPreviewIndex.value > 0) {
        setCurrent(previewUrlsKeys.value[String(currentPreviewIndex.value - 1)]);
      }
    };
    var onSwitchRight = function onSwitchRight2(event) {
      event.preventDefault();
      event.stopPropagation();
      if (currentPreviewIndex.value < previewGroupCount.value - 1) {
        setCurrent(previewUrlsKeys.value[String(currentPreviewIndex.value + 1)]);
      }
    };
    var wrapClassName = classNames(_defineProperty({}, "".concat(props2.prefixCls, "-moving"), isMoving.value));
    var toolClassName = "".concat(props2.prefixCls, "-operations-operation");
    var iconClassName = "".concat(props2.prefixCls, "-operations-icon");
    var tools = [{
      icon: CloseOutlined,
      onClick: onClose,
      type: "close"
    }, {
      icon: ZoomInOutlined,
      onClick: onZoomIn,
      type: "zoomIn"
    }, {
      icon: ZoomOutOutlined,
      onClick: onZoomOut,
      type: "zoomOut",
      disabled: computed(function() {
        return scale.value === 1;
      })
    }, {
      icon: RotateRightOutlined,
      onClick: onRotateRight,
      type: "rotateRight"
    }, {
      icon: RotateLeftOutlined,
      onClick: onRotateLeft,
      type: "rotateLeft"
    }];
    var onMouseUp3 = function onMouseUp4() {
      if (props2.visible && isMoving.value) {
        var width = imgRef.value.offsetWidth * scale.value;
        var height = imgRef.value.offsetHeight * scale.value;
        var _getOffset = getOffset(imgRef.value), left = _getOffset.left, top = _getOffset.top;
        var isRotate = rotate.value % 180 !== 0;
        isMoving.value = false;
        var fixState = getFixScaleEleTransPosition(isRotate ? height : width, isRotate ? width : height, left, top);
        if (fixState) {
          setPosition(_extends({}, fixState));
        }
      }
    };
    var onMouseDown3 = function onMouseDown4(event) {
      event.preventDefault();
      event.stopPropagation();
      originPositionRef.deltaX = event.pageX - position.x;
      originPositionRef.deltaY = event.pageY - position.y;
      originPositionRef.originX = position.x;
      originPositionRef.originY = position.y;
      isMoving.value = true;
    };
    var onMouseMove3 = function onMouseMove4(event) {
      if (props2.visible && isMoving.value) {
        setPosition({
          x: event.pageX - originPositionRef.deltaX,
          y: event.pageY - originPositionRef.deltaY
        });
      }
    };
    var removeListeners = function removeListeners2() {
    };
    onMounted(function() {
      watch([function() {
        return props2.visible;
      }, isMoving], function() {
        removeListeners();
        var onTopMouseUpListener;
        var onTopMouseMoveListener;
        var onMouseUpListener = addEventListenerWrap(window, "mouseup", onMouseUp3, false);
        var onMouseMoveListener = addEventListenerWrap(window, "mousemove", onMouseMove3, false);
        try {
          if (window.top !== window.self) {
            onTopMouseUpListener = addEventListenerWrap(window.top, "mouseup", onMouseUp3, false);
            onTopMouseMoveListener = addEventListenerWrap(window.top, "mousemove", onMouseMove3, false);
          }
        } catch (error3) {
        }
        removeListeners = function removeListeners2() {
          onMouseUpListener.remove();
          onMouseMoveListener.remove();
          if (onTopMouseUpListener)
            onTopMouseUpListener.remove();
          if (onTopMouseMoveListener)
            onTopMouseMoveListener.remove();
        };
      }, {
        flush: "post",
        immediate: true
      });
    });
    onUnmounted(function() {
      removeListeners();
    });
    return function() {
      return createVNode(DialogWrap$1, _objectSpread2(_objectSpread2({}, attrs), {}, {
        "transitionName": "zoom",
        "maskTransitionName": "fade",
        "closable": false,
        "keyboard": true,
        "prefixCls": props2.prefixCls,
        "onClose": onClose,
        "afterClose": onAfterClose,
        "visible": props2.visible,
        "wrapClassName": wrapClassName,
        "getContainer": props2.getContainer
      }), {
        default: function _default8() {
          return [createVNode("ul", {
            "class": "".concat(props2.prefixCls, "-operations")
          }, [tools.map(function(_ref2) {
            var IconType = _ref2.icon, onClick7 = _ref2.onClick, type2 = _ref2.type, disabled = _ref2.disabled;
            return createVNode("li", {
              "class": classNames(toolClassName, _defineProperty({}, "".concat(props2.prefixCls, "-operations-operation-disabled"), disabled && (disabled === null || disabled === void 0 ? void 0 : disabled.value))),
              "onClick": onClick7,
              "key": type2
            }, [createVNode(IconType, {
              "class": iconClassName
            }, null)]);
          })]), createVNode("div", {
            "class": "".concat(props2.prefixCls, "-img-wrapper"),
            "style": {
              transform: "translate3d(".concat(position.x, "px, ").concat(position.y, "px, 0)")
            }
          }, [createVNode("img", {
            "onMousedown": onMouseDown3,
            "ref": imgRef,
            "class": "".concat(props2.prefixCls, "-img"),
            "src": combinationSrc.value,
            "alt": props2.alt,
            "style": {
              transform: "scale3d(".concat(scale.value, ", ").concat(scale.value, ", 1) rotate(").concat(rotate.value, "deg)")
            }
          }, null)]), showLeftOrRightSwitches.value && createVNode("div", {
            "class": classNames("".concat(props2.prefixCls, "-switch-left"), _defineProperty({}, "".concat(props2.prefixCls, "-switch-left-disabled"), currentPreviewIndex.value <= 0)),
            "onClick": onSwitchLeft
          }, [createVNode(LeftOutlined, null, null)]), showLeftOrRightSwitches.value && createVNode("div", {
            "class": classNames("".concat(props2.prefixCls, "-switch-right"), _defineProperty({}, "".concat(props2.prefixCls, "-switch-right-disabled"), currentPreviewIndex.value >= previewGroupCount.value - 1)),
            "onClick": onSwitchRight
          }, [createVNode(RightOutlined, null, null)])];
        }
      });
    };
  }
});
var Preview$1 = Preview;
var imageProps = {
  src: PropsTypes.string,
  wrapperClassName: PropsTypes.string,
  wrapperStyle: PropsTypes.style,
  prefixCls: PropsTypes.string,
  previewPrefixCls: PropsTypes.string,
  placeholder: PropsTypes.VNodeChild,
  fallback: PropsTypes.string,
  preview: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.shape({
    visible: PropsTypes.bool,
    onVisibleChange: PropsTypes.func,
    getContainer: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.looseBool, PropsTypes.string])
  }).loose]).def(true)
};
var mergeDefaultValue = function mergeDefaultValue2(obj, defaultValues) {
  var res = _extends({}, obj);
  Object.keys(defaultValues).forEach(function(key2) {
    if (obj[key2] === void 0) {
      res[key2] = defaultValues[key2];
    }
  });
  return res;
};
var uuid = 0;
var ImageInternal = defineComponent({
  name: "Image",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: imageProps,
  emits: ["click"],
  setup: function setup91(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots, emit = _ref.emit;
    var prefixCls2 = computed(function() {
      return props2.prefixCls;
    });
    var previewPrefixCls = computed(function() {
      return "".concat(prefixCls2.value, "-preview");
    });
    var preview = computed(function() {
      var defaultValues = {
        visible: void 0,
        onVisibleChange: function onVisibleChange6() {
        },
        getContainer: void 0
      };
      return _typeof(props2.preview) === "object" ? mergeDefaultValue(props2.preview, defaultValues) : defaultValues;
    });
    var isCustomPlaceholder = computed(function() {
      return props2.placeholder && props2.placeholder !== true || slots.placeholder;
    });
    var previewVisible = computed(function() {
      return preview.value.visible;
    });
    var onPreviewVisibleChange = computed(function() {
      return preview.value.onVisibleChange;
    });
    var getPreviewContainer = computed(function() {
      return preview.value.getContainer;
    });
    var isControlled = computed(function() {
      return previewVisible.value !== void 0;
    });
    var isShowPreview = ref(!!previewVisible.value);
    watch(previewVisible, function() {
      isShowPreview.value = !!previewVisible.value;
    });
    watch(isShowPreview, function(val, preVal) {
      onPreviewVisibleChange.value(val, preVal);
    });
    var status = ref(isCustomPlaceholder.value ? "loading" : "normal");
    watch(function() {
      return props2.src;
    }, function() {
      status.value = isCustomPlaceholder.value ? "loading" : "normal";
    });
    var mousePosition2 = ref(null);
    var isError = computed(function() {
      return status.value === "error";
    });
    var groupContext = context.inject();
    var isPreviewGroup = groupContext.isPreviewGroup, setCurrent = groupContext.setCurrent, setGroupShowPreview = groupContext.setShowPreview, setGroupMousePosition = groupContext.setMousePosition, registerImage = groupContext.registerImage;
    var currentId = ref(uuid++);
    var canPreview = computed(function() {
      return props2.preview && !isError.value;
    });
    var onLoad3 = function onLoad4() {
      status.value = "normal";
    };
    var onError2 = function onError3() {
      status.value = "error";
    };
    var onPreview = function onPreview2(e) {
      if (!isControlled.value) {
        var _getOffset = getOffset(e.target), left = _getOffset.left, top = _getOffset.top;
        if (isPreviewGroup.value) {
          setCurrent(currentId.value);
          setGroupMousePosition({
            x: left,
            y: top
          });
        } else {
          mousePosition2.value = {
            x: left,
            y: top
          };
        }
      }
      if (isPreviewGroup.value) {
        setGroupShowPreview(true);
      } else {
        isShowPreview.value = true;
      }
      emit("click", e);
    };
    var onPreviewClose = function onPreviewClose2() {
      isShowPreview.value = false;
      if (!isControlled.value) {
        mousePosition2.value = null;
      }
    };
    var img = ref(null);
    watch(function() {
      return img;
    }, function() {
      if (status.value !== "loading")
        return;
      if (img.value.complete && (img.value.naturalWidth || img.value.naturalHeight)) {
        onLoad3();
      }
    });
    var unRegister = function unRegister2() {
    };
    onMounted(function() {
      watch([function() {
        return props2.src;
      }, canPreview], function() {
        unRegister();
        if (!isPreviewGroup.value) {
          return function() {
          };
        }
        unRegister = registerImage(currentId.value, props2.src);
        if (!canPreview.value) {
          unRegister();
        }
      }, {
        flush: "post",
        immediate: true
      });
    });
    var toSizePx = function toSizePx2(l) {
      if (isNumber(l))
        return l + "px";
      return l;
    };
    return function() {
      var prefixCls3 = props2.prefixCls, wrapperClassName = props2.wrapperClassName, fallback = props2.fallback, src = props2.src, preview2 = props2.preview, placeholder = props2.placeholder, wrapperStyle2 = props2.wrapperStyle;
      var width = attrs.width, height = attrs.height, crossorigin = attrs.crossorigin, decoding = attrs.decoding, alt = attrs.alt, sizes = attrs.sizes, srcset = attrs.srcset, usemap = attrs.usemap, cls = attrs.class, style3 = attrs.style;
      var wrappperClass = classNames(prefixCls3, wrapperClassName, _defineProperty({}, "".concat(prefixCls3, "-error"), isError.value));
      var mergedSrc = isError.value && fallback ? fallback : src;
      var previewMask = slots.previewMask && slots.previewMask();
      var imgCommonProps = {
        crossorigin,
        decoding,
        alt,
        sizes,
        srcset,
        usemap,
        class: classNames("".concat(prefixCls3, "-img"), _defineProperty({}, "".concat(prefixCls3, "-img-placeholder"), placeholder === true), cls),
        style: _extends({
          height
        }, style3)
      };
      return createVNode(Fragment, null, [createVNode("div", {
        "class": wrappperClass,
        "onClick": preview2 && !isError.value ? onPreview : function(e) {
          emit("click", e);
        },
        "style": _extends({
          width: toSizePx(width),
          height: toSizePx(height)
        }, wrapperStyle2)
      }, [createVNode("img", _objectSpread2(_objectSpread2(_objectSpread2({}, imgCommonProps), isError.value && fallback ? {
        src: fallback
      } : {
        onLoad: onLoad3,
        onError: onError2,
        src
      }), {}, {
        "ref": img
      }), null), status.value === "loading" && createVNode("div", {
        "aria-hidden": "true",
        "class": "".concat(prefixCls3, "-placeholder")
      }, [placeholder || slots.placeholder && slots.placeholder()]), previewMask && canPreview.value && createVNode("div", {
        "class": "".concat(prefixCls3, "-mask")
      }, [previewMask])]), !isPreviewGroup.value && canPreview.value && createVNode(Preview$1, {
        "aria-hidden": !isShowPreview.value,
        "visible": isShowPreview.value,
        "prefixCls": previewPrefixCls.value,
        "onClose": onPreviewClose,
        "mousePosition": mousePosition2.value,
        "src": mergedSrc,
        "alt": alt,
        "getContainer": getPreviewContainer.value
      }, null)]);
    };
  }
});
ImageInternal.PreviewGroup = PreviewGroup$1;
var Image$3 = ImageInternal;
var InternalPreviewGroup = defineComponent({
  name: "AImagePreviewGroup",
  inheritAttrs: false,
  props: {
    previewPrefixCls: PropsTypes.string
  },
  setup: function setup92(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var prefixCls2 = computed(function() {
      return configProvider.getPrefixCls("image-preview", props2.previewPrefixCls);
    });
    return function() {
      return createVNode(PreviewGroup$1, _objectSpread2(_objectSpread2({}, _extends(_extends({}, attrs), props2)), {}, {
        "previewPrefixCls": prefixCls2.value
      }), slots);
    };
  }
});
var PreviewGroup = InternalPreviewGroup;
var Image$1 = defineComponent({
  name: "AImage",
  inheritAttrs: false,
  props: imageProps,
  setup: function setup93(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("image", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      return createVNode(Image$3, _extends(_extends(_extends({}, attrs), props2), {
        prefixCls: prefixCls2.value
      }), slots);
    };
  }
});
Image$1.PreviewGroup = PreviewGroup;
Image$1.install = function(app) {
  app.component(Image$1.name, Image$1);
  app.component(Image$1.PreviewGroup.name, Image$1.PreviewGroup);
  return app;
};
var Image$2 = Image$1;
var ITouchProps = {
  disabled: PropsTypes.looseBool,
  activeClassName: PropsTypes.string,
  activeStyle: PropsTypes.any
};
var TouchFeedback = defineComponent({
  name: "TouchFeedback",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(ITouchProps, {
    disabled: false
  }),
  data: function data46() {
    this.child = null;
    return {
      active: false
    };
  },
  mounted: function mounted25() {
    var _this = this;
    this.$nextTick(function() {
      if (_this.disabled && _this.active) {
        _this.setState({
          active: false
        });
      }
    });
  },
  methods: {
    triggerEvent: function triggerEvent(type2, isActive, ev) {
      var eventType = "on".concat(type2);
      var child = this.child;
      if (child.props[eventType]) {
        child.props[eventType](ev);
      }
      if (isActive !== this.active) {
        this.setState({
          active: isActive
        });
      }
    },
    onTouchStart: function onTouchStart(e) {
      this.triggerEvent("Touchstart", true, e);
    },
    onTouchMove: function onTouchMove(e) {
      this.triggerEvent("Touchmove", false, e);
    },
    onTouchEnd: function onTouchEnd2(e) {
      this.triggerEvent("Touchend", false, e);
    },
    onTouchCancel: function onTouchCancel(e) {
      this.triggerEvent("Touchcancel", false, e);
    },
    onMouseDown: function onMouseDown2(e) {
      this.triggerEvent("Mousedown", true, e);
    },
    onMouseUp: function onMouseUp2(e) {
      this.triggerEvent("Mouseup", false, e);
    },
    onMouseLeave: function onMouseLeave2(e) {
      this.triggerEvent("Mouseleave", false, e);
    }
  },
  render: function render92() {
    var _ref;
    var _this$$props = this.$props, disabled = _this$$props.disabled, _this$$props$activeCl = _this$$props.activeClassName, activeClassName = _this$$props$activeCl === void 0 ? "" : _this$$props$activeCl, _this$$props$activeSt = _this$$props.activeStyle, activeStyle = _this$$props$activeSt === void 0 ? {} : _this$$props$activeSt;
    var child = getSlot(this);
    if (child.length !== 1) {
      warning$1(false, "m-feedback\u7EC4\u4EF6\u53EA\u80FD\u5305\u542B\u4E00\u4E2A\u5B50\u5143\u7D20");
      return null;
    }
    var events = disabled ? void 0 : (_ref = {}, _defineProperty(_ref, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", this.onTouchStart), _defineProperty(_ref, supportsPassive$1 ? "onTouchmovePassive" : "onTouchmove", this.onTouchMove), _defineProperty(_ref, "onTouchend", this.onTouchEnd), _defineProperty(_ref, "onTouchcancel", this.onTouchCancel), _defineProperty(_ref, "onMousedown", this.onMouseDown), _defineProperty(_ref, "onMouseup", this.onMouseUp), _defineProperty(_ref, "onMouseleave", this.onMouseLeave), _ref);
    child = child[0];
    this.child = child;
    if (!disabled && this.active) {
      var _child$props = child.props, style3 = _child$props.style, className = _child$props.class;
      if (activeStyle !== false) {
        if (activeStyle) {
          style3 = _extends(_extends({}, style3), activeStyle);
        }
        className = classNames(className, activeClassName);
      }
      return cloneElement(child, _extends({
        class: className,
        style: style3
      }, events));
    }
    return cloneElement(child, events);
  }
});
var InputHandler = {
  name: "InputHandler",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool
  },
  render: function render93() {
    var _this = this;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, disabled = _this$$props.disabled;
    var touchableProps = {
      disabled,
      activeClassName: "".concat(prefixCls2, "-handler-active")
    };
    return createVNode(TouchFeedback, touchableProps, {
      default: function _default8() {
        return [createVNode("span", _this.$attrs, [getSlot(_this)])];
      }
    });
  }
};
var InputHandler$1 = InputHandler;
function preventDefault(e) {
  e.preventDefault();
}
function defaultParser(input) {
  return input.replace(/[^\w\.-]+/g, "");
}
var SPEED = 200;
var DELAY = 600;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var isValidProps = function isValidProps2(value26) {
  return value26 !== void 0 && value26 !== null;
};
var isEqual = function isEqual2(oldValue, newValue) {
  return newValue === oldValue || typeof newValue === "number" && typeof oldValue === "number" && isNaN(newValue) && isNaN(oldValue);
};
var inputNumberProps$1 = {
  value: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  defaultValue: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  focusOnUpDown: PropsTypes.looseBool,
  autofocus: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  placeholder: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  readonly: PropsTypes.looseBool,
  max: PropsTypes.number,
  min: PropsTypes.number,
  step: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  upHandler: PropsTypes.any,
  downHandler: PropsTypes.any,
  useTouch: PropsTypes.looseBool,
  formatter: PropsTypes.func,
  parser: PropsTypes.func,
  precision: PropsTypes.number,
  required: PropsTypes.looseBool,
  pattern: PropsTypes.string,
  decimalSeparator: PropsTypes.string,
  autocomplete: PropsTypes.string,
  title: PropsTypes.string,
  name: PropsTypes.string,
  id: PropsTypes.string,
  type: PropsTypes.string,
  maxlength: PropsTypes.any
};
var VcInputNumber = defineComponent({
  name: "VCInputNumber",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(inputNumberProps$1, {
    focusOnUpDown: true,
    useTouch: false,
    prefixCls: "rc-input-number",
    min: -MAX_SAFE_INTEGER,
    step: 1,
    parser: defaultParser,
    required: false,
    autocomplete: "off"
  }),
  data: function data47() {
    var props2 = getOptionProps(this);
    this.prevProps = _extends({}, props2);
    var value26;
    if ("value" in props2) {
      value26 = this.value;
    } else {
      value26 = this.defaultValue;
    }
    var validValue = this.getValidValue(this.toNumber(value26));
    return {
      inputValue: this.toPrecisionAsStep(validValue),
      sValue: validValue,
      focused: this.autofocus
    };
  },
  mounted: function mounted26() {
    var _this = this;
    this.$nextTick(function() {
      _this.updatedFunc();
    });
  },
  updated: function updated14() {
    var _this2 = this;
    var _this$$props = this.$props, value26 = _this$$props.value, max3 = _this$$props.max, min3 = _this$$props.min;
    var focused = this.$data.focused;
    var prevProps = this.prevProps;
    var props2 = getOptionProps(this);
    if (prevProps) {
      if (!isEqual(prevProps.value, value26) || !isEqual(prevProps.max, max3) || !isEqual(prevProps.min, min3)) {
        var validValue = focused ? value26 : this.getValidValue(value26);
        var nextInputValue;
        if (this.pressingUpOrDown) {
          nextInputValue = validValue;
        } else if (this.inputting) {
          nextInputValue = this.rawInput;
        } else {
          nextInputValue = this.toPrecisionAsStep(validValue);
        }
        this.setState({
          sValue: validValue,
          inputValue: nextInputValue
        });
      }
      var nextValue = "value" in props2 ? value26 : this.$data.sValue;
      if ("max" in props2 && prevProps.max !== max3 && typeof nextValue === "number" && nextValue > max3) {
        this.__emit("update:value", max3);
        this.__emit("change", max3);
      }
      if ("min" in props2 && prevProps.min !== min3 && typeof nextValue === "number" && nextValue < min3) {
        this.__emit("update:value", min3);
        this.__emit("change", min3);
      }
    }
    this.prevProps = _extends({}, props2);
    this.$nextTick(function() {
      _this2.updatedFunc();
    });
  },
  beforeUnmount: function beforeUnmount18() {
    this.stop();
  },
  methods: {
    updatedFunc: function updatedFunc() {
      var inputElem = this.inputRef;
      try {
        if (this.cursorStart !== void 0 && this.$data.focused) {
          if (!this.partRestoreByAfter(this.cursorAfter) && this.$data.sValue !== this.value) {
            var pos = this.cursorStart + 1;
            if (!this.cursorAfter) {
              pos = inputElem.value.length;
            } else if (this.lastKeyCode === KeyCode$2.BACKSPACE) {
              pos = this.cursorStart - 1;
            } else if (this.lastKeyCode === KeyCode$2.DELETE) {
              pos = this.cursorStart;
            }
            this.fixCaret(pos, pos);
          } else if (this.currentValue === inputElem.value) {
            switch (this.lastKeyCode) {
              case KeyCode$2.BACKSPACE:
                this.fixCaret(this.cursorStart - 1, this.cursorStart - 1);
                break;
              case KeyCode$2.DELETE:
                this.fixCaret(this.cursorStart + 1, this.cursorStart + 1);
                break;
              default:
            }
          }
        }
      } catch (e) {
      }
      this.lastKeyCode = null;
      if (!this.pressingUpOrDown) {
        return;
      }
      if (this.focusOnUpDown && this.$data.focused) {
        if (document.activeElement !== inputElem) {
          this.focus();
        }
      }
      this.pressingUpOrDown = false;
    },
    onKeyDown: function onKeyDown11(e) {
      if (e.keyCode === KeyCode$2.UP) {
        var ratio = this.getRatio(e);
        this.up(e, ratio);
        this.stop();
      } else if (e.keyCode === KeyCode$2.DOWN) {
        var _ratio = this.getRatio(e);
        this.down(e, _ratio);
        this.stop();
      } else if (e.keyCode === KeyCode$2.ENTER) {
        this.__emit("pressEnter", e);
      }
      this.recordCursorPosition();
      this.lastKeyCode = e.keyCode;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      this.__emit.apply(this, ["keydown", e].concat(args));
    },
    onKeyUp: function onKeyUp(e) {
      this.stop();
      this.recordCursorPosition();
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      this.__emit.apply(this, ["keyup", e].concat(args));
    },
    onTrigger: function onTrigger(e) {
      if (e.target.composing)
        return false;
      this.onChange(e);
    },
    onChange: function onChange3(e) {
      if (this.$data.focused) {
        this.inputting = true;
      }
      this.rawInput = this.parser(this.getValueFromEvent(e));
      this.setState({
        inputValue: this.rawInput
      });
      var num = this.toNumber(this.rawInput);
      this.__emit("update:value", num);
      this.__emit("change", num);
    },
    onFocus: function onFocus4() {
      this.setState({
        focused: true
      });
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this.__emit.apply(this, ["focus"].concat(args));
    },
    onBlur: function onBlur5() {
      this.inputting = false;
      this.setState({
        focused: false
      });
      var value26 = this.getCurrentValidValue(this.$data.inputValue);
      var newValue = this.setValue(value26);
      if (this.$attrs.onBlur && this.inputRef) {
        var originValue = this.inputRef.value;
        var inputValue = this.getInputDisplayValue({
          focused: false,
          sValue: newValue
        });
        this.inputRef.value = inputValue;
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        this.__emit.apply(this, ["blur"].concat(args));
        this.inputRef.value = originValue;
      }
    },
    getCurrentValidValue: function getCurrentValidValue(value26) {
      var val = value26;
      if (val === "") {
        val = "";
      } else if (!this.isNotCompleteNumber(parseFloat(val, 10))) {
        val = this.getValidValue(val);
      } else {
        val = this.$data.sValue;
      }
      return this.toNumber(val);
    },
    getRatio: function getRatio(e) {
      var ratio = 1;
      if (e.metaKey || e.ctrlKey) {
        ratio = 0.1;
      } else if (e.shiftKey) {
        ratio = 10;
      }
      return ratio;
    },
    getValueFromEvent: function getValueFromEvent(e) {
      var value26 = e.target.value.trim().replace(/。/g, ".");
      if (isValidProps(this.decimalSeparator)) {
        value26 = value26.replace(this.decimalSeparator, ".");
      }
      return value26;
    },
    getValidValue: function getValidValue(value26) {
      var min3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.min;
      var max3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.max;
      var val = parseFloat(value26, 10);
      if (isNaN(val)) {
        return value26;
      }
      if (val < min3) {
        val = min3;
      }
      if (val > max3) {
        val = max3;
      }
      return val;
    },
    setValue: function setValue9(v, callback) {
      var precision = this.$props.precision;
      var newValue = this.isNotCompleteNumber(parseFloat(v, 10)) ? null : parseFloat(v, 10);
      var _this$$data = this.$data, _this$$data$sValue = _this$$data.sValue, value26 = _this$$data$sValue === void 0 ? null : _this$$data$sValue, _this$$data$inputValu = _this$$data.inputValue, inputValue = _this$$data$inputValu === void 0 ? null : _this$$data$inputValu;
      var newValueInString = typeof newValue === "number" ? newValue.toFixed(precision) : "".concat(newValue);
      var changed = newValue !== value26 || newValueInString !== "".concat(inputValue);
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: newValue,
          inputValue: this.toPrecisionAsStep(v)
        }, callback);
      } else {
        this.setState({
          inputValue: this.toPrecisionAsStep(this.$data.sValue)
        }, callback);
      }
      if (changed) {
        this.__emit("update:value", newValue);
        this.__emit("change", newValue);
      }
      return newValue;
    },
    getPrecision: function getPrecision(value26) {
      if (isValidProps(this.precision)) {
        return this.precision;
      }
      var valueString = value26.toString();
      if (valueString.indexOf("e-") >= 0) {
        return parseInt(valueString.slice(valueString.indexOf("e-") + 2), 10);
      }
      var precision = 0;
      if (valueString.indexOf(".") >= 0) {
        precision = valueString.length - valueString.indexOf(".") - 1;
      }
      return precision;
    },
    getMaxPrecision: function getMaxPrecision(currentValue) {
      var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (isValidProps(this.precision)) {
        return this.precision;
      }
      var step = this.step;
      var ratioPrecision = this.getPrecision(ratio);
      var stepPrecision = this.getPrecision(step);
      var currentValuePrecision = this.getPrecision(currentValue);
      if (!currentValue) {
        return ratioPrecision + stepPrecision;
      }
      return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);
    },
    getPrecisionFactor: function getPrecisionFactor(currentValue) {
      var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var precision = this.getMaxPrecision(currentValue, ratio);
      return Math.pow(10, precision);
    },
    getInputDisplayValue: function getInputDisplayValue(state) {
      var _ref = state || this.$data, focused = _ref.focused, inputValue = _ref.inputValue, sValue = _ref.sValue;
      var inputDisplayValue;
      if (focused) {
        inputDisplayValue = inputValue;
      } else {
        inputDisplayValue = this.toPrecisionAsStep(sValue);
      }
      if (inputDisplayValue === void 0 || inputDisplayValue === null) {
        inputDisplayValue = "";
      }
      var inputDisplayValueFormat = this.formatWrapper(inputDisplayValue);
      if (isValidProps(this.$props.decimalSeparator)) {
        inputDisplayValueFormat = inputDisplayValueFormat.toString().replace(".", this.$props.decimalSeparator);
      }
      return inputDisplayValueFormat;
    },
    recordCursorPosition: function recordCursorPosition() {
      try {
        var inputElem = this.inputRef;
        this.cursorStart = inputElem.selectionStart;
        this.cursorEnd = inputElem.selectionEnd;
        this.currentValue = inputElem.value;
        this.cursorBefore = inputElem.value.substring(0, this.cursorStart);
        this.cursorAfter = inputElem.value.substring(this.cursorEnd);
      } catch (e) {
      }
    },
    fixCaret: function fixCaret(start, end) {
      if (start === void 0 || end === void 0 || !this.inputRef || !this.inputRef.value) {
        return;
      }
      try {
        var inputElem = this.inputRef;
        var currentStart = inputElem.selectionStart;
        var currentEnd = inputElem.selectionEnd;
        if (start !== currentStart || end !== currentEnd) {
          inputElem.setSelectionRange(start, end);
        }
      } catch (e) {
      }
    },
    restoreByAfter: function restoreByAfter(str) {
      if (str === void 0)
        return false;
      var fullStr = this.inputRef.value;
      var index2 = fullStr.lastIndexOf(str);
      if (index2 === -1)
        return false;
      var prevCursorPos = this.cursorBefore.length;
      if (this.lastKeyCode === KeyCode$2.DELETE && this.cursorBefore.charAt(prevCursorPos - 1) === str[0]) {
        this.fixCaret(prevCursorPos, prevCursorPos);
        return true;
      }
      if (index2 + str.length === fullStr.length) {
        this.fixCaret(index2, index2);
        return true;
      }
      return false;
    },
    partRestoreByAfter: function partRestoreByAfter(str) {
      var _this3 = this;
      if (str === void 0)
        return false;
      return Array.prototype.some.call(str, function(_, start) {
        var partStr = str.substring(start);
        return _this3.restoreByAfter(partStr);
      });
    },
    focus: function focus17() {
      this.inputRef.focus();
      this.recordCursorPosition();
    },
    blur: function blur14() {
      this.inputRef.blur();
    },
    formatWrapper: function formatWrapper(num) {
      if (this.formatter) {
        return this.formatter(num);
      }
      return num;
    },
    toPrecisionAsStep: function toPrecisionAsStep(num) {
      if (this.isNotCompleteNumber(num) || num === "") {
        return num;
      }
      var precision = Math.abs(this.getMaxPrecision(num));
      if (!isNaN(precision)) {
        return Number(num).toFixed(precision);
      }
      return num.toString();
    },
    isNotCompleteNumber: function isNotCompleteNumber(num) {
      return isNaN(num) || num === "" || num === null || num && num.toString().indexOf(".") === num.toString().length - 1;
    },
    toNumber: function toNumber(num) {
      var _this$$props2 = this.$props, precision = _this$$props2.precision, autofocus = _this$$props2.autofocus;
      var _this$$data$focused = this.$data.focused, focused = _this$$data$focused === void 0 ? autofocus : _this$$data$focused;
      var numberIsTooLarge = num && num.length > 16 && focused;
      if (this.isNotCompleteNumber(num) || numberIsTooLarge) {
        return num;
      }
      if (isValidProps(precision)) {
        return Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);
      }
      return Number(num);
    },
    upStep: function upStep(val, rat) {
      var step = this.step;
      var precisionFactor = this.getPrecisionFactor(val, rat);
      var precision = Math.abs(this.getMaxPrecision(val, rat));
      var result = ((precisionFactor * val + precisionFactor * step * rat) / precisionFactor).toFixed(precision);
      return this.toNumber(result);
    },
    downStep: function downStep(val, rat) {
      var step = this.step;
      var precisionFactor = this.getPrecisionFactor(val, rat);
      var precision = Math.abs(this.getMaxPrecision(val, rat));
      var result = ((precisionFactor * val - precisionFactor * step * rat) / precisionFactor).toFixed(precision);
      return this.toNumber(result);
    },
    stepFn: function stepFn(type2, e) {
      var _this4 = this;
      var ratio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var recursive = arguments.length > 3 ? arguments[3] : void 0;
      this.stop();
      if (e) {
        e.preventDefault();
      }
      if (this.disabled) {
        return;
      }
      var max3 = this.max, min3 = this.min;
      var value26 = this.getCurrentValidValue(this.$data.inputValue) || 0;
      if (this.isNotCompleteNumber(value26)) {
        return;
      }
      var val = this["".concat(type2, "Step")](value26, ratio);
      var outOfRange = val > max3 || val < min3;
      if (val > max3) {
        val = max3;
      } else if (val < min3) {
        val = min3;
      }
      this.setValue(val);
      this.setState({
        focused: true
      });
      if (outOfRange) {
        return;
      }
      this.autoStepTimer = setTimeout(function() {
        _this4[type2](e, ratio, true);
      }, recursive ? SPEED : DELAY);
    },
    stop: function stop() {
      if (this.autoStepTimer) {
        clearTimeout(this.autoStepTimer);
      }
    },
    down: function down(e, ratio, recursive) {
      this.pressingUpOrDown = true;
      this.stepFn("down", e, ratio, recursive);
    },
    up: function up(e, ratio, recursive) {
      this.pressingUpOrDown = true;
      this.stepFn("up", e, ratio, recursive);
    },
    handleInputClick: function handleInputClick2() {
      this.__emit("click");
    },
    saveUp: function saveUp(node) {
      this.upHandlerRef = node;
    },
    saveDown: function saveDown(node) {
      this.downHandlerRef = node;
    },
    saveInput: function saveInput6(node) {
      this.inputRef = node;
    },
    onCompositionstart: function onCompositionstart(e) {
      e.target.composing = true;
    },
    onCompositionend: function onCompositionend(e) {
      this.onChange(e);
      e.target.composing = false;
    }
  },
  render: function render94() {
    var _classNames;
    var props2 = _extends(_extends({}, this.$props), this.$attrs);
    var prefixCls2 = props2.prefixCls, disabled = props2.disabled, readonly = props2.readonly, useTouch = props2.useTouch, autocomplete = props2.autocomplete, upHandler = props2.upHandler, downHandler = props2.downHandler, className = props2.class;
    var classes4 = classNames((_classNames = {}, _defineProperty(_classNames, className, className), _defineProperty(_classNames, prefixCls2, true), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls2, "-focused"), this.$data.focused), _classNames));
    var upDisabledClass = "";
    var downDisabledClass = "";
    var sValue = this.$data.sValue;
    if (sValue || sValue === 0) {
      if (!isNaN(sValue)) {
        var val = Number(sValue);
        if (val >= this.max) {
          upDisabledClass = "".concat(prefixCls2, "-handler-up-disabled");
        }
        if (val <= this.min) {
          downDisabledClass = "".concat(prefixCls2, "-handler-down-disabled");
        }
      } else {
        upDisabledClass = "".concat(prefixCls2, "-handler-up-disabled");
        downDisabledClass = "".concat(prefixCls2, "-handler-down-disabled");
      }
    }
    var dataOrAriaAttributeProps = {};
    for (var key2 in props2) {
      if (props2.hasOwnProperty(key2) && (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role")) {
        dataOrAriaAttributeProps[key2] = props2[key2];
      }
    }
    var editable = !this.readonly && !this.disabled;
    var inputDisplayValue = this.getInputDisplayValue();
    var upEvents;
    var downEvents;
    if (useTouch) {
      var _upEvents, _downEvents;
      upEvents = (_upEvents = {}, _defineProperty(_upEvents, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", editable && !upDisabledClass && this.up), _defineProperty(_upEvents, "onTouchend", this.stop), _upEvents);
      downEvents = (_downEvents = {}, _defineProperty(_downEvents, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", editable && !downDisabledClass && this.down), _defineProperty(_downEvents, "onTouchend", this.stop), _downEvents);
    } else {
      upEvents = {
        onMousedown: editable && !upDisabledClass && this.up,
        onMouseup: this.stop,
        onMouseleave: this.stop
      };
      downEvents = {
        onMousedown: editable && !downDisabledClass && this.down,
        onMouseup: this.stop,
        onMouseleave: this.stop
      };
    }
    var isUpDisabled = !!upDisabledClass || disabled || readonly;
    var isDownDisabled = !!downDisabledClass || disabled || readonly;
    var upHandlerProps = _extends(_extends({
      disabled: isUpDisabled,
      prefixCls: prefixCls2,
      unselectable: "unselectable",
      role: "button",
      "aria-label": "Increase Value",
      "aria-disabled": !!isUpDisabled,
      class: "".concat(prefixCls2, "-handler ").concat(prefixCls2, "-handler-up ").concat(upDisabledClass)
    }, upEvents), {
      ref: this.saveUp
    });
    var downHandlerProps = _extends(_extends({
      disabled: isDownDisabled,
      prefixCls: prefixCls2,
      unselectable: "unselectable",
      role: "button",
      "aria-label": "Decrease Value",
      "aria-disabled": !!isDownDisabled,
      class: "".concat(prefixCls2, "-handler ").concat(prefixCls2, "-handler-down ").concat(downDisabledClass)
    }, downEvents), {
      ref: this.saveDown
    });
    return createVNode("div", {
      "class": classes4,
      "style": props2.style,
      "title": props2.title,
      "onMouseenter": props2.onMouseenter,
      "onMouseleave": props2.onMouseleave,
      "onMouseover": props2.onMouseover,
      "onMouseout": props2.onMouseout
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-handler-wrap")
    }, [createVNode("span", null, [createVNode(InputHandler$1, _objectSpread2(_objectSpread2({}, upHandlerProps), {}, {
      "key": "upHandler"
    }), {
      default: function _default8() {
        return [upHandler || createVNode("span", {
          "unselectable": "unselectable",
          "class": "".concat(prefixCls2, "-handler-up-inner"),
          "onClick": preventDefault
        }, null)];
      }
    })]), createVNode(InputHandler$1, _objectSpread2(_objectSpread2({}, downHandlerProps), {}, {
      "key": "downHandler"
    }), {
      default: function _default8() {
        return [downHandler || createVNode("span", {
          "unselectable": "unselectable",
          "class": "".concat(prefixCls2, "-handler-down-inner"),
          "onClick": preventDefault
        }, null)];
      }
    })]), createVNode("div", {
      "class": "".concat(prefixCls2, "-input-wrap")
    }, [createVNode("input", _objectSpread2({
      "role": "spinbutton",
      "aria-valuemin": this.min,
      "aria-valuemax": this.max,
      "aria-valuenow": sValue,
      "required": this.required,
      "type": props2.type,
      "placeholder": this.placeholder,
      "onClick": this.handleInputClick,
      "class": "".concat(prefixCls2, "-input"),
      "tabindex": this.tabindex,
      "autocomplete": autocomplete,
      "onFocus": this.onFocus,
      "onBlur": this.onBlur,
      "onKeydown": editable && this.onKeyDown,
      "onKeyup": editable && this.onKeyUp,
      "autofocus": this.autofocus,
      "maxlength": this.maxlength,
      "readonly": this.readonly,
      "disabled": this.disabled,
      "max": this.max,
      "min": this.min,
      "step": this.step,
      "name": this.name,
      "title": this.title,
      "id": this.id,
      "onInput": this.onTrigger,
      "onCompositionstart": this.onCompositionstart,
      "onCompositionend": this.onCompositionend,
      "ref": this.saveInput,
      "value": inputDisplayValue,
      "pattern": this.pattern
    }, dataOrAriaAttributeProps), null)])]);
  }
});
var __rest$r = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var inputNumberProps = {
  prefixCls: PropsTypes.string,
  min: PropsTypes.number,
  max: PropsTypes.number,
  value: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  step: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]).def(1),
  defaultValue: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  disabled: PropsTypes.looseBool,
  size: PropsTypes.oneOf(tuple("large", "small", "default")),
  formatter: PropsTypes.func,
  parser: PropsTypes.func,
  decimalSeparator: PropsTypes.string,
  placeholder: PropsTypes.string,
  name: PropsTypes.string,
  id: PropsTypes.string,
  precision: PropsTypes.number,
  autofocus: PropsTypes.looseBool,
  onPressEnter: {
    type: Function
  },
  onChange: Function
};
var InputNumber = defineComponent({
  name: "AInputNumber",
  inheritAttrs: false,
  props: inputNumberProps,
  setup: function setup94(props2) {
    var inputNumberRef = ref(null);
    var focus27 = function focus28() {
      inputNumberRef.value.focus();
    };
    var blur24 = function blur25() {
      inputNumberRef.value.blur();
    };
    onMounted(function() {
      nextTick(function() {
      });
    });
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      inputNumberRef,
      focus: focus27,
      blur: blur24
    };
  },
  render: function render95() {
    var _classNames;
    var _a = _extends(_extends({}, getOptionProps(this)), this.$attrs), customizePrefixCls = _a.prefixCls, size = _a.size, className = _a.class, others = __rest$r(_a, ["prefixCls", "size", "class"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input-number", customizePrefixCls);
    var inputNumberClass = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls2, "-sm"), size === "small"), _classNames), className);
    var upIcon = createVNode(UpOutlined, {
      "class": "".concat(prefixCls2, "-handler-up-inner")
    }, null);
    var downIcon = createVNode(DownOutlined, {
      "class": "".concat(prefixCls2, "-handler-down-inner")
    }, null);
    var vcInputNumberProps = _extends(_extends({
      prefixCls: prefixCls2,
      upHandler: upIcon,
      downHandler: downIcon
    }, others), {
      class: inputNumberClass
    });
    return createVNode(VcInputNumber, _objectSpread2(_objectSpread2({}, vcInputNumberProps), {}, {
      "ref": "inputNumberRef"
    }), null);
  }
});
var index$8 = withInstall(InputNumber);
var basicProps = {
  prefixCls: PropsTypes.string,
  hasSider: PropsTypes.looseBool,
  tagName: PropsTypes.string
};
function generator(_ref) {
  var suffixCls = _ref.suffixCls, tagName = _ref.tagName, name2 = _ref.name;
  return function(BasicComponent) {
    var Adapter = defineComponent({
      name: name2,
      props: basicProps,
      setup: function setup161(props2, _ref2) {
        var slots = _ref2.slots;
        var _useConfigInject = useConfigInject(suffixCls, props2), prefixCls2 = _useConfigInject.prefixCls;
        return function() {
          var _a;
          var basicComponentProps = _extends(_extends({}, props2), {
            prefixCls: prefixCls2.value,
            tagName
          });
          return createVNode(BasicComponent, basicComponentProps, {
            default: function _default8() {
              return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
            }
          });
        };
      }
    });
    return Adapter;
  };
}
var Basic = defineComponent({
  props: basicProps,
  setup: function setup95(props2, _ref3) {
    var slots = _ref3.slots;
    return function() {
      var _a;
      return createVNode(props2.tagName, {
        class: props2.prefixCls
      }, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
    };
  }
});
var BasicLayout = defineComponent({
  props: basicProps,
  setup: function setup96(props2, _ref4) {
    var slots = _ref4.slots;
    var _useConfigInject2 = useConfigInject("", props2), direction = _useConfigInject2.direction;
    var siders = ref([]);
    var siderHookProvider = {
      addSider: function addSider(id2) {
        siders.value = [].concat(_toConsumableArray(siders.value), [id2]);
      },
      removeSider: function removeSider(id2) {
        siders.value = siders.value.filter(function(currentId) {
          return currentId !== id2;
        });
      }
    };
    provide(SiderHookProviderKey, siderHookProvider);
    return function() {
      var _classNames;
      var _a;
      var prefixCls2 = props2.prefixCls, hasSider = props2.hasSider, tagName = props2.tagName;
      var divCls = classNames(prefixCls2, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-has-sider"), typeof hasSider === "boolean" ? hasSider : siders.value.length > 0), _defineProperty(_classNames, "".concat(prefixCls2, "-rtl"), direction.value === "rtl"), _classNames));
      return createVNode(tagName, {
        class: divCls
      }, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
    };
  }
});
var Layout = generator({
  suffixCls: "layout",
  tagName: "section",
  name: "ALayout"
})(BasicLayout);
var Header = generator({
  suffixCls: "layout-header",
  tagName: "header",
  name: "ALayoutHeader"
})(Basic);
var Footer = generator({
  suffixCls: "layout-footer",
  tagName: "footer",
  name: "ALayoutFooter"
})(Basic);
var Content = generator({
  suffixCls: "layout-content",
  tagName: "main",
  name: "ALayoutContent"
})(Basic);
Layout.Header = Header;
Layout.Footer = Footer;
Layout.Content = Content;
var Layout$1 = Layout;
var dimensionMaxMap = {
  xs: "479.98px",
  sm: "575.98px",
  md: "767.98px",
  lg: "991.98px",
  xl: "1199.98px",
  xxl: "1599.98px"
};
var siderProps = {
  prefixCls: PropsTypes.string,
  collapsible: PropsTypes.looseBool,
  collapsed: PropsTypes.looseBool,
  defaultCollapsed: PropsTypes.looseBool,
  reverseArrow: PropsTypes.looseBool,
  zeroWidthTriggerStyle: PropsTypes.style,
  trigger: PropsTypes.VNodeChild,
  width: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  collapsedWidth: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  breakpoint: PropsTypes.oneOf(tuple("xs", "sm", "md", "lg", "xl", "xxl")),
  theme: PropsTypes.oneOf(tuple("light", "dark")).def("dark"),
  onBreakpoint: Function,
  onCollapse: Function
};
var generateId = function() {
  var i = 0;
  return function() {
    var prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    i += 1;
    return "".concat(prefix).concat(i);
  };
}();
var Sider = defineComponent({
  name: "ALayoutSider",
  inheritAttrs: false,
  props: initDefaultProps$1(siderProps, {
    collapsible: false,
    defaultCollapsed: false,
    reverseArrow: false,
    width: 200,
    collapsedWidth: 80
  }),
  emits: ["breakpoint", "update:collapsed", "collapse"],
  setup: function setup97(props2, _ref) {
    var emit = _ref.emit, attrs = _ref.attrs, slots = _ref.slots;
    var _useConfigInject = useConfigInject("layout-sider", props2), prefixCls2 = _useConfigInject.prefixCls;
    var siderHook = inject(SiderHookProviderKey, void 0);
    var collapsed = ref(!!(props2.collapsed !== void 0 ? props2.collapsed : props2.defaultCollapsed));
    var below = ref(false);
    watch(function() {
      return props2.collapsed;
    }, function() {
      collapsed.value = !!props2.collapsed;
    });
    provide(SiderCollapsedKey, collapsed);
    var handleSetCollapsed = function handleSetCollapsed2(value26, type2) {
      if (props2.collapsed === void 0) {
        collapsed.value = value26;
      }
      emit("update:collapsed", value26);
      emit("collapse", value26, type2);
    };
    var responsiveHandlerRef = ref(function(mql2) {
      below.value = mql2.matches;
      emit("breakpoint", mql2.matches);
      if (collapsed.value !== mql2.matches) {
        handleSetCollapsed(mql2.matches, "responsive");
      }
    });
    var mql;
    function responsiveHandler(mql2) {
      return responsiveHandlerRef.value(mql2);
    }
    var uniqueId = generateId("ant-sider-");
    onMounted(function() {
      if (typeof window !== "undefined") {
        var _window = window, matchMedia = _window.matchMedia;
        if (matchMedia && props2.breakpoint && props2.breakpoint in dimensionMaxMap) {
          mql = matchMedia("(max-width: ".concat(dimensionMaxMap[props2.breakpoint], ")"));
          try {
            mql.addEventListener("change", responsiveHandler);
          } catch (error3) {
            mql.addListener(responsiveHandler);
          }
          responsiveHandler(mql);
        }
      }
      siderHook && siderHook.addSider(uniqueId);
    });
    onBeforeUnmount(function() {
      try {
        mql === null || mql === void 0 ? void 0 : mql.removeEventListener("change", responsiveHandler);
      } catch (error3) {
        mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
      }
      siderHook && siderHook.removeSider(uniqueId);
    });
    var toggle = function toggle2() {
      handleSetCollapsed(!collapsed.value, "clickTrigger");
    };
    return function() {
      var _classNames;
      var _a;
      var pre = prefixCls2.value;
      var collapsedWidth = props2.collapsedWidth, width = props2.width, reverseArrow = props2.reverseArrow, zeroWidthTriggerStyle = props2.zeroWidthTriggerStyle, trigger2 = props2.trigger, collapsible = props2.collapsible, theme = props2.theme;
      var rawWidth = collapsed.value ? collapsedWidth : width;
      var siderWidth = isNumeric$2(rawWidth) ? "".concat(rawWidth, "px") : String(rawWidth);
      var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? createVNode("span", {
        "onClick": toggle,
        "class": classNames("".concat(pre, "-zero-width-trigger"), "".concat(pre, "-zero-width-trigger-").concat(reverseArrow ? "right" : "left")),
        "style": zeroWidthTriggerStyle
      }, [trigger2 || createVNode(BarsOutlined, null, null)]) : null;
      var iconObj = {
        expanded: reverseArrow ? createVNode(RightOutlined, null, null) : createVNode(LeftOutlined, null, null),
        collapsed: reverseArrow ? createVNode(LeftOutlined, null, null) : createVNode(RightOutlined, null, null)
      };
      var status = collapsed.value ? "collapsed" : "expanded";
      var defaultTrigger = iconObj[status];
      var triggerDom = trigger2 !== null ? zeroWidthTrigger || createVNode("div", {
        "class": "".concat(pre, "-trigger"),
        "onClick": toggle,
        "style": {
          width: siderWidth
        }
      }, [trigger2 || defaultTrigger]) : null;
      var divStyle = _extends(_extends({}, attrs.style), {
        flex: "0 0 ".concat(siderWidth),
        maxWidth: siderWidth,
        minWidth: siderWidth,
        width: siderWidth
      });
      var siderCls = classNames(pre, "".concat(pre, "-").concat(theme), (_classNames = {}, _defineProperty(_classNames, "".concat(pre, "-collapsed"), !!collapsed.value), _defineProperty(_classNames, "".concat(pre, "-has-trigger"), collapsible && trigger2 !== null && !zeroWidthTrigger), _defineProperty(_classNames, "".concat(pre, "-below"), !!below.value), _defineProperty(_classNames, "".concat(pre, "-zero-width"), parseFloat(siderWidth) === 0), _classNames), attrs.class);
      return createVNode("aside", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "class": siderCls,
        "style": divStyle,
        "ref": ref
      }), [createVNode("div", {
        "class": "".concat(pre, "-children")
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]), collapsible || below.value && zeroWidthTrigger ? triggerDom : null]);
    };
  }
});
Layout$1.Sider = Sider;
Layout$1.install = function(app) {
  app.component(Layout$1.name, Layout$1);
  app.component(Layout$1.Header.name, Layout$1.Header);
  app.component(Layout$1.Footer.name, Layout$1.Footer);
  app.component(Layout$1.Sider.name, Layout$1.Sider);
  app.component(Layout$1.Content.name, Layout$1.Content);
  return app;
};
var LayoutHeader = Layout$1.Header;
var LayoutFooter = Layout$1.Footer;
var LayoutSider = Layout$1.Sider;
var LayoutContent = Layout$1.Content;
var __rest$q = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var SpinSize = PropsTypes.oneOf(tuple("small", "default", "large"));
var getSpinProps = function getSpinProps2() {
  return {
    prefixCls: PropsTypes.string,
    spinning: PropsTypes.looseBool,
    size: SpinSize,
    wrapperClassName: PropsTypes.string,
    tip: PropsTypes.string,
    delay: PropsTypes.number,
    indicator: PropsTypes.any
  };
};
var defaultIndicator = null;
function shouldDelay(spinning, delay) {
  return !!spinning && !!delay && !isNaN(Number(delay));
}
function setDefaultIndicator(Content2) {
  var Indicator = Content2.indicator;
  defaultIndicator = typeof Indicator === "function" ? Indicator : function() {
    return createVNode(Indicator, null, null);
  };
}
var Spin = defineComponent({
  name: "ASpin",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(getSpinProps(), {
    size: "default",
    spinning: true,
    wrapperClassName: ""
  }),
  setup: function setup98() {
    return {
      originalUpdateSpinning: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data48() {
    var spinning = this.spinning, delay = this.delay;
    var shouldBeDelayed = shouldDelay(spinning, delay);
    return {
      sSpinning: spinning && !shouldBeDelayed
    };
  },
  created: function created13() {
    this.originalUpdateSpinning = this.updateSpinning;
    this.debouncifyUpdateSpinning(this.$props);
  },
  mounted: function mounted27() {
    this.updateSpinning();
  },
  updated: function updated15() {
    var _this = this;
    nextTick(function() {
      _this.debouncifyUpdateSpinning();
      _this.updateSpinning();
    });
  },
  beforeUnmount: function beforeUnmount19() {
    this.cancelExistingSpin();
  },
  methods: {
    debouncifyUpdateSpinning: function debouncifyUpdateSpinning(props2) {
      var _ref = props2 || this.$props, delay = _ref.delay;
      if (delay) {
        this.cancelExistingSpin();
        this.updateSpinning = debounce$1(this.originalUpdateSpinning, delay);
      }
    },
    updateSpinning: function updateSpinning() {
      var spinning = this.spinning, sSpinning = this.sSpinning;
      if (sSpinning !== spinning) {
        this.setState({
          sSpinning: spinning
        });
      }
    },
    cancelExistingSpin: function cancelExistingSpin() {
      var updateSpinning2 = this.updateSpinning;
      if (updateSpinning2 && updateSpinning2.cancel) {
        updateSpinning2.cancel();
      }
    },
    renderIndicator: function renderIndicator(prefixCls2) {
      var dotClassName = "".concat(prefixCls2, "-dot");
      var indicator = getComponent(this, "indicator");
      if (indicator === null) {
        return null;
      }
      if (Array.isArray(indicator)) {
        indicator = indicator.length === 1 ? indicator[0] : indicator;
      }
      if (isVNode(indicator)) {
        return cloneVNode(indicator, {
          class: dotClassName
        });
      }
      if (defaultIndicator && isVNode(defaultIndicator())) {
        return cloneVNode(defaultIndicator(), {
          class: dotClassName
        });
      }
      return createVNode("span", {
        "class": "".concat(dotClassName, " ").concat(prefixCls2, "-dot-spin")
      }, [createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null), createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null), createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null), createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null)]);
    }
  },
  render: function render96() {
    var _spinClassName;
    var _this$$props = this.$props, size = _this$$props.size, customizePrefixCls = _this$$props.prefixCls, tip = _this$$props.tip, wrapperClassName = _this$$props.wrapperClassName;
    var _a = this.$attrs, cls = _a.class, style3 = _a.style, divProps = __rest$q(_a, ["class", "style"]);
    var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, direction = _this$configProvider.direction;
    var prefixCls2 = getPrefixCls2("spin", customizePrefixCls);
    var sSpinning = this.sSpinning;
    var spinClassName = (_spinClassName = {}, _defineProperty(_spinClassName, prefixCls2, true), _defineProperty(_spinClassName, "".concat(prefixCls2, "-sm"), size === "small"), _defineProperty(_spinClassName, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_spinClassName, "".concat(prefixCls2, "-spinning"), sSpinning), _defineProperty(_spinClassName, "".concat(prefixCls2, "-show-text"), !!tip), _defineProperty(_spinClassName, "".concat(prefixCls2, "-rtl"), direction === "rtl"), _defineProperty(_spinClassName, cls, !!cls), _spinClassName);
    var spinElement = createVNode("div", _objectSpread2(_objectSpread2({}, divProps), {}, {
      "style": style3,
      "class": spinClassName
    }), [this.renderIndicator(prefixCls2), tip ? createVNode("div", {
      "class": "".concat(prefixCls2, "-text")
    }, [tip]) : null]);
    var children = getSlot(this);
    if (children && children.length) {
      var _containerClassName;
      var containerClassName = (_containerClassName = {}, _defineProperty(_containerClassName, "".concat(prefixCls2, "-container"), true), _defineProperty(_containerClassName, "".concat(prefixCls2, "-blur"), sSpinning), _containerClassName);
      return createVNode("div", {
        "class": ["".concat(prefixCls2, "-nested-loading"), wrapperClassName]
      }, [sSpinning && createVNode("div", {
        "key": "loading"
      }, [spinElement]), createVNode("div", {
        "class": containerClassName,
        "key": "container"
      }, [children])]);
    }
    return spinElement;
  }
});
Spin.setDefaultIndicator = setDefaultIndicator;
Spin.install = function(app) {
  app.component(Spin.name, Spin);
  return app;
};
var MiniSelect = defineComponent({
  inheritAttrs: false,
  props: SelectProps(),
  Option: VcSelect.Option,
  render: function render97() {
    var _this = this;
    var selectOptionsProps = getOptionProps(this);
    var selelctProps = _extends(_extends(_extends({}, selectOptionsProps), {
      size: "small"
    }), this.$attrs);
    return createVNode(VcSelect, selelctProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
var Pager = {
  name: "Pager",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    rootPrefixCls: PropsTypes.string,
    page: PropsTypes.number,
    active: PropsTypes.looseBool,
    last: PropsTypes.looseBool,
    locale: PropsTypes.object,
    showTitle: PropsTypes.looseBool,
    itemRender: {
      type: Function,
      default: function _default7() {
      }
    }
  },
  methods: {
    handleClick: function handleClick2() {
      this.__emit("click", this.page);
    },
    handleKeyPress: function handleKeyPress2(event) {
      this.__emit("keypress", event, this.handleClick, this.page);
    }
  },
  render: function render98() {
    var _classNames;
    var _this$$attrs = this.$attrs, _cls = _this$$attrs.class, style3 = _this$$attrs.style;
    var props2 = this.$props;
    var prefixCls2 = "".concat(props2.rootPrefixCls, "-item");
    var cls = classNames(prefixCls2, "".concat(prefixCls2, "-").concat(props2.page), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-active"), props2.active), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), !props2.page), _classNames), _cls);
    return createVNode("li", {
      "onClick": this.handleClick,
      "onKeypress": this.handleKeyPress,
      "title": this.showTitle ? this.page : null,
      "tabindex": "0",
      "class": cls,
      "style": style3
    }, [this.itemRender({
      page: this.page,
      type: "page",
      originalElement: createVNode("a", null, [this.page])
    })]);
  }
};
var KEYCODE = {
  ZERO: 48,
  NINE: 57,
  NUMPAD_ZERO: 96,
  NUMPAD_NINE: 105,
  BACKSPACE: 8,
  DELETE: 46,
  ENTER: 13,
  ARROW_UP: 38,
  ARROW_DOWN: 40
};
var Options = {
  mixins: [BaseMixin],
  props: {
    disabled: PropsTypes.looseBool,
    changeSize: PropsTypes.func,
    quickGo: PropsTypes.func,
    selectComponentClass: PropsTypes.any,
    current: PropsTypes.number,
    pageSizeOptions: PropsTypes.array.def(["10", "20", "30", "40"]),
    pageSize: PropsTypes.number,
    buildOptionText: PropsTypes.func,
    locale: PropsTypes.object,
    rootPrefixCls: PropsTypes.string,
    selectPrefixCls: PropsTypes.string,
    goButton: PropsTypes.any
  },
  data: function data49() {
    return {
      goInputText: ""
    };
  },
  methods: {
    getValidValue: function getValidValue2() {
      var goInputText = this.goInputText, current2 = this.current;
      return !goInputText || isNaN(goInputText) ? current2 : Number(goInputText);
    },
    defaultBuildOptionText: function defaultBuildOptionText(opt) {
      return "".concat(opt.value, " ").concat(this.locale.items_per_page);
    },
    handleChange: function handleChange14(e) {
      var _e$target = e.target, value26 = _e$target.value, composing = _e$target.composing;
      if (e.isComposing || composing || this.goInputText === value26)
        return;
      this.setState({
        goInputText: value26
      });
    },
    handleBlur: function handleBlur(e) {
      var _this$$props = this.$props, goButton = _this$$props.goButton, quickGo = _this$$props.quickGo, rootPrefixCls = _this$$props.rootPrefixCls;
      if (goButton) {
        return;
      }
      if (e.relatedTarget && (e.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-prev")) >= 0 || e.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-next")) >= 0)) {
        return;
      }
      quickGo(this.getValidValue());
    },
    go: function go(e) {
      var goInputText = this.goInputText;
      if (goInputText === "") {
        return;
      }
      if (e.keyCode === KEYCODE.ENTER || e.type === "click") {
        this.quickGo(this.getValidValue());
        this.setState({
          goInputText: ""
        });
      }
    }
  },
  render: function render99() {
    var _this = this;
    var rootPrefixCls = this.rootPrefixCls, locale2 = this.locale, changeSize = this.changeSize, quickGo = this.quickGo, goButton = this.goButton, Select2 = this.selectComponentClass, defaultBuildOptionText2 = this.defaultBuildOptionText, selectPrefixCls = this.selectPrefixCls, pageSize2 = this.pageSize, pageSizeOptions = this.pageSizeOptions, goInputText = this.goInputText, disabled = this.disabled;
    var prefixCls2 = "".concat(rootPrefixCls, "-options");
    var changeSelect = null;
    var goInput = null;
    var gotoButton = null;
    if (!changeSize && !quickGo) {
      return null;
    }
    if (changeSize && Select2) {
      var buildOptionText = this.buildOptionText || defaultBuildOptionText2;
      var options2 = pageSizeOptions.map(function(opt, i) {
        return createVNode(Select2.Option, {
          "key": i,
          "value": opt
        }, {
          default: function _default8() {
            return [buildOptionText({
              value: opt
            })];
          }
        });
      });
      changeSelect = createVNode(Select2, {
        "disabled": disabled,
        "prefixCls": selectPrefixCls,
        "showSearch": false,
        "class": "".concat(prefixCls2, "-size-changer"),
        "optionLabelProp": "children",
        "value": (pageSize2 || pageSizeOptions[0]).toString(),
        "onChange": function onChange9(value26) {
          return _this.changeSize(Number(value26));
        },
        "getPopupContainer": function getPopupContainer(triggerNode) {
          return triggerNode.parentNode;
        }
      }, {
        default: function _default8() {
          return [options2];
        }
      });
    }
    if (quickGo) {
      if (goButton) {
        gotoButton = typeof goButton === "boolean" ? createVNode("button", {
          "type": "button",
          "onClick": this.go,
          "onKeyup": this.go,
          "disabled": disabled
        }, [locale2.jump_to_confirm]) : createVNode("span", {
          "onClick": this.go,
          "onKeyup": this.go
        }, [goButton]);
      }
      goInput = createVNode("div", {
        "class": "".concat(prefixCls2, "-quick-jumper")
      }, [locale2.jump_to, withDirectives(createVNode("input", {
        "disabled": disabled,
        "type": "text",
        "value": goInputText,
        "onInput": this.handleChange,
        "onChange": this.handleChange,
        "onKeyup": this.go,
        "onBlur": this.handleBlur
      }, null), [[antInput$1]]), locale2.page, gotoButton]);
    }
    return createVNode("li", {
      "class": "".concat(prefixCls2)
    }, [changeSelect, goInput]);
  }
};
var LOCALE = {
  items_per_page: "\u6761/\u9875",
  jump_to: "\u8DF3\u81F3",
  jump_to_confirm: "\u786E\u5B9A",
  page: "\u9875",
  prev_page: "\u4E0A\u4E00\u9875",
  next_page: "\u4E0B\u4E00\u9875",
  prev_5: "\u5411\u524D 5 \u9875",
  next_5: "\u5411\u540E 5 \u9875",
  prev_3: "\u5411\u524D 3 \u9875",
  next_3: "\u5411\u540E 3 \u9875"
};
var __rest$p = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$d() {
}
function isInteger(value26) {
  return typeof value26 === "number" && isFinite(value26) && Math.floor(value26) === value26;
}
function defaultItemRender(_ref) {
  var originalElement = _ref.originalElement;
  return originalElement;
}
function calculatePage(p, state, props2) {
  var pageSize2 = p;
  if (typeof pageSize2 === "undefined") {
    pageSize2 = state.statePageSize;
  }
  return Math.floor((props2.total - 1) / pageSize2) + 1;
}
var VcPagination = defineComponent({
  name: "Pagination",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    disabled: PropsTypes.looseBool,
    prefixCls: PropsTypes.string.def("rc-pagination"),
    selectPrefixCls: PropsTypes.string.def("rc-select"),
    current: PropsTypes.number,
    defaultCurrent: PropsTypes.number.def(1),
    total: PropsTypes.number.def(0),
    pageSize: PropsTypes.number,
    defaultPageSize: PropsTypes.number.def(10),
    hideOnSinglePage: PropsTypes.looseBool.def(false),
    showSizeChanger: PropsTypes.looseBool.def(false),
    showLessItems: PropsTypes.looseBool.def(false),
    selectComponentClass: PropsTypes.any,
    showPrevNextJumpers: PropsTypes.looseBool.def(true),
    showQuickJumper: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]).def(false),
    showTitle: PropsTypes.looseBool.def(true),
    pageSizeOptions: PropsTypes.arrayOf(PropsTypes.string),
    buildOptionText: PropsTypes.func,
    showTotal: PropsTypes.func,
    simple: PropsTypes.looseBool,
    locale: PropsTypes.object.def(LOCALE),
    itemRender: PropsTypes.func,
    prevIcon: PropsTypes.any,
    nextIcon: PropsTypes.any,
    jumpPrevIcon: PropsTypes.any,
    jumpNextIcon: PropsTypes.any
  },
  data: function data50() {
    var props2 = getOptionProps(this);
    var hasOnChange = this.onChange !== noop$d;
    var hasCurrent = "current" in props2;
    if (hasCurrent && !hasOnChange) {
      console.warn("Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
    }
    var current2 = this.defaultCurrent;
    if ("current" in props2) {
      current2 = this.current;
    }
    var pageSize2 = this.defaultPageSize;
    if ("pageSize" in props2) {
      pageSize2 = this.pageSize;
    }
    current2 = Math.min(current2, calculatePage(pageSize2, void 0, props2));
    return {
      stateCurrent: current2,
      stateCurrentInputValue: current2,
      statePageSize: pageSize2
    };
  },
  watch: {
    current: function current(val) {
      this.setState({
        stateCurrent: val,
        stateCurrentInputValue: val
      });
    },
    pageSize: function pageSize(val) {
      var newState = {};
      var current2 = this.stateCurrent;
      var newCurrent = calculatePage(val, this.$data, this.$props);
      current2 = current2 > newCurrent ? newCurrent : current2;
      if (!hasProp(this, "current")) {
        newState.stateCurrent = current2;
        newState.stateCurrentInputValue = current2;
      }
      newState.statePageSize = val;
      this.setState(newState);
    },
    stateCurrent: function stateCurrent(val, oldValue) {
      var _this = this;
      this.$nextTick(function() {
        if (_this.$refs.paginationNode) {
          var lastCurrentNode = _this.$refs.paginationNode.querySelector(".".concat(_this.prefixCls, "-item-").concat(oldValue));
          if (lastCurrentNode && document.activeElement === lastCurrentNode) {
            lastCurrentNode.blur();
          }
        }
      });
    },
    total: function total() {
      var newState = {};
      var newCurrent = calculatePage(this.pageSize, this.$data, this.$props);
      if (hasProp(this, "current")) {
        var current2 = Math.min(this.current, newCurrent);
        newState.stateCurrent = current2;
        newState.stateCurrentInputValue = current2;
      } else {
        var _current = this.stateCurrent;
        if (_current === 0 && newCurrent > 0) {
          _current = 1;
        } else {
          _current = Math.min(this.stateCurrent, newCurrent);
        }
        newState.stateCurrent = _current;
      }
      this.setState(newState);
    }
  },
  methods: {
    getJumpPrevPage: function getJumpPrevPage() {
      return Math.max(1, this.stateCurrent - (this.showLessItems ? 3 : 5));
    },
    getJumpNextPage: function getJumpNextPage() {
      return Math.min(calculatePage(void 0, this.$data, this.$props), this.stateCurrent + (this.showLessItems ? 3 : 5));
    },
    getItemIcon: function getItemIcon(icon) {
      var prefixCls2 = this.$props.prefixCls;
      var iconNode = getComponent(this, icon, this.$props) || createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, null);
      return iconNode;
    },
    getValidValue: function getValidValue3(e) {
      var inputValue = e.target.value;
      var allPages = calculatePage(void 0, this.$data, this.$props);
      var stateCurrentInputValue = this.$data.stateCurrentInputValue;
      var value26;
      if (inputValue === "") {
        value26 = inputValue;
      } else if (isNaN(Number(inputValue))) {
        value26 = stateCurrentInputValue;
      } else if (inputValue >= allPages) {
        value26 = allPages;
      } else {
        value26 = Number(inputValue);
      }
      return value26;
    },
    isValid: function isValid3(page) {
      return isInteger(page) && page !== this.stateCurrent;
    },
    shouldDisplayQuickJumper: function shouldDisplayQuickJumper() {
      var _this$$props = this.$props, showQuickJumper = _this$$props.showQuickJumper, pageSize2 = _this$$props.pageSize, total2 = _this$$props.total;
      if (total2 <= pageSize2) {
        return false;
      }
      return showQuickJumper;
    },
    handleKeyDown: function handleKeyDown5(event) {
      if (event.keyCode === KEYCODE.ARROW_UP || event.keyCode === KEYCODE.ARROW_DOWN) {
        event.preventDefault();
      }
    },
    handleKeyUp: function handleKeyUp(e) {
      if (e.isComposing || e.target.composing)
        return;
      var value26 = this.getValidValue(e);
      var stateCurrentInputValue = this.stateCurrentInputValue;
      if (value26 !== stateCurrentInputValue) {
        this.setState({
          stateCurrentInputValue: value26
        });
      }
      if (e.keyCode === KEYCODE.ENTER) {
        this.handleChange(value26);
      } else if (e.keyCode === KEYCODE.ARROW_UP) {
        this.handleChange(value26 - 1);
      } else if (e.keyCode === KEYCODE.ARROW_DOWN) {
        this.handleChange(value26 + 1);
      }
    },
    changePageSize: function changePageSize(size) {
      var current2 = this.stateCurrent;
      var preCurrent = current2;
      var newCurrent = calculatePage(size, this.$data, this.$props);
      current2 = current2 > newCurrent ? newCurrent : current2;
      if (newCurrent === 0) {
        current2 = this.stateCurrent;
      }
      if (typeof size === "number") {
        if (!hasProp(this, "pageSize")) {
          this.setState({
            statePageSize: size
          });
        }
        if (!hasProp(this, "current")) {
          this.setState({
            stateCurrent: current2,
            stateCurrentInputValue: current2
          });
        }
      }
      this.__emit("update:pageSize", size);
      if (current2 !== preCurrent) {
        this.__emit("update:current", current2);
      }
      this.__emit("showSizeChange", current2, size);
    },
    handleChange: function handleChange15(p) {
      var disabled = this.$props.disabled;
      var page = p;
      if (this.isValid(page) && !disabled) {
        var currentPage = calculatePage(void 0, this.$data, this.$props);
        if (page > currentPage) {
          page = currentPage;
        } else if (page < 1) {
          page = 1;
        }
        if (!hasProp(this, "current")) {
          this.setState({
            stateCurrent: page,
            stateCurrentInputValue: page
          });
        }
        this.__emit("update:current", page);
        this.__emit("change", page, this.statePageSize);
        return page;
      }
      return this.stateCurrent;
    },
    prev: function prev2() {
      if (this.hasPrev()) {
        this.handleChange(this.stateCurrent - 1);
      }
    },
    next: function next2() {
      if (this.hasNext()) {
        this.handleChange(this.stateCurrent + 1);
      }
    },
    jumpPrev: function jumpPrev() {
      this.handleChange(this.getJumpPrevPage());
    },
    jumpNext: function jumpNext() {
      this.handleChange(this.getJumpNextPage());
    },
    hasPrev: function hasPrev() {
      return this.stateCurrent > 1;
    },
    hasNext: function hasNext() {
      return this.stateCurrent < calculatePage(void 0, this.$data, this.$props);
    },
    runIfEnter: function runIfEnter(event, callback) {
      if (event.key === "Enter" || event.charCode === 13) {
        for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          restParams[_key - 2] = arguments[_key];
        }
        callback.apply(void 0, restParams);
      }
    },
    runIfEnterPrev: function runIfEnterPrev(event) {
      this.runIfEnter(event, this.prev);
    },
    runIfEnterNext: function runIfEnterNext(event) {
      this.runIfEnter(event, this.next);
    },
    runIfEnterJumpPrev: function runIfEnterJumpPrev(event) {
      this.runIfEnter(event, this.jumpPrev);
    },
    runIfEnterJumpNext: function runIfEnterJumpNext(event) {
      this.runIfEnter(event, this.jumpNext);
    },
    handleGoTO: function handleGoTO(event) {
      if (event.keyCode === KEYCODE.ENTER || event.type === "click") {
        this.handleChange(this.stateCurrentInputValue);
      }
    }
  },
  render: function render100() {
    var _classNames;
    var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, disabled = _this$$props2.disabled;
    var _a = splitAttrs(this.$attrs).extraAttrs, className = _a.class, restAttrs = __rest$p(_a, ["class"]);
    if (this.hideOnSinglePage === true && this.total <= this.statePageSize) {
      return null;
    }
    var itemRender = this.itemRender || defaultItemRender;
    var props2 = this.$props;
    var locale2 = this.locale;
    var allPages = calculatePage(void 0, this.$data, this.$props);
    var pagerList = [];
    var jumpPrev2 = null;
    var jumpNext2 = null;
    var firstPager = null;
    var lastPager = null;
    var gotoButton = null;
    var goButton = this.showQuickJumper && this.showQuickJumper.goButton;
    var pageBufferSize = this.showLessItems ? 1 : 2;
    var stateCurrent2 = this.stateCurrent, statePageSize = this.statePageSize;
    var prevPage = stateCurrent2 - 1 > 0 ? stateCurrent2 - 1 : 0;
    var nextPage = stateCurrent2 + 1 < allPages ? stateCurrent2 + 1 : allPages;
    if (this.simple) {
      if (goButton) {
        if (typeof goButton === "boolean") {
          gotoButton = createVNode("button", {
            "type": "button",
            "onClick": this.handleGoTO,
            "onKeyup": this.handleGoTO
          }, [locale2.jump_to_confirm]);
        } else {
          gotoButton = createVNode("span", {
            "onClick": this.handleGoTO,
            "onKeyup": this.handleGoTO
          }, [goButton]);
        }
        gotoButton = createVNode("li", {
          "title": this.showTitle ? "".concat(locale2.jump_to).concat(this.stateCurrent, "/").concat(allPages) : null,
          "class": "".concat(prefixCls2, "-simple-pager")
        }, [gotoButton]);
      }
      var hasPrev2 = this.hasPrev();
      var hasNext2 = this.hasNext();
      return createVNode("ul", _objectSpread2({
        "class": classNames("".concat(prefixCls2, " ").concat(prefixCls2, "-simple"), className)
      }, restAttrs), [createVNode("li", {
        "title": this.showTitle ? locale2.prev_page : null,
        "onClick": this.prev,
        "tabindex": hasPrev2 ? 0 : null,
        "onKeypress": this.runIfEnterPrev,
        "class": "".concat(hasPrev2 ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-prev"),
        "aria-disabled": !this.hasPrev()
      }, [itemRender({
        page: prevPage,
        type: "prev",
        originalElement: this.getItemIcon("prevIcon")
      })]), createVNode("li", {
        "title": this.showTitle ? "".concat(stateCurrent2, "/").concat(allPages) : null,
        "class": "".concat(prefixCls2, "-simple-pager")
      }, [withDirectives(createVNode("input", {
        "type": "text",
        "value": this.stateCurrentInputValue,
        "onKeydown": this.handleKeyDown,
        "onKeyup": this.handleKeyUp,
        "onInput": this.handleKeyUp,
        "onChange": this.handleKeyUp,
        "size": "3"
      }, null), [[antInput$1]]), createVNode("span", {
        "class": "".concat(prefixCls2, "-slash")
      }, [createTextVNode("\uFF0F")]), allPages]), createVNode("li", {
        "title": this.showTitle ? locale2.next_page : null,
        "onClick": this.next,
        "tabindex": this.hasNext ? 0 : null,
        "onKeypress": this.runIfEnterNext,
        "class": "".concat(hasNext2 ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-next"),
        "aria-disabled": !this.hasNext()
      }, [itemRender({
        page: nextPage,
        type: "next",
        originalElement: this.getItemIcon("nextIcon")
      })]), gotoButton]);
    }
    if (allPages <= 5 + pageBufferSize * 2) {
      var pagerProps = {
        locale: locale2,
        rootPrefixCls: prefixCls2,
        showTitle: props2.showTitle,
        itemRender,
        onClick: this.handleChange,
        onKeypress: this.runIfEnter
      };
      if (!allPages) {
        pagerList.push(createVNode(Pager, _objectSpread2(_objectSpread2({}, pagerProps), {}, {
          "key": "noPager",
          "page": allPages,
          "class": "".concat(prefixCls2, "-disabled")
        }), null));
      }
      for (var i = 1; i <= allPages; i++) {
        var active = stateCurrent2 === i;
        pagerList.push(createVNode(Pager, _objectSpread2(_objectSpread2({}, pagerProps), {}, {
          "key": i,
          "page": i,
          "active": active
        }), null));
      }
    } else {
      var prevItemTitle = this.showLessItems ? locale2.prev_3 : locale2.prev_5;
      var nextItemTitle = this.showLessItems ? locale2.next_3 : locale2.next_5;
      if (this.showPrevNextJumpers) {
        var jumpPrevClassString = "".concat(prefixCls2, "-jump-prev");
        if (props2.jumpPrevIcon) {
          jumpPrevClassString += " ".concat(prefixCls2, "-jump-prev-custom-icon");
        }
        jumpPrev2 = createVNode("li", {
          "title": this.showTitle ? prevItemTitle : null,
          "key": "prev",
          "onClick": this.jumpPrev,
          "tabindex": "0",
          "onKeypress": this.runIfEnterJumpPrev,
          "class": jumpPrevClassString
        }, [itemRender({
          page: this.getJumpPrevPage(),
          type: "jump-prev",
          originalElement: this.getItemIcon("jumpPrevIcon")
        })]);
        var jumpNextClassString = "".concat(prefixCls2, "-jump-next");
        if (props2.jumpNextIcon) {
          jumpNextClassString += " ".concat(prefixCls2, "-jump-next-custom-icon");
        }
        jumpNext2 = createVNode("li", {
          "title": this.showTitle ? nextItemTitle : null,
          "key": "next",
          "tabindex": "0",
          "onClick": this.jumpNext,
          "onKeypress": this.runIfEnterJumpNext,
          "class": jumpNextClassString
        }, [itemRender({
          page: this.getJumpNextPage(),
          type: "jump-next",
          originalElement: this.getItemIcon("jumpNextIcon")
        })]);
      }
      lastPager = createVNode(Pager, {
        "locale": locale2,
        "last": true,
        "rootPrefixCls": prefixCls2,
        "onClick": this.handleChange,
        "onKeypress": this.runIfEnter,
        "key": allPages,
        "page": allPages,
        "active": false,
        "showTitle": this.showTitle,
        "itemRender": itemRender
      }, null);
      firstPager = createVNode(Pager, {
        "locale": locale2,
        "rootPrefixCls": prefixCls2,
        "onClick": this.handleChange,
        "onKeypress": this.runIfEnter,
        "key": 1,
        "page": 1,
        "active": false,
        "showTitle": this.showTitle,
        "itemRender": itemRender
      }, null);
      var left = Math.max(1, stateCurrent2 - pageBufferSize);
      var right = Math.min(stateCurrent2 + pageBufferSize, allPages);
      if (stateCurrent2 - 1 <= pageBufferSize) {
        right = 1 + pageBufferSize * 2;
      }
      if (allPages - stateCurrent2 <= pageBufferSize) {
        left = allPages - pageBufferSize * 2;
      }
      for (var _i = left; _i <= right; _i++) {
        var _active = stateCurrent2 === _i;
        pagerList.push(createVNode(Pager, {
          "locale": locale2,
          "rootPrefixCls": prefixCls2,
          "onClick": this.handleChange,
          "onKeypress": this.runIfEnter,
          "key": _i,
          "page": _i,
          "active": _active,
          "showTitle": this.showTitle,
          "itemRender": itemRender
        }, null));
      }
      if (stateCurrent2 - 1 >= pageBufferSize * 2 && stateCurrent2 !== 1 + 2) {
        pagerList[0] = createVNode(Pager, {
          "locale": locale2,
          "rootPrefixCls": prefixCls2,
          "onClick": this.handleChange,
          "onKeypress": this.runIfEnter,
          "key": left,
          "page": left,
          "class": "".concat(prefixCls2, "-item-after-jump-prev"),
          "active": false,
          "showTitle": this.showTitle,
          "itemRender": itemRender
        }, null);
        pagerList.unshift(jumpPrev2);
      }
      if (allPages - stateCurrent2 >= pageBufferSize * 2 && stateCurrent2 !== allPages - 2) {
        pagerList[pagerList.length - 1] = createVNode(Pager, {
          "locale": locale2,
          "rootPrefixCls": prefixCls2,
          "onClick": this.handleChange,
          "onKeypress": this.runIfEnter,
          "key": right,
          "page": right,
          "class": "".concat(prefixCls2, "-item-before-jump-next"),
          "active": false,
          "showTitle": this.showTitle,
          "itemRender": itemRender
        }, null);
        pagerList.push(jumpNext2);
      }
      if (left !== 1) {
        pagerList.unshift(firstPager);
      }
      if (right !== allPages) {
        pagerList.push(lastPager);
      }
    }
    var totalText = null;
    if (this.showTotal) {
      totalText = createVNode("li", {
        "class": "".concat(prefixCls2, "-total-text")
      }, [this.showTotal(this.total, [this.total === 0 ? 0 : (stateCurrent2 - 1) * statePageSize + 1, stateCurrent2 * statePageSize > this.total ? this.total : stateCurrent2 * statePageSize])]);
    }
    var prevDisabled = !this.hasPrev() || !allPages;
    var nextDisabled = !this.hasNext() || !allPages;
    var buildOptionText = this.buildOptionText || this.$slots.buildOptionText;
    return createVNode("ul", _objectSpread2(_objectSpread2({
      "unselectable": "unselectable",
      "ref": "paginationNode"
    }, restAttrs), {}, {
      "class": classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2), true), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames), className)
    }), [totalText, createVNode("li", {
      "title": this.showTitle ? locale2.prev_page : null,
      "onClick": this.prev,
      "tabindex": prevDisabled ? null : 0,
      "onKeypress": this.runIfEnterPrev,
      "class": "".concat(!prevDisabled ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-prev"),
      "aria-disabled": prevDisabled
    }, [itemRender({
      page: prevPage,
      type: "prev",
      originalElement: this.getItemIcon("prevIcon")
    })]), pagerList, createVNode("li", {
      "title": this.showTitle ? locale2.next_page : null,
      "onClick": this.next,
      "tabindex": nextDisabled ? null : 0,
      "onKeypress": this.runIfEnterNext,
      "class": "".concat(!nextDisabled ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-next"),
      "aria-disabled": nextDisabled
    }, [itemRender({
      page: nextPage,
      type: "next",
      originalElement: this.getItemIcon("nextIcon")
    })]), createVNode(Options, {
      "disabled": disabled,
      "locale": locale2,
      "rootPrefixCls": prefixCls2,
      "selectComponentClass": this.selectComponentClass,
      "selectPrefixCls": this.selectPrefixCls,
      "changeSize": this.showSizeChanger ? this.changePageSize : null,
      "current": stateCurrent2,
      "pageSize": statePageSize,
      "pageSizeOptions": this.pageSizeOptions,
      "buildOptionText": buildOptionText || null,
      "quickGo": this.shouldDisplayQuickJumper() ? this.handleChange : null,
      "goButton": goButton
    }, null)]);
  }
});
var __rest$o = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var paginationProps$1 = function paginationProps() {
  return {
    total: PropsTypes.number,
    defaultCurrent: PropsTypes.number,
    disabled: PropsTypes.looseBool,
    current: PropsTypes.number,
    defaultPageSize: PropsTypes.number,
    pageSize: PropsTypes.number,
    hideOnSinglePage: PropsTypes.looseBool,
    showSizeChanger: PropsTypes.looseBool,
    pageSizeOptions: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string])),
    buildOptionText: PropsTypes.func,
    showSizeChange: PropsTypes.func,
    showQuickJumper: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    showTotal: PropsTypes.any,
    size: PropsTypes.string,
    simple: PropsTypes.looseBool,
    locale: PropsTypes.object,
    prefixCls: PropsTypes.string,
    selectPrefixCls: PropsTypes.string,
    itemRender: PropsTypes.func,
    role: PropsTypes.string,
    showLessItems: PropsTypes.looseBool,
    onChange: PropsTypes.func,
    onShowSizeChange: PropsTypes.func,
    "onUpdate:current": PropsTypes.func,
    "onUpdate:pageSize": PropsTypes.func
  };
};
var paginationConfig = function paginationConfig2() {
  return _extends(_extends({}, paginationProps$1()), {
    position: PropsTypes.oneOf(tuple("top", "bottom", "both"))
  });
};
var Pagination$1 = defineComponent({
  name: "APagination",
  inheritAttrs: false,
  props: _extends({}, paginationProps$1()),
  emits: ["change", "showSizeChange", "update:current", "update:pageSize"],
  setup: function setup99() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    getIconsProps: function getIconsProps(prefixCls2) {
      var prevIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode(LeftOutlined, null, null)]);
      var nextIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode(RightOutlined, null, null)]);
      var jumpPrevIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-item-container")
      }, [createVNode(DoubleLeftOutlined, {
        "class": "".concat(prefixCls2, "-item-link-icon")
      }, null), createVNode("span", {
        "class": "".concat(prefixCls2, "-item-ellipsis")
      }, [createTextVNode("\u2022\u2022\u2022")])])]);
      var jumpNextIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-item-container")
      }, [createVNode(DoubleRightOutlined, {
        "class": "".concat(prefixCls2, "-item-link-icon")
      }, null), createVNode("span", {
        "class": "".concat(prefixCls2, "-item-ellipsis")
      }, [createTextVNode("\u2022\u2022\u2022")])])]);
      return {
        prevIcon,
        nextIcon,
        jumpPrevIcon,
        jumpNextIcon
      };
    },
    renderPagination: function renderPagination(contextLocale) {
      var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, customizeSelectPrefixCls = _a.selectPrefixCls, buildOptionText = _a.buildOptionText, size = _a.size, customLocale = _a.locale, restProps = __rest$o(_a, ["prefixCls", "selectPrefixCls", "buildOptionText", "size", "locale"]);
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("pagination", customizePrefixCls);
      var selectPrefixCls = getPrefixCls2("select", customizeSelectPrefixCls);
      var isSmall = size === "small";
      var paginationProps3 = _extends(_extends(_extends(_extends(_extends({
        prefixCls: prefixCls2,
        selectPrefixCls
      }, restProps), this.getIconsProps(prefixCls2)), {
        selectComponentClass: isSmall ? MiniSelect : VcSelect,
        locale: _extends(_extends({}, contextLocale), customLocale),
        buildOptionText: buildOptionText || this.$slots.buildOptionText
      }), this.$attrs), {
        class: classNames({
          mini: isSmall
        }, this.$attrs.class),
        itemRender: this.itemRender || this.$slots.itemRender
      });
      return createVNode(VcPagination, paginationProps3, null);
    }
  },
  render: function render101() {
    return createVNode(LocaleReceiver, {
      "componentName": "Pagination",
      "defaultLocale": enUS$2,
      "children": this.renderPagination
    }, null);
  }
});
var Pagination = withInstall(Pagination$1);
var listItemMetaProps = {
  avatar: PropsTypes.any,
  description: PropsTypes.any,
  prefixCls: PropsTypes.string,
  title: PropsTypes.any
};
var ItemMeta = defineComponent({
  name: "AListItemMeta",
  props: listItemMetaProps,
  displayName: "AListItemMeta",
  __ANT_LIST_ITEM_META: true,
  slots: ["avatar", "description", "title"],
  setup: function setup100(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("list", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a, _b, _c, _d, _e, _f;
      var classString = "".concat(prefixCls2.value, "-item-meta");
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var description2 = (_c = props2.description) !== null && _c !== void 0 ? _c : (_d = slots.description) === null || _d === void 0 ? void 0 : _d.call(slots);
      var avatar = (_e = props2.avatar) !== null && _e !== void 0 ? _e : (_f = slots.avatar) === null || _f === void 0 ? void 0 : _f.call(slots);
      var content = createVNode("div", {
        "class": "".concat(prefixCls2.value, "-item-meta-content")
      }, [title2 && createVNode("h4", {
        "class": "".concat(prefixCls2.value, "-item-meta-title")
      }, [title2]), description2 && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-item-meta-description")
      }, [description2])]);
      return createVNode("div", {
        "class": classString
      }, [avatar && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-item-meta-avatar")
      }, [avatar]), (title2 || description2) && content]);
    };
  }
});
var ListContextKey = Symbol("ListContextKey");
var __rest$n = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var ListItemProps = {
  prefixCls: PropsTypes.string,
  extra: PropsTypes.any,
  actions: PropsTypes.array,
  grid: PropsTypes.any,
  colStyle: PropsTypes.style
};
var Item2 = defineComponent({
  name: "AListItem",
  inheritAttrs: false,
  Meta: ItemMeta,
  props: ListItemProps,
  slots: ["actions", "extra"],
  setup: function setup101(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _inject = inject(ListContextKey, {
      grid: ref(),
      itemLayout: ref()
    }), itemLayout = _inject.itemLayout, grid = _inject.grid;
    var _useConfigInject = useConfigInject("list", props2), prefixCls2 = _useConfigInject.prefixCls;
    var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular2() {
      var _a;
      var children = ((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || [];
      var result;
      children.forEach(function(element) {
        if (isStringElement(element) && !isEmptyElement(element)) {
          result = true;
        }
      });
      return result && children.length > 1;
    };
    var isFlexMode = function isFlexMode2() {
      var _a, _b;
      var extra = (_a = props2.extra) !== null && _a !== void 0 ? _a : (_b = slots.extra) === null || _b === void 0 ? void 0 : _b.call(slots);
      if (itemLayout.value === "vertical") {
        return !!extra;
      }
      return !isItemContainsTextNodeAndNotSingular();
    };
    return function() {
      var _a, _b, _c, _d, _e;
      var className = attrs.class, restAttrs = __rest$n(attrs, ["class"]);
      var pre = prefixCls2.value;
      var extra = (_a = props2.extra) !== null && _a !== void 0 ? _a : (_b = slots.extra) === null || _b === void 0 ? void 0 : _b.call(slots);
      var children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);
      var actions = (_d = props2.actions) !== null && _d !== void 0 ? _d : flattenChildren((_e = slots.actions) === null || _e === void 0 ? void 0 : _e.call(slots));
      actions = actions && !Array.isArray(actions) ? [actions] : actions;
      var actionsContent = actions && actions.length > 0 && createVNode("ul", {
        "class": "".concat(pre, "-item-action"),
        "key": "actions"
      }, [actions.map(function(action, i) {
        return createVNode("li", {
          "key": "".concat(pre, "-item-action-").concat(i)
        }, [action, i !== actions.length - 1 && createVNode("em", {
          "class": "".concat(pre, "-item-action-split")
        }, null)]);
      })]);
      var Element3 = grid.value ? "div" : "li";
      var itemChildren = createVNode(Element3, _objectSpread2(_objectSpread2({}, restAttrs), {}, {
        "class": classNames("".concat(pre, "-item"), _defineProperty({}, "".concat(pre, "-item-no-flex"), !isFlexMode()), className)
      }), {
        default: function _default8() {
          return [itemLayout.value === "vertical" && extra ? [createVNode("div", {
            "class": "".concat(pre, "-item-main"),
            "key": "content"
          }, [children, actionsContent]), createVNode("div", {
            "class": "".concat(pre, "-item-extra"),
            "key": "extra"
          }, [extra])] : [children, actionsContent, cloneElement(extra, {
            key: "extra"
          })]];
        }
      });
      return grid.value ? createVNode(Col$1, {
        "flex": 1,
        "style": props2.colStyle
      }, {
        default: function _default8() {
          return [itemChildren];
        }
      }) : itemChildren;
    };
  }
});
var ListGridType = {
  gutter: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.arrayOf(Number)]),
  column: PropsTypes.number,
  xs: PropsTypes.number,
  sm: PropsTypes.number,
  md: PropsTypes.number,
  lg: PropsTypes.number,
  xl: PropsTypes.number,
  xxl: PropsTypes.number
};
var ListSize = tuple("small", "default", "large");
var listProps = {
  bordered: PropsTypes.looseBool,
  dataSource: PropsTypes.array,
  extra: PropsTypes.any,
  grid: PropsTypes.shape(ListGridType).loose,
  itemLayout: PropsTypes.oneOf(tuple("horizontal", "vertical")),
  loading: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
  loadMore: PropsTypes.any,
  pagination: withUndefined(PropsTypes.oneOfType([PropsTypes.shape(paginationConfig()).loose, PropsTypes.looseBool])),
  prefixCls: PropsTypes.string,
  rowKey: PropsTypes.any,
  renderItem: PropsTypes.any,
  size: PropsTypes.oneOf(ListSize),
  split: PropsTypes.looseBool,
  header: PropsTypes.any,
  footer: PropsTypes.any,
  locale: {
    type: Object
  }
};
var List$1 = defineComponent({
  name: "AList",
  Item: Item2,
  props: initDefaultProps$1(listProps, {
    dataSource: [],
    bordered: false,
    split: true,
    loading: false,
    pagination: false
  }),
  slots: ["extra", "loadMore", "renderItem", "header", "footer"],
  setup: function setup102(props2, _ref) {
    var slots = _ref.slots;
    var _a, _b;
    provide(ListContextKey, {
      grid: toRef(props2, "grid"),
      itemLayout: toRef(props2, "itemLayout")
    });
    var defaultPaginationProps = {
      current: 1,
      total: 0
    };
    var _useConfigInject = useConfigInject("list", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, renderEmpty2 = _useConfigInject.renderEmpty;
    var paginationObj = computed(function() {
      return props2.pagination && _typeof(props2.pagination) === "object" ? props2.pagination : {};
    });
    var paginationCurrent = ref((_a = paginationObj.value.defaultCurrent) !== null && _a !== void 0 ? _a : 1);
    var paginationSize = ref((_b = paginationObj.value.defaultPageSize) !== null && _b !== void 0 ? _b : 10);
    watch(paginationObj, function() {
      if ("current" in paginationObj.value) {
        paginationCurrent.value = paginationObj.value.current;
      }
      if ("pageSize" in paginationObj.value) {
        paginationSize.value = paginationObj.value.pageSize;
      }
    });
    var triggerPaginationEvent = function triggerPaginationEvent2(eventName) {
      return function(page, pageSize2) {
        paginationCurrent.value = page;
        paginationSize.value = pageSize2;
        if (paginationObj.value[eventName]) {
          paginationObj.value[eventName](page, pageSize2);
        }
      };
    };
    var onPaginationChange = triggerPaginationEvent("onChange");
    var onPaginationShowSizeChange = triggerPaginationEvent("onShowSizeChange");
    var renderEmptyFunc = function renderEmptyFunc2(renderEmptyHandler) {
      var _a2;
      return createVNode("div", {
        "class": "".concat(prefixCls2.value, "-empty-text")
      }, [((_a2 = props2.locale) === null || _a2 === void 0 ? void 0 : _a2.emptyText) || renderEmptyHandler("List")]);
    };
    var loadingProp = computed(function() {
      if (typeof props2.loading === "boolean") {
        return {
          spinning: props2.loading
        };
      } else {
        return props2.loading;
      }
    });
    var isLoading = computed(function() {
      return loadingProp.value && loadingProp.value.spinning;
    });
    var sizeCls = computed(function() {
      var size = "";
      switch (props2.size) {
        case "large":
          size = "lg";
          break;
        case "small":
          size = "sm";
          break;
      }
      return size;
    });
    var classObj = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2.value), true), _defineProperty(_ref2, "".concat(prefixCls2.value, "-vertical"), props2.itemLayout === "vertical"), _defineProperty(_ref2, "".concat(prefixCls2.value, "-").concat(sizeCls.value), sizeCls.value), _defineProperty(_ref2, "".concat(prefixCls2.value, "-split"), props2.split), _defineProperty(_ref2, "".concat(prefixCls2.value, "-bordered"), props2.bordered), _defineProperty(_ref2, "".concat(prefixCls2.value, "-loading"), isLoading.value), _defineProperty(_ref2, "".concat(prefixCls2.value, "-grid"), !!props2.grid), _defineProperty(_ref2, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _ref2;
    });
    var paginationProps3 = computed(function() {
      var pp = _extends(_extends(_extends({}, defaultPaginationProps), {
        total: props2.dataSource.length,
        current: paginationCurrent.value,
        pageSize: paginationSize.value
      }), props2.pagination || {});
      var largestPage = Math.ceil(pp.total / pp.pageSize);
      if (pp.current > largestPage) {
        pp.current = largestPage;
      }
      return pp;
    });
    var splitDataSource = computed(function() {
      var dd = _toConsumableArray(props2.dataSource);
      if (props2.pagination) {
        if (props2.dataSource.length > (paginationProps3.value.current - 1) * paginationProps3.value.pageSize) {
          dd = _toConsumableArray(props2.dataSource).splice((paginationProps3.value.current - 1) * paginationProps3.value.pageSize, paginationProps3.value.pageSize);
        }
      }
      return dd;
    });
    var screens2 = useBreakpoint();
    var currentBreakpoint = computed(function() {
      for (var i = 0; i < responsiveArray.length; i += 1) {
        var breakpoint = responsiveArray[i];
        if (screens2.value[breakpoint]) {
          return breakpoint;
        }
      }
      return void 0;
    });
    var colStyle = computed(function() {
      if (!props2.grid) {
        return void 0;
      }
      var columnCount = currentBreakpoint.value && props2.grid[currentBreakpoint.value] ? props2.grid[currentBreakpoint.value] : props2.grid.column;
      if (columnCount) {
        return {
          width: "".concat(100 / columnCount, "%"),
          maxWidth: "".concat(100 / columnCount, "%")
        };
      }
      return void 0;
    });
    var renderInnerItem = function renderInnerItem2(keys, item, index2) {
      var _a2;
      var renderItem = (_a2 = props2.renderItem) !== null && _a2 !== void 0 ? _a2 : slots.renderItem;
      if (!renderItem)
        return null;
      var key2;
      if (typeof props2.rowKey === "function") {
        key2 = props2.rowKey(item);
      } else if (typeof props2.rowKey === "string") {
        key2 = item[props2.rowKey];
      } else {
        key2 = item.key;
      }
      if (!key2) {
        key2 = "list-item-".concat(index2);
      }
      keys[index2] = key2;
      return renderItem({
        item,
        index: index2
      });
    };
    return function() {
      var _a2, _b2, _c, _d, _e, _f, _g;
      var loadMore = (_a2 = props2.loadMore) !== null && _a2 !== void 0 ? _a2 : (_b2 = slots.loadMore) === null || _b2 === void 0 ? void 0 : _b2.call(slots);
      var footer = (_c = props2.footer) !== null && _c !== void 0 ? _c : (_d = slots.footer) === null || _d === void 0 ? void 0 : _d.call(slots);
      var header = (_e = props2.header) !== null && _e !== void 0 ? _e : (_f = slots.header) === null || _f === void 0 ? void 0 : _f.call(slots);
      var children = flattenChildren((_g = slots.default) === null || _g === void 0 ? void 0 : _g.call(slots));
      var keys = [];
      var isSomethingAfterLastItem = !!(loadMore || props2.pagination || footer);
      var classString = _extends(_extends({}, classObj.value), _defineProperty({}, "".concat(prefixCls2.value, "-something-after-last-item"), isSomethingAfterLastItem));
      var paginationContent = props2.pagination ? createVNode("div", {
        "class": "".concat(prefixCls2.value, "-pagination")
      }, [createVNode(Pagination, _objectSpread2(_objectSpread2({}, paginationProps3.value), {}, {
        "onChange": onPaginationChange,
        "onShowSizeChange": onPaginationShowSizeChange
      }), null)]) : null;
      var childrenContent = isLoading.value && createVNode("div", {
        "style": {
          minHeight: "53px"
        }
      }, null);
      if (splitDataSource.value.length > 0) {
        var items = splitDataSource.value.map(function(item, index2) {
          return renderInnerItem(keys, item, index2);
        });
        var childrenList = items.map(function(child, index2) {
          return createVNode("div", {
            "key": keys[index2],
            "style": colStyle.value
          }, [child]);
        });
        childrenContent = props2.grid ? createVNode(Row$3, {
          "gutter": props2.grid.gutter
        }, {
          default: function _default8() {
            return [childrenList];
          }
        }) : createVNode("ul", {
          "class": "".concat(prefixCls2.value, "-items")
        }, [items]);
      } else if (!children.length && !isLoading.value) {
        childrenContent = renderEmptyFunc(renderEmpty2.value);
      }
      var paginationPosition = paginationProps3.value.position || "bottom";
      return createVNode("div", {
        "class": classString
      }, [(paginationPosition === "top" || paginationPosition === "both") && paginationContent, header && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-header")
      }, [header]), createVNode(Spin, loadingProp.value, {
        default: function _default8() {
          return [childrenContent, children];
        }
      }), footer && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-footer")
      }, [footer]), loadMore || (paginationPosition === "bottom" || paginationPosition === "both") && paginationContent]);
    };
  }
});
List$1.install = function(app) {
  app.component(List$1.name, List$1);
  app.component(List$1.Item.name, List$1.Item);
  app.component(List$1.Item.Meta.name, List$1.Item.Meta);
  return app;
};
var List$2 = List$1;
var Notice = {
  mixins: [BaseMixin],
  props: {
    duration: PropsTypes.number.def(1.5),
    closable: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    update: PropsTypes.looseBool,
    closeIcon: PropsTypes.any,
    onClose: PropsTypes.func
  },
  watch: {
    duration: function duration() {
      this.restartCloseTimer();
    }
  },
  mounted: function mounted28() {
    this.startCloseTimer();
  },
  updated: function updated16() {
    if (this.update) {
      this.restartCloseTimer();
    }
  },
  beforeUnmount: function beforeUnmount20() {
    this.clearCloseTimer();
    this.willDestroy = true;
  },
  methods: {
    close: function close5(e) {
      if (e) {
        e.stopPropagation();
      }
      this.clearCloseTimer();
      this.__emit("close");
    },
    startCloseTimer: function startCloseTimer() {
      var _this = this;
      this.clearCloseTimer();
      if (!this.willDestroy && this.duration) {
        this.closeTimer = setTimeout(function() {
          _this.close();
        }, this.duration * 1e3);
      }
    },
    clearCloseTimer: function clearCloseTimer() {
      if (this.closeTimer) {
        clearTimeout(this.closeTimer);
        this.closeTimer = null;
      }
    },
    restartCloseTimer: function restartCloseTimer() {
      this.clearCloseTimer();
      this.startCloseTimer();
    }
  },
  render: function render102() {
    var _className;
    var prefixCls2 = this.prefixCls, closable = this.closable, clearCloseTimer2 = this.clearCloseTimer, startCloseTimer2 = this.startCloseTimer, close7 = this.close, $attrs = this.$attrs;
    var componentClass = "".concat(prefixCls2, "-notice");
    var className = (_className = {}, _defineProperty(_className, "".concat(componentClass), 1), _defineProperty(_className, "".concat(componentClass, "-closable"), closable), _className);
    var closeIcon = getComponent(this, "closeIcon");
    return createVNode("div", {
      "class": className,
      "style": $attrs.style || {
        right: "50%"
      },
      "onMouseenter": clearCloseTimer2,
      "onMouseleave": startCloseTimer2
    }, [createVNode("div", {
      "class": "".concat(componentClass, "-content")
    }, [getSlot(this)]), closable ? createVNode("a", {
      "tabindex": "0",
      "onClick": close7,
      "class": "".concat(componentClass, "-close")
    }, [closeIcon || createVNode("span", {
      "class": "".concat(componentClass, "-close-x")
    }, null)]) : null]);
  }
};
var __rest$m = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$c() {
}
var seed = 0;
var now$1 = Date.now();
function getUuid() {
  return "rcNotification_".concat(now$1, "_").concat(seed++);
}
var Notification = defineComponent({
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string.def("rc-notification"),
    transitionName: PropsTypes.string,
    animation: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]).def("fade"),
    maxCount: PropsTypes.number,
    closeIcon: PropsTypes.any
  },
  data: function data51() {
    return {
      notices: []
    };
  },
  methods: {
    getTransitionName: function getTransitionName4() {
      var props2 = this.$props;
      var transitionName2 = props2.transitionName;
      if (!transitionName2 && props2.animation) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(props2.animation);
      }
      return transitionName2;
    },
    add: function add(notice2) {
      var key2 = notice2.key = notice2.key || getUuid();
      var maxCount2 = this.$props.maxCount;
      this.setState(function(previousState) {
        var notices = previousState.notices;
        var noticeIndex = notices.map(function(v) {
          return v.key;
        }).indexOf(key2);
        var updatedNotices = notices.concat();
        if (noticeIndex !== -1) {
          updatedNotices.splice(noticeIndex, 1, notice2);
        } else {
          if (maxCount2 && notices.length >= maxCount2) {
            notice2.updateKey = updatedNotices[0].updateKey || updatedNotices[0].key;
            updatedNotices.shift();
          }
          updatedNotices.push(notice2);
        }
        return {
          notices: updatedNotices
        };
      });
    },
    remove: function remove(key2) {
      this.setState(function(previousState) {
        return {
          notices: previousState.notices.filter(function(notice2) {
            return notice2.key !== key2;
          })
        };
      });
    }
  },
  render: function render103() {
    var _this = this;
    var prefixCls2 = this.prefixCls, notices = this.notices, remove3 = this.remove, getTransitionName5 = this.getTransitionName, $attrs = this.$attrs;
    var transitionProps = getTransitionGroupProps(getTransitionName5());
    var noticeNodes = notices.map(function(notice2, index2) {
      var update = Boolean(index2 === notices.length - 1 && notice2.updateKey);
      var key2 = notice2.updateKey ? notice2.updateKey : notice2.key;
      var content = notice2.content, duration2 = notice2.duration, closable = notice2.closable, onClose = notice2.onClose, style3 = notice2.style, className2 = notice2.class;
      var close7 = createChainedFunction(remove3.bind(_this, notice2.key), onClose);
      var noticeProps = {
        prefixCls: prefixCls2,
        duration: duration2,
        closable,
        update,
        closeIcon: getComponent(_this, "closeIcon"),
        onClose: close7,
        onClick: notice2.onClick || noop$c,
        style: style3,
        class: className2,
        key: key2
      };
      return createVNode(Notice, noticeProps, {
        default: function _default8() {
          return [typeof content === "function" ? content() : content];
        }
      });
    });
    var className = _defineProperty({}, prefixCls2, 1);
    return createVNode("div", {
      "class": className,
      "style": $attrs.style || {
        top: "65px",
        left: "50%"
      }
    }, [createVNode(TransitionGroup, _objectSpread2({
      "tag": "span"
    }, transitionProps), {
      default: function _default8() {
        return [noticeNodes];
      }
    })]);
  }
});
Notification.newInstance = function newNotificationInstance(properties, callback) {
  var _a = properties || {}, getContainer5 = _a.getContainer, style3 = _a.style, className = _a.class, props2 = __rest$m(_a, ["getContainer", "style", "class"]);
  var div = document.createElement("div");
  if (getContainer5) {
    var root = getContainer5();
    root.appendChild(div);
  } else {
    document.body.appendChild(div);
  }
  var app = createApp({
    mounted: function mounted45() {
      var self = this;
      this.$nextTick(function() {
        callback({
          notice: function notice2(noticeProps) {
            self.$refs.notification.add(noticeProps);
          },
          removeNotice: function removeNotice(key2) {
            self.$refs.notification.remove(key2);
          },
          component: self,
          destroy: function destroy3() {
            app.unmount(div);
            if (div.parentNode) {
              div.parentNode.removeChild(div);
            }
          }
        });
      });
    },
    render: function render165() {
      var p = _extends(_extends({}, props2), {
        ref: "notification",
        style: style3,
        class: className
      });
      return createVNode(Notification, p, null);
    }
  });
  app.mount(div);
};
var Notification$1 = Notification;
var defaultDuration$1 = 3;
var defaultTop$1;
var messageInstance;
var key = 1;
var prefixCls = "ant-message";
var transitionName = "move-up";
var getContainer3 = function getContainer4() {
  return document.body;
};
var maxCount;
function getMessageInstance(callback) {
  if (messageInstance) {
    callback(messageInstance);
    return;
  }
  Notification$1.newInstance({
    prefixCls,
    transitionName,
    style: {
      top: defaultTop$1
    },
    getContainer: getContainer3,
    maxCount
  }, function(instance) {
    if (messageInstance) {
      callback(messageInstance);
      return;
    }
    messageInstance = instance;
    callback(instance);
  });
}
var iconMap = {
  info: InfoCircleFilled,
  success: CheckCircleFilled,
  error: CloseCircleFilled,
  warning: ExclamationCircleFilled,
  loading: LoadingOutlined
};
function notice$1(args) {
  var duration2 = args.duration !== void 0 ? args.duration : defaultDuration$1;
  var Icon = iconMap[args.type];
  var iconNode = Icon ? createVNode(Icon, null, null) : "";
  var target = args.key || key++;
  var closePromise = new Promise(function(resolve) {
    var callback = function callback2() {
      if (typeof args.onClose === "function") {
        args.onClose();
      }
      return resolve(true);
    };
    getMessageInstance(function(instance) {
      instance.notice({
        key: target,
        duration: duration2,
        style: args.style || {},
        class: args.class,
        content: function content() {
          return createVNode("div", {
            "class": "".concat(prefixCls, "-custom-content").concat(args.type ? " ".concat(prefixCls, "-").concat(args.type) : "")
          }, [args.icon || iconNode, createVNode("span", null, [args.content])]);
        },
        onClose: callback
      });
    });
  });
  var result = function result2() {
    if (messageInstance) {
      messageInstance.removeNotice(target);
    }
  };
  result.then = function(filled, rejected) {
    return closePromise.then(filled, rejected);
  };
  result.promise = closePromise;
  return result;
}
function isArgsProps(content) {
  return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
}
var api$1 = {
  open: notice$1,
  config: function config(options2) {
    if (options2.top !== void 0) {
      defaultTop$1 = options2.top;
      messageInstance = null;
    }
    if (options2.duration !== void 0) {
      defaultDuration$1 = options2.duration;
    }
    if (options2.prefixCls !== void 0) {
      prefixCls = options2.prefixCls;
    }
    if (options2.getContainer !== void 0) {
      getContainer3 = options2.getContainer;
    }
    if (options2.transitionName !== void 0) {
      transitionName = options2.transitionName;
      messageInstance = null;
    }
    if (options2.maxCount !== void 0) {
      maxCount = options2.maxCount;
      messageInstance = null;
    }
  },
  destroy: function destroy() {
    if (messageInstance) {
      messageInstance.destroy();
      messageInstance = null;
    }
  }
};
["success", "info", "warning", "error", "loading"].forEach(function(type2) {
  api$1[type2] = function(content, duration2, onClose) {
    if (isArgsProps(content)) {
      return api$1.open(_extends(_extends({}, content), {
        type: type2
      }));
    }
    if (typeof duration2 === "function") {
      onClose = duration2;
      duration2 = void 0;
    }
    return api$1.open({
      content,
      duration: duration2,
      type: type2,
      onClose
    });
  };
});
api$1.warn = api$1.warning;
var message = api$1;
function getBeforeSelectionText(input) {
  var selectionStart = input.selectionStart;
  return input.value.slice(0, selectionStart);
}
function lower(char) {
  return (char || "").toLowerCase();
}
function getLastMeasureIndex(text) {
  var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var prefixList = Array.isArray(prefix) ? prefix : [prefix];
  return prefixList.reduce(function(lastMatch, prefixStr) {
    var lastIndex = text.lastIndexOf(prefixStr);
    if (lastIndex > lastMatch.location) {
      return {
        location: lastIndex,
        prefix: prefixStr
      };
    }
    return lastMatch;
  }, {
    location: -1,
    prefix: ""
  });
}
function reduceText(text, targetText, split) {
  var firstChar = text[0];
  if (!firstChar || firstChar === split) {
    return text;
  }
  var restText = text;
  var targetTextLen = targetText.length;
  for (var i = 0; i < targetTextLen; i += 1) {
    if (lower(restText[i]) !== lower(targetText[i])) {
      restText = restText.slice(i);
      break;
    } else if (i === targetTextLen - 1) {
      restText = restText.slice(targetTextLen);
    }
  }
  return restText;
}
function replaceWithMeasure(text, measureConfig) {
  var measureLocation = measureConfig.measureLocation, prefix = measureConfig.prefix, targetText = measureConfig.targetText, selectionStart = measureConfig.selectionStart, split = measureConfig.split;
  var beforeMeasureText = text.slice(0, measureLocation);
  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {
    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);
  }
  if (beforeMeasureText) {
    beforeMeasureText = "".concat(beforeMeasureText).concat(split);
  }
  var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);
  if (restText.slice(0, split.length) === split) {
    restText = restText.slice(split.length);
  }
  var connectedStartText = "".concat(beforeMeasureText).concat(prefix).concat(targetText).concat(split);
  return {
    text: "".concat(connectedStartText).concat(restText),
    selectionLocation: connectedStartText.length
  };
}
function setInputSelection(input, location) {
  input.setSelectionRange(location, location);
  input.blur();
  input.focus();
}
function validateSearch() {
  var text = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var split = props2.split;
  return !split || text.indexOf(split) === -1;
}
function filterOption() {
  var input = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$value = _ref.value, value26 = _ref$value === void 0 ? "" : _ref$value;
  var lowerCase = input.toLowerCase();
  return value26.toLowerCase().indexOf(lowerCase) !== -1;
}
var OptionProps = {
  value: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  children: PropsTypes.any
};
var Option$1 = defineComponent({
  name: "Option",
  props: OptionProps,
  render: function render104() {
    return null;
  }
});
function noop$b() {
}
var DropdownMenu = {
  name: "DropdownMenu",
  props: {
    prefixCls: PropsTypes.string,
    options: PropsTypes.arrayOf(OptionProps)
  },
  setup: function setup103() {
    return {
      mentionsContext: inject("mentionsContext")
    };
  },
  render: function render105() {
    var _this$mentionsContext = this.mentionsContext, notFoundContent = _this$mentionsContext.notFoundContent, activeIndex = _this$mentionsContext.activeIndex, setActiveIndex2 = _this$mentionsContext.setActiveIndex, selectOption2 = _this$mentionsContext.selectOption, _this$mentionsContext2 = _this$mentionsContext.onFocus, onFocus6 = _this$mentionsContext2 === void 0 ? noop$b : _this$mentionsContext2, _this$mentionsContext3 = _this$mentionsContext.onBlur, onBlur7 = _this$mentionsContext3 === void 0 ? noop$b : _this$mentionsContext3;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, options2 = _this$$props.options;
    var activeOption = options2[activeIndex] || {};
    return createVNode(Menu, {
      "prefixCls": "".concat(prefixCls2, "-menu"),
      "activeKey": activeOption.value,
      "onSelect": function onSelect6(_ref) {
        var key2 = _ref.key;
        var option = options2.find(function(_ref2) {
          var value26 = _ref2.value;
          return value26 === key2;
        });
        selectOption2(option);
      },
      "onBlur": onBlur7,
      "onFocus": onFocus6
    }, {
      default: function _default8() {
        return [[].concat(_toConsumableArray(options2.map(function(option, index2) {
          var value26 = option.value, disabled = option.disabled, children = option.children;
          return createVNode(MenuItem, {
            "key": value26,
            "disabled": disabled,
            "onMouseenter": function onMouseenter2() {
              setActiveIndex2(index2);
            }
          }, {
            default: function _default9() {
              return [children];
            }
          });
        })), [!options2.length && createVNode(MenuItem, {
          "key": "notFoundContent",
          "disabled": true
        }, {
          default: function _default9() {
            return [notFoundContent];
          }
        })]).filter(Boolean)];
      }
    });
  }
};
var PlaceMent = tuple("top", "bottom");
var BUILT_IN_PLACEMENTS$1 = {
  bottomRight: {
    points: ["tl", "br"],
    offset: [0, 4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  },
  topRight: {
    points: ["bl", "tr"],
    offset: [0, -4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  }
};
var KeywordTrigger = {
  name: "KeywordTrigger",
  props: {
    loading: PropsTypes.looseBool,
    options: PropsTypes.arrayOf(OptionProps),
    prefixCls: PropsTypes.string,
    placement: PropsTypes.oneOf(PlaceMent),
    visible: PropsTypes.looseBool,
    transitionName: PropsTypes.string,
    getPopupContainer: PropsTypes.func
  },
  methods: {
    getDropdownPrefix: function getDropdownPrefix() {
      return "".concat(this.$props.prefixCls, "-dropdown");
    },
    getDropdownElement: function getDropdownElement() {
      var options2 = this.$props.options;
      return createVNode(DropdownMenu, {
        "prefixCls": this.getDropdownPrefix(),
        "options": options2
      }, null);
    }
  },
  render: function render106() {
    var _a;
    var _this$$props = this.$props, visible9 = _this$$props.visible, placement2 = _this$$props.placement, transitionName2 = _this$$props.transitionName, getPopupContainer = _this$$props.getPopupContainer;
    var $slots = this.$slots;
    var children = (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots);
    var popupElement = this.getDropdownElement();
    return createVNode(Trigger, {
      "prefixCls": this.getDropdownPrefix(),
      "popupVisible": visible9,
      "popup": popupElement,
      "popupPlacement": placement2 === "top" ? "topRight" : "bottomRight",
      "popupTransitionName": transitionName2,
      "builtinPlacements": BUILT_IN_PLACEMENTS$1,
      "getPopupContainer": getPopupContainer
    }, {
      default: function _default8() {
        return [children];
      }
    });
  }
};
var mentionsProps$1 = {
  autofocus: PropsTypes.looseBool,
  prefix: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array]),
  prefixCls: PropsTypes.string,
  value: PropsTypes.string,
  defaultValue: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  notFoundContent: PropsTypes.VNodeChild,
  split: PropsTypes.string,
  transitionName: PropsTypes.string,
  placement: PropsTypes.oneOf(PlaceMent),
  character: PropsTypes.any,
  characterRender: PropsTypes.func,
  filterOption: {
    type: [Boolean, Function]
  },
  validateSearch: PropsTypes.func,
  getPopupContainer: {
    type: Function
  }
};
var vcMentionsProps = _extends(_extends({}, mentionsProps$1), {
  children: PropsTypes.any
});
var defaultProps$1 = {
  prefix: "@",
  split: " ",
  validateSearch,
  filterOption
};
initDefaultProps$2(vcMentionsProps, defaultProps$1);
var __rest$l = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$a() {
}
var Mentions$2 = {
  name: "Mentions",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(vcMentionsProps, defaultProps$1),
  created: function created14() {
    this.mentionsContext = provide("mentionsContext", this);
  },
  data: function data52() {
    var _this$$props = this.$props, _this$$props$value = _this$$props.value, value26 = _this$$props$value === void 0 ? "" : _this$$props$value, _this$$props$defaultV = _this$$props.defaultValue, defaultValue = _this$$props$defaultV === void 0 ? "" : _this$$props$defaultV;
    warning_1(this.$props.children);
    return {
      _value: !hasProp(this, "value") ? defaultValue : value26,
      measuring: false,
      measureLocation: 0,
      measureText: null,
      measurePrefix: "",
      activeIndex: 0,
      isFocus: false
    };
  },
  watch: {
    value: function value25(val) {
      this.$data._value = val;
    }
  },
  updated: function updated17() {
    var _this = this;
    this.$nextTick(function() {
      var measuring = _this.$data.measuring;
      if (measuring) {
        _this.$refs.measure.scrollTop = _this.$refs.textarea.scrollTop;
      }
    });
  },
  methods: {
    triggerChange: function triggerChange3(value26) {
      var props2 = getOptionProps(this);
      if (!("value" in props2)) {
        this.setState({
          _value: value26
        });
      } else {
        this.$forceUpdate();
      }
      this.__emit("change", value26);
    },
    onChange: function onChange4(_ref) {
      var _ref$target = _ref.target, value26 = _ref$target.value, composing = _ref$target.composing, isComposing = _ref.isComposing;
      if (isComposing || composing)
        return;
      this.triggerChange(value26);
    },
    onKeyDown: function onKeyDown12(event) {
      var which = event.which;
      var _this$$data = this.$data, activeIndex = _this$$data.activeIndex, measuring = _this$$data.measuring;
      if (!measuring) {
        return;
      }
      if (which === KeyCode$2.UP || which === KeyCode$2.DOWN) {
        var optionLen = this.getOptions().length;
        var offset2 = which === KeyCode$2.UP ? -1 : 1;
        var newActiveIndex = (activeIndex + offset2 + optionLen) % optionLen;
        this.setState({
          activeIndex: newActiveIndex
        });
        event.preventDefault();
      } else if (which === KeyCode$2.ESC) {
        this.stopMeasure();
      } else if (which === KeyCode$2.ENTER) {
        event.preventDefault();
        var options2 = this.getOptions();
        if (!options2.length) {
          this.stopMeasure();
          return;
        }
        var option = options2[activeIndex];
        this.selectOption(option);
      }
    },
    onKeyUp: function onKeyUp2(event) {
      var key2 = event.key, which = event.which;
      var _this$$data2 = this.$data, prevMeasureText = _this$$data2.measureText, measuring = _this$$data2.measuring;
      var _this$$props2 = this.$props, _this$$props2$prefix = _this$$props2.prefix, prefix = _this$$props2$prefix === void 0 ? "" : _this$$props2$prefix, validateSearch2 = _this$$props2.validateSearch;
      var target = event.target;
      if (target.composing) {
        return;
      }
      var selectionStartText = getBeforeSelectionText(target);
      var _getLastMeasureIndex = getLastMeasureIndex(selectionStartText, prefix), measureIndex = _getLastMeasureIndex.location, measurePrefix = _getLastMeasureIndex.prefix;
      if ([KeyCode$2.ESC, KeyCode$2.UP, KeyCode$2.DOWN, KeyCode$2.ENTER].indexOf(which) !== -1) {
        return;
      }
      if (measureIndex !== -1) {
        var measureText = selectionStartText.slice(measureIndex + measurePrefix.length);
        var validateMeasure = validateSearch2(measureText, this.$props);
        var matchOption = !!this.getOptions(measureText).length;
        if (validateMeasure) {
          if (key2 === measurePrefix || measuring || measureText !== prevMeasureText && matchOption) {
            this.startMeasure(measureText, measurePrefix, measureIndex);
          }
        } else if (measuring) {
          this.stopMeasure();
        }
        if (validateMeasure) {
          this.__emit("search", measureText, measurePrefix);
        }
      } else if (measuring) {
        this.stopMeasure();
      }
    },
    onInputFocus: function onInputFocus(event) {
      this.onFocus(event);
    },
    onInputBlur: function onInputBlur(event) {
      this.onBlur(event);
    },
    onDropdownFocus: function onDropdownFocus() {
      this.onFocus();
    },
    onDropdownBlur: function onDropdownBlur() {
      this.onBlur();
    },
    onFocus: function onFocus5(event) {
      window.clearTimeout(this.focusId);
      var isFocus = this.$data.isFocus;
      if (!isFocus && event) {
        this.__emit("focus", event);
      }
      this.setState({
        isFocus: true
      });
    },
    onBlur: function onBlur6(event) {
      var _this2 = this;
      this.focusId = window.setTimeout(function() {
        _this2.setState({
          isFocus: false
        });
        _this2.stopMeasure();
        _this2.__emit("blur", event);
      }, 100);
    },
    selectOption: function selectOption(option) {
      var _this3 = this;
      var _this$$data3 = this.$data, value26 = _this$$data3._value, measureLocation = _this$$data3.measureLocation, measurePrefix = _this$$data3.measurePrefix;
      var split = this.$props.split;
      var _option$value = option.value, mentionValue = _option$value === void 0 ? "" : _option$value;
      var _replaceWithMeasure = replaceWithMeasure(value26, {
        measureLocation,
        targetText: mentionValue,
        prefix: measurePrefix,
        selectionStart: this.$refs.textarea.selectionStart,
        split
      }), text = _replaceWithMeasure.text, selectionLocation = _replaceWithMeasure.selectionLocation;
      this.triggerChange(text);
      this.stopMeasure(function() {
        setInputSelection(_this3.$refs.textarea, selectionLocation);
      });
      this.__emit("select", option, measurePrefix);
    },
    setActiveIndex: function setActiveIndex(activeIndex) {
      this.setState({
        activeIndex
      });
    },
    getOptions: function getOptions3(measureText) {
      var targetMeasureText = measureText || this.$data.measureText || "";
      var _this$$props3 = this.$props, filterOption2 = _this$$props3.filterOption, _this$$props3$childre = _this$$props3.children, children = _this$$props3$childre === void 0 ? [] : _this$$props3$childre;
      var list = (Array.isArray(children) ? children : [children]).map(function(item) {
        var _a, _b;
        return _extends(_extends({}, getOptionProps(item)), {
          children: (_b = (_a = item.children).default) === null || _b === void 0 ? void 0 : _b.call(_a)
        });
      }).filter(function(option) {
        if (filterOption2 === false) {
          return true;
        }
        return filterOption2(targetMeasureText, option);
      });
      return list;
    },
    startMeasure: function startMeasure(measureText, measurePrefix, measureLocation) {
      this.setState({
        measuring: true,
        measureText,
        measurePrefix,
        measureLocation,
        activeIndex: 0
      });
    },
    stopMeasure: function stopMeasure(callback) {
      this.setState({
        measuring: false,
        measureLocation: 0,
        measureText: null
      }, callback);
    },
    focus: function focus18() {
      this.$refs.textarea.focus();
    },
    blur: function blur15() {
      this.$refs.textarea.blur();
    }
  },
  render: function render107() {
    var _this$$data4 = this.$data, value26 = _this$$data4._value, measureLocation = _this$$data4.measureLocation, measurePrefix = _this$$data4.measurePrefix, measuring = _this$$data4.measuring;
    var _a = getOptionProps(this), prefixCls2 = _a.prefixCls, placement2 = _a.placement, transitionName2 = _a.transitionName;
    _a.notFoundContent;
    var getPopupContainer = _a.getPopupContainer, restProps = __rest$l(_a, ["prefixCls", "placement", "transitionName", "notFoundContent", "getPopupContainer"]);
    var _b = this.$attrs, className = _b.class, style3 = _b.style, otherAttrs = __rest$l(_b, ["class", "style"]);
    var inputProps2 = omit(restProps, ["value", "defaultValue", "prefix", "split", "children", "validateSearch", "filterOption"]);
    var options2 = measuring ? this.getOptions() : [];
    var textareaProps = _extends(_extends(_extends({}, inputProps2), otherAttrs), {
      onChange: noop$a,
      onSelect: noop$a,
      value: value26,
      onInput: this.onChange,
      onBlur: this.onInputBlur,
      onKeydown: this.onKeyDown,
      onKeyup: this.onKeyUp,
      onFocus: this.onInputFocus
    });
    return createVNode("div", {
      "class": classNames(prefixCls2, className),
      "style": style3
    }, [withDirectives(createVNode("textarea", _objectSpread2({
      "ref": "textarea"
    }, textareaProps), null), [[antInput$1]]), measuring && createVNode("div", {
      "ref": "measure",
      "class": "".concat(prefixCls2, "-measure")
    }, [value26.slice(0, measureLocation), createVNode(KeywordTrigger, {
      "prefixCls": prefixCls2,
      "transitionName": transitionName2,
      "placement": placement2,
      "options": options2,
      "visible": true,
      "getPopupContainer": getPopupContainer
    }, {
      default: function _default8() {
        return [createVNode("span", null, [measurePrefix])];
      }
    }), value26.slice(measureLocation + measurePrefix.length)])]);
  }
};
var Mentions$3 = defineComponent(Mentions$2);
Mentions$3.Option = Option$1;
var __rest$k = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Option3 = Mentions$3.Option;
function loadingFilterOption() {
  return true;
}
function getMentions() {
  var value26 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var config2 = arguments.length > 1 ? arguments[1] : void 0;
  var _ref = config2 || {}, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? "@" : _ref$prefix, _ref$split = _ref.split, split = _ref$split === void 0 ? " " : _ref$split;
  var prefixList = Array.isArray(prefix) ? prefix : [prefix];
  return value26.split(split).map(function() {
    var str = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var hitPrefix = null;
    prefixList.some(function(prefixStr) {
      var startStr = str.slice(0, prefixStr.length);
      if (startStr === prefixStr) {
        hitPrefix = prefixStr;
        return true;
      }
      return false;
    });
    if (hitPrefix !== null) {
      return {
        prefix: hitPrefix,
        value: str.slice(hitPrefix.length)
      };
    }
    return null;
  }).filter(function(entity) {
    return !!entity && !!entity.value;
  });
}
var mentionsProps = _extends(_extends({}, mentionsProps$1), {
  loading: PropsTypes.looseBool,
  onFocus: {
    type: Function
  },
  onBlur: {
    type: Function
  },
  onSelect: {
    type: Function
  },
  onChange: {
    type: Function
  }
});
var Mentions = defineComponent({
  name: "AMentions",
  mixins: [BaseMixin],
  inheritAttrs: false,
  Option: _extends(_extends({}, Option3), {
    name: "AMentionsOption"
  }),
  getMentions,
  props: mentionsProps,
  emits: ["update:value", "change", "focus", "blur", "select"],
  setup: function setup104() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data53() {
    return {
      focused: false
    };
  },
  mounted: function mounted29() {
    nextTick(function() {
    });
  },
  methods: {
    handleFocus: function handleFocus(e) {
      this.$emit("focus", e);
      this.setState({
        focused: true
      });
    },
    handleBlur: function handleBlur2(e) {
      this.$emit("blur", e);
      this.setState({
        focused: false
      });
    },
    handleSelect: function handleSelect() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit.apply(this, ["select"].concat(args));
      this.setState({
        focused: true
      });
    },
    handleChange: function handleChange16(val) {
      this.$emit("update:value", val);
      this.$emit("change", val);
    },
    getNotFoundContent: function getNotFoundContent(renderEmpty2) {
      var notFoundContent = getComponent(this, "notFoundContent");
      if (notFoundContent !== void 0) {
        return notFoundContent;
      }
      return renderEmpty2("Select");
    },
    getOptions: function getOptions4() {
      var loading = this.$props.loading;
      var children = getSlot(this);
      if (loading) {
        return createVNode(Option3, {
          "value": "ANTD_SEARCHING",
          "disabled": true
        }, {
          default: function _default8() {
            return [createVNode(Spin, {
              "size": "small"
            }, null)];
          }
        });
      }
      return children;
    },
    getFilterOption: function getFilterOption() {
      var _this$$props = this.$props, filterOption2 = _this$$props.filterOption, loading = _this$$props.loading;
      if (loading) {
        return loadingFilterOption;
      }
      return filterOption2;
    },
    focus: function focus19() {
      this.$refs.vcMentions.focus();
    },
    blur: function blur16() {
      this.$refs.vcMentions.blur();
    }
  },
  render: function render108() {
    var _classNames;
    var focused = this.$data.focused;
    var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, renderEmpty2 = _this$configProvider.renderEmpty;
    var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, disabled = _a.disabled, getPopupContainer = _a.getPopupContainer, restProps = __rest$k(_a, ["prefixCls", "disabled", "getPopupContainer"]);
    var _b = this.$attrs, className = _b.class, otherAttrs = __rest$k(_b, ["class"]);
    var prefixCls2 = getPrefixCls2("mentions", customizePrefixCls);
    var otherProps = omit(restProps, ["loading", "onUpdate:value"]);
    var mergedClassName = classNames(className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls2, "-focused"), focused), _classNames));
    var mentionsProps2 = _extends(_extends(_extends(_extends({
      prefixCls: prefixCls2,
      notFoundContent: this.getNotFoundContent(renderEmpty2)
    }, otherProps), {
      disabled,
      filterOption: this.getFilterOption(),
      getPopupContainer,
      children: this.getOptions(),
      class: mergedClassName,
      rows: 1
    }), otherAttrs), {
      onChange: this.handleChange,
      onSelect: this.handleSelect,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      ref: "vcMentions"
    });
    return createVNode(Mentions$3, mentionsProps2, null);
  }
});
Mentions.install = function(app) {
  app.component(Mentions.name, Mentions);
  app.component(Mentions.Option.name, Mentions.Option);
  return app;
};
var MentionsOption = Mentions.Option;
var Mentions$1 = Mentions;
var mousePosition = null;
var getClickPosition = function getClickPosition2(e) {
  mousePosition = {
    x: e.pageX,
    y: e.pageY
  };
  setTimeout(function() {
    return mousePosition = null;
  }, 100);
};
if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  addEventListenerWrap(document.documentElement, "click", getClickPosition, true);
}
function noop$9() {
}
var modalProps = {
  prefixCls: PropsTypes.string,
  visible: PropsTypes.looseBool,
  confirmLoading: PropsTypes.looseBool,
  title: PropsTypes.any,
  closable: PropsTypes.looseBool,
  closeIcon: PropsTypes.any,
  onOk: {
    type: Function
  },
  onCancel: {
    type: Function
  },
  afterClose: PropsTypes.func.def(noop$9),
  centered: PropsTypes.looseBool,
  width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  footer: PropsTypes.any,
  okText: PropsTypes.any,
  okType: {
    type: String
  },
  cancelText: PropsTypes.any,
  icon: PropsTypes.any,
  maskClosable: PropsTypes.looseBool,
  forceRender: PropsTypes.looseBool,
  okButtonProps: PropsTypes.shape(buttonTypes).loose,
  cancelButtonProps: PropsTypes.shape(buttonTypes).loose,
  destroyOnClose: PropsTypes.looseBool,
  wrapClassName: PropsTypes.string,
  maskTransitionName: PropsTypes.string,
  transitionName: PropsTypes.string,
  getContainer: PropsTypes.any,
  zIndex: PropsTypes.number,
  bodyStyle: PropsTypes.style,
  maskStyle: PropsTypes.style,
  mask: PropsTypes.looseBool,
  keyboard: PropsTypes.looseBool,
  wrapProps: PropsTypes.object,
  focusTriggerAfterClose: PropsTypes.looseBool
};
var destroyFns = [];
var Modal = defineComponent({
  name: "AModal",
  inheritAttrs: false,
  props: initDefaultProps$1(modalProps, {
    width: 520,
    transitionName: "zoom",
    maskTransitionName: "fade",
    confirmLoading: false,
    visible: false,
    okType: "primary"
  }),
  emits: ["update:visible", "cancel", "change", "ok"],
  setup: function setup105() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data54() {
    return {
      sVisible: !!this.visible
    };
  },
  watch: {
    visible: function visible6(val) {
      this.sVisible = val;
    }
  },
  methods: {
    handleCancel: function handleCancel(e) {
      this.$emit("update:visible", false);
      this.$emit("cancel", e);
      this.$emit("change", false);
    },
    handleOk: function handleOk(e) {
      this.$emit("ok", e);
    },
    renderFooter: function renderFooter3(locale2) {
      var _this = this;
      var okType = this.okType, confirmLoading = this.confirmLoading;
      var cancelBtnProps = _extends({
        onClick: this.handleCancel
      }, this.cancelButtonProps || {});
      var okBtnProps = _extends(_extends(_extends({
        onClick: this.handleOk
      }, convertLegacyProps(okType)), {
        loading: confirmLoading
      }), this.okButtonProps || {});
      return createVNode("div", null, [createVNode(Button$1, cancelBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "cancelText") || locale2.cancelText];
        }
      }), createVNode(Button$1, okBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "okText") || locale2.okText];
        }
      })]);
    }
  },
  render: function render109() {
    var customizePrefixCls = this.prefixCls, visible9 = this.sVisible, wrapClassName = this.wrapClassName, centered = this.centered, getContainer5 = this.getContainer, $attrs = this.$attrs;
    var children = getSlot(this);
    var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, getContextPopupContainer = _this$configProvider.getPopupContainer;
    var prefixCls2 = getPrefixCls2("modal", customizePrefixCls);
    var defaultFooter = createVNode(LocaleReceiver, {
      "componentName": "Modal",
      "defaultLocale": getConfirmLocale(),
      "children": this.renderFooter
    }, null);
    var closeIcon = getComponent(this, "closeIcon");
    var closeIconToRender = createVNode("span", {
      "class": "".concat(prefixCls2, "-close-x")
    }, [closeIcon || createVNode(CloseOutlined, {
      "class": "".concat(prefixCls2, "-close-icon")
    }, null)]);
    var footer = getComponent(this, "footer");
    var title2 = getComponent(this, "title");
    var dialogProps = _extends(_extends(_extends({}, this.$props), $attrs), {
      getContainer: getContainer5 === void 0 ? getContextPopupContainer : getContainer5,
      prefixCls: prefixCls2,
      wrapClassName: classNames(_defineProperty({}, "".concat(prefixCls2, "-centered"), !!centered), wrapClassName),
      title: title2,
      footer: footer === void 0 ? defaultFooter : footer,
      visible: visible9,
      mousePosition,
      closeIcon: closeIconToRender,
      onClose: this.handleCancel
    });
    return createVNode(DialogWrap$1, dialogProps, {
      default: function _default8() {
        return [children];
      }
    });
  }
});
var ActionButtonProps = {
  type: {
    type: String
  },
  actionFn: PropsTypes.func,
  closeModal: PropsTypes.func,
  autofocus: PropsTypes.looseBool,
  buttonProps: PropsTypes.object
};
var ActionButton = defineComponent({
  mixins: [BaseMixin],
  props: ActionButtonProps,
  setup: function setup106() {
    return {
      timeoutId: void 0
    };
  },
  data: function data55() {
    return {
      loading: false
    };
  },
  mounted: function mounted30() {
    var _this = this;
    if (this.autofocus) {
      this.timeoutId = setTimeout(function() {
        return findDOMNode(_this).focus();
      });
    }
  },
  beforeUnmount: function beforeUnmount21() {
    clearTimeout(this.timeoutId);
  },
  methods: {
    onClick: function onClick5() {
      var _this2 = this;
      var actionFn = this.actionFn, closeModal = this.closeModal;
      if (actionFn) {
        var ret;
        if (actionFn.length) {
          ret = actionFn(closeModal);
        } else {
          ret = actionFn();
          if (!ret) {
            closeModal();
          }
        }
        if (ret && ret.then) {
          this.setState({
            loading: true
          });
          ret.then(function() {
            closeModal.apply(void 0, arguments);
          }, function(e) {
            console.error(e);
            _this2.setState({
              loading: false
            });
          });
        }
      } else {
        closeModal();
      }
    }
  },
  render: function render110() {
    var _this3 = this;
    var type2 = this.type, loading = this.loading, buttonProps3 = this.buttonProps;
    var props2 = _extends(_extends(_extends({}, convertLegacyProps(type2)), {
      onClick: this.onClick,
      loading
    }), buttonProps3);
    return createVNode(Button$1, props2, {
      default: function _default8() {
        return [getSlot(_this3)];
      }
    });
  }
});
function renderSomeContent(_name, someContent) {
  if (typeof someContent === "function") {
    return someContent();
  }
  return someContent;
}
var ConfirmDialog = function ConfirmDialog2(props2) {
  var icon = props2.icon, onCancel = props2.onCancel, onOk3 = props2.onOk, close7 = props2.close, _props$closable = props2.closable, closable = _props$closable === void 0 ? false : _props$closable, zIndex = props2.zIndex, afterClose = props2.afterClose, visible9 = props2.visible, keyboard = props2.keyboard, centered = props2.centered, getContainer5 = props2.getContainer, maskStyle = props2.maskStyle, okButtonProps = props2.okButtonProps, cancelButtonProps = props2.cancelButtonProps;
  var okType = props2.okType || "primary";
  var prefixCls2 = props2.prefixCls || "ant-modal";
  var contentPrefixCls = "".concat(prefixCls2, "-confirm");
  var okCancel = "okCancel" in props2 ? props2.okCancel : true;
  var width = props2.width || 416;
  var style3 = props2.style || {};
  var mask = props2.mask === void 0 ? true : props2.mask;
  var maskClosable = props2.maskClosable === void 0 ? false : props2.maskClosable;
  var runtimeLocale2 = getConfirmLocale();
  var okText = renderSomeContent("okText", props2.okText) || (okCancel ? runtimeLocale2.okText : runtimeLocale2.justOkText);
  var cancelText = renderSomeContent("cancelText", props2.cancelText) || runtimeLocale2.cancelText;
  var autoFocusButton = props2.autoFocusButton === null ? false : props2.autoFocusButton || "ok";
  var transitionName2 = props2.transitionName || "zoom";
  var maskTransitionName = props2.maskTransitionName || "fade";
  var classString = classNames(contentPrefixCls, "".concat(contentPrefixCls, "-").concat(props2.type), "".concat(prefixCls2, "-").concat(props2.type), props2.class);
  var cancelButton = okCancel && createVNode(ActionButton, {
    "actionFn": onCancel,
    "closeModal": close7,
    "autofocus": autoFocusButton === "cancel",
    "buttonProps": cancelButtonProps
  }, {
    default: function _default8() {
      return [cancelText];
    }
  });
  return createVNode(Modal, {
    "prefixCls": prefixCls2,
    "class": classString,
    "wrapClassName": classNames(_defineProperty({}, "".concat(contentPrefixCls, "-centered"), !!centered)),
    "onCancel": function onCancel2(e) {
      return close7({
        triggerCancel: true
      }, e);
    },
    "visible": visible9,
    "title": "",
    "transitionName": transitionName2,
    "footer": "",
    "maskTransitionName": maskTransitionName,
    "mask": mask,
    "maskClosable": maskClosable,
    "maskStyle": maskStyle,
    "style": style3,
    "width": width,
    "zIndex": zIndex,
    "afterClose": afterClose,
    "keyboard": keyboard,
    "centered": centered,
    "getContainer": getContainer5,
    "closable": closable
  }, {
    default: function _default8() {
      return [createVNode("div", {
        "class": "".concat(contentPrefixCls, "-body-wrapper")
      }, [createVNode("div", {
        "class": "".concat(contentPrefixCls, "-body")
      }, [renderSomeContent("icon", icon), props2.title === void 0 ? null : createVNode("span", {
        "class": "".concat(contentPrefixCls, "-title")
      }, [renderSomeContent("title", props2.title)]), createVNode("div", {
        "class": "".concat(contentPrefixCls, "-content")
      }, [renderSomeContent("content", props2.content)])]), createVNode("div", {
        "class": "".concat(contentPrefixCls, "-btns")
      }, [cancelButton, createVNode(ActionButton, {
        "type": okType,
        "actionFn": onOk3,
        "closeModal": close7,
        "autofocus": autoFocusButton === "ok",
        "buttonProps": okButtonProps
      }, {
        default: function _default9() {
          return [okText];
        }
      })])])];
    }
  });
};
ConfirmDialog.inheritAttrs = false;
var ConfirmDialog$1 = ConfirmDialog;
var confirm$1 = function confirm(config2) {
  var div = document.createElement("div");
  document.body.appendChild(div);
  var currentConfig = _extends(_extends({}, omit(config2, ["parentContext", "appContext"])), {
    close: close7,
    visible: true
  });
  var confirmDialogInstance = null;
  function close7() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    currentConfig = _extends(_extends({}, currentConfig), {
      visible: false,
      afterClose: destroy3.bind.apply(destroy3, [this].concat(args))
    });
    update(currentConfig);
  }
  function update(newConfig) {
    currentConfig = _extends(_extends({}, currentConfig), newConfig);
    if (confirmDialogInstance) {
      _extends(confirmDialogInstance.component.props, currentConfig);
      confirmDialogInstance.component.update();
    }
  }
  function destroy3() {
    if (confirmDialogInstance && div.parentNode) {
      _extends(confirmDialogInstance.component.props, {
        vIf: false
      });
      confirmDialogInstance.component.update();
      confirmDialogInstance = null;
      div.parentNode.removeChild(div);
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var triggerCancel = args.some(function(param) {
      return param && param.triggerCancel;
    });
    if (config2.onCancel && triggerCancel) {
      config2.onCancel.apply(config2, args);
    }
    for (var i = 0; i < destroyFns.length; i++) {
      var fn = destroyFns[i];
      if (fn === close7) {
        destroyFns.splice(i, 1);
        break;
      }
    }
  }
  var Wrapper = function Wrapper2(p) {
    return p.vIf ? createVNode(ConfirmDialog$1, p, null) : null;
  };
  function render$1(props2) {
    var vm = createVNode(Wrapper, _extends(_extends({}, props2), {
      vIf: true
    }));
    vm.appContext = config2.parentContext || config2.appContext || vm.appContext;
    render(vm, div);
    return vm;
  }
  confirmDialogInstance = render$1(currentConfig);
  destroyFns.push(close7);
  return {
    destroy: close7,
    update
  };
};
var modalConfirm = confirm$1;
var info = function info2(props2) {
  var config2 = _extends({
    type: "info",
    icon: function icon() {
      return createVNode(InfoCircleOutlined, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var success = function success2(props2) {
  var config2 = _extends({
    type: "success",
    icon: function icon() {
      return createVNode(CheckCircleOutlined, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var error = function error2(props2) {
  var config2 = _extends({
    type: "error",
    icon: function icon() {
      return createVNode(CloseCircleOutlined, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var warning = function warning2(props2) {
  var config2 = _extends({
    type: "warning",
    icon: function icon() {
      return createVNode(ExclamationCircleOutlined, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var warn = warning;
var confirm2 = function confirmFn(props2) {
  var config2 = _extends({
    type: "confirm",
    okCancel: true
  }, props2);
  return modalConfirm(config2);
};
Modal.info = info;
Modal.success = success;
Modal.error = error;
Modal.warning = warning;
Modal.warn = warn;
Modal.confirm = confirm2;
Modal.destroyAll = function destroyAllFn() {
  while (destroyFns.length) {
    var close7 = destroyFns.pop();
    if (close7) {
      close7();
    }
  }
};
Modal.install = function(app) {
  app.component(Modal.name, Modal);
  return app;
};
var StatisticNumber = function StatisticNumber2(props2) {
  var value26 = props2.value, formatter = props2.formatter, precision = props2.precision, decimalSeparator = props2.decimalSeparator, _props$groupSeparator = props2.groupSeparator, groupSeparator = _props$groupSeparator === void 0 ? "" : _props$groupSeparator, prefixCls2 = props2.prefixCls;
  var valueNode;
  if (typeof formatter === "function") {
    valueNode = formatter({
      value: value26
    });
  } else {
    var val = String(value26);
    var cells = val.match(/^(-?)(\d*)(\.(\d+))?$/);
    if (!cells) {
      valueNode = val;
    } else {
      var negative = cells[1];
      var int = cells[2] || "0";
      var decimal = cells[4] || "";
      int = int.replace(/\B(?=(\d{3})+(?!\d))/g, groupSeparator);
      if (typeof precision === "number") {
        decimal = padEnd(decimal, precision, "0").slice(0, precision);
      }
      if (decimal) {
        decimal = "".concat(decimalSeparator).concat(decimal);
      }
      valueNode = [createVNode("span", {
        "key": "int",
        "class": "".concat(prefixCls2, "-content-value-int")
      }, [negative, int]), decimal && createVNode("span", {
        "key": "decimal",
        "class": "".concat(prefixCls2, "-content-value-decimal")
      }, [decimal])];
    }
  }
  return createVNode("span", {
    "class": "".concat(prefixCls2, "-content-value")
  }, [valueNode]);
};
StatisticNumber.displayName = "StatisticNumber";
var StatisticNumber$1 = StatisticNumber;
var skeletonElementProps = function skeletonElementProps2() {
  return {
    prefixCls: PropsTypes.string,
    size: PropsTypes.oneOfType([PropsTypes.oneOf(tuple("large", "small", "default")), PropsTypes.number]),
    shape: PropsTypes.oneOf(tuple("circle", "square", "round")),
    active: PropsTypes.looseBool
  };
};
var Element$1 = function Element2(props2) {
  var _classNames, _classNames2;
  var prefixCls2 = props2.prefixCls, size = props2.size, shape = props2.shape;
  var sizeCls = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls2, "-sm"), size === "small"), _classNames));
  var shapeCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-circle"), shape === "circle"), _defineProperty(_classNames2, "".concat(prefixCls2, "-square"), shape === "square"), _defineProperty(_classNames2, "".concat(prefixCls2, "-round"), shape === "round"), _classNames2));
  var sizeStyle = typeof size === "number" ? {
    width: "".concat(size, "px"),
    height: "".concat(size, "px"),
    lineHeight: "".concat(size, "px")
  } : {};
  return createVNode("span", {
    "class": classNames(prefixCls2, sizeCls, shapeCls),
    "style": sizeStyle
  }, null);
};
Element$1.displayName = "SkeletonElement";
var Element$2 = Element$1;
var avatarProps = initDefaultProps$1(_extends(_extends({}, skeletonElementProps()), {
  shape: PropsTypes.oneOf(tuple("circle", "square"))
}), {
  size: "large"
});
var SkeletonAvatar = defineComponent({
  name: "ASkeletonAvatar",
  props: avatarProps,
  setup: function setup107(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"), _defineProperty({}, "".concat(prefixCls2.value, "-active"), props2.active));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode(Element$2, _objectSpread2(_objectSpread2({}, props2), {}, {
        "prefixCls": "".concat(prefixCls2.value, "-avatar")
      }), null)]);
    };
  }
});
var SkeletonAvatar$1 = SkeletonAvatar;
var skeletonTitleProps = {
  prefixCls: PropsTypes.string,
  width: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string])
};
var SkeletonTitle = defineComponent({
  name: "SkeletonTitle",
  props: skeletonTitleProps,
  setup: function setup108(props2) {
    return function() {
      var prefixCls2 = props2.prefixCls, width = props2.width;
      var zWidth = typeof width === "number" ? "".concat(width, "px") : width;
      return createVNode("h3", {
        "class": prefixCls2,
        "style": {
          width: zWidth
        }
      }, null);
    };
  }
});
var Title$2 = SkeletonTitle;
var widthUnit = PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]);
var skeletonParagraphProps = {
  prefixCls: PropsTypes.string,
  width: PropsTypes.oneOfType([widthUnit, PropsTypes.arrayOf(widthUnit)]),
  rows: PropsTypes.number
};
var SkeletonParagraph = defineComponent({
  name: "SkeletonParagraph",
  props: skeletonParagraphProps,
  setup: function setup109(props2) {
    var getWidth3 = function getWidth4(index2) {
      var width = props2.width, _props$rows = props2.rows, rows = _props$rows === void 0 ? 2 : _props$rows;
      if (Array.isArray(width)) {
        return width[index2];
      }
      if (rows - 1 === index2) {
        return width;
      }
      return void 0;
    };
    return function() {
      var prefixCls2 = props2.prefixCls, rows = props2.rows;
      var rowList = _toConsumableArray(Array(rows)).map(function(_, index2) {
        var width = getWidth3(index2);
        return createVNode("li", {
          "key": index2,
          "style": {
            width: typeof width === "number" ? "".concat(width, "px") : width
          }
        }, null);
      });
      return createVNode("ul", {
        "class": prefixCls2
      }, [rowList]);
    };
  }
});
var Paragraph$2 = SkeletonParagraph;
var skeletonProps = {
  active: PropsTypes.looseBool,
  loading: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  avatar: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.shape(omit(avatarProps, ["active"])).loose, PropsTypes.looseBool])),
  title: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.string, PropsTypes.shape(skeletonTitleProps).loose])),
  paragraph: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.string, PropsTypes.shape(skeletonParagraphProps).loose]))
};
function getComponentProps(prop) {
  if (prop && _typeof(prop) === "object") {
    return prop;
  }
  return {};
}
function getAvatarBasicProps(hasTitle, hasParagraph) {
  if (hasTitle && !hasParagraph) {
    return {
      size: "large",
      shape: "square"
    };
  }
  return {
    size: "large",
    shape: "circle"
  };
}
function getTitleBasicProps(hasAvatar, hasParagraph) {
  if (!hasAvatar && hasParagraph) {
    return {
      width: "38%"
    };
  }
  if (hasAvatar && hasParagraph) {
    return {
      width: "50%"
    };
  }
  return {};
}
function getParagraphBasicProps(hasAvatar, hasTitle) {
  var basicProps2 = {};
  if (!hasAvatar || !hasTitle) {
    basicProps2.width = "61%";
  }
  if (!hasAvatar && hasTitle) {
    basicProps2.rows = 3;
  } else {
    basicProps2.rows = 2;
  }
  return basicProps2;
}
var Skeleton = defineComponent({
  name: "ASkeleton",
  props: initDefaultProps$2(skeletonProps, {
    avatar: false,
    title: true,
    paragraph: true
  }),
  setup: function setup110(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    return function() {
      var _a;
      var loading = props2.loading, avatar = props2.avatar, title2 = props2.title, paragraph = props2.paragraph, active = props2.active, round = props2.round;
      var pre = prefixCls2.value;
      if (loading || props2.loading === void 0) {
        var _classNames;
        var hasAvatar = !!avatar || avatar === "";
        var hasTitle = !!title2 || title2 === "";
        var hasParagraph = !!paragraph || paragraph === "";
        var avatarNode;
        if (hasAvatar) {
          var _avatarProps = _extends(_extends({
            prefixCls: "".concat(pre, "-avatar")
          }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));
          avatarNode = createVNode("div", {
            "class": "".concat(pre, "-header")
          }, [createVNode(Element$2, _avatarProps, null)]);
        }
        var contentNode;
        if (hasTitle || hasParagraph) {
          var $title;
          if (hasTitle) {
            var titleProps = _extends(_extends({
              prefixCls: "".concat(pre, "-title")
            }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title2));
            $title = createVNode(Title$2, titleProps, null);
          }
          var paragraphNode;
          if (hasParagraph) {
            var paragraphProps = _extends(_extends({
              prefixCls: "".concat(pre, "-paragraph")
            }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));
            paragraphNode = createVNode(Paragraph$2, paragraphProps, null);
          }
          contentNode = createVNode("div", {
            "class": "".concat(pre, "-content")
          }, [$title, paragraphNode]);
        }
        var cls = classNames(pre, (_classNames = {}, _defineProperty(_classNames, "".concat(pre, "-with-avatar"), hasAvatar), _defineProperty(_classNames, "".concat(pre, "-active"), active), _defineProperty(_classNames, "".concat(pre, "-rtl"), direction.value === "rtl"), _defineProperty(_classNames, "".concat(pre, "-round"), round), _classNames));
        return createVNode("div", {
          "class": cls
        }, [avatarNode, contentNode]);
      }
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var Skeleton$1 = Skeleton;
var statisticProps = {
  prefixCls: PropsTypes.string,
  decimalSeparator: PropsTypes.string,
  groupSeparator: PropsTypes.string,
  format: PropsTypes.string,
  value: {
    type: [String, Number, Object]
  },
  valueStyle: PropsTypes.style,
  valueRender: PropsTypes.any,
  formatter: PropsTypes.any,
  precision: PropsTypes.number,
  prefix: PropsTypes.VNodeChild,
  suffix: PropsTypes.VNodeChild,
  title: PropsTypes.VNodeChild,
  onFinish: PropsTypes.func,
  loading: PropsTypes.looseBool
};
var Statistic = defineComponent({
  name: "AStatistic",
  props: initDefaultProps$1(statisticProps, {
    decimalSeparator: ".",
    groupSeparator: ",",
    loading: false
  }),
  slots: ["title", "prefix", "suffix", "formatter"],
  setup: function setup111(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("statistic", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    return function() {
      var _a, _b, _c, _d, _e, _f, _g;
      var _props$value = props2.value, value26 = _props$value === void 0 ? 0 : _props$value, valueStyle = props2.valueStyle, valueRender = props2.valueRender;
      var pre = prefixCls2.value;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var prefix = (_c = props2.prefix) !== null && _c !== void 0 ? _c : (_d = slots.prefix) === null || _d === void 0 ? void 0 : _d.call(slots);
      var suffix = (_e = props2.suffix) !== null && _e !== void 0 ? _e : (_f = slots.suffix) === null || _f === void 0 ? void 0 : _f.call(slots);
      var formatter = (_g = props2.formatter) !== null && _g !== void 0 ? _g : slots.formatter;
      var valueNode = createVNode(StatisticNumber$1, _objectSpread2({
        "data-for-update": Date.now()
      }, _extends(_extends({}, props2), {
        prefixCls: pre,
        value: value26,
        formatter
      })), null);
      if (valueRender) {
        valueNode = valueRender(valueNode);
      }
      return createVNode("div", {
        "class": [pre, _defineProperty({}, "".concat(pre, "-rtl"), direction.value === "rtl")]
      }, [title2 && createVNode("div", {
        "class": "".concat(pre, "-title")
      }, [title2]), createVNode(Skeleton$1, {
        "paragraph": false,
        "loading": props2.loading
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "style": valueStyle,
            "class": "".concat(pre, "-content")
          }, [prefix && createVNode("span", {
            "class": "".concat(pre, "-content-prefix")
          }, [prefix]), valueNode, suffix && createVNode("span", {
            "class": "".concat(pre, "-content-suffix")
          }, [suffix])])];
        }
      })]);
    };
  }
});
var timeUnits = [
  ["Y", 1e3 * 60 * 60 * 24 * 365],
  ["M", 1e3 * 60 * 60 * 24 * 30],
  ["D", 1e3 * 60 * 60 * 24],
  ["H", 1e3 * 60 * 60],
  ["m", 1e3 * 60],
  ["s", 1e3],
  ["S", 1]
];
function formatTimeStr(duration2, format3) {
  var leftDuration = duration2;
  var escapeRegex = /\[[^\]]*]/g;
  var keepList = (format3.match(escapeRegex) || []).map(function(str) {
    return str.slice(1, -1);
  });
  var templateText = format3.replace(escapeRegex, "[]");
  var replacedText = timeUnits.reduce(function(current2, _ref) {
    var _ref2 = _slicedToArray(_ref, 2), name2 = _ref2[0], unit = _ref2[1];
    if (current2.indexOf(name2) !== -1) {
      var value26 = Math.floor(leftDuration / unit);
      leftDuration -= value26 * unit;
      return current2.replace(new RegExp("".concat(name2, "+"), "g"), function(match2) {
        var len = match2.length;
        return padStart(value26.toString(), len, "0");
      });
    }
    return current2;
  }, templateText);
  var index2 = 0;
  return replacedText.replace(escapeRegex, function() {
    var match2 = keepList[index2];
    index2 += 1;
    return match2;
  });
}
function formatCountdown(value26, config2) {
  var _config$format = config2.format, format3 = _config$format === void 0 ? "" : _config$format;
  var target = new Date(value26).getTime();
  var current2 = Date.now();
  var diff = Math.max(target - current2, 0);
  return formatTimeStr(diff, format3);
}
var REFRESH_INTERVAL = 1e3 / 30;
function getTime(value26) {
  return new Date(value26).getTime();
}
var Countdown = defineComponent({
  name: "AStatisticCountdown",
  props: initDefaultProps$1(statisticProps, {
    format: "HH:mm:ss"
  }),
  emits: ["finish", "change"],
  setup: function setup112(props2, _ref) {
    var emit = _ref.emit;
    var countdownId = ref();
    var statistic = ref();
    var syncTimer = function syncTimer2() {
      var value26 = props2.value;
      var timestamp = getTime(value26);
      if (timestamp >= Date.now()) {
        startTimer();
      } else {
        stopTimer();
      }
    };
    var startTimer = function startTimer2() {
      if (countdownId.value)
        return;
      var timestamp = getTime(props2.value);
      countdownId.value = window.setInterval(function() {
        statistic.value.$forceUpdate();
        if (timestamp > Date.now()) {
          emit("change", timestamp - Date.now());
        }
        syncTimer();
      }, REFRESH_INTERVAL);
    };
    var stopTimer = function stopTimer2() {
      var value26 = props2.value;
      if (countdownId.value) {
        clearInterval(countdownId.value);
        countdownId.value = void 0;
        var timestamp = getTime(value26);
        if (timestamp < Date.now()) {
          emit("finish");
        }
      }
    };
    var formatCountdown$1 = function formatCountdown$12(_ref2) {
      var value26 = _ref2.value, config2 = _ref2.config;
      var format3 = props2.format;
      return formatCountdown(value26, _extends(_extends({}, config2), {
        format: format3
      }));
    };
    var valueRenderHtml = function valueRenderHtml2(node) {
      return node;
    };
    onMounted(function() {
      syncTimer();
    });
    onUpdated(function() {
      syncTimer();
    });
    onBeforeUnmount(function() {
      stopTimer();
    });
    return function() {
      return createVNode(Statistic, _objectSpread2({
        "ref": statistic
      }, _extends(_extends({}, props2), {
        valueRender: valueRenderHtml,
        formatter: formatCountdown$1
      })), null);
    };
  }
});
Statistic.Countdown = Countdown;
Statistic.install = function(app) {
  app.component(Statistic.name, Statistic);
  app.component(Statistic.Countdown.name, Statistic.Countdown);
  return app;
};
var StatisticCountdown = Statistic.Countdown;
var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = "24px";
var defaultBottom = "24px";
var defaultPlacement = "topRight";
var defaultGetContainer2 = function defaultGetContainer3() {
  return document.body;
};
var defaultCloseIcon = null;
function setNotificationConfig(options2) {
  var duration2 = options2.duration, placement2 = options2.placement, bottom = options2.bottom, top = options2.top, getContainer5 = options2.getContainer, closeIcon = options2.closeIcon;
  if (duration2 !== void 0) {
    defaultDuration = duration2;
  }
  if (placement2 !== void 0) {
    defaultPlacement = placement2;
  }
  if (bottom !== void 0) {
    defaultBottom = typeof bottom === "number" ? "".concat(bottom, "px") : bottom;
  }
  if (top !== void 0) {
    defaultTop = typeof top === "number" ? "".concat(top, "px") : top;
  }
  if (getContainer5 !== void 0) {
    defaultGetContainer2 = getContainer5;
  }
  if (closeIcon !== void 0) {
    defaultCloseIcon = closeIcon;
  }
}
function getPlacementStyle(placement2) {
  var top = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultTop;
  var bottom = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultBottom;
  var style3;
  switch (placement2) {
    case "topLeft":
      style3 = {
        left: "0px",
        top,
        bottom: "auto"
      };
      break;
    case "topRight":
      style3 = {
        right: "0px",
        top,
        bottom: "auto"
      };
      break;
    case "bottomLeft":
      style3 = {
        left: "0px",
        top: "auto",
        bottom
      };
      break;
    default:
      style3 = {
        right: "0px",
        top: "auto",
        bottom
      };
      break;
  }
  return style3;
}
function getNotificationInstance(_ref, callback) {
  var prefixCls2 = _ref.prefixCls, _ref$placement = _ref.placement, placement2 = _ref$placement === void 0 ? defaultPlacement : _ref$placement, _ref$getContainer = _ref.getContainer, getContainer5 = _ref$getContainer === void 0 ? defaultGetContainer2 : _ref$getContainer, top = _ref.top, bottom = _ref.bottom, _ref$closeIcon = _ref.closeIcon, _closeIcon = _ref$closeIcon === void 0 ? defaultCloseIcon : _ref$closeIcon;
  var cacheKey = "".concat(prefixCls2, "-").concat(placement2);
  if (notificationInstance[cacheKey]) {
    callback(notificationInstance[cacheKey]);
    return;
  }
  Notification$1.newInstance({
    prefixCls: prefixCls2,
    class: "".concat(prefixCls2, "-").concat(placement2),
    style: getPlacementStyle(placement2, top, bottom),
    getContainer: getContainer5,
    closeIcon: function closeIcon() {
      var closeIconToRender = createVNode("span", {
        "class": "".concat(prefixCls2, "-close-x")
      }, [_closeIcon || createVNode(CloseOutlined, {
        "class": "".concat(prefixCls2, "-close-icon")
      }, null)]);
      return closeIconToRender;
    }
  }, function(notification2) {
    notificationInstance[cacheKey] = notification2;
    callback(notification2);
  });
}
var typeToIcon = {
  success: CheckCircleOutlined,
  info: InfoCircleOutlined,
  error: CloseCircleOutlined,
  warning: ExclamationCircleOutlined
};
function notice(args) {
  var icon = args.icon, type2 = args.type, description2 = args.description, message2 = args.message, btn = args.btn;
  var outerPrefixCls = args.prefixCls || "ant-notification";
  var prefixCls2 = "".concat(outerPrefixCls, "-notice");
  var duration2 = args.duration === void 0 ? defaultDuration : args.duration;
  var iconNode = null;
  if (icon) {
    iconNode = function iconNode2() {
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-icon")
      }, [icon]);
    };
  } else if (type2) {
    var Icon = typeToIcon[type2];
    iconNode = function iconNode2() {
      return createVNode(Icon, {
        "class": "".concat(prefixCls2, "-icon ").concat(prefixCls2, "-icon-").concat(type2)
      }, null);
    };
  }
  var placement2 = args.placement, top = args.top, bottom = args.bottom, getContainer5 = args.getContainer, closeIcon = args.closeIcon;
  getNotificationInstance({
    prefixCls: outerPrefixCls,
    placement: placement2,
    top,
    bottom,
    getContainer: getContainer5,
    closeIcon
  }, function(notification2) {
    notification2.notice({
      content: function content() {
        return createVNode("div", {
          "class": iconNode ? "".concat(prefixCls2, "-with-icon") : ""
        }, [iconNode && iconNode(), createVNode("div", {
          "class": "".concat(prefixCls2, "-message")
        }, [!description2 && iconNode ? createVNode("span", {
          "class": "".concat(prefixCls2, "-message-single-line-auto-margin")
        }, null) : null, message2]), createVNode("div", {
          "class": "".concat(prefixCls2, "-description")
        }, [description2]), btn ? createVNode("span", {
          "class": "".concat(prefixCls2, "-btn")
        }, [btn]) : null]);
      },
      duration: duration2,
      closable: true,
      onClose: args.onClose,
      onClick: args.onClick,
      key: args.key,
      style: args.style || {},
      class: args.class
    });
  });
}
var apiBase = {
  open: notice,
  close: function close6(key2) {
    Object.keys(notificationInstance).forEach(function(cacheKey) {
      return notificationInstance[cacheKey].removeNotice(key2);
    });
  },
  config: setNotificationConfig,
  destroy: function destroy2() {
    Object.keys(notificationInstance).forEach(function(cacheKey) {
      notificationInstance[cacheKey].destroy();
      delete notificationInstance[cacheKey];
    });
  }
};
var api = apiBase;
var iconTypes = ["success", "info", "warning", "error"];
iconTypes.forEach(function(type2) {
  api[type2] = function(args) {
    return api.open(_extends(_extends({}, args), {
      type: type2
    }));
  };
});
api.warn = api.warning;
var notification = api;
var __rest$j = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var inlineStyle = {
  border: 0,
  background: "transparent",
  padding: 0,
  lineHeight: "inherit",
  display: "inline-block"
};
var TransButton = defineComponent({
  name: "TransButton",
  inheritAttrs: false,
  props: {
    noStyle: PropsTypes.looseBool,
    onClick: PropsTypes.func,
    disabled: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool
  },
  setup: function setup113(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs, expose = _ref.expose;
    var domRef = ref();
    var onKeyDown14 = function onKeyDown15(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode$2.ENTER) {
        event.preventDefault();
      }
    };
    var onKeyUp3 = function onKeyUp4(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode$2.ENTER) {
        emit("click", event);
      }
    };
    var onClick7 = function onClick8(e) {
      emit("click", e);
    };
    var focus27 = function focus28() {
      if (domRef.value) {
        domRef.value.focus();
      }
    };
    var blur24 = function blur25() {
      if (domRef.value) {
        domRef.value.blur();
      }
    };
    onMounted(function() {
      if (props2.autofocus) {
        focus27();
      }
    });
    expose({
      focus: focus27,
      blur: blur24
    });
    return function() {
      var _a;
      var noStyle = props2.noStyle, disabled = props2.disabled, restProps = __rest$j(props2, ["noStyle", "disabled"]);
      var mergedStyle = {};
      if (!noStyle) {
        mergedStyle = _extends({}, inlineStyle);
      }
      if (disabled) {
        mergedStyle.pointerEvents = "none";
      }
      return createVNode("div", _objectSpread2(_objectSpread2(_objectSpread2({
        "role": "button",
        "tabindex": 0,
        "ref": domRef
      }, restProps), attrs), {}, {
        "onClick": onClick7,
        "onKeydown": onKeyDown14,
        "onKeyup": onKeyUp3,
        "style": _extends(_extends({}, mergedStyle), attrs.style || {})
      }), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var TransButton$1 = TransButton;
var pageHeaderProps = {
  backIcon: PropsTypes.VNodeChild,
  prefixCls: PropsTypes.string,
  title: PropsTypes.VNodeChild,
  subTitle: PropsTypes.VNodeChild,
  breadcrumb: PropsTypes.object,
  tags: PropsTypes.any,
  footer: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  avatar: PropsTypes.object,
  ghost: PropsTypes.looseBool,
  onBack: PropsTypes.func
};
var PageHeader = defineComponent({
  name: "APageHeader",
  props: pageHeaderProps,
  emits: ["back"],
  slots: ["backIcon", "avatar", "breadcrumb", "title", "subTitle", "tags", "extra", "footer"],
  setup: function setup114(props2, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var _useConfigInject = useConfigInject("page-header", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, pageHeader = _useConfigInject.pageHeader;
    var compact = ref(false);
    var onResize = function onResize2(_ref2) {
      var width = _ref2.width;
      compact.value = width < 768;
    };
    var ghost = computed(function() {
      var _a, _b, _c;
      return (_c = (_a = props2.ghost) !== null && _a !== void 0 ? _a : (_b = pageHeader.value) === null || _b === void 0 ? void 0 : _b.ghost) !== null && _c !== void 0 ? _c : true;
    });
    var getBackIcon = function getBackIcon2() {
      var _a, _b, _c;
      return (_c = (_a = props2.backIcon) !== null && _a !== void 0 ? _a : (_b = slots.backIcon) === null || _b === void 0 ? void 0 : _b.call(slots)) !== null && _c !== void 0 ? _c : direction.value === "rtl" ? createVNode(ArrowRightOutlined, null, null) : createVNode(ArrowLeftOutlined, null, null);
    };
    var renderBack = function renderBack2(backIcon) {
      if (!backIcon || !props2.onBack) {
        return null;
      }
      return createVNode(LocaleReceiver, {
        "componentName": "PageHeader",
        "children": function children(_ref3) {
          var back = _ref3.back;
          return createVNode("div", {
            "class": "".concat(prefixCls2.value, "-back")
          }, [createVNode(TransButton$1, {
            "onClick": function onClick7(e) {
              emit("back", e);
            },
            "class": "".concat(prefixCls2.value, "-back-button"),
            "aria-label": back
          }, {
            default: function _default8() {
              return [backIcon];
            }
          })]);
        }
      }, null);
    };
    var renderBreadcrumb = function renderBreadcrumb2() {
      var _a;
      return props2.breadcrumb ? createVNode(Breadcrumb, props2.breadcrumb, null) : (_a = slots.breadcrumb) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
    var renderTitle2 = function renderTitle3() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      var avatar = props2.avatar;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var subTitle = (_c = props2.subTitle) !== null && _c !== void 0 ? _c : (_d = slots.subTitle) === null || _d === void 0 ? void 0 : _d.call(slots);
      var tags = (_e = props2.tags) !== null && _e !== void 0 ? _e : (_f = slots.tags) === null || _f === void 0 ? void 0 : _f.call(slots);
      var extra = (_g = props2.extra) !== null && _g !== void 0 ? _g : (_h = slots.extra) === null || _h === void 0 ? void 0 : _h.call(slots);
      var headingPrefixCls = "".concat(prefixCls2.value, "-heading");
      var hasHeading = title2 || subTitle || tags || extra;
      if (!hasHeading) {
        return null;
      }
      var backIcon = getBackIcon();
      var backIconDom = renderBack(backIcon);
      var hasTitle = backIconDom || avatar || hasHeading;
      return createVNode("div", {
        "class": headingPrefixCls
      }, [hasTitle && createVNode("div", {
        "class": "".concat(headingPrefixCls, "-left")
      }, [backIconDom, avatar ? createVNode(Avatar$1, avatar, null) : (_j = slots.avatar) === null || _j === void 0 ? void 0 : _j.call(slots), title2 && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-title"),
        "title": typeof title2 === "string" ? title2 : void 0
      }, [title2]), subTitle && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-sub-title"),
        "title": typeof subTitle === "string" ? subTitle : void 0
      }, [subTitle]), tags && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-tags")
      }, [tags])]), extra && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-extra")
      }, [extra])]);
    };
    var renderFooter5 = function renderFooter6() {
      var _a, _b;
      var footer = (_a = props2.footer) !== null && _a !== void 0 ? _a : filterEmpty((_b = slots.footer) === null || _b === void 0 ? void 0 : _b.call(slots));
      return isEmptyContent(footer) ? null : createVNode("div", {
        "class": "".concat(prefixCls2.value, "-footer")
      }, [footer]);
    };
    var renderChildren4 = function renderChildren5(children) {
      return createVNode("div", {
        "class": "".concat(prefixCls2.value, "-content")
      }, [children]);
    };
    return function() {
      var _classNames;
      var _a, _b;
      var hasBreadcrumb = ((_a = props2.breadcrumb) === null || _a === void 0 ? void 0 : _a.routes) || slots.breadcrumb;
      var hasFooter = props2.footer || slots.footer;
      var children = flattenChildren((_b = slots.default) === null || _b === void 0 ? void 0 : _b.call(slots));
      var className = classNames(prefixCls2.value, (_classNames = {
        "has-breadcrumb": hasBreadcrumb,
        "has-footer": hasFooter
      }, _defineProperty(_classNames, "".concat(prefixCls2.value, "-ghost"), ghost.value), _defineProperty(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty(_classNames, "".concat(prefixCls2.value, "-compact"), compact.value), _classNames));
      return createVNode(ResizeObserver, {
        "onResize": onResize
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "class": className
          }, [renderBreadcrumb(), renderTitle2(), children.length ? renderChildren4(children) : null, renderFooter5()])];
        }
      });
    };
  }
});
var index$7 = withInstall(PageHeader);
var tooltipProps$1 = abstractTooltipProps();
var Popconfirm = defineComponent({
  name: "APopconfirm",
  mixins: [BaseMixin],
  props: _extends(_extends({}, tooltipProps$1), {
    prefixCls: PropsTypes.string,
    transitionName: PropsTypes.string.def("zoom-big"),
    content: PropsTypes.any,
    title: PropsTypes.any,
    trigger: tooltipProps$1.trigger.def("click"),
    okType: {
      type: String,
      default: "primary"
    },
    disabled: PropsTypes.looseBool.def(false),
    okText: PropsTypes.any,
    cancelText: PropsTypes.any,
    icon: PropsTypes.any,
    okButtonProps: PropsTypes.object,
    cancelButtonProps: PropsTypes.object,
    onConfirm: PropsTypes.func,
    onCancel: PropsTypes.func,
    onVisibleChange: PropsTypes.func
  }),
  emits: ["update:visible", "confirm", "cancel", "visibleChange"],
  setup: function setup115() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data56() {
    var props2 = getOptionProps(this);
    var state = {
      sVisible: false
    };
    if ("visible" in props2) {
      state.sVisible = props2.visible;
    }
    if ("defaultVisible" in props2) {
      state.sVisible = props2.defaultVisible;
    }
    return state;
  },
  watch: {
    visible: function visible7(val) {
      this.sVisible = val;
    }
  },
  methods: {
    onConfirmHandle: function onConfirmHandle(e) {
      this.setVisible(false, e);
      this.$emit("confirm", e);
    },
    onCancelHandle: function onCancelHandle(e) {
      this.setVisible(false, e);
      this.$emit("cancel", e);
    },
    onVisibleChangeHandle: function onVisibleChangeHandle(sVisible) {
      var disabled = this.$props.disabled;
      if (disabled) {
        return;
      }
      this.setVisible(sVisible);
    },
    setVisible: function setVisible(sVisible, e) {
      if (!hasProp(this, "visible")) {
        this.setState({
          sVisible
        });
      }
      this.$emit("update:visible", sVisible);
      this.$emit("visibleChange", sVisible, e);
    },
    getPopupDomNode: function getPopupDomNode7() {
      return this.$refs.tooltip.getPopupDomNode();
    },
    renderOverlay: function renderOverlay2(prefixCls2, popconfirmLocale) {
      var _this = this;
      var okType = this.okType, okButtonProps = this.okButtonProps, cancelButtonProps = this.cancelButtonProps;
      var icon = getComponent(this, "icon") || createVNode(ExclamationCircleFilled, null, null);
      var cancelBtnProps = mergeProps(_extends({
        size: "small",
        onClick: this.onCancelHandle
      }, cancelButtonProps));
      var okBtnProps = mergeProps(_extends(_extends(_extends({}, convertLegacyProps(okType)), {
        size: "small",
        onClick: this.onConfirmHandle
      }), okButtonProps));
      return createVNode("div", {
        "class": "".concat(prefixCls2, "-inner-content")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-message")
      }, [icon, createVNode("div", {
        "class": "".concat(prefixCls2, "-message-title")
      }, [getComponent(this, "title")])]), createVNode("div", {
        "class": "".concat(prefixCls2, "-buttons")
      }, [createVNode(Button$1, cancelBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "cancelText") || popconfirmLocale.cancelText];
        }
      }), createVNode(Button$1, okBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "okText") || popconfirmLocale.okText];
        }
      })])]);
    }
  },
  render: function render111() {
    var _this2 = this;
    var _a;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("popover", customizePrefixCls);
    var otherProps = omit(props2, ["title", "content", "cancelText", "okText", "onUpdate:visible"]);
    var overlay = createVNode(LocaleReceiver, {
      "componentName": "Popconfirm",
      "defaultLocale": defaultLocale.Popconfirm,
      "children": function children(popconfirmLocale) {
        return _this2.renderOverlay(prefixCls2, popconfirmLocale);
      }
    }, null);
    var tooltipProps2 = _extends(_extends({}, otherProps), {
      title: overlay,
      prefixCls: prefixCls2,
      visible: this.sVisible,
      ref: "tooltip",
      onVisibleChange: this.onVisibleChangeHandle
    });
    return createVNode(Tooltip, tooltipProps2, {
      default: function _default8() {
        return [(_a = _this2.$slots) === null || _a === void 0 ? void 0 : _a.default()];
      }
    });
  }
});
var index$6 = withInstall(Popconfirm);
function validProgress(progress) {
  if (!progress || progress < 0) {
    return 0;
  }
  if (progress > 100) {
    return 100;
  }
  return progress;
}
var __rest$i = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var sortGradient = function sortGradient2(gradients) {
  var tempArr = [];
  for (var _i = 0, _Object$entries = Object.entries(gradients); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key2 = _Object$entries$_i[0], value26 = _Object$entries$_i[1];
    var formatKey = parseFloat(key2.replace(/%/g, ""));
    if (isNaN(formatKey)) {
      return {};
    }
    tempArr.push({
      key: formatKey,
      value: value26
    });
  }
  tempArr = tempArr.sort(function(a, b) {
    return a.key - b.key;
  });
  return tempArr.map(function(_ref) {
    var key3 = _ref.key, value27 = _ref.value;
    return "".concat(value27, " ").concat(key3, "%");
  }).join(", ");
};
var handleGradient = function handleGradient2(strokeColor) {
  var _strokeColor$from = strokeColor.from, from = _strokeColor$from === void 0 ? "#1890ff" : _strokeColor$from, _strokeColor$to = strokeColor.to, to = _strokeColor$to === void 0 ? "#1890ff" : _strokeColor$to, _strokeColor$directio = strokeColor.direction, direction = _strokeColor$directio === void 0 ? "to right" : _strokeColor$directio, rest = __rest$i(strokeColor, ["from", "to", "direction"]);
  if (Object.keys(rest).length !== 0) {
    var sortedGradients = sortGradient(rest);
    return {
      backgroundImage: "linear-gradient(".concat(direction, ", ").concat(sortedGradients, ")")
    };
  }
  return {
    backgroundImage: "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")")
  };
};
var Line = function Line2(_, _ref2) {
  var attrs = _ref2.attrs, slots = _ref2.slots;
  var prefixCls2 = attrs.prefixCls, percent = attrs.percent, successPercent = attrs.successPercent, strokeWidth = attrs.strokeWidth, size = attrs.size, strokeColor = attrs.strokeColor, strokeLinecap = attrs.strokeLinecap, trailColor = attrs.trailColor;
  var backgroundProps;
  if (strokeColor && typeof strokeColor !== "string") {
    backgroundProps = handleGradient(strokeColor);
  } else {
    backgroundProps = {
      background: strokeColor
    };
  }
  var trailStyle = trailColor ? {
    style: {
      backgroundColor: trailColor
    }
  } : void 0;
  var percentStyle = _extends({
    width: "".concat(validProgress(percent), "%"),
    height: "".concat(strokeWidth || (size === "small" ? 6 : 8), "px"),
    background: strokeColor,
    borderRadius: strokeLinecap === "square" ? 0 : "100px"
  }, backgroundProps);
  var successPercentStyle = {
    width: "".concat(validProgress(successPercent), "%"),
    height: "".concat(strokeWidth || (size === "small" ? 6 : 8), "px"),
    borderRadius: strokeLinecap === "square" ? 0 : ""
  };
  var successSegment = successPercent !== void 0 ? createVNode("div", {
    "class": "".concat(prefixCls2, "-success-bg"),
    "style": successPercentStyle
  }, null) : null;
  return createVNode("div", null, [createVNode("div", {
    "class": "".concat(prefixCls2, "-outer")
  }, [createVNode("div", _objectSpread2({
    "class": "".concat(prefixCls2, "-inner")
  }, trailStyle), [createVNode("div", {
    "class": "".concat(prefixCls2, "-bg"),
    "style": percentStyle
  }, null), successSegment])]), slots === null || slots === void 0 ? void 0 : slots.default()]);
};
var Line$1 = Line;
function enhancer(Component) {
  return _extends(_extends({}, Component), {
    updated: function updated28() {
      var _this = this;
      var now2 = Date.now();
      var updated29 = false;
      Object.keys(this.paths).forEach(function(key2) {
        var path2 = _this.paths[key2];
        if (!path2) {
          return;
        }
        updated29 = true;
        var pathStyle = path2.style;
        pathStyle.transitionDuration = ".3s, .3s, .3s, .06s";
        if (_this.prevTimeStamp && now2 - _this.prevTimeStamp < 100) {
          pathStyle.transitionDuration = "0s, 0s";
        }
      });
      if (updated29) {
        this.prevTimeStamp = Date.now();
      }
    }
  });
}
var defaultProps = {
  percent: 0,
  prefixCls: "rc-progress",
  strokeColor: "#2db7f5",
  strokeLinecap: "round",
  strokeWidth: 1,
  trailColor: "#D9D9D9",
  trailWidth: 1
};
var mixedType = PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]);
var propTypes = {
  percent: PropsTypes.oneOfType([mixedType, PropsTypes.arrayOf(mixedType)]),
  prefixCls: PropsTypes.string,
  strokeColor: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object])), PropsTypes.object]),
  strokeLinecap: PropsTypes.oneOf(["butt", "round", "square"]),
  strokeWidth: mixedType,
  trailColor: PropsTypes.string,
  trailWidth: mixedType
};
var __rest$h = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var circlePropTypes = _extends(_extends({}, propTypes), {
  gapPosition: PropsTypes.oneOf(["top", "bottom", "left", "right"]),
  gapDegree: withUndefined(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string, PropsTypes.looseBool]))
});
var circleDefaultProps = _extends(_extends({}, defaultProps), {
  gapPosition: "top"
});
var gradientSeed = 0;
function stripPercentToNumber(percent) {
  return +percent.replace("%", "");
}
function toArray$1(symArray) {
  return Array.isArray(symArray) ? symArray : [symArray];
}
function getPathStyles(offset2, percent, strokeColor, strokeWidth) {
  var gapDegree = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
  var gapPosition = arguments.length > 5 ? arguments[5] : void 0;
  var radius = 50 - strokeWidth / 2;
  var beginPositionX = 0;
  var beginPositionY = -radius;
  var endPositionX = 0;
  var endPositionY = -2 * radius;
  switch (gapPosition) {
    case "left":
      beginPositionX = -radius;
      beginPositionY = 0;
      endPositionX = 2 * radius;
      endPositionY = 0;
      break;
    case "right":
      beginPositionX = radius;
      beginPositionY = 0;
      endPositionX = -2 * radius;
      endPositionY = 0;
      break;
    case "bottom":
      beginPositionY = radius;
      endPositionY = 2 * radius;
      break;
  }
  var pathString = "M 50,50 m ".concat(beginPositionX, ",").concat(beginPositionY, "\n   a ").concat(radius, ",").concat(radius, " 0 1 1 ").concat(endPositionX, ",").concat(-endPositionY, "\n   a ").concat(radius, ",").concat(radius, " 0 1 1 ").concat(-endPositionX, ",").concat(endPositionY);
  var len = Math.PI * 2 * radius;
  var pathStyle = {
    stroke: strokeColor,
    strokeDasharray: "".concat(percent / 100 * (len - gapDegree), "px ").concat(len, "px"),
    strokeDashoffset: "-".concat(gapDegree / 2 + offset2 / 100 * (len - gapDegree), "px"),
    transition: "stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s, opacity .3s ease 0s"
  };
  return {
    pathString,
    pathStyle
  };
}
var Circle$2 = defineComponent({
  name: "Circle",
  props: initDefaultProps$2(circlePropTypes, circleDefaultProps),
  created: function created15() {
    this.paths = {};
    this.gradientId = gradientSeed;
    gradientSeed += 1;
  },
  methods: {
    getStokeList: function getStokeList() {
      var _this = this;
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, percent = _this$$props.percent, strokeColor = _this$$props.strokeColor, strokeWidth = _this$$props.strokeWidth, strokeLinecap = _this$$props.strokeLinecap, gapDegree = _this$$props.gapDegree, gapPosition = _this$$props.gapPosition;
      var percentList = toArray$1(percent);
      var strokeColorList = toArray$1(strokeColor);
      var stackPtg = 0;
      return percentList.map(function(ptg, index2) {
        var color = strokeColorList[index2] || strokeColorList[strokeColorList.length - 1];
        var stroke = Object.prototype.toString.call(color) === "[object Object]" ? "url(#".concat(prefixCls2, "-gradient-").concat(_this.gradientId, ")") : "";
        var _getPathStyles = getPathStyles(stackPtg, ptg, color, strokeWidth, gapDegree, gapPosition), pathString = _getPathStyles.pathString, pathStyle = _getPathStyles.pathStyle;
        stackPtg += ptg;
        var pathProps = {
          key: index2,
          d: pathString,
          stroke,
          "stroke-linecap": strokeLinecap,
          "stroke-width": strokeWidth,
          opacity: ptg === 0 ? 0 : 1,
          "fill-opacity": "0",
          class: "".concat(prefixCls2, "-circle-path"),
          style: pathStyle
        };
        return createVNode("path", _objectSpread2({
          "ref": function ref2(c) {
            return _this.paths[index2] = c;
          }
        }, pathProps), null);
      });
    }
  },
  render: function render112() {
    var _a = this.$props, prefixCls2 = _a.prefixCls, strokeWidth = _a.strokeWidth, trailWidth = _a.trailWidth, gapDegree = _a.gapDegree, gapPosition = _a.gapPosition, trailColor = _a.trailColor, strokeLinecap = _a.strokeLinecap, strokeColor = _a.strokeColor, restProps = __rest$h(_a, ["prefixCls", "strokeWidth", "trailWidth", "gapDegree", "gapPosition", "trailColor", "strokeLinecap", "strokeColor"]);
    var _getPathStyles2 = getPathStyles(0, 100, trailColor, strokeWidth, gapDegree, gapPosition), pathString = _getPathStyles2.pathString, pathStyle = _getPathStyles2.pathStyle;
    delete restProps.percent;
    var strokeColorList = toArray$1(strokeColor);
    var gradient = strokeColorList.find(function(color) {
      return Object.prototype.toString.call(color) === "[object Object]";
    });
    var pathFirst = {
      d: pathString,
      stroke: trailColor,
      "stroke-linecap": strokeLinecap,
      "stroke-width": trailWidth || strokeWidth,
      "fill-opacity": "0",
      class: "".concat(prefixCls2, "-circle-trail"),
      style: pathStyle
    };
    return createVNode("svg", _objectSpread2({
      "class": "".concat(prefixCls2, "-circle"),
      "viewBox": "0 0 100 100"
    }, restProps), [gradient && createVNode("defs", null, [createVNode("linearGradient", {
      "id": "".concat(prefixCls2, "-gradient-").concat(this.gradientId),
      "x1": "100%",
      "y1": "0%",
      "x2": "0%",
      "y2": "0%"
    }, [Object.keys(gradient).sort(function(a, b) {
      return stripPercentToNumber(a) - stripPercentToNumber(b);
    }).map(function(key2, index2) {
      return createVNode("stop", {
        "key": index2,
        "offset": key2,
        "stop-color": gradient[key2]
      }, null);
    })])]), createVNode("path", pathFirst, null), this.getStokeList().reverse()]);
  }
});
var VCCircle = enhancer(Circle$2);
var ProgressStatuses = tuple("normal", "exception", "active", "success");
var ProgressType = PropsTypes.oneOf(tuple("line", "circle", "dashboard"));
var ProgressSize = PropsTypes.oneOf(tuple("default", "small"));
var ProgressProps = {
  prefixCls: PropsTypes.string,
  type: ProgressType,
  percent: PropsTypes.number,
  successPercent: PropsTypes.number,
  format: PropsTypes.func,
  status: PropsTypes.oneOf(ProgressStatuses),
  showInfo: PropsTypes.looseBool,
  strokeWidth: PropsTypes.number,
  strokeLinecap: PropsTypes.oneOf(["butt", "round", "square"]),
  strokeColor: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
  trailColor: PropsTypes.string,
  width: PropsTypes.number,
  gapDegree: PropsTypes.number,
  gapPosition: PropsTypes.oneOf(tuple("top", "bottom", "left", "right")),
  size: ProgressSize
};
var CircleProps = _extends(_extends({}, ProgressProps), {
  progressStatus: PropsTypes.string
});
var statusColorMap = {
  normal: "#108ee9",
  exception: "#ff5500",
  success: "#87d068"
};
function getPercentage(_ref) {
  var percent = _ref.percent, successPercent = _ref.successPercent;
  var ptg = validProgress(percent);
  if (!successPercent)
    return ptg;
  var successPtg = validProgress(successPercent);
  return [successPercent, validProgress(ptg - successPtg)];
}
function getStrokeColor(_ref2) {
  var progressStatus = _ref2.progressStatus, successPercent = _ref2.successPercent, strokeColor = _ref2.strokeColor;
  var color = strokeColor || statusColorMap[progressStatus];
  if (!successPercent)
    return color;
  return [statusColorMap.success, color];
}
var Circle = defineComponent({
  props: CircleProps,
  setup: function setup116(props2, _ref3) {
    var slots = _ref3.slots;
    return function() {
      var _wrapperClassName;
      var prefixCls2 = props2.prefixCls, width = props2.width, strokeWidth = props2.strokeWidth, trailColor = props2.trailColor, strokeLinecap = props2.strokeLinecap, gapPosition = props2.gapPosition, gapDegree = props2.gapDegree, type2 = props2.type;
      var circleSize = width || 120;
      var circleStyle = {
        width: typeof circleSize === "number" ? "".concat(circleSize, "px") : circleSize,
        height: typeof circleSize === "number" ? "".concat(circleSize, "px") : circleSize,
        fontSize: "".concat(circleSize * 0.15 + 6, "px")
      };
      var circleWidth = strokeWidth || 6;
      var gapPos = gapPosition || type2 === "dashboard" && "bottom" || "top";
      var gapDeg = gapDegree || type2 === "dashboard" && 75;
      var strokeColor = getStrokeColor(props2);
      var isGradient = Object.prototype.toString.call(strokeColor) === "[object Object]";
      var wrapperClassName = (_wrapperClassName = {}, _defineProperty(_wrapperClassName, "".concat(prefixCls2, "-inner"), true), _defineProperty(_wrapperClassName, "".concat(prefixCls2, "-circle-gradient"), isGradient), _wrapperClassName);
      return createVNode("div", {
        "class": wrapperClassName,
        "style": circleStyle
      }, [createVNode(VCCircle, {
        "percent": getPercentage(props2),
        "strokeWidth": circleWidth,
        "trailWidth": circleWidth,
        "strokeColor": strokeColor,
        "strokeLinecap": strokeLinecap,
        "trailColor": trailColor,
        "prefixCls": prefixCls2,
        "gapDegree": gapDeg,
        "gapPosition": gapPos
      }, null), slots === null || slots === void 0 ? void 0 : slots.default()]);
    };
  }
});
var Circle$1 = Circle;
var Progress$1 = defineComponent({
  name: "AProgress",
  props: initDefaultProps$1(ProgressProps, {
    type: "line",
    percent: 0,
    showInfo: true,
    trailColor: null,
    size: "default",
    gapDegree: 0,
    strokeLinecap: "round"
  }),
  setup: function setup117() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    getPercentNumber: function getPercentNumber() {
      var _this$$props = this.$props, successPercent = _this$$props.successPercent, _this$$props$percent = _this$$props.percent, percent = _this$$props$percent === void 0 ? 0 : _this$$props$percent;
      return parseInt(successPercent !== void 0 ? successPercent.toString() : percent.toString(), 10);
    },
    getProgressStatus: function getProgressStatus() {
      var status = this.$props.status;
      if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {
        return "success";
      }
      return status || "normal";
    },
    renderProcessInfo: function renderProcessInfo(prefixCls2, progressStatus) {
      var _this$$props2 = this.$props, showInfo = _this$$props2.showInfo, format3 = _this$$props2.format, type2 = _this$$props2.type, percent = _this$$props2.percent, successPercent = _this$$props2.successPercent;
      if (!showInfo)
        return null;
      var text;
      var textFormatter = format3 || this.$slots.format || function(percentNumber) {
        return "".concat(percentNumber, "%");
      };
      var isLineType = type2 === "line";
      if (format3 || this.$slots.format || progressStatus !== "exception" && progressStatus !== "success") {
        text = textFormatter(validProgress(percent), validProgress(successPercent));
      } else if (progressStatus === "exception") {
        text = isLineType ? createVNode(CloseCircleFilled, null, null) : createVNode(CloseOutlined, null, null);
      } else if (progressStatus === "success") {
        text = isLineType ? createVNode(CheckCircleFilled, null, null) : createVNode(CheckOutlined, null, null);
      }
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-text"),
        "title": typeof text === "string" ? text : void 0
      }, [text]);
    }
  },
  render: function render113() {
    var _classNames;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, size = props2.size, type2 = props2.type, showInfo = props2.showInfo;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("progress", customizePrefixCls);
    var progressStatus = this.getProgressStatus();
    var progressInfo = this.renderProcessInfo(prefixCls2, progressStatus);
    var progress;
    if (type2 === "line") {
      var lineProps = _extends(_extends({}, props2), {
        prefixCls: prefixCls2
      });
      progress = createVNode(Line$1, lineProps, {
        default: function _default8() {
          return [progressInfo];
        }
      });
    } else if (type2 === "circle" || type2 === "dashboard") {
      var circleProps = _extends(_extends({}, props2), {
        prefixCls: prefixCls2,
        progressStatus
      });
      progress = createVNode(Circle$1, circleProps, {
        default: function _default8() {
          return [progressInfo];
        }
      });
    }
    var classString = classNames(prefixCls2, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-").concat(type2 === "dashboard" && "circle" || type2), true), _defineProperty(_classNames, "".concat(prefixCls2, "-status-").concat(progressStatus), true), _defineProperty(_classNames, "".concat(prefixCls2, "-show-info"), showInfo), _defineProperty(_classNames, "".concat(prefixCls2, "-").concat(size), size), _classNames));
    var progressProps = {
      class: classString
    };
    return createVNode("div", progressProps, [progress]);
  }
});
var Progress = withInstall(Progress$1);
function getScroll(w) {
  var ret = w.pageXOffset;
  var method = "scrollLeft";
  if (typeof ret !== "number") {
    var d = w.document;
    ret = d.documentElement[method];
    if (typeof ret !== "number") {
      ret = d.body[method];
    }
  }
  return ret;
}
function getClientPosition(elem) {
  var x;
  var y;
  var doc = elem.ownerDocument;
  var body = doc.body;
  var docElem = doc && doc.documentElement;
  var box = elem.getBoundingClientRect();
  x = box.left;
  y = box.top;
  x -= docElem.clientLeft || body.clientLeft || 0;
  y -= docElem.clientTop || body.clientTop || 0;
  return {
    left: x,
    top: y
  };
}
function getOffsetLeft(el) {
  var pos = getClientPosition(el);
  var doc = el.ownerDocument;
  var w = doc.defaultView || doc.parentWindow;
  pos.left += getScroll(w);
  return pos.left;
}
var starProps = {
  value: PropsTypes.number,
  index: PropsTypes.number,
  prefixCls: PropsTypes.string,
  allowHalf: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  character: PropsTypes.any,
  characterRender: PropsTypes.func,
  focused: PropsTypes.looseBool,
  count: PropsTypes.number,
  onClick: PropsTypes.func,
  onHover: PropsTypes.func
};
var Star = defineComponent({
  name: "Star",
  inheritAttrs: false,
  props: starProps,
  emits: ["hover", "click"],
  setup: function setup118(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var onHover = function onHover2(e) {
      var index2 = props2.index;
      emit("hover", e, index2);
    };
    var onClick7 = function onClick8(e) {
      var index2 = props2.index;
      emit("click", e, index2);
    };
    var onKeyDown14 = function onKeyDown15(e) {
      var index2 = props2.index;
      if (e.keyCode === 13) {
        emit("click", e, index2);
      }
    };
    var cls = computed(function() {
      var prefixCls2 = props2.prefixCls, index2 = props2.index, value26 = props2.value, allowHalf = props2.allowHalf, focused = props2.focused;
      var starValue = index2 + 1;
      var className = prefixCls2;
      if (value26 === 0 && index2 === 0 && focused) {
        className += " ".concat(prefixCls2, "-focused");
      } else if (allowHalf && value26 + 0.5 >= starValue && value26 < starValue) {
        className += " ".concat(prefixCls2, "-half ").concat(prefixCls2, "-active");
        if (focused) {
          className += " ".concat(prefixCls2, "-focused");
        }
      } else {
        className += starValue <= value26 ? " ".concat(prefixCls2, "-full") : " ".concat(prefixCls2, "-zero");
        if (starValue === value26 && focused) {
          className += " ".concat(prefixCls2, "-focused");
        }
      }
      return className;
    });
    return function() {
      var disabled = props2.disabled, prefixCls2 = props2.prefixCls, characterRender = props2.characterRender, index2 = props2.index, count = props2.count, value26 = props2.value;
      var character = getPropsSlot(slots, props2, "character");
      var star = createVNode("li", {
        "class": cls.value
      }, [createVNode("div", {
        "onClick": disabled ? null : onClick7,
        "onKeydown": disabled ? null : onKeyDown14,
        "onMousemove": disabled ? null : onHover,
        "role": "radio",
        "aria-checked": value26 > index2 ? "true" : "false",
        "aria-posinset": index2 + 1,
        "aria-setsize": count,
        "tabindex": disabled ? -1 : 0
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-first")
      }, [character]), createVNode("div", {
        "class": "".concat(prefixCls2, "-second")
      }, [character])])]);
      if (characterRender) {
        star = characterRender(star, props2);
      }
      return star;
    };
  }
});
var useRef = function useRef2() {
  var refs = ref({});
  var setRef = function setRef2(el, key2) {
    refs.value[key2] = el;
  };
  onBeforeUpdate(function() {
    refs.value = {};
  });
  return [setRef, refs];
};
var rateProps = {
  prefixCls: PropsTypes.string,
  count: PropsTypes.number,
  value: PropsTypes.number,
  allowHalf: PropsTypes.looseBool,
  allowClear: PropsTypes.looseBool,
  tooltips: PropsTypes.arrayOf(PropsTypes.string),
  disabled: PropsTypes.looseBool,
  character: PropsTypes.any,
  autofocus: PropsTypes.looseBool,
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  direction: PropsTypes.string
};
var Rate = defineComponent({
  name: "ARate",
  inheritAttrs: false,
  props: initDefaultProps$2(rateProps, {
    value: 0,
    count: 5,
    allowHalf: false,
    allowClear: true,
    prefixCls: "ant-rate",
    tabindex: 0,
    direction: "ltr"
  }),
  emits: ["hoverChange", "update:value", "change", "focus", "blur", "keydown"],
  setup: function setup119(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit, expose = _ref.expose;
    var _useConfigInject = useConfigInject("rate", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var rateRef = ref();
    var _useRef = useRef(), _useRef2 = _slicedToArray(_useRef, 2), setRef = _useRef2[0], starRefs = _useRef2[1];
    var state = reactive({
      value: props2.value,
      focused: false,
      cleanedValue: null,
      hoverValue: void 0
    });
    watch(function() {
      return props2.value;
    }, function() {
      state.value = props2.value;
    });
    var getStarDOM = function getStarDOM2(index2) {
      return findDOMNode(starRefs.value[index2]);
    };
    var getStarValue = function getStarValue2(index2, x) {
      var reverse = direction.value === "rtl";
      var value26 = index2 + 1;
      if (props2.allowHalf) {
        var starEle = getStarDOM(index2);
        var leftDis = getOffsetLeft(starEle);
        var width = starEle.clientWidth;
        if (reverse && x - leftDis > width / 2) {
          value26 -= 0.5;
        } else if (!reverse && x - leftDis < width / 2) {
          value26 -= 0.5;
        }
      }
      return value26;
    };
    var changeValue = function changeValue2(value26) {
      if (props2.value === void 0) {
        state.value = value26;
      }
      emit("update:value", value26);
      emit("change", value26);
    };
    var onHover = function onHover2(e, index2) {
      var hoverValue2 = getStarValue(index2, e.pageX);
      if (hoverValue2 !== state.cleanedValue) {
        state.hoverValue = hoverValue2;
        state.cleanedValue = null;
      }
      emit("hoverChange", hoverValue2);
    };
    var onMouseLeave5 = function onMouseLeave6() {
      state.hoverValue = void 0;
      state.cleanedValue = null;
      emit("hoverChange", void 0);
    };
    var onClick7 = function onClick8(event, index2) {
      var allowClear = props2.allowClear;
      var newValue = getStarValue(index2, event.pageX);
      var isReset = false;
      if (allowClear) {
        isReset = newValue === state.value;
      }
      onMouseLeave5();
      changeValue(isReset ? 0 : newValue);
      state.cleanedValue = isReset ? newValue : null;
    };
    var onFocus6 = function onFocus7() {
      state.focused = true;
      emit("focus");
    };
    var onBlur7 = function onBlur8() {
      state.focused = false;
      emit("blur");
    };
    var onKeyDown14 = function onKeyDown15(event) {
      var keyCode = event.keyCode;
      var count = props2.count, allowHalf = props2.allowHalf;
      var reverse = direction.value === "rtl";
      if (keyCode === KeyCode$2.RIGHT && state.value < count && !reverse) {
        if (allowHalf) {
          state.value += 0.5;
        } else {
          state.value += 1;
        }
        changeValue(state.value);
        event.preventDefault();
      } else if (keyCode === KeyCode$2.LEFT && state.value > 0 && !reverse) {
        if (allowHalf) {
          state.value -= 0.5;
        } else {
          state.value -= 1;
        }
        changeValue(state.value);
        event.preventDefault();
      } else if (keyCode === KeyCode$2.RIGHT && state.value > 0 && reverse) {
        if (allowHalf) {
          state.value -= 0.5;
        } else {
          state.value -= 1;
        }
        changeValue(state.value);
        event.preventDefault();
      } else if (keyCode === KeyCode$2.LEFT && state.value < count && reverse) {
        if (allowHalf) {
          state.value += 0.5;
        } else {
          state.value += 1;
        }
        changeValue(state.value);
        event.preventDefault();
      }
      emit("keydown", event);
    };
    var focus27 = function focus28() {
      if (!props2.disabled) {
        rateRef.value.focus();
      }
    };
    var blur24 = function blur25() {
      if (!props2.disabled) {
        rateRef.value.blur();
      }
    };
    expose({
      focus: focus27,
      blur: blur24
    });
    onMounted(function() {
      var autofocus = props2.autofocus, disabled = props2.disabled;
      if (autofocus && !disabled) {
        focus27();
      }
    });
    var characterRender = function characterRender2(node, _ref2) {
      var index2 = _ref2.index;
      var tooltips = props2.tooltips;
      if (!tooltips)
        return node;
      return createVNode(Tooltip, {
        "title": tooltips[index2]
      }, {
        default: function _default8() {
          return [node];
        }
      });
    };
    var character = getPropsSlot(slots, props2, "character") || createVNode(StarFilled, null, null);
    return function() {
      var count = props2.count, allowHalf = props2.allowHalf, disabled = props2.disabled, tabindex = props2.tabindex;
      var className = attrs.class, style3 = attrs.style;
      var stars = [];
      var disabledClass = disabled ? "".concat(prefixCls2.value, "-disabled") : "";
      var _loop = function _loop2(index3) {
        stars.push(createVNode(Star, {
          "ref": function ref2(r) {
            return setRef(r, index3);
          },
          "key": index3,
          "index": index3,
          "count": count,
          "disabled": disabled,
          "prefixCls": "".concat(prefixCls2.value, "-star"),
          "allowHalf": allowHalf,
          "value": state.hoverValue === void 0 ? state.value : state.hoverValue,
          "onClick": onClick7,
          "onHover": onHover,
          "character": character,
          "characterRender": characterRender,
          "focused": state.focused
        }, null));
      };
      for (var index2 = 0; index2 < count; index2++) {
        _loop(index2);
      }
      var rateClassName = classNames(prefixCls2.value, disabledClass, className, _defineProperty({}, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"));
      return createVNode("ul", _objectSpread2(_objectSpread2({}, attrs), {}, {
        "class": rateClassName,
        "style": style3,
        "onMouseleave": disabled ? null : onMouseLeave5,
        "tabindex": disabled ? -1 : tabindex,
        "onFocus": disabled ? null : onFocus6,
        "onBlur": disabled ? null : onBlur7,
        "onKeydown": disabled ? null : onKeyDown14,
        "ref": rateRef,
        "role": "radiogroup"
      }), [stars]);
    };
  }
});
var index$5 = withInstall(Rate);
var NoFound = function NoFound2() {
  return createVNode("svg", {
    "width": "252",
    "height": "294"
  }, [createVNode("defs", null, [createVNode("path", {
    "d": "M0 .387h251.772v251.772H0z"
  }, null)]), createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("g", {
    "transform": "translate(0 .012)"
  }, [createVNode("mask", {
    "fill": "#fff"
  }, null), createVNode("path", {
    "d": "M0 127.32v-2.095C0 56.279 55.892.387 124.838.387h2.096c68.946 0 124.838 55.892 124.838 124.838v2.096c0 68.946-55.892 124.838-124.838 124.838h-2.096C55.892 252.16 0 196.267 0 127.321",
    "fill": "#E4EBF7",
    "mask": "url(#b)"
  }, null)]), createVNode("path", {
    "d": "M39.755 130.84a8.276 8.276 0 1 1-16.468-1.66 8.276 8.276 0 0 1 16.468 1.66",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M36.975 134.297l10.482 5.943M48.373 146.508l-12.648 10.788",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M39.875 159.352a5.667 5.667 0 1 1-11.277-1.136 5.667 5.667 0 0 1 11.277 1.136M57.588 143.247a5.708 5.708 0 1 1-11.358-1.145 5.708 5.708 0 0 1 11.358 1.145M99.018 26.875l29.82-.014a4.587 4.587 0 1 0-.003-9.175l-29.82.013a4.587 4.587 0 1 0 .003 9.176M110.424 45.211l29.82-.013a4.588 4.588 0 0 0-.004-9.175l-29.82.013a4.587 4.587 0 1 0 .004 9.175",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M112.798 26.861v-.002l15.784-.006a4.588 4.588 0 1 0 .003 9.175l-15.783.007v-.002a4.586 4.586 0 0 0-.004-9.172M184.523 135.668c-.553 5.485-5.447 9.483-10.931 8.93-5.485-.553-9.483-5.448-8.93-10.932.552-5.485 5.447-9.483 10.932-8.93 5.485.553 9.483 5.447 8.93 10.932",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M179.26 141.75l12.64 7.167M193.006 156.477l-15.255 13.011",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M184.668 170.057a6.835 6.835 0 1 1-13.6-1.372 6.835 6.835 0 0 1 13.6 1.372M203.34 153.325a6.885 6.885 0 1 1-13.7-1.382 6.885 6.885 0 0 1 13.7 1.382",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M151.931 192.324a2.222 2.222 0 1 1-4.444 0 2.222 2.222 0 0 1 4.444 0zM225.27 116.056a2.222 2.222 0 1 1-4.445 0 2.222 2.222 0 0 1 4.444 0zM216.38 151.08a2.223 2.223 0 1 1-4.446-.001 2.223 2.223 0 0 1 4.446 0zM176.917 107.636a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM195.291 92.165a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM202.058 180.711a2.223 2.223 0 1 1-4.446 0 2.223 2.223 0 0 1 4.446 0z",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "stroke": "#FFF",
    "stroke-width": "2",
    "d": "M214.404 153.302l-1.912 20.184-10.928 5.99M173.661 174.792l-6.356 9.814h-11.36l-4.508 6.484M174.941 125.168v-15.804M220.824 117.25l-12.84 7.901-15.31-7.902V94.39"
  }, null), createVNode("path", {
    "d": "M166.588 65.936h-3.951a4.756 4.756 0 0 1-4.743-4.742 4.756 4.756 0 0 1 4.743-4.743h3.951a4.756 4.756 0 0 1 4.743 4.743 4.756 4.756 0 0 1-4.743 4.742",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M174.823 30.03c0-16.281 13.198-29.48 29.48-29.48 16.28 0 29.48 13.199 29.48 29.48 0 16.28-13.2 29.48-29.48 29.48-16.282 0-29.48-13.2-29.48-29.48",
    "fill": "#1890FF"
  }, null), createVNode("path", {
    "d": "M205.952 38.387c.5.5.785 1.142.785 1.928s-.286 1.465-.785 1.964c-.572.5-1.214.75-2 .75-.785 0-1.429-.285-1.929-.785-.572-.5-.82-1.143-.82-1.929s.248-1.428.82-1.928c.5-.5 1.144-.75 1.93-.75.785 0 1.462.25 1.999.75m4.285-19.463c1.428 1.249 2.143 2.963 2.143 5.142 0 1.712-.427 3.13-1.219 4.25-.067.096-.137.18-.218.265-.416.429-1.41 1.346-2.956 2.699a5.07 5.07 0 0 0-1.428 1.75 5.207 5.207 0 0 0-.536 2.357v.5h-4.107v-.5c0-1.357.215-2.536.714-3.5.464-.964 1.857-2.464 4.178-4.536l.43-.5c.643-.785.964-1.643.964-2.535 0-1.18-.358-2.108-1-2.785-.678-.68-1.643-1.001-2.858-1.001-1.536 0-2.642.464-3.357 1.43-.37.5-.621 1.135-.76 1.904a1.999 1.999 0 0 1-1.971 1.63h-.004c-1.277 0-2.257-1.183-1.98-2.43.337-1.518 1.02-2.78 2.073-3.784 1.536-1.5 3.607-2.25 6.25-2.25 2.32 0 4.214.607 5.642 1.894",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M52.04 76.131s21.81 5.36 27.307 15.945c5.575 10.74-6.352 9.26-15.73 4.935-10.86-5.008-24.7-11.822-11.577-20.88",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M90.483 67.504l-.449 2.893c-.753.49-4.748-2.663-4.748-2.663l-1.645.748-1.346-5.684s6.815-4.589 8.917-5.018c2.452-.501 9.884.94 10.7 2.278 0 0 1.32.486-2.227.69-3.548.203-5.043.447-6.79 3.132-1.747 2.686-2.412 3.624-2.412 3.624",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M128.055 111.367c-2.627-7.724-6.15-13.18-8.917-15.478-3.5-2.906-9.34-2.225-11.366-4.187-1.27-1.231-3.215-1.197-3.215-1.197s-14.98-3.158-16.828-3.479c-2.37-.41-2.124-.714-6.054-1.405-1.57-1.907-2.917-1.122-2.917-1.122l-7.11-1.383c-.853-1.472-2.423-1.023-2.423-1.023l-2.468-.897c-1.645 9.976-7.74 13.796-7.74 13.796 1.795 1.122 15.703 8.3 15.703 8.3l5.107 37.11s-3.321 5.694 1.346 9.109c0 0 19.883-3.743 34.921-.329 0 0 3.047-2.546.972-8.806.523-3.01 1.394-8.263 1.736-11.622.385.772 2.019 1.918 3.14 3.477 0 0 9.407-7.365 11.052-14.012-.832-.723-1.598-1.585-2.267-2.453-.567-.736-.358-2.056-.765-2.717-.669-1.084-1.804-1.378-1.907-1.682",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M101.09 289.998s4.295 2.041 7.354 1.021c2.821-.94 4.53.668 7.08 1.178 2.55.51 6.874 1.1 11.686-1.26-.103-5.51-6.889-3.98-11.96-6.713-2.563-1.38-3.784-4.722-3.598-8.799h-9.402s-1.392 10.52-1.16 14.573",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M101.067 289.826s2.428 1.271 6.759.653c3.058-.437 3.712.481 7.423 1.031 3.712.55 10.724-.069 11.823-.894.413 1.1-.343 2.063-.343 2.063s-1.512.603-4.812.824c-2.03.136-5.8.291-7.607-.503-1.787-1.375-5.247-1.903-5.728-.241-3.918.95-7.355-.286-7.355-.286l-.16-2.647z",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M108.341 276.044h3.094s-.103 6.702 4.536 8.558c-4.64.618-8.558-2.303-7.63-8.558",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M57.542 272.401s-2.107 7.416-4.485 12.306c-1.798 3.695-4.225 7.492 5.465 7.492 6.648 0 8.953-.48 7.423-6.599-1.53-6.12.266-13.199.266-13.199h-8.669z",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M51.476 289.793s2.097 1.169 6.633 1.169c6.083 0 8.249-1.65 8.249-1.65s.602 1.114-.619 2.165c-.993.855-3.597 1.591-7.39 1.546-4.145-.048-5.832-.566-6.736-1.168-.825-.55-.687-1.58-.137-2.062",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M58.419 274.304s.033 1.519-.314 2.93c-.349 1.42-1.078 3.104-1.13 4.139-.058 1.151 4.537 1.58 5.155.034.62-1.547 1.294-6.427 1.913-7.252.619-.825-4.903-2.119-5.624.15",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M99.66 278.514l13.378.092s1.298-54.52 1.853-64.403c.554-9.882 3.776-43.364 1.002-63.128l-12.547-.644-22.849.78s-.434 3.966-1.195 9.976c-.063.496-.682.843-.749 1.365-.075.585.423 1.354.32 1.966-2.364 14.08-6.377 33.104-8.744 46.677-.116.666-1.234 1.009-1.458 2.691-.04.302.211 1.525.112 1.795-6.873 18.744-10.949 47.842-14.277 61.885l14.607-.014s2.197-8.57 4.03-16.97c2.811-12.886 23.111-85.01 23.111-85.01l3.016-.521 1.043 46.35s-.224 1.234.337 2.02c.56.785-.56 1.123-.392 2.244l.392 1.794s-.449 7.178-.898 11.89c-.448 4.71-.092 39.165-.092 39.165",
    "fill": "#7BB2F9"
  }, null), createVNode("path", {
    "d": "M76.085 221.626c1.153.094 4.038-2.019 6.955-4.935M106.36 225.142s2.774-1.11 6.103-3.883",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M107.275 222.1s2.773-1.11 6.102-3.884",
    "stroke": "#648BD8",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M74.74 224.767s2.622-.591 6.505-3.365M86.03 151.634c-.27 3.106.3 8.525-4.336 9.123M103.625 149.88s.11 14.012-1.293 15.065c-2.219 1.664-2.99 1.944-2.99 1.944M99.79 150.438s.035 12.88-1.196 24.377M93.673 175.911s7.212-1.664 9.431-1.664M74.31 205.861a212.013 212.013 0 0 1-.979 4.56s-1.458 1.832-1.009 3.776c.449 1.944-.947 2.045-4.985 15.355-1.696 5.59-4.49 18.591-6.348 27.597l-.231 1.12M75.689 197.807a320.934 320.934 0 0 1-.882 4.754M82.591 152.233L81.395 162.7s-1.097.15-.5 2.244c.113 1.346-2.674 15.775-5.18 30.43M56.12 274.418h13.31",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M116.241 148.22s-17.047-3.104-35.893.2c.158 2.514-.003 4.15-.003 4.15s14.687-2.818 35.67-.312c.252-2.355.226-4.038.226-4.038",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M106.322 151.165l.003-4.911a.81.81 0 0 0-.778-.815c-2.44-.091-5.066-.108-7.836-.014a.818.818 0 0 0-.789.815l-.003 4.906a.81.81 0 0 0 .831.813c2.385-.06 4.973-.064 7.73.017a.815.815 0 0 0 .842-.81",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M105.207 150.233l.002-3.076a.642.642 0 0 0-.619-.646 94.321 94.321 0 0 0-5.866-.01.65.65 0 0 0-.63.647v3.072a.64.64 0 0 0 .654.644 121.12 121.12 0 0 1 5.794.011c.362.01.665-.28.665-.642",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M100.263 275.415h12.338M101.436 270.53c.006 3.387.042 5.79.111 6.506M101.451 264.548a915.75 915.75 0 0 0-.015 4.337M100.986 174.965l.898 44.642s.673 1.57-.225 2.692c-.897 1.122 2.468.673.898 2.243-1.57 1.57.897 1.122 0 3.365-.596 1.489-.994 21.1-1.096 35.146",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M46.876 83.427s-.516 6.045 7.223 5.552c11.2-.712 9.218-9.345 31.54-21.655-.786-2.708-2.447-4.744-2.447-4.744s-11.068 3.11-22.584 8.046c-6.766 2.9-13.395 6.352-13.732 12.801M104.46 91.057l.941-5.372-8.884-11.43-5.037 5.372-1.74 7.834a.321.321 0 0 0 .108.32c.965.8 6.5 5.013 14.347 3.544a.332.332 0 0 0 .264-.268",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M93.942 79.387s-4.533-2.853-2.432-6.855c1.623-3.09 4.513 1.133 4.513 1.133s.52-3.642 3.121-3.642c.52-1.04 1.561-4.162 1.561-4.162s11.445 2.601 13.526 3.121c0 5.203-2.304 19.424-7.84 19.861-8.892.703-12.449-9.456-12.449-9.456",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M113.874 73.446c2.601-2.081 3.47-9.722 3.47-9.722s-2.479-.49-6.64-2.05c-4.683-2.081-12.798-4.747-17.48.976-9.668 3.223-2.05 19.823-2.05 19.823l2.713-3.021s-3.935-3.287-2.08-6.243c2.17-3.462 3.92 1.073 3.92 1.073s.637-2.387 3.581-3.342c.355-.71 1.036-2.674 1.432-3.85a1.073 1.073 0 0 1 1.263-.704c2.4.558 8.677 2.019 11.356 2.662.522.125.871.615.82 1.15l-.305 3.248z",
    "fill": "#520038"
  }, null), createVNode("path", {
    "d": "M104.977 76.064c-.103.61-.582 1.038-1.07.956-.489-.083-.801-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.644.698 1.254M112.132 77.694c-.103.61-.582 1.038-1.07.956-.488-.083-.8-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.643.698 1.254",
    "fill": "#552950"
  }, null), createVNode("path", {
    "stroke": "#DB836E",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "d": "M110.13 74.84l-.896 1.61-.298 4.357h-2.228"
  }, null), createVNode("path", {
    "d": "M110.846 74.481s1.79-.716 2.506.537",
    "stroke": "#5C2552",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M92.386 74.282s.477-1.114 1.113-.716c.637.398 1.274 1.433.558 1.99-.717.556.159 1.67.159 1.67",
    "stroke": "#DB836E",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M103.287 72.93s1.83 1.113 4.137.954",
    "stroke": "#5C2552",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M103.685 81.762s2.227 1.193 4.376 1.193M104.64 84.308s.954.398 1.511.318M94.693 81.205s2.308 7.4 10.424 7.639",
    "stroke": "#DB836E",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M81.45 89.384s.45 5.647-4.935 12.787M69 82.654s-.726 9.282-8.204 14.206",
    "stroke": "#E4EBF7",
    "stroke-width": "1.101",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M129.405 122.865s-5.272 7.403-9.422 10.768",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M119.306 107.329s.452 4.366-2.127 32.062",
    "stroke": "#E4EBF7",
    "stroke-width": "1.101",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M150.028 151.232h-49.837a1.01 1.01 0 0 1-1.01-1.01v-31.688c0-.557.452-1.01 1.01-1.01h49.837c.558 0 1.01.453 1.01 1.01v31.688a1.01 1.01 0 0 1-1.01 1.01",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "d": "M150.29 151.232h-19.863v-33.707h20.784v32.786a.92.92 0 0 1-.92.92",
    "fill": "#F4D19D"
  }, null), createVNode("path", {
    "d": "M123.554 127.896H92.917a.518.518 0 0 1-.425-.816l6.38-9.113c.193-.277.51-.442.85-.442h31.092l-7.26 10.371z",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "fill": "#CC9B6E",
    "d": "M123.689 128.447H99.25v-.519h24.169l7.183-10.26.424.298z"
  }, null), createVNode("path", {
    "d": "M158.298 127.896h-18.669a2.073 2.073 0 0 1-1.659-.83l-7.156-9.541h19.965c.49 0 .95.23 1.244.622l6.69 8.92a.519.519 0 0 1-.415.83",
    "fill": "#F4D19D"
  }, null), createVNode("path", {
    "fill": "#CC9B6E",
    "d": "M157.847 128.479h-19.384l-7.857-10.475.415-.31 7.7 10.266h19.126zM130.554 150.685l-.032-8.177.519-.002.032 8.177z"
  }, null), createVNode("path", {
    "fill": "#CC9B6E",
    "d": "M130.511 139.783l-.08-21.414.519-.002.08 21.414zM111.876 140.932l-.498-.143 1.479-5.167.498.143zM108.437 141.06l-2.679-2.935 2.665-3.434.41.318-2.397 3.089 2.384 2.612zM116.607 141.06l-.383-.35 2.383-2.612-2.397-3.089.41-.318 2.665 3.434z"
  }, null), createVNode("path", {
    "d": "M154.316 131.892l-3.114-1.96.038 3.514-1.043.092c-1.682.115-3.634.23-4.789.23-1.902 0-2.693 2.258 2.23 2.648l-2.645-.596s-2.168 1.317.504 2.3c0 0-1.58 1.217.561 2.58-.584 3.504 5.247 4.058 7.122 3.59 1.876-.47 4.233-2.359 4.487-5.16.28-3.085-.89-5.432-3.35-7.238",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M153.686 133.577s-6.522.47-8.36.372c-1.836-.098-1.904 2.19 2.359 2.264 3.739.15 5.451-.044 5.451-.044",
    "stroke": "#DB836E",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M145.16 135.877c-1.85 1.346.561 2.355.561 2.355s3.478.898 6.73.617",
    "stroke": "#DB836E",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M151.89 141.71s-6.28.111-6.73-2.132c-.223-1.346.45-1.402.45-1.402M146.114 140.868s-1.103 3.16 5.44 3.533M151.202 129.932v3.477M52.838 89.286c3.533-.337 8.423-1.248 13.582-7.754",
    "stroke": "#DB836E",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M168.567 248.318a6.647 6.647 0 0 1-6.647-6.647v-66.466a6.647 6.647 0 1 1 13.294 0v66.466a6.647 6.647 0 0 1-6.647 6.647",
    "fill": "#5BA02E"
  }, null), createVNode("path", {
    "d": "M176.543 247.653a6.647 6.647 0 0 1-6.646-6.647v-33.232a6.647 6.647 0 1 1 13.293 0v33.232a6.647 6.647 0 0 1-6.647 6.647",
    "fill": "#92C110"
  }, null), createVNode("path", {
    "d": "M186.443 293.613H158.92a3.187 3.187 0 0 1-3.187-3.187v-46.134a3.187 3.187 0 0 1 3.187-3.187h27.524a3.187 3.187 0 0 1 3.187 3.187v46.134a3.187 3.187 0 0 1-3.187 3.187",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "d": "M88.979 89.48s7.776 5.384 16.6 2.842",
    "stroke": "#E4EBF7",
    "stroke-width": "1.101",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null)])]);
};
var noFound = NoFound;
var ServerError = function ServerError2() {
  return createVNode("svg", {
    "width": "254",
    "height": "294"
  }, [createVNode("defs", null, [createVNode("path", {
    "d": "M0 .335h253.49v253.49H0z"
  }, null), createVNode("path", {
    "d": "M0 293.665h253.49V.401H0z"
  }, null)]), createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("g", {
    "transform": "translate(0 .067)"
  }, [createVNode("mask", {
    "fill": "#fff"
  }, null), createVNode("path", {
    "d": "M0 128.134v-2.11C0 56.608 56.273.334 125.69.334h2.11c69.416 0 125.69 56.274 125.69 125.69v2.11c0 69.417-56.274 125.69-125.69 125.69h-2.11C56.273 253.824 0 197.551 0 128.134",
    "fill": "#E4EBF7",
    "mask": "url(#b)"
  }, null)]), createVNode("path", {
    "d": "M39.989 132.108a8.332 8.332 0 1 1-16.581-1.671 8.332 8.332 0 0 1 16.58 1.671",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M37.19 135.59l10.553 5.983M48.665 147.884l-12.734 10.861",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M40.11 160.816a5.706 5.706 0 1 1-11.354-1.145 5.706 5.706 0 0 1 11.354 1.145M57.943 144.6a5.747 5.747 0 1 1-11.436-1.152 5.747 5.747 0 0 1 11.436 1.153M99.656 27.434l30.024-.013a4.619 4.619 0 1 0-.004-9.238l-30.024.013a4.62 4.62 0 0 0 .004 9.238M111.14 45.896l30.023-.013a4.62 4.62 0 1 0-.004-9.238l-30.024.013a4.619 4.619 0 1 0 .004 9.238",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M113.53 27.421v-.002l15.89-.007a4.619 4.619 0 1 0 .005 9.238l-15.892.007v-.002a4.618 4.618 0 0 0-.004-9.234M150.167 70.091h-3.979a4.789 4.789 0 0 1-4.774-4.775 4.788 4.788 0 0 1 4.774-4.774h3.979a4.789 4.789 0 0 1 4.775 4.774 4.789 4.789 0 0 1-4.775 4.775",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M171.687 30.234c0-16.392 13.289-29.68 29.681-29.68 16.392 0 29.68 13.288 29.68 29.68 0 16.393-13.288 29.681-29.68 29.681s-29.68-13.288-29.68-29.68",
    "fill": "#FF603B"
  }, null), createVNode("path", {
    "d": "M203.557 19.435l-.676 15.035a1.514 1.514 0 0 1-3.026 0l-.675-15.035a2.19 2.19 0 1 1 4.377 0m-.264 19.378c.513.477.77 1.1.77 1.87s-.257 1.393-.77 1.907c-.55.476-1.21.733-1.943.733a2.545 2.545 0 0 1-1.87-.77c-.55-.514-.806-1.136-.806-1.87 0-.77.256-1.393.806-1.87.513-.513 1.137-.733 1.87-.733.77 0 1.43.22 1.943.733",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M119.3 133.275c4.426-.598 3.612-1.204 4.079-4.778.675-5.18-3.108-16.935-8.262-25.118-1.088-10.72-12.598-11.24-12.598-11.24s4.312 4.895 4.196 16.199c1.398 5.243.804 14.45.804 14.45s5.255 11.369 11.78 10.487",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M100.944 91.61s1.463-.583 3.211.582c8.08 1.398 10.368 6.706 11.3 11.368 1.864 1.282 1.864 2.33 1.864 3.496.365.777 1.515 3.03 1.515 3.03s-7.225 1.748-10.954 6.758c-1.399-6.41-6.936-25.235-6.936-25.235",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M94.008 90.5l1.019-5.815-9.23-11.874-5.233 5.581-2.593 9.863s8.39 5.128 16.037 2.246",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M82.931 78.216s-4.557-2.868-2.445-6.892c1.632-3.107 4.537 1.139 4.537 1.139s.524-3.662 3.139-3.662c.523-1.046 1.569-4.184 1.569-4.184s11.507 2.615 13.6 3.138c-.001 5.23-2.317 19.529-7.884 19.969-8.94.706-12.516-9.508-12.516-9.508",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M102.971 72.243c2.616-2.093 3.489-9.775 3.489-9.775s-2.492-.492-6.676-2.062c-4.708-2.092-12.867-4.771-17.575.982-9.54 4.41-2.062 19.93-2.062 19.93l2.729-3.037s-3.956-3.304-2.092-6.277c2.183-3.48 3.943 1.08 3.943 1.08s.64-2.4 3.6-3.36c.356-.714 1.04-2.69 1.44-3.872a1.08 1.08 0 0 1 1.27-.707c2.41.56 8.723 2.03 11.417 2.676.524.126.876.619.825 1.156l-.308 3.266z",
    "fill": "#520038"
  }, null), createVNode("path", {
    "d": "M101.22 76.514c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.961.491.083.805.647.702 1.26M94.26 75.074c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.96.491.082.805.646.702 1.26",
    "fill": "#552950"
  }, null), createVNode("path", {
    "stroke": "#DB836E",
    "stroke-width": "1.063",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "d": "M99.206 73.644l-.9 1.62-.3 4.38h-2.24"
  }, null), createVNode("path", {
    "d": "M99.926 73.284s1.8-.72 2.52.54",
    "stroke": "#5C2552",
    "stroke-width": "1.117",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M81.367 73.084s.48-1.12 1.12-.72c.64.4 1.28 1.44.56 2s.16 1.68.16 1.68",
    "stroke": "#DB836E",
    "stroke-width": "1.117",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M92.326 71.724s1.84 1.12 4.16.96",
    "stroke": "#5C2552",
    "stroke-width": "1.117",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M92.726 80.604s2.24 1.2 4.4 1.2M93.686 83.164s.96.4 1.52.32M83.687 80.044s1.786 6.547 9.262 7.954",
    "stroke": "#DB836E",
    "stroke-width": "1.063",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M95.548 91.663s-1.068 2.821-8.298 2.105c-7.23-.717-10.29-5.044-10.29-5.044",
    "stroke": "#E4EBF7",
    "stroke-width": "1.136",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M78.126 87.478s6.526 4.972 16.47 2.486c0 0 9.577 1.02 11.536 5.322 5.36 11.77.543 36.835 0 39.962 3.496 4.055-.466 8.483-.466 8.483-15.624-3.548-35.81-.6-35.81-.6-4.849-3.546-1.223-9.044-1.223-9.044L62.38 110.32c-2.485-15.227.833-19.803 3.549-20.743 3.03-1.049 8.04-1.282 8.04-1.282.496-.058 1.08-.076 1.37-.233 2.36-1.282 2.787-.583 2.787-.583",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M65.828 89.81s-6.875.465-7.59 8.156c-.466 8.857 3.03 10.954 3.03 10.954s6.075 22.102 16.796 22.957c8.39-2.176 4.758-6.702 4.661-11.42-.233-11.304-7.108-16.897-7.108-16.897s-4.212-13.75-9.789-13.75",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M71.716 124.225s.855 11.264 9.828 6.486c4.765-2.536 7.581-13.828 9.789-22.568 1.456-5.768 2.58-12.197 2.58-12.197l-4.973-1.709s-2.408 5.516-7.769 12.275c-4.335 5.467-9.144 11.11-9.455 17.713",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M108.463 105.191s1.747 2.724-2.331 30.535c2.376 2.216 1.053 6.012-.233 7.51",
    "stroke": "#E4EBF7",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M123.262 131.527s-.427 2.732-11.77 1.981c-15.187-1.006-25.326-3.25-25.326-3.25l.933-5.8s.723.215 9.71-.068c11.887-.373 18.714-6.07 24.964-1.022 4.039 3.263 1.489 8.16 1.489 8.16",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M70.24 90.974s-5.593-4.739-11.054 2.68c-3.318 7.223.517 15.284 2.664 19.578-.31 3.729 2.33 4.311 2.33 4.311s.108.895 1.516 2.68c4.078-7.03 6.72-9.166 13.711-12.546-.328-.656-1.877-3.265-1.825-3.767.175-1.69-1.282-2.623-1.282-2.623s-.286-.156-1.165-2.738c-.788-2.313-2.036-5.177-4.895-7.575",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M90.232 288.027s4.855 2.308 8.313 1.155c3.188-1.063 5.12.755 8.002 1.331 2.881.577 7.769 1.243 13.207-1.424-.117-6.228-7.786-4.499-13.518-7.588-2.895-1.56-4.276-5.336-4.066-9.944H91.544s-1.573 11.89-1.312 16.47",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M90.207 287.833s2.745 1.437 7.639.738c3.456-.494 3.223.66 7.418 1.282 4.195.621 13.092-.194 14.334-1.126.466 1.242-.388 2.33-.388 2.33s-1.709.682-5.438.932c-2.295.154-8.098.276-10.14-.621-2.02-1.554-4.894-1.515-6.06-.234-4.427 1.075-7.184-.31-7.184-.31l-.181-2.991z",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M98.429 272.257h3.496s-.117 7.574 5.127 9.671c-5.244.7-9.672-2.602-8.623-9.671",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M44.425 272.046s-2.208 7.774-4.702 12.899c-1.884 3.874-4.428 7.854 5.729 7.854 6.97 0 9.385-.503 7.782-6.917-1.604-6.415.279-13.836.279-13.836h-9.088z",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M38.066 290.277s2.198 1.225 6.954 1.225c6.376 0 8.646-1.73 8.646-1.73s.63 1.168-.649 2.27c-1.04.897-3.77 1.668-7.745 1.621-4.347-.05-6.115-.593-7.062-1.224-.864-.577-.72-1.657-.144-2.162",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M45.344 274.041s.035 1.592-.329 3.07c-.365 1.49-1.13 3.255-1.184 4.34-.061 1.206 4.755 1.657 5.403.036.65-1.622 1.357-6.737 2.006-7.602.648-.865-5.14-2.222-5.896.156",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M89.476 277.57l13.899.095s1.349-56.643 1.925-66.909c.576-10.267 3.923-45.052 1.042-65.585l-13.037-.669-23.737.81s-.452 4.12-1.243 10.365c-.065.515-.708.874-.777 1.417-.078.608.439 1.407.332 2.044-2.455 14.627-5.797 32.736-8.256 46.837-.121.693-1.282 1.048-1.515 2.796-.042.314.22 1.584.116 1.865-7.14 19.473-12.202 52.601-15.66 67.19l15.176-.015s2.282-10.145 4.185-18.871c2.922-13.389 24.012-88.32 24.012-88.32l3.133-.954-.158 48.568s-.233 1.282.35 2.098c.583.815-.581 1.167-.408 2.331l.408 1.864s-.466 7.458-.932 12.352c-.467 4.895 1.145 40.69 1.145 40.69",
    "fill": "#7BB2F9"
  }, null), createVNode("path", {
    "d": "M64.57 218.881c1.197.099 4.195-2.097 7.225-5.127M96.024 222.534s2.881-1.152 6.34-4.034",
    "stroke": "#648BD8",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M96.973 219.373s2.882-1.153 6.34-4.034",
    "stroke": "#648BD8",
    "stroke-width": "1.032",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M63.172 222.144s2.724-.614 6.759-3.496M74.903 146.166c-.281 3.226.31 8.856-4.506 9.478M93.182 144.344s.115 14.557-1.344 15.65c-2.305 1.73-3.107 2.02-3.107 2.02M89.197 144.923s.269 13.144-1.01 25.088M83.525 170.71s6.81-1.051 9.116-1.051M46.026 270.045l-.892 4.538M46.937 263.289l-.815 4.157M62.725 202.503c-.33 1.618-.102 1.904-.449 3.438 0 0-2.756 1.903-2.29 3.923.466 2.02-.31 3.424-4.505 17.252-1.762 5.807-4.233 18.922-6.165 28.278-.03.144-.521 2.646-1.14 5.8M64.158 194.136c-.295 1.658-.6 3.31-.917 4.938M71.33 146.787l-1.244 10.877s-1.14.155-.519 2.33c.117 1.399-2.778 16.39-5.382 31.615M44.242 273.727H58.07",
    "stroke": "#648BD8",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M106.18 142.117c-3.028-.489-18.825-2.744-36.219.2a.625.625 0 0 0-.518.644c.063 1.307.044 2.343.015 2.995a.617.617 0 0 0 .716.636c3.303-.534 17.037-2.412 35.664-.266.347.04.66-.214.692-.56.124-1.347.16-2.425.17-3.029a.616.616 0 0 0-.52-.62",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M96.398 145.264l.003-5.102a.843.843 0 0 0-.809-.847 114.104 114.104 0 0 0-8.141-.014.85.85 0 0 0-.82.847l-.003 5.097c0 .476.388.857.864.845 2.478-.064 5.166-.067 8.03.017a.848.848 0 0 0 .876-.843",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M95.239 144.296l.002-3.195a.667.667 0 0 0-.643-.672c-1.9-.061-3.941-.073-6.094-.01a.675.675 0 0 0-.654.672l-.002 3.192c0 .376.305.677.68.669 1.859-.042 3.874-.043 6.02.012.376.01.69-.291.691-.668",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M90.102 273.522h12.819M91.216 269.761c.006 3.519-.072 5.55 0 6.292M90.923 263.474c-.009 1.599-.016 2.558-.016 4.505M90.44 170.404l.932 46.38s.7 1.631-.233 2.796c-.932 1.166 2.564.7.932 2.33-1.63 1.633.933 1.166 0 3.497-.618 1.546-1.031 21.921-1.138 36.513",
    "stroke": "#648BD8",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M73.736 98.665l2.214 4.312s2.098.816 1.865 2.68l.816 2.214M64.297 116.611c.233-.932 2.176-7.147 12.585-10.488M77.598 90.042s7.691 6.137 16.547 2.72",
    "stroke": "#E4EBF7",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M91.974 86.954s5.476-.816 7.574-4.545c1.297-.345.72 2.212-.33 3.671-.7.971-1.01 1.554-1.01 1.554s.194.31.155.816c-.053.697-.175.653-.272 1.048-.081.335.108.657 0 1.049-.046.17-.198.5-.382.878-.12.249-.072.687-.2.948-.231.469-1.562 1.87-2.622 2.855-3.826 3.554-5.018 1.644-6.001-.408-.894-1.865-.661-5.127-.874-6.875-.35-2.914-2.622-3.03-1.923-4.429.343-.685 2.87.69 3.263 1.748.757 2.04 2.952 1.807 2.622 1.69",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M99.8 82.429c-.465.077-.35.272-.97 1.243-.622.971-4.817 2.932-6.39 3.224-2.589.48-2.278-1.56-4.254-2.855-1.69-1.107-3.562-.638-1.398 1.398.99.932.932 1.107 1.398 3.205.335 1.506-.64 3.67.7 5.593",
    "stroke": "#DB836E",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M79.543 108.673c-2.1 2.926-4.266 6.175-5.557 8.762",
    "stroke": "#E59788",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M87.72 124.768s-2.098-1.942-5.127-2.719c-3.03-.777-3.574-.155-5.516.078-1.942.233-3.885-.932-3.652.7.233 1.63 5.05 1.01 5.206 2.097.155 1.087-6.37 2.796-8.313 2.175-.777.777.466 1.864 2.02 2.175.233 1.554 2.253 1.554 2.253 1.554s.699 1.01 2.641 1.088c2.486 1.32 8.934-.7 10.954-1.554 2.02-.855-.466-5.594-.466-5.594",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M73.425 122.826s.66 1.127 3.167 1.418c2.315.27 2.563.583 2.563.583s-2.545 2.894-9.07 2.272M72.416 129.274s3.826.097 4.933-.718M74.98 130.75s1.961.136 3.36-.505M77.232 131.916s1.748.019 2.914-.505M73.328 122.321s-.595-1.032 1.262-.427c1.671.544 2.833.055 5.128.155 1.389.061 3.067-.297 3.982.15 1.606.784 3.632 2.181 3.632 2.181s10.526 1.204 19.033-1.127M78.864 108.104s-8.39 2.758-13.168 12.12",
    "stroke": "#E59788",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M109.278 112.533s3.38-3.613 7.575-4.662",
    "stroke": "#E4EBF7",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M107.375 123.006s9.697-2.745 11.445-.88",
    "stroke": "#E59788",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M194.605 83.656l3.971-3.886M187.166 90.933l3.736-3.655M191.752 84.207l-4.462-4.56M198.453 91.057l-4.133-4.225M129.256 163.074l3.718-3.718M122.291 170.039l3.498-3.498M126.561 163.626l-4.27-4.27M132.975 170.039l-3.955-3.955",
    "stroke": "#BFCDDD",
    "stroke-width": "2",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M190.156 211.779h-1.604a4.023 4.023 0 0 1-4.011-4.011V175.68a4.023 4.023 0 0 1 4.01-4.01h1.605a4.023 4.023 0 0 1 4.011 4.01v32.088a4.023 4.023 0 0 1-4.01 4.01",
    "fill": "#A3B4C6"
  }, null), createVNode("path", {
    "d": "M237.824 212.977a4.813 4.813 0 0 1-4.813 4.813h-86.636a4.813 4.813 0 0 1 0-9.626h86.636a4.813 4.813 0 0 1 4.813 4.813",
    "fill": "#A3B4C6"
  }, null), createVNode("mask", {
    "fill": "#fff"
  }, null), createVNode("path", {
    "fill": "#A3B4C6",
    "mask": "url(#d)",
    "d": "M154.098 190.096h70.513v-84.617h-70.513z"
  }, null), createVNode("path", {
    "d": "M224.928 190.096H153.78a3.219 3.219 0 0 1-3.208-3.209V167.92a3.219 3.219 0 0 1 3.208-3.21h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.219 3.219 0 0 1-3.21 3.209M224.928 130.832H153.78a3.218 3.218 0 0 1-3.208-3.208v-18.968a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.218 3.218 0 0 1-3.21 3.208",
    "fill": "#BFCDDD",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M159.563 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 120.546h-22.461a.802.802 0 0 1-.802-.802v-3.208c0-.443.359-.803.802-.803h22.46c.444 0 .803.36.803.803v3.208c0 .443-.36.802-.802.802",
    "fill": "#FFF",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M224.928 160.464H153.78a3.218 3.218 0 0 1-3.208-3.209v-18.967a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.209v18.967a3.218 3.218 0 0 1-3.21 3.209",
    "fill": "#BFCDDD",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M173.455 130.832h49.301M164.984 130.832h6.089M155.952 130.832h6.75M173.837 160.613h49.3M165.365 160.613h6.089M155.57 160.613h6.751",
    "stroke": "#7C90A5",
    "stroke-width": "1.124",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M159.563 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M166.98 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M174.397 151.038a2.407 2.407 0 1 1 .001-4.814 2.407 2.407 0 0 1 0 4.814M222.539 151.038h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802M159.563 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 179.987h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802",
    "fill": "#FFF",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M203.04 221.108h-27.372a2.413 2.413 0 0 1-2.406-2.407v-11.448a2.414 2.414 0 0 1 2.406-2.407h27.372a2.414 2.414 0 0 1 2.407 2.407V218.7a2.413 2.413 0 0 1-2.407 2.407",
    "fill": "#BFCDDD",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M177.259 207.217v11.52M201.05 207.217v11.52",
    "stroke": "#A3B4C6",
    "stroke-width": "1.124",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M162.873 267.894a9.422 9.422 0 0 1-9.422-9.422v-14.82a9.423 9.423 0 0 1 18.845 0v14.82a9.423 9.423 0 0 1-9.423 9.422",
    "fill": "#5BA02E",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M171.22 267.83a9.422 9.422 0 0 1-9.422-9.423v-3.438a9.423 9.423 0 0 1 18.845 0v3.438a9.423 9.423 0 0 1-9.422 9.423",
    "fill": "#92C110",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M181.31 293.666h-27.712a3.209 3.209 0 0 1-3.209-3.21V269.79a3.209 3.209 0 0 1 3.209-3.21h27.711a3.209 3.209 0 0 1 3.209 3.21v20.668a3.209 3.209 0 0 1-3.209 3.209",
    "fill": "#F2D7AD",
    "mask": "url(#d)"
  }, null)])]);
};
var serverError = ServerError;
var Unauthorized = function Unauthorized2() {
  return createVNode("svg", {
    "width": "251",
    "height": "294"
  }, [createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("path", {
    "d": "M0 129.023v-2.084C0 58.364 55.591 2.774 124.165 2.774h2.085c68.574 0 124.165 55.59 124.165 124.165v2.084c0 68.575-55.59 124.166-124.165 124.166h-2.085C55.591 253.189 0 197.598 0 129.023",
    "fill": "#E4EBF7"
  }, null), createVNode("path", {
    "d": "M41.417 132.92a8.231 8.231 0 1 1-16.38-1.65 8.231 8.231 0 0 1 16.38 1.65",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M38.652 136.36l10.425 5.91M49.989 148.505l-12.58 10.73",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M41.536 161.28a5.636 5.636 0 1 1-11.216-1.13 5.636 5.636 0 0 1 11.216 1.13M59.154 145.261a5.677 5.677 0 1 1-11.297-1.138 5.677 5.677 0 0 1 11.297 1.138M100.36 29.516l29.66-.013a4.562 4.562 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 0 0 .005 9.126M111.705 47.754l29.659-.013a4.563 4.563 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 1 0 .005 9.126",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M114.066 29.503V29.5l15.698-.007a4.563 4.563 0 1 0 .004 9.126l-15.698.007v-.002a4.562 4.562 0 0 0-.004-9.122M185.405 137.723c-.55 5.455-5.418 9.432-10.873 8.882-5.456-.55-9.432-5.418-8.882-10.873.55-5.455 5.418-9.432 10.873-8.882 5.455.55 9.432 5.418 8.882 10.873",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M180.17 143.772l12.572 7.129M193.841 158.42L178.67 171.36",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M185.55 171.926a6.798 6.798 0 1 1-13.528-1.363 6.798 6.798 0 0 1 13.527 1.363M204.12 155.285a6.848 6.848 0 1 1-13.627-1.375 6.848 6.848 0 0 1 13.626 1.375",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M152.988 194.074a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0zM225.931 118.217a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM217.09 153.051a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.42 0zM177.84 109.842a2.21 2.21 0 1 1-4.422 0 2.21 2.21 0 0 1 4.421 0zM196.114 94.454a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM202.844 182.523a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0z",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "stroke": "#FFF",
    "stroke-width": "2",
    "d": "M215.125 155.262l-1.902 20.075-10.87 5.958M174.601 176.636l-6.322 9.761H156.98l-4.484 6.449M175.874 127.28V111.56M221.51 119.404l-12.77 7.859-15.228-7.86V96.668"
  }, null), createVNode("path", {
    "d": "M180.68 29.32C180.68 13.128 193.806 0 210 0c16.193 0 29.32 13.127 29.32 29.32 0 16.194-13.127 29.322-29.32 29.322-16.193 0-29.32-13.128-29.32-29.321",
    "fill": "#A26EF4"
  }, null), createVNode("path", {
    "d": "M221.45 41.706l-21.563-.125a1.744 1.744 0 0 1-1.734-1.754l.071-12.23a1.744 1.744 0 0 1 1.754-1.734l21.562.125c.964.006 1.74.791 1.735 1.755l-.071 12.229a1.744 1.744 0 0 1-1.754 1.734",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M215.106 29.192c-.015 2.577-2.049 4.654-4.543 4.64-2.494-.014-4.504-2.115-4.489-4.693l.04-6.925c.016-2.577 2.05-4.654 4.543-4.64 2.494.015 4.504 2.116 4.49 4.693l-.04 6.925zm-4.53-14.074a6.877 6.877 0 0 0-6.916 6.837l-.043 7.368a6.877 6.877 0 0 0 13.754.08l.042-7.368a6.878 6.878 0 0 0-6.837-6.917zM167.566 68.367h-3.93a4.73 4.73 0 0 1-4.717-4.717 4.73 4.73 0 0 1 4.717-4.717h3.93a4.73 4.73 0 0 1 4.717 4.717 4.73 4.73 0 0 1-4.717 4.717",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M168.214 248.838a6.611 6.611 0 0 1-6.61-6.611v-66.108a6.611 6.611 0 0 1 13.221 0v66.108a6.611 6.611 0 0 1-6.61 6.61",
    "fill": "#5BA02E"
  }, null), createVNode("path", {
    "d": "M176.147 248.176a6.611 6.611 0 0 1-6.61-6.61v-33.054a6.611 6.611 0 1 1 13.221 0v33.053a6.611 6.611 0 0 1-6.61 6.611",
    "fill": "#92C110"
  }, null), createVNode("path", {
    "d": "M185.994 293.89h-27.376a3.17 3.17 0 0 1-3.17-3.17v-45.887a3.17 3.17 0 0 1 3.17-3.17h27.376a3.17 3.17 0 0 1 3.17 3.17v45.886a3.17 3.17 0 0 1-3.17 3.17",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "d": "M81.972 147.673s6.377-.927 17.566-1.28c11.729-.371 17.57 1.086 17.57 1.086s3.697-3.855.968-8.424c1.278-12.077 5.982-32.827.335-48.273-1.116-1.339-3.743-1.512-7.536-.62-1.337.315-7.147-.149-7.983-.1l-15.311-.347s-3.487-.17-8.035-.508c-1.512-.113-4.227-1.683-5.458-.338-.406.443-2.425 5.669-1.97 16.077l8.635 35.642s-3.141 3.61 1.219 7.085",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M75.768 73.325l-.9-6.397 11.982-6.52s7.302-.118 8.038 1.205c.737 1.324-5.616.993-5.616.993s-1.836 1.388-2.615 2.5c-1.654 2.363-.986 6.471-8.318 5.986-1.708.284-2.57 2.233-2.57 2.233",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M52.44 77.672s14.217 9.406 24.973 14.444c1.061.497-2.094 16.183-11.892 11.811-7.436-3.318-20.162-8.44-21.482-14.496-.71-3.258 2.543-7.643 8.401-11.76M141.862 80.113s-6.693 2.999-13.844 6.876c-3.894 2.11-10.137 4.704-12.33 7.988-6.224 9.314 3.536 11.22 12.947 7.503 6.71-2.651 28.999-12.127 13.227-22.367",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M76.166 66.36l3.06 3.881s-2.783 2.67-6.31 5.747c-7.103 6.195-12.803 14.296-15.995 16.44-3.966 2.662-9.754 3.314-12.177-.118-3.553-5.032.464-14.628 31.422-25.95",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M64.674 85.116s-2.34 8.413-8.912 14.447c.652.548 18.586 10.51 22.144 10.056 5.238-.669 6.417-18.968 1.145-20.531-.702-.208-5.901-1.286-8.853-2.167-.87-.26-1.611-1.71-3.545-.936l-1.98-.869zM128.362 85.826s5.318 1.956 7.325 13.734c-.546.274-17.55 12.35-21.829 7.805-6.534-6.94-.766-17.393 4.275-18.61 4.646-1.121 5.03-1.37 10.23-2.929",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M78.18 94.656s.911 7.41-4.914 13.078",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M87.397 94.68s3.124 2.572 10.263 2.572c7.14 0 9.074-3.437 9.074-3.437",
    "stroke": "#E4EBF7",
    "stroke-width": ".932",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M117.184 68.639l-6.781-6.177s-5.355-4.314-9.223-.893c-3.867 3.422 4.463 2.083 5.653 4.165 1.19 2.082.848 1.143-2.083.446-5.603-1.331-2.082.893 2.975 5.355 2.091 1.845 6.992.955 6.992.955l2.467-3.851z",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M105.282 91.315l-.297-10.937-15.918-.027-.53 10.45c-.026.403.17.788.515.999 2.049 1.251 9.387 5.093 15.799.424.287-.21.443-.554.431-.91",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M107.573 74.24c.817-1.147.982-9.118 1.015-11.928a1.046 1.046 0 0 0-.965-1.055l-4.62-.365c-7.71-1.044-17.071.624-18.253 6.346-5.482 5.813-.421 13.244-.421 13.244s1.963 3.566 4.305 6.791c.756 1.041.398-3.731 3.04-5.929 5.524-4.594 15.899-7.103 15.899-7.103",
    "fill": "#5C2552"
  }, null), createVNode("path", {
    "d": "M88.426 83.206s2.685 6.202 11.602 6.522c7.82.28 8.973-7.008 7.434-17.505l-.909-5.483c-6.118-2.897-15.478.54-15.478.54s-.576 2.044-.19 5.504c-2.276 2.066-1.824 5.618-1.824 5.618s-.905-1.922-1.98-2.321c-.86-.32-1.897.089-2.322 1.98-1.04 4.632 3.667 5.145 3.667 5.145",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "stroke": "#DB836E",
    "stroke-width": "1.145",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "d": "M100.843 77.099l1.701-.928-1.015-4.324.674-1.406"
  }, null), createVNode("path", {
    "d": "M105.546 74.092c-.022.713-.452 1.279-.96 1.263-.51-.016-.904-.607-.882-1.32.021-.713.452-1.278.96-1.263.51.016.904.607.882 1.32M97.592 74.349c-.022.713-.452 1.278-.961 1.263-.509-.016-.904-.607-.882-1.32.022-.713.452-1.279.961-1.263.51.016.904.606.882 1.32",
    "fill": "#552950"
  }, null), createVNode("path", {
    "d": "M91.132 86.786s5.269 4.957 12.679 2.327",
    "stroke": "#DB836E",
    "stroke-width": "1.145",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M99.776 81.903s-3.592.232-1.44-2.79c1.59-1.496 4.897-.46 4.897-.46s1.156 3.906-3.457 3.25",
    "fill": "#DB836E"
  }, null), createVNode("path", {
    "d": "M102.88 70.6s2.483.84 3.402.715M93.883 71.975s2.492-1.144 4.778-1.073",
    "stroke": "#5C2552",
    "stroke-width": "1.526",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M86.32 77.374s.961.879 1.458 2.106c-.377.48-1.033 1.152-.236 1.809M99.337 83.719s1.911.151 2.509-.254",
    "stroke": "#DB836E",
    "stroke-width": "1.145",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M87.782 115.821l15.73-3.012M100.165 115.821l10.04-2.008",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M66.508 86.763s-1.598 8.83-6.697 14.078",
    "stroke": "#E4EBF7",
    "stroke-width": "1.114",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M128.31 87.934s3.013 4.121 4.06 11.785",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M64.09 84.816s-6.03 9.912-13.607 9.903",
    "stroke": "#DB836E",
    "stroke-width": ".795",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M112.366 65.909l-.142 5.32s5.993 4.472 11.945 9.202c4.482 3.562 8.888 7.455 10.985 8.662 4.804 2.766 8.9 3.355 11.076 1.808 4.071-2.894 4.373-9.878-8.136-15.263-4.271-1.838-16.144-6.36-25.728-9.73",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M130.532 85.488s4.588 5.757 11.619 6.214",
    "stroke": "#DB836E",
    "stroke-width": ".75",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M121.708 105.73s-.393 8.564-1.34 13.612",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M115.784 161.512s-3.57-1.488-2.678-7.14",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M101.52 290.246s4.326 2.057 7.408 1.03c2.842-.948 4.564.673 7.132 1.186 2.57.514 6.925 1.108 11.772-1.269-.104-5.551-6.939-4.01-12.048-6.763-2.582-1.39-3.812-4.757-3.625-8.863h-9.471s-1.402 10.596-1.169 14.68",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M101.496 290.073s2.447 1.281 6.809.658c3.081-.44 3.74.485 7.479 1.039 3.739.554 10.802-.07 11.91-.9.415 1.108-.347 2.077-.347 2.077s-1.523.608-4.847.831c-2.045.137-5.843.293-7.663-.507-1.8-1.385-5.286-1.917-5.77-.243-3.947.958-7.41-.288-7.41-.288l-.16-2.667z",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M108.824 276.19h3.116s-.103 6.751 4.57 8.62c-4.673.624-8.62-2.32-7.686-8.62",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M57.65 272.52s-2.122 7.47-4.518 12.396c-1.811 3.724-4.255 7.548 5.505 7.548 6.698 0 9.02-.483 7.479-6.648-1.541-6.164.268-13.296.268-13.296H57.65z",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M51.54 290.04s2.111 1.178 6.682 1.178c6.128 0 8.31-1.662 8.31-1.662s.605 1.122-.624 2.18c-1 .862-3.624 1.603-7.444 1.559-4.177-.049-5.876-.57-6.786-1.177-.831-.554-.692-1.593-.138-2.078",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M58.533 274.438s.034 1.529-.315 2.95c-.352 1.431-1.087 3.127-1.139 4.17-.058 1.16 4.57 1.592 5.194.035.623-1.559 1.303-6.475 1.927-7.306.622-.831-4.94-2.135-5.667.15",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M100.885 277.015l13.306.092s1.291-54.228 1.843-64.056c.552-9.828 3.756-43.13.997-62.788l-12.48-.64-22.725.776s-.433 3.944-1.19 9.921c-.062.493-.677.838-.744 1.358-.075.582.42 1.347.318 1.956-2.35 14.003-6.343 32.926-8.697 46.425-.116.663-1.227 1.004-1.45 2.677-.04.3.21 1.516.112 1.785-6.836 18.643-10.89 47.584-14.2 61.551l14.528-.014s2.185-8.524 4.008-16.878c2.796-12.817 22.987-84.553 22.987-84.553l3-.517 1.037 46.1s-.223 1.228.334 2.008c.558.782-.556 1.117-.39 2.233l.39 1.784s-.446 7.14-.892 11.826c-.446 4.685-.092 38.954-.092 38.954",
    "fill": "#7BB2F9"
  }, null), createVNode("path", {
    "d": "M77.438 220.434c1.146.094 4.016-2.008 6.916-4.91M107.55 223.931s2.758-1.103 6.069-3.862",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M108.459 220.905s2.759-1.104 6.07-3.863",
    "stroke": "#648BD8",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M76.099 223.557s2.608-.587 6.47-3.346M87.33 150.82c-.27 3.088.297 8.478-4.315 9.073M104.829 149.075s.11 13.936-1.286 14.983c-2.207 1.655-2.975 1.934-2.975 1.934M101.014 149.63s.035 12.81-1.19 24.245M94.93 174.965s7.174-1.655 9.38-1.655M75.671 204.754c-.316 1.55-.64 3.067-.973 4.535 0 0-1.45 1.822-1.003 3.756.446 1.934-.943 2.034-4.96 15.273-1.686 5.559-4.464 18.49-6.313 27.447-.078.38-4.018 18.06-4.093 18.423M77.043 196.743a313.269 313.269 0 0 1-.877 4.729M83.908 151.414l-1.19 10.413s-1.091.148-.496 2.23c.111 1.34-2.66 15.692-5.153 30.267M57.58 272.94h13.238",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M117.377 147.423s-16.955-3.087-35.7.199c.157 2.501-.002 4.128-.002 4.128s14.607-2.802 35.476-.31c.251-2.342.226-4.017.226-4.017",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M107.511 150.353l.004-4.885a.807.807 0 0 0-.774-.81c-2.428-.092-5.04-.108-7.795-.014a.814.814 0 0 0-.784.81l-.003 4.88c0 .456.371.82.827.808a140.76 140.76 0 0 1 7.688.017.81.81 0 0 0 .837-.806",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M106.402 149.426l.002-3.06a.64.64 0 0 0-.616-.643 94.135 94.135 0 0 0-5.834-.009.647.647 0 0 0-.626.643l-.001 3.056c0 .36.291.648.651.64 1.78-.04 3.708-.041 5.762.012.36.009.662-.279.662-.64",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M101.485 273.933h12.272M102.652 269.075c.006 3.368.04 5.759.11 6.47M102.667 263.125c-.009 1.53-.015 2.98-.016 4.313M102.204 174.024l.893 44.402s.669 1.561-.224 2.677c-.892 1.116 2.455.67.893 2.231-1.562 1.562.893 1.116 0 3.347-.592 1.48-.988 20.987-1.09 34.956",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null)])]);
};
var unauthorized = Unauthorized;
var IconMap = {
  success: CheckCircleFilled,
  error: CloseCircleFilled,
  info: ExclamationCircleFilled,
  warning: WarningFilled
};
var ExceptionMap = {
  "404": noFound,
  "500": serverError,
  "403": unauthorized
};
var ExceptionStatus = Object.keys(ExceptionMap);
var resultProps = {
  prefixCls: PropsTypes.string,
  icon: PropsTypes.any,
  status: PropsTypes.oneOf(tuple("success", "error", "info", "warning", "404", "403", "500")).def("info"),
  title: PropsTypes.any,
  subTitle: PropsTypes.any,
  extra: PropsTypes.any
};
var renderIcon = function renderIcon2(prefixCls2, _ref) {
  var status = _ref.status, icon = _ref.icon;
  if (ExceptionStatus.includes("".concat(status))) {
    var SVGComponent = ExceptionMap[status];
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-icon ").concat(prefixCls2, "-image")
    }, [createVNode(SVGComponent, null, null)]);
  }
  var IconComponent = IconMap[status];
  var iconNode = icon || createVNode(IconComponent, null, null);
  return createVNode("div", {
    "class": "".concat(prefixCls2, "-icon")
  }, [iconNode]);
};
var renderExtra = function renderExtra2(prefixCls2, extra) {
  return extra && createVNode("div", {
    "class": "".concat(prefixCls2, "-extra")
  }, [extra]);
};
var Result = defineComponent({
  name: "AResult",
  props: resultProps,
  slots: ["title", "subTitle", "icon", "extra"],
  setup: function setup120(props2, _ref2) {
    var slots = _ref2.slots;
    var _useConfigInject = useConfigInject("result", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var className = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-").concat(props2.status), _defineProperty({}, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"));
    });
    return function() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var subTitle = (_c = props2.subTitle) !== null && _c !== void 0 ? _c : (_d = slots.subTitle) === null || _d === void 0 ? void 0 : _d.call(slots);
      var icon = (_e = props2.icon) !== null && _e !== void 0 ? _e : (_f = slots.icon) === null || _f === void 0 ? void 0 : _f.call(slots);
      var extra = (_g = props2.extra) !== null && _g !== void 0 ? _g : (_h = slots.extra) === null || _h === void 0 ? void 0 : _h.call(slots);
      var pre = prefixCls2.value;
      return createVNode("div", {
        "class": className.value
      }, [renderIcon(pre, {
        status: props2.status,
        icon
      }), createVNode("div", {
        "class": "".concat(pre, "-title")
      }, [title2]), subTitle && createVNode("div", {
        "class": "".concat(pre, "-subtitle")
      }, [subTitle]), renderExtra(pre, extra), slots.default && createVNode("div", {
        "class": "".concat(pre, "-content")
      }, [slots.default()])]);
    };
  }
});
Result.PRESENTED_IMAGE_403 = ExceptionMap[403];
Result.PRESENTED_IMAGE_404 = ExceptionMap[404];
Result.PRESENTED_IMAGE_500 = ExceptionMap[500];
Result.install = function(app) {
  app.component(Result.name, Result);
  return app;
};
var Result$1 = Result;
var SkeletonButton = defineComponent({
  name: "ASkeletonButton",
  props: _extends(_extends({}, skeletonElementProps()), {
    size: PropsTypes.oneOf(tuple("large", "small", "default"))
  }),
  setup: function setup121(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"), _defineProperty({}, "".concat(prefixCls2.value, "-active"), props2.active));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode(Element$2, _objectSpread2(_objectSpread2({}, props2), {}, {
        "prefixCls": "".concat(prefixCls2.value, "-button")
      }), null)]);
    };
  }
});
var SkeletonButton$1 = SkeletonButton;
var SkeletonInput = defineComponent({
  name: "ASkeletonInput",
  props: _extends(_extends({}, omit(skeletonElementProps(), "shape")), {
    size: PropsTypes.oneOf(tuple("large", "small", "default"))
  }),
  setup: function setup122(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"), _defineProperty({}, "".concat(prefixCls2.value, "-active"), props2.active));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode(Element$2, _objectSpread2(_objectSpread2({}, props2), {}, {
        "prefixCls": "".concat(prefixCls2.value, "-input")
      }), null)]);
    };
  }
});
var SkeletonInput$1 = SkeletonInput;
var path = "M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z";
var SkeletonImage = defineComponent({
  name: "ASkeletonImage",
  props: skeletonElementProps(),
  setup: function setup123(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode("div", {
        "class": "".concat(prefixCls2.value, "-image")
      }, [createVNode("svg", {
        "viewBox": "0 0 1098 1024",
        "xmlns": "http://www.w3.org/2000/svg",
        "class": "".concat(prefixCls2.value, "-image-svg")
      }, [createVNode("path", {
        "d": path,
        "class": "".concat(prefixCls2.value, "-image-path")
      }, null)])])]);
    };
  }
});
var SkeletonImage$1 = SkeletonImage;
Skeleton$1.Button = SkeletonButton$1;
Skeleton$1.Avatar = SkeletonAvatar$1;
Skeleton$1.Input = SkeletonInput$1;
Skeleton$1.Image = SkeletonImage$1;
Skeleton$1.install = function(app) {
  app.component(Skeleton$1.name, Skeleton$1);
  app.component(Skeleton$1.Button.name, SkeletonButton$1);
  app.component(Skeleton$1.Avatar.name, SkeletonAvatar$1);
  app.component(Skeleton$1.Input.name, SkeletonInput$1);
  app.component(Skeleton$1.Image.name, SkeletonImage$1);
  return app;
};
var Track2 = function Track3(_, _ref) {
  var _ref2, _ref3;
  var attrs = _ref.attrs;
  var included = attrs.included, vertical = attrs.vertical, offset2 = attrs.offset, length = attrs.length, reverse = attrs.reverse, style3 = attrs.style, className = attrs.class;
  var positonStyle = vertical ? (_ref2 = {}, _defineProperty(_ref2, reverse ? "top" : "bottom", "".concat(offset2, "%")), _defineProperty(_ref2, reverse ? "bottom" : "top", "auto"), _defineProperty(_ref2, "height", "".concat(length, "%")), _ref2) : (_ref3 = {}, _defineProperty(_ref3, reverse ? "right" : "left", "".concat(offset2, "%")), _defineProperty(_ref3, reverse ? "left" : "right", "auto"), _defineProperty(_ref3, "width", "".concat(length, "%")), _ref3);
  var elStyle = _extends(_extends({}, style3), positonStyle);
  return included ? createVNode("div", {
    "class": className,
    "style": elStyle
  }, null) : null;
};
Track2.inheritAttrs = false;
var Track$1 = Track2;
var calcPoints = function calcPoints2(vertical, marks, dots, step, min3, max3) {
  warning$1(dots ? step > 0 : true, "Slider", "`Slider[step]` should be a positive number in order to make Slider[dots] work.");
  var points = Object.keys(marks).map(parseFloat).sort(function(a, b) {
    return a - b;
  });
  if (dots && step) {
    for (var i = min3; i <= max3; i += step) {
      if (points.indexOf(i) === -1) {
        points.push(i);
      }
    }
  }
  return points;
};
var Steps$3 = function Steps(_, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, vertical = attrs.vertical, reverse = attrs.reverse, marks = attrs.marks, dots = attrs.dots, step = attrs.step, included = attrs.included, lowerBound = attrs.lowerBound, upperBound = attrs.upperBound, max3 = attrs.max, min3 = attrs.min, dotStyle = attrs.dotStyle, activeDotStyle = attrs.activeDotStyle;
  var range = max3 - min3;
  var elements = calcPoints(vertical, marks, dots, step, min3, max3).map(function(point) {
    var _classNames;
    var offset2 = "".concat(Math.abs(point - min3) / range * 100, "%");
    var isActived = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
    var style3 = vertical ? _extends(_extends({}, dotStyle), _defineProperty({}, reverse ? "top" : "bottom", offset2)) : _extends(_extends({}, dotStyle), _defineProperty({}, reverse ? "right" : "left", offset2));
    if (isActived) {
      style3 = _extends(_extends({}, style3), activeDotStyle);
    }
    var pointClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-dot"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-dot-active"), isActived), _defineProperty(_classNames, "".concat(prefixCls2, "-dot-reverse"), reverse), _classNames));
    return createVNode("span", {
      "class": pointClassName,
      "style": style3,
      "key": point
    }, null);
  });
  return createVNode("div", {
    "class": "".concat(prefixCls2, "-step")
  }, [elements]);
};
Steps$3.inheritAttrs = false;
var Steps$4 = Steps$3;
var Marks = function Marks2(_, _ref) {
  var attrs = _ref.attrs;
  var className = attrs.class, vertical = attrs.vertical, reverse = attrs.reverse, marks = attrs.marks, included = attrs.included, upperBound = attrs.upperBound, lowerBound = attrs.lowerBound, max3 = attrs.max, min3 = attrs.min, onClickLabel = attrs.onClickLabel;
  var marksKeys = Object.keys(marks);
  var range = max3 - min3;
  var elements = marksKeys.map(parseFloat).sort(function(a, b) {
    return a - b;
  }).map(function(point) {
    var _classNames;
    var markPoint = typeof marks[point] === "function" ? marks[point](h) : marks[point];
    var markPointIsObject = _typeof(markPoint) === "object" && !isValidElement(markPoint);
    var markLabel = markPointIsObject ? markPoint.label : markPoint;
    if (!markLabel && markLabel !== 0) {
      return null;
    }
    var isActive = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
    var markClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(className, "-text"), true), _defineProperty(_classNames, "".concat(className, "-text-active"), isActive), _classNames));
    var bottomStyle = _defineProperty({
      marginBottom: "-50%"
    }, reverse ? "top" : "bottom", "".concat((point - min3) / range * 100, "%"));
    var leftStyle = _defineProperty({
      transform: "translateX(-50%)",
      msTransform: "translateX(-50%)"
    }, reverse ? "right" : "left", reverse ? "".concat((point - min3 / 4) / range * 100, "%") : "".concat((point - min3) / range * 100, "%"));
    var style3 = vertical ? bottomStyle : leftStyle;
    var markStyle = markPointIsObject ? _extends(_extends({}, style3), markPoint.style) : style3;
    var touchEvents = _defineProperty({}, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", function(e) {
      return onClickLabel(e, point);
    });
    return createVNode("span", _objectSpread2({
      "class": markClassName,
      "style": markStyle,
      "key": point,
      "onMousedown": function onMousedown2(e) {
        return onClickLabel(e, point);
      }
    }, touchEvents), [markLabel]);
  });
  return createVNode("div", {
    "class": className
  }, [elements]);
};
Marks.inheritAttrs = false;
var Marks$1 = Marks;
var VcHandle = defineComponent({
  name: "Handle",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    vertical: PropsTypes.looseBool,
    offset: PropsTypes.number,
    disabled: PropsTypes.looseBool,
    min: PropsTypes.number,
    max: PropsTypes.number,
    value: PropsTypes.number,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    reverse: PropsTypes.looseBool
  },
  data: function data57() {
    return {
      clickFocused: false
    };
  },
  mounted: function mounted31() {
    this.onMouseUpListener = addEventListenerWrap(document, "mouseup", this.handleMouseUp);
  },
  beforeUnmount: function beforeUnmount22() {
    if (this.onMouseUpListener) {
      this.onMouseUpListener.remove();
    }
  },
  methods: {
    setHandleRef: function setHandleRef(node) {
      this.handle = node;
    },
    setClickFocus: function setClickFocus(focused) {
      this.setState({
        clickFocused: focused
      });
    },
    handleMouseUp: function handleMouseUp() {
      if (document.activeElement === this.handle) {
        this.setClickFocus(true);
      }
    },
    handleBlur: function handleBlur3(e) {
      this.setClickFocus(false);
      this.__emit("blur", e);
    },
    handleKeyDown: function handleKeyDown6() {
      this.setClickFocus(false);
    },
    clickFocus: function clickFocus() {
      this.setClickFocus(true);
      this.focus();
    },
    focus: function focus20() {
      this.handle.focus();
    },
    blur: function blur17() {
      this.handle.blur();
    },
    handleMousedown: function handleMousedown(e) {
      this.focus();
      this.__emit("mousedown", e);
    }
  },
  render: function render114() {
    var _ref, _ref2;
    var _getOptionProps = getOptionProps(this), prefixCls2 = _getOptionProps.prefixCls, vertical = _getOptionProps.vertical, reverse = _getOptionProps.reverse, offset2 = _getOptionProps.offset, disabled = _getOptionProps.disabled, min3 = _getOptionProps.min, max3 = _getOptionProps.max, value26 = _getOptionProps.value, tabindex = _getOptionProps.tabindex;
    var className = classNames(this.$attrs.class, _defineProperty({}, "".concat(prefixCls2, "-handle-click-focused"), this.clickFocused));
    var positionStyle = vertical ? (_ref = {}, _defineProperty(_ref, reverse ? "top" : "bottom", "".concat(offset2, "%")), _defineProperty(_ref, reverse ? "bottom" : "top", "auto"), _defineProperty(_ref, "transform", "translateY(+50%)"), _ref) : (_ref2 = {}, _defineProperty(_ref2, reverse ? "right" : "left", "".concat(offset2, "%")), _defineProperty(_ref2, reverse ? "left" : "right", "auto"), _defineProperty(_ref2, "transform", "translateX(".concat(reverse ? "+" : "-", "50%)")), _ref2);
    var ariaProps = {
      "aria-valuemin": min3,
      "aria-valuemax": max3,
      "aria-valuenow": value26,
      "aria-disabled": !!disabled
    };
    var elStyle = _extends(_extends({}, this.$attrs.style), positionStyle);
    var _tabIndex = tabindex || 0;
    if (disabled || tabindex === null) {
      _tabIndex = null;
    }
    var handleProps = _extends(_extends(_extends(_extends({}, this.$attrs), {
      role: "slider",
      tabindex: _tabIndex
    }), ariaProps), {
      class: className,
      onBlur: this.handleBlur,
      onKeydown: this.handleKeyDown,
      onMousedown: this.handleMousedown,
      ref: this.setHandleRef,
      style: elStyle
    });
    return createVNode("div", handleProps, null);
  }
});
function isEventFromHandle(e, handles) {
  try {
    return Object.keys(handles).some(function(key2) {
      return e.target === findDOMNode(handles[key2]) || e.target === handles[key2];
    });
  } catch (error3) {
    return false;
  }
}
function isValueOutOfRange(value26, _ref) {
  var min3 = _ref.min, max3 = _ref.max;
  return value26 < min3 || value26 > max3;
}
function isNotTouchEvent(e) {
  return e.touches.length > 1 || e.type.toLowerCase() === "touchend" && e.touches.length > 0;
}
function getClosestPoint(val, _ref2) {
  var marks = _ref2.marks, step = _ref2.step, min3 = _ref2.min, max3 = _ref2.max;
  var points = Object.keys(marks).map(parseFloat);
  if (step !== null) {
    var base = Math.pow(10, getPrecision2(step));
    var maxSteps = Math.floor((max3 * base - min3 * base) / (step * base));
    var steps = Math.min((val - min3) / step, maxSteps);
    var closestStep = Math.round(steps) * step + min3;
    points.push(closestStep);
  }
  var diffs = points.map(function(point) {
    return Math.abs(val - point);
  });
  return points[diffs.indexOf(Math.min.apply(Math, _toConsumableArray(diffs)))];
}
function getPrecision2(step) {
  var stepString = step.toString();
  var precision = 0;
  if (stepString.indexOf(".") >= 0) {
    precision = stepString.length - stepString.indexOf(".") - 1;
  }
  return precision;
}
function getMousePosition(vertical, e) {
  var zoom = 1;
  if (window.visualViewport) {
    zoom = +(window.visualViewport.width / document.body.getBoundingClientRect().width).toFixed(2);
  }
  return (vertical ? e.clientY : e.pageX) / zoom;
}
function getTouchPosition(vertical, e) {
  var zoom = 1;
  if (window.visualViewport) {
    zoom = +(window.visualViewport.width / document.body.getBoundingClientRect().width).toFixed(2);
  }
  return (vertical ? e.touches[0].clientY : e.touches[0].pageX) / zoom;
}
function getHandleCenterPosition(vertical, handle) {
  var coords = handle.getBoundingClientRect();
  return vertical ? coords.top + coords.height * 0.5 : window.pageXOffset + coords.left + coords.width * 0.5;
}
function ensureValueInRange(val, _ref3) {
  var max3 = _ref3.max, min3 = _ref3.min;
  if (val <= min3) {
    return min3;
  }
  if (val >= max3) {
    return max3;
  }
  return val;
}
function ensureValuePrecision(val, props2) {
  var step = props2.step;
  var closestPoint = isFinite(getClosestPoint(val, props2)) ? getClosestPoint(val, props2) : 0;
  return step === null ? closestPoint : parseFloat(closestPoint.toFixed(getPrecision2(step)));
}
function pauseEvent(e) {
  e.stopPropagation();
  e.preventDefault();
}
function calculateNextValue(func, value26, props2) {
  var operations = {
    increase: function increase(a, b) {
      return a + b;
    },
    decrease: function decrease(a, b) {
      return a - b;
    }
  };
  var indexToGet = operations[func](Object.keys(props2.marks).indexOf(JSON.stringify(value26)), 1);
  var keyToGet = Object.keys(props2.marks)[indexToGet];
  if (props2.step) {
    return operations[func](value26, props2.step);
  } else if (!!Object.keys(props2.marks).length && !!props2.marks[keyToGet]) {
    return props2.marks[keyToGet];
  }
  return value26;
}
function getKeyboardValueMutator(e, vertical, reverse) {
  var increase = "increase";
  var decrease = "decrease";
  var method = increase;
  switch (e.keyCode) {
    case KeyCode$2.UP:
      method = vertical && reverse ? decrease : increase;
      break;
    case KeyCode$2.RIGHT:
      method = !vertical && reverse ? decrease : increase;
      break;
    case KeyCode$2.DOWN:
      method = vertical && reverse ? increase : decrease;
      break;
    case KeyCode$2.LEFT:
      method = !vertical && reverse ? increase : decrease;
      break;
    case KeyCode$2.END:
      return function(value26, props2) {
        return props2.max;
      };
    case KeyCode$2.HOME:
      return function(value26, props2) {
        return props2.min;
      };
    case KeyCode$2.PAGE_UP:
      return function(value26, props2) {
        return value26 + props2.step * 2;
      };
    case KeyCode$2.PAGE_DOWN:
      return function(value26, props2) {
        return value26 - props2.step * 2;
      };
    default:
      return void 0;
  }
  return function(value26, props2) {
    return calculateNextValue(method, value26, props2);
  };
}
var __rest$g = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$8() {
}
function createSlider(Component) {
  var propTypes2 = {
    min: PropsTypes.number,
    max: PropsTypes.number,
    step: PropsTypes.number,
    marks: PropsTypes.object,
    included: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    handle: PropsTypes.func,
    dots: PropsTypes.looseBool,
    vertical: PropsTypes.looseBool,
    reverse: PropsTypes.looseBool,
    minimumTrackStyle: PropsTypes.object,
    maximumTrackStyle: PropsTypes.object,
    handleStyle: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.arrayOf(PropsTypes.object)]),
    trackStyle: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.arrayOf(PropsTypes.object)]),
    railStyle: PropsTypes.object,
    dotStyle: PropsTypes.object,
    activeDotStyle: PropsTypes.object,
    autofocus: PropsTypes.looseBool
  };
  return defineComponent({
    name: "CreateSlider",
    mixins: [BaseMixin, Component],
    inheritAttrs: false,
    props: initDefaultProps$2(propTypes2, {
      prefixCls: "rc-slider",
      min: 0,
      max: 100,
      step: 1,
      marks: {},
      included: true,
      disabled: false,
      dots: false,
      vertical: false,
      reverse: false,
      trackStyle: [{}],
      handleStyle: [{}],
      railStyle: {},
      dotStyle: {},
      activeDotStyle: {}
    }),
    data: function data79() {
      var step = this.step, max3 = this.max, min3 = this.min;
      var isPointDiffEven = isFinite(max3 - min3) ? (max3 - min3) % step === 0 : true;
      warning$1(step && Math.floor(step) === step ? isPointDiffEven : true, "Slider", "Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)", max3 - min3, step);
      this.handlesRefs = {};
      return {};
    },
    mounted: function mounted45() {
      var _this = this;
      this.$nextTick(function() {
        _this.document = _this.sliderRef && _this.sliderRef.ownerDocument;
        var autofocus = _this.autofocus, disabled = _this.disabled;
        if (autofocus && !disabled) {
          _this.focus();
        }
      });
    },
    beforeUnmount: function beforeUnmount32() {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.removeDocumentEvents();
      });
    },
    methods: {
      defaultHandle: function defaultHandle(_a) {
        var index2 = _a.index;
        _a.directives;
        var className = _a.className, style3 = _a.style, restProps = __rest$g(_a, ["index", "directives", "className", "style"]);
        delete restProps.dragging;
        if (restProps.value === null) {
          return null;
        }
        var handleProps = _extends(_extends({}, restProps), {
          class: className,
          style: style3,
          key: index2
        });
        return createVNode(VcHandle, handleProps, null);
      },
      onMouseDown: function onMouseDown3(e) {
        if (e.button !== 0) {
          return;
        }
        var isVertical2 = this.vertical;
        var position = getMousePosition(isVertical2, e);
        if (!isEventFromHandle(e, this.handlesRefs)) {
          this.dragOffset = 0;
        } else {
          var handlePosition = getHandleCenterPosition(isVertical2, e.target);
          this.dragOffset = position - handlePosition;
          position = handlePosition;
        }
        this.removeDocumentEvents();
        this.onStart(position);
        this.addDocumentMouseEvents();
        pauseEvent(e);
      },
      onTouchStart: function onTouchStart2(e) {
        if (isNotTouchEvent(e))
          return;
        var isVertical2 = this.vertical;
        var position = getTouchPosition(isVertical2, e);
        if (!isEventFromHandle(e, this.handlesRefs)) {
          this.dragOffset = 0;
        } else {
          var handlePosition = getHandleCenterPosition(isVertical2, e.target);
          this.dragOffset = position - handlePosition;
          position = handlePosition;
        }
        this.onStart(position);
        this.addDocumentTouchEvents();
        pauseEvent(e);
      },
      onFocus: function onFocus6(e) {
        var vertical = this.vertical;
        if (isEventFromHandle(e, this.handlesRefs)) {
          var handlePosition = getHandleCenterPosition(vertical, e.target);
          this.dragOffset = 0;
          this.onStart(handlePosition);
          pauseEvent(e);
          this.__emit("focus", e);
        }
      },
      onBlur: function onBlur7(e) {
        this.onEnd();
        this.__emit("blur", e);
      },
      onMouseUp: function onMouseUp3() {
        if (this.handlesRefs[this.prevMovedHandleIndex]) {
          this.handlesRefs[this.prevMovedHandleIndex].clickFocus();
        }
      },
      onMouseMove: function onMouseMove3(e) {
        if (!this.sliderRef) {
          this.onEnd();
          return;
        }
        var position = getMousePosition(this.vertical, e);
        this.onMove(e, position - this.dragOffset);
      },
      onTouchMove: function onTouchMove2(e) {
        if (isNotTouchEvent(e) || !this.sliderRef) {
          this.onEnd();
          return;
        }
        var position = getTouchPosition(this.vertical, e);
        this.onMove(e, position - this.dragOffset);
      },
      onKeyDown: function onKeyDown14(e) {
        if (this.sliderRef && isEventFromHandle(e, this.handlesRefs)) {
          this.onKeyboard(e);
        }
      },
      onClickMarkLabel: function onClickMarkLabel(e, value26) {
        var _this3 = this;
        e.stopPropagation();
        this.onChange({
          sValue: value26
        });
        this.setState({
          sValue: value26
        }, function() {
          return _this3.onEnd(true);
        });
      },
      getSliderStart: function getSliderStart() {
        var slider = this.sliderRef;
        var vertical = this.vertical, reverse = this.reverse;
        var rect = slider.getBoundingClientRect();
        if (vertical) {
          return reverse ? rect.bottom : rect.top;
        }
        return window.pageXOffset + (reverse ? rect.right : rect.left);
      },
      getSliderLength: function getSliderLength() {
        var slider = this.sliderRef;
        if (!slider) {
          return 0;
        }
        var coords = slider.getBoundingClientRect();
        return this.vertical ? coords.height : coords.width;
      },
      addDocumentTouchEvents: function addDocumentTouchEvents() {
        this.onTouchMoveListener = addEventListenerWrap(this.document, "touchmove", this.onTouchMove);
        this.onTouchUpListener = addEventListenerWrap(this.document, "touchend", this.onEnd);
      },
      addDocumentMouseEvents: function addDocumentMouseEvents() {
        this.onMouseMoveListener = addEventListenerWrap(this.document, "mousemove", this.onMouseMove);
        this.onMouseUpListener = addEventListenerWrap(this.document, "mouseup", this.onEnd);
      },
      removeDocumentEvents: function removeDocumentEvents() {
        this.onTouchMoveListener && this.onTouchMoveListener.remove();
        this.onTouchUpListener && this.onTouchUpListener.remove();
        this.onMouseMoveListener && this.onMouseMoveListener.remove();
        this.onMouseUpListener && this.onMouseUpListener.remove();
      },
      focus: function focus27() {
        if (!this.disabled) {
          this.handlesRefs[0].focus();
        }
      },
      blur: function blur24() {
        var _this4 = this;
        if (!this.disabled) {
          Object.keys(this.handlesRefs).forEach(function(key2) {
            if (_this4.handlesRefs[key2] && _this4.handlesRefs[key2].blur) {
              _this4.handlesRefs[key2].blur();
            }
          });
        }
      },
      calcValue: function calcValue(offset2) {
        var vertical = this.vertical, min3 = this.min, max3 = this.max;
        var ratio = Math.abs(Math.max(offset2, 0) / this.getSliderLength());
        var value26 = vertical ? (1 - ratio) * (max3 - min3) + min3 : ratio * (max3 - min3) + min3;
        return value26;
      },
      calcValueByPos: function calcValueByPos(position) {
        var sign = this.reverse ? -1 : 1;
        var pixelOffset = sign * (position - this.getSliderStart());
        var nextValue = this.trimAlignValue(this.calcValue(pixelOffset));
        return nextValue;
      },
      calcOffset: function calcOffset(value26) {
        var min3 = this.min, max3 = this.max;
        var ratio = (value26 - min3) / (max3 - min3);
        return ratio * 100;
      },
      saveSlider: function saveSlider2(slider) {
        this.sliderRef = slider;
      },
      saveHandle: function saveHandle(index2, handle) {
        this.handlesRefs[index2] = handle;
      }
    },
    render: function render165() {
      var _classNames;
      var prefixCls2 = this.prefixCls, marks = this.marks, dots = this.dots, step = this.step, included = this.included, disabled = this.disabled, vertical = this.vertical, reverse = this.reverse, min3 = this.min, max3 = this.max, maximumTrackStyle = this.maximumTrackStyle, railStyle = this.railStyle, dotStyle = this.dotStyle, activeDotStyle = this.activeDotStyle;
      var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style, id2 = _this$$attrs.id;
      var _this$renderSlider = this.renderSlider(), tracks = _this$renderSlider.tracks, handles = _this$renderSlider.handles;
      var sliderClassName = classNames(prefixCls2, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-with-marks"), Object.keys(marks).length), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls2, "-vertical"), vertical), _classNames));
      var markProps = {
        vertical,
        marks,
        included,
        lowerBound: this.getLowerBound(),
        upperBound: this.getUpperBound(),
        max: max3,
        min: min3,
        reverse,
        class: "".concat(prefixCls2, "-mark"),
        onClickLabel: disabled ? noop$8 : this.onClickMarkLabel
      };
      var touchEvents = _defineProperty({}, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", disabled ? noop$8 : this.onTouchStart);
      return createVNode("div", _objectSpread2(_objectSpread2({
        "id": id2,
        "ref": this.saveSlider,
        "tabindex": "-1",
        "class": sliderClassName
      }, touchEvents), {}, {
        "onMousedown": disabled ? noop$8 : this.onMouseDown,
        "onMouseup": disabled ? noop$8 : this.onMouseUp,
        "onKeydown": disabled ? noop$8 : this.onKeyDown,
        "onFocus": disabled ? noop$8 : this.onFocus,
        "onBlur": disabled ? noop$8 : this.onBlur,
        "style": style3
      }), [createVNode("div", {
        "class": "".concat(prefixCls2, "-rail"),
        "style": _extends(_extends({}, maximumTrackStyle), railStyle)
      }, null), tracks, createVNode(Steps$4, {
        "prefixCls": prefixCls2,
        "vertical": vertical,
        "reverse": reverse,
        "marks": marks,
        "dots": dots,
        "step": step,
        "included": included,
        "lowerBound": this.getLowerBound(),
        "upperBound": this.getUpperBound(),
        "max": max3,
        "min": min3,
        "dotStyle": dotStyle,
        "activeDotStyle": activeDotStyle
      }, null), handles, createVNode(Marks$1, markProps, null), getSlot(this)]);
    }
  });
}
var Slider$1 = defineComponent({
  name: "Slider",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    defaultValue: PropsTypes.number,
    value: PropsTypes.number,
    disabled: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    reverse: PropsTypes.looseBool,
    min: PropsTypes.number,
    max: PropsTypes.number
  },
  data: function data58() {
    var defaultValue = this.defaultValue !== void 0 ? this.defaultValue : this.min;
    var value26 = this.value !== void 0 ? this.value : defaultValue;
    return {
      sValue: this.trimAlignValue(value26),
      dragging: false
    };
  },
  watch: {
    value: {
      handler: function handler3(val) {
        this.setChangeValue(val);
      },
      deep: true
    },
    min: function min() {
      var sValue = this.sValue;
      this.setChangeValue(sValue);
    },
    max: function max() {
      var sValue = this.sValue;
      this.setChangeValue(sValue);
    }
  },
  methods: {
    setChangeValue: function setChangeValue(value26) {
      var newValue = value26 !== void 0 ? value26 : this.sValue;
      var nextValue = this.trimAlignValue(newValue, this.$props);
      if (nextValue === this.sValue)
        return;
      this.setState({
        sValue: nextValue
      });
      if (isValueOutOfRange(newValue, this.$props)) {
        this.__emit("change", nextValue);
      }
    },
    onChange: function onChange5(state) {
      var isNotControlled = !hasProp(this, "value");
      var nextState = state.sValue > this.max ? _extends(_extends({}, state), {
        sValue: this.max
      }) : state;
      if (isNotControlled) {
        this.setState(nextState);
      }
      var changedValue = nextState.sValue;
      this.__emit("change", changedValue);
    },
    onStart: function onStart(position) {
      this.setState({
        dragging: true
      });
      var sValue = this.sValue;
      this.__emit("beforeChange", sValue);
      var value26 = this.calcValueByPos(position);
      this.startValue = value26;
      this.startPosition = position;
      if (value26 === sValue)
        return;
      this.prevMovedHandleIndex = 0;
      this.onChange({
        sValue: value26
      });
    },
    onEnd: function onEnd(force) {
      var dragging = this.dragging;
      this.removeDocumentEvents();
      if (dragging || force) {
        this.__emit("afterChange", this.sValue);
      }
      this.setState({
        dragging: false
      });
    },
    onMove: function onMove(e, position) {
      pauseEvent(e);
      var sValue = this.sValue;
      var value26 = this.calcValueByPos(position);
      if (value26 === sValue)
        return;
      this.onChange({
        sValue: value26
      });
    },
    onKeyboard: function onKeyboard(e) {
      var _this$$props = this.$props, reverse = _this$$props.reverse, vertical = _this$$props.vertical;
      var valueMutator = getKeyboardValueMutator(e, vertical, reverse);
      if (valueMutator) {
        pauseEvent(e);
        var sValue = this.sValue;
        var mutatedValue = valueMutator(sValue, this.$props);
        var value26 = this.trimAlignValue(mutatedValue);
        if (value26 === sValue)
          return;
        this.onChange({
          sValue: value26
        });
        this.__emit("afterChange", value26);
        this.onEnd();
      }
    },
    getLowerBound: function getLowerBound() {
      return this.min;
    },
    getUpperBound: function getUpperBound() {
      return this.sValue;
    },
    trimAlignValue: function trimAlignValue(v) {
      var nextProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (v === null) {
        return null;
      }
      var mergedProps = _extends(_extends({}, this.$props), nextProps);
      var val = ensureValueInRange(v, mergedProps);
      return ensureValuePrecision(val, mergedProps);
    },
    getTrack: function getTrack(_ref) {
      var prefixCls2 = _ref.prefixCls, reverse = _ref.reverse, vertical = _ref.vertical, included = _ref.included, offset2 = _ref.offset, minimumTrackStyle = _ref.minimumTrackStyle, _trackStyle = _ref._trackStyle;
      return createVNode(Track$1, {
        "class": "".concat(prefixCls2, "-track"),
        "vertical": vertical,
        "included": included,
        "offset": 0,
        "reverse": reverse,
        "length": offset2,
        "style": _extends(_extends({}, minimumTrackStyle), _trackStyle)
      }, null);
    },
    renderSlider: function renderSlider() {
      var _this = this;
      var prefixCls2 = this.prefixCls, vertical = this.vertical, included = this.included, disabled = this.disabled, minimumTrackStyle = this.minimumTrackStyle, trackStyle = this.trackStyle, handleStyle = this.handleStyle, tabindex = this.tabindex, min3 = this.min, max3 = this.max, reverse = this.reverse, handle = this.handle, defaultHandle = this.defaultHandle;
      var handleGenerator = handle || defaultHandle;
      var sValue = this.sValue, dragging = this.dragging;
      var offset2 = this.calcOffset(sValue);
      var handles = handleGenerator({
        class: "".concat(prefixCls2, "-handle"),
        prefixCls: prefixCls2,
        vertical,
        offset: offset2,
        value: sValue,
        dragging,
        disabled,
        min: min3,
        max: max3,
        reverse,
        index: 0,
        tabindex,
        style: handleStyle[0] || handleStyle,
        ref: function ref2(h2) {
          return _this.saveHandle(0, h2);
        },
        onFocus: this.onFocus,
        onBlur: this.onBlur
      });
      var _trackStyle = trackStyle[0] || trackStyle;
      return {
        tracks: this.getTrack({
          prefixCls: prefixCls2,
          reverse,
          vertical,
          included,
          offset: offset2,
          minimumTrackStyle,
          _trackStyle
        }),
        handles
      };
    }
  }
});
var VcSlider = createSlider(Slider$1);
var _trimAlignValue = function trimAlignValue2(_ref) {
  var value26 = _ref.value, handle = _ref.handle, bounds = _ref.bounds, props2 = _ref.props;
  var allowCross = props2.allowCross, pushable = props2.pushable;
  var thershold = Number(pushable);
  var valInRange = ensureValueInRange(value26, props2);
  var valNotConflict = valInRange;
  if (!allowCross && handle != null && bounds !== void 0) {
    if (handle > 0 && valInRange <= bounds[handle - 1] + thershold) {
      valNotConflict = bounds[handle - 1] + thershold;
    }
    if (handle < bounds.length - 1 && valInRange >= bounds[handle + 1] - thershold) {
      valNotConflict = bounds[handle + 1] - thershold;
    }
  }
  return ensureValuePrecision(valNotConflict, props2);
};
var rangeProps = {
  defaultValue: PropsTypes.arrayOf(PropsTypes.number),
  value: PropsTypes.arrayOf(PropsTypes.number),
  count: PropsTypes.number,
  pushable: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.number])),
  allowCross: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  reverse: PropsTypes.looseBool,
  tabindex: PropsTypes.arrayOf(PropsTypes.number),
  prefixCls: PropsTypes.string,
  min: PropsTypes.number,
  max: PropsTypes.number,
  autofocus: PropsTypes.looseBool
};
var Range = {
  name: "Range",
  inheritAttrs: false,
  displayName: "Range",
  mixins: [BaseMixin],
  props: initDefaultProps$2(rangeProps, {
    count: 1,
    allowCross: true,
    pushable: false,
    tabindex: []
  }),
  data: function data59() {
    var _this = this;
    var count = this.count, min3 = this.min, max3 = this.max;
    var initialValue = Array.apply(void 0, _toConsumableArray(Array(count + 1))).map(function() {
      return min3;
    });
    var defaultValue = hasProp(this, "defaultValue") ? this.defaultValue : initialValue;
    var value26 = this.value;
    if (value26 === void 0) {
      value26 = defaultValue;
    }
    var bounds = value26.map(function(v, i) {
      return _trimAlignValue({
        value: v,
        handle: i,
        props: _this.$props
      });
    });
    var recent = bounds[0] === max3 ? 0 : bounds.length - 1;
    return {
      sHandle: null,
      recent,
      bounds
    };
  },
  watch: {
    value: {
      handler: function handler4(val) {
        var bounds = this.bounds;
        this.setChangeValue(val || bounds);
      },
      deep: true
    },
    min: function min2() {
      var value26 = this.value;
      this.setChangeValue(value26 || this.bounds);
    },
    max: function max2() {
      var value26 = this.value;
      this.setChangeValue(value26 || this.bounds);
    }
  },
  methods: {
    setChangeValue: function setChangeValue2(value26) {
      var _this2 = this;
      var bounds = this.bounds;
      var nextBounds = value26.map(function(v, i) {
        return _trimAlignValue({
          value: v,
          handle: i,
          bounds,
          props: _this2.$props
        });
      });
      if (nextBounds.length === bounds.length && nextBounds.every(function(v, i) {
        return v === bounds[i];
      }))
        return;
      this.setState({
        bounds: nextBounds
      });
      if (value26.some(function(v) {
        return isValueOutOfRange(v, _this2.$props);
      })) {
        var newValues = value26.map(function(v) {
          return ensureValueInRange(v, _this2.$props);
        });
        this.__emit("change", newValues);
      }
    },
    onChange: function onChange6(state) {
      var isNotControlled = !hasProp(this, "value");
      if (isNotControlled) {
        this.setState(state);
      } else {
        var controlledState = {};
        ["sHandle", "recent"].forEach(function(item) {
          if (state[item] !== void 0) {
            controlledState[item] = state[item];
          }
        });
        if (Object.keys(controlledState).length) {
          this.setState(controlledState);
        }
      }
      var data79 = _extends(_extends({}, this.$data), state);
      var changedValue = data79.bounds;
      this.__emit("change", changedValue);
    },
    onStart: function onStart2(position) {
      var bounds = this.bounds;
      this.__emit("beforeChange", bounds);
      var value26 = this.calcValueByPos(position);
      this.startValue = value26;
      this.startPosition = position;
      var closestBound = this.getClosestBound(value26);
      this.prevMovedHandleIndex = this.getBoundNeedMoving(value26, closestBound);
      this.setState({
        sHandle: this.prevMovedHandleIndex,
        recent: this.prevMovedHandleIndex
      });
      var prevValue = bounds[this.prevMovedHandleIndex];
      if (value26 === prevValue)
        return;
      var nextBounds = _toConsumableArray(bounds);
      nextBounds[this.prevMovedHandleIndex] = value26;
      this.onChange({
        bounds: nextBounds
      });
    },
    onEnd: function onEnd2(force) {
      var sHandle = this.sHandle;
      this.removeDocumentEvents();
      if (sHandle !== null || force) {
        this.__emit("afterChange", this.bounds);
      }
      this.setState({
        sHandle: null
      });
    },
    onMove: function onMove2(e, position) {
      pauseEvent(e);
      var bounds = this.bounds, sHandle = this.sHandle;
      var value26 = this.calcValueByPos(position);
      var oldValue = bounds[sHandle];
      if (value26 === oldValue)
        return;
      this.moveTo(value26);
    },
    onKeyboard: function onKeyboard2(e) {
      var _this$$props = this.$props, reverse = _this$$props.reverse, vertical = _this$$props.vertical;
      var valueMutator = getKeyboardValueMutator(e, vertical, reverse);
      if (valueMutator) {
        pauseEvent(e);
        var bounds = this.bounds, sHandle = this.sHandle;
        var oldValue = bounds[sHandle === null ? this.recent : sHandle];
        var mutatedValue = valueMutator(oldValue, this.$props);
        var value26 = _trimAlignValue({
          value: mutatedValue,
          handle: sHandle,
          bounds,
          props: this.$props
        });
        if (value26 === oldValue)
          return;
        var isFromKeyboardEvent = true;
        this.moveTo(value26, isFromKeyboardEvent);
      }
    },
    getClosestBound: function getClosestBound(value26) {
      var bounds = this.bounds;
      var closestBound = 0;
      for (var i = 1; i < bounds.length - 1; ++i) {
        if (value26 > bounds[i]) {
          closestBound = i;
        }
      }
      if (Math.abs(bounds[closestBound + 1] - value26) < Math.abs(bounds[closestBound] - value26)) {
        closestBound += 1;
      }
      return closestBound;
    },
    getBoundNeedMoving: function getBoundNeedMoving(value26, closestBound) {
      var bounds = this.bounds, recent = this.recent;
      var boundNeedMoving = closestBound;
      var isAtTheSamePoint = bounds[closestBound + 1] === bounds[closestBound];
      if (isAtTheSamePoint && bounds[recent] === bounds[closestBound]) {
        boundNeedMoving = recent;
      }
      if (isAtTheSamePoint && value26 !== bounds[closestBound + 1]) {
        boundNeedMoving = value26 < bounds[closestBound + 1] ? closestBound : closestBound + 1;
      }
      return boundNeedMoving;
    },
    getLowerBound: function getLowerBound2() {
      return this.bounds[0];
    },
    getUpperBound: function getUpperBound2() {
      var bounds = this.bounds;
      return bounds[bounds.length - 1];
    },
    getPoints: function getPoints() {
      var marks = this.marks, step = this.step, min3 = this.min, max3 = this.max;
      var cache = this._getPointsCache;
      if (!cache || cache.marks !== marks || cache.step !== step) {
        var pointsObject = _extends({}, marks);
        if (step !== null) {
          for (var point = min3; point <= max3; point += step) {
            pointsObject[point] = point;
          }
        }
        var points = Object.keys(pointsObject).map(parseFloat);
        points.sort(function(a, b) {
          return a - b;
        });
        this._getPointsCache = {
          marks,
          step,
          points
        };
      }
      return this._getPointsCache.points;
    },
    moveTo: function moveTo(value26, isFromKeyboardEvent) {
      var _this3 = this;
      var nextBounds = _toConsumableArray(this.bounds);
      var sHandle = this.sHandle, recent = this.recent;
      var handle = sHandle === null ? recent : sHandle;
      nextBounds[handle] = value26;
      var nextHandle = handle;
      if (this.$props.pushable !== false) {
        this.pushSurroundingHandles(nextBounds, nextHandle);
      } else if (this.$props.allowCross) {
        nextBounds.sort(function(a, b) {
          return a - b;
        });
        nextHandle = nextBounds.indexOf(value26);
      }
      this.onChange({
        recent: nextHandle,
        sHandle: nextHandle,
        bounds: nextBounds
      });
      if (isFromKeyboardEvent) {
        this.__emit("afterChange", nextBounds);
        this.setState({}, function() {
          _this3.handlesRefs[nextHandle].focus();
        });
        this.onEnd();
      }
    },
    pushSurroundingHandles: function pushSurroundingHandles(bounds, handle) {
      var value26 = bounds[handle];
      var threshold = this.pushable;
      threshold = Number(threshold);
      var direction = 0;
      if (bounds[handle + 1] - value26 < threshold) {
        direction = 1;
      }
      if (value26 - bounds[handle - 1] < threshold) {
        direction = -1;
      }
      if (direction === 0) {
        return;
      }
      var nextHandle = handle + direction;
      var diffToNext = direction * (bounds[nextHandle] - value26);
      if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
        bounds[handle] = bounds[nextHandle] - direction * threshold;
      }
    },
    pushHandle: function pushHandle(bounds, handle, direction, amount) {
      var originalValue = bounds[handle];
      var currentValue = bounds[handle];
      while (direction * (currentValue - originalValue) < amount) {
        if (!this.pushHandleOnePoint(bounds, handle, direction)) {
          bounds[handle] = originalValue;
          return false;
        }
        currentValue = bounds[handle];
      }
      return true;
    },
    pushHandleOnePoint: function pushHandleOnePoint(bounds, handle, direction) {
      var points = this.getPoints();
      var pointIndex = points.indexOf(bounds[handle]);
      var nextPointIndex = pointIndex + direction;
      if (nextPointIndex >= points.length || nextPointIndex < 0) {
        return false;
      }
      var nextHandle = handle + direction;
      var nextValue = points[nextPointIndex];
      var threshold = this.pushable;
      var diffToNext = direction * (bounds[nextHandle] - nextValue);
      if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
        return false;
      }
      bounds[handle] = nextValue;
      return true;
    },
    trimAlignValue: function trimAlignValue3(value26) {
      var sHandle = this.sHandle, bounds = this.bounds;
      return _trimAlignValue({
        value: value26,
        handle: sHandle,
        bounds,
        props: this.$props
      });
    },
    ensureValueNotConflict: function ensureValueNotConflict(handle, val, _ref2) {
      var allowCross = _ref2.allowCross, thershold = _ref2.pushable;
      var state = this.$data || {};
      var bounds = state.bounds;
      handle = handle === void 0 ? state.sHandle : handle;
      thershold = Number(thershold);
      if (!allowCross && handle != null && bounds !== void 0) {
        if (handle > 0 && val <= bounds[handle - 1] + thershold) {
          return bounds[handle - 1] + thershold;
        }
        if (handle < bounds.length - 1 && val >= bounds[handle + 1] - thershold) {
          return bounds[handle + 1] - thershold;
        }
      }
      return val;
    },
    getTrack: function getTrack2(_ref3) {
      var bounds = _ref3.bounds, prefixCls2 = _ref3.prefixCls, reverse = _ref3.reverse, vertical = _ref3.vertical, included = _ref3.included, offsets = _ref3.offsets, trackStyle = _ref3.trackStyle;
      return bounds.slice(0, -1).map(function(_, index2) {
        var _classNames;
        var i = index2 + 1;
        var trackClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-track"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-track-").concat(i), true), _classNames));
        return createVNode(Track$1, {
          "class": trackClassName,
          "vertical": vertical,
          "reverse": reverse,
          "included": included,
          "offset": offsets[i - 1],
          "length": offsets[i] - offsets[i - 1],
          "style": trackStyle[index2],
          "key": i
        }, null);
      });
    },
    renderSlider: function renderSlider2() {
      var _this4 = this;
      var sHandle = this.sHandle, bounds = this.bounds, prefixCls2 = this.prefixCls, vertical = this.vertical, included = this.included, disabled = this.disabled, min3 = this.min, max3 = this.max, reverse = this.reverse, handle = this.handle, defaultHandle = this.defaultHandle, trackStyle = this.trackStyle, handleStyle = this.handleStyle, tabindex = this.tabindex;
      var handleGenerator = handle || defaultHandle;
      var offsets = bounds.map(function(v) {
        return _this4.calcOffset(v);
      });
      var handleClassName = "".concat(prefixCls2, "-handle");
      var handles = bounds.map(function(v, i) {
        var _classNames2;
        var _tabIndex = tabindex[i] || 0;
        if (disabled || tabindex[i] === null) {
          _tabIndex = null;
        }
        return handleGenerator({
          class: classNames((_classNames2 = {}, _defineProperty(_classNames2, handleClassName, true), _defineProperty(_classNames2, "".concat(handleClassName, "-").concat(i + 1), true), _classNames2)),
          prefixCls: prefixCls2,
          vertical,
          offset: offsets[i],
          value: v,
          dragging: sHandle === i,
          index: i,
          tabindex: _tabIndex,
          min: min3,
          max: max3,
          reverse,
          disabled,
          style: handleStyle[i],
          ref: function ref2(h2) {
            return _this4.saveHandle(i, h2);
          },
          onFocus: _this4.onFocus,
          onBlur: _this4.onBlur
        });
      });
      return {
        tracks: this.getTrack({
          bounds,
          prefixCls: prefixCls2,
          reverse,
          vertical,
          included,
          offsets,
          trackStyle
        }),
        handles
      };
    }
  }
};
var VcRange = createSlider(Range);
var __rest$f = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var tooltipProps = abstractTooltipProps();
var SliderProps = function SliderProps2() {
  return {
    prefixCls: PropsTypes.string,
    tooltipPrefixCls: PropsTypes.string,
    range: PropsTypes.looseBool,
    reverse: PropsTypes.looseBool,
    min: PropsTypes.number,
    max: PropsTypes.number,
    step: PropsTypes.any,
    marks: PropsTypes.object,
    dots: PropsTypes.looseBool,
    value: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.arrayOf(PropsTypes.number)]),
    defaultValue: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.arrayOf(PropsTypes.number)]),
    included: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    vertical: PropsTypes.looseBool,
    tipFormatter: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.object]),
    tooltipVisible: PropsTypes.looseBool,
    tooltipPlacement: tooltipProps.placement,
    getTooltipPopupContainer: PropsTypes.func,
    onChange: PropsTypes.func,
    onAfterChange: PropsTypes.func
  };
};
var defaultTipFormatter = function defaultTipFormatter2(value26) {
  return value26.toString();
};
var Slider = defineComponent({
  name: "ASlider",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends({}, SliderProps()),
  emits: ["update:value", "change"],
  setup: function setup124() {
    return {
      vcSlider: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data60() {
    return {
      visibles: {}
    };
  },
  methods: {
    toggleTooltipVisible: function toggleTooltipVisible(index2, visible9) {
      this.setState(function(_ref) {
        var visibles = _ref.visibles;
        return {
          visibles: _extends(_extends({}, visibles), _defineProperty({}, index2, visible9))
        };
      });
    },
    handleWithTooltip: function handleWithTooltip(tooltipPrefixCls, prefixCls2, _a) {
      var _this = this;
      var value26 = _a.value, dragging = _a.dragging, index2 = _a.index, restProps = __rest$f(_a, ["value", "dragging", "index"]);
      var _this$$props = this.$props, _this$$props$tipForma = _this$$props.tipFormatter, tipFormatter = _this$$props$tipForma === void 0 ? defaultTipFormatter : _this$$props$tipForma, tooltipVisible = _this$$props.tooltipVisible, tooltipPlacement = _this$$props.tooltipPlacement, getTooltipPopupContainer = _this$$props.getTooltipPopupContainer;
      var visibles = this.visibles;
      var isTipFormatter = tipFormatter ? visibles[index2] || dragging : false;
      var visible9 = tooltipVisible || tooltipVisible === void 0 && isTipFormatter;
      var tooltipProps2 = {
        prefixCls: tooltipPrefixCls,
        title: tipFormatter ? tipFormatter(value26) : "",
        visible: visible9,
        placement: tooltipPlacement || "top",
        transitionName: "zoom-down",
        overlayClassName: "".concat(prefixCls2, "-tooltip"),
        getPopupContainer: getTooltipPopupContainer || function() {
          return document.body;
        },
        key: index2
      };
      var handleProps = _extends(_extends({
        value: value26
      }, restProps), {
        onMouseenter: function onMouseenter2() {
          return _this.toggleTooltipVisible(index2, true);
        },
        onMouseleave: function onMouseleave2() {
          return _this.toggleTooltipVisible(index2, false);
        }
      });
      return createVNode(Tooltip, tooltipProps2, {
        default: function _default8() {
          return [createVNode(VcHandle, handleProps, null)];
        }
      });
    },
    saveSlider: function saveSlider(node) {
      this.vcSlider = node;
    },
    focus: function focus21() {
      this.vcSlider.focus();
    },
    blur: function blur18() {
      this.vcSlider.blur();
    },
    handleChange: function handleChange17(val) {
      this.$emit("update:value", val);
      this.$emit("change", val);
    }
  },
  render: function render115() {
    var _this2 = this;
    var _a = _extends(_extends({}, getOptionProps(this)), this.$attrs), range = _a.range, customizePrefixCls = _a.prefixCls, customizeTooltipPrefixCls = _a.tooltipPrefixCls, restProps = __rest$f(_a, ["range", "prefixCls", "tooltipPrefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("slider", customizePrefixCls);
    var tooltipPrefixCls = getPrefixCls2("tooltip", customizeTooltipPrefixCls);
    if (range) {
      var vcRangeProps = _extends(_extends({}, restProps), {
        prefixCls: prefixCls2,
        tooltipPrefixCls,
        handle: function handle(info3) {
          return _this2.handleWithTooltip(tooltipPrefixCls, prefixCls2, info3);
        },
        ref: this.saveSlider,
        onChange: this.handleChange
      });
      return createVNode(VcRange, vcRangeProps, null);
    }
    var vcSliderProps = _extends(_extends({}, restProps), {
      prefixCls: prefixCls2,
      tooltipPrefixCls,
      handle: function handle(info3) {
        return _this2.handleWithTooltip(tooltipPrefixCls, prefixCls2, info3);
      },
      ref: this.saveSlider,
      onChange: this.handleChange
    });
    return createVNode(VcSlider, vcSliderProps, null);
  }
});
var index$4 = withInstall(Slider);
var spaceSize = {
  small: 8,
  middle: 16,
  large: 24
};
var spaceProps = {
  prefixCls: PropsTypes.string,
  size: {
    type: [String, Number, Array]
  },
  direction: PropsTypes.oneOf(tuple("horizontal", "vertical")).def("horizontal"),
  align: PropsTypes.oneOf(tuple("start", "end", "center", "baseline")),
  wrap: PropsTypes.looseBool
};
function getNumberSize(size) {
  return typeof size === "string" ? spaceSize[size] : size || 0;
}
var Space = defineComponent({
  name: "ASpace",
  props: spaceProps,
  slots: ["split"],
  setup: function setup125(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("space", props2), prefixCls2 = _useConfigInject.prefixCls, space = _useConfigInject.space, directionConfig = _useConfigInject.direction;
    var supportFlexGap = useFlexGapSupport();
    var size = computed(function() {
      var _a;
      return props2.size || ((_a = space.value) === null || _a === void 0 ? void 0 : _a.size) || "small";
    });
    var horizontalSize = ref();
    var verticalSize = ref();
    watch(size, function() {
      var _map = (Array.isArray(size.value) ? size.value : [size.value, size.value]).map(function(item) {
        return getNumberSize(item);
      });
      var _map2 = _slicedToArray(_map, 2);
      horizontalSize.value = _map2[0];
      verticalSize.value = _map2[1];
    }, {
      immediate: true
    });
    var mergedAlign = computed(function() {
      return props2.align === void 0 && props2.direction === "horizontal" ? "center" : props2.align;
    });
    var cn = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-").concat(props2.direction), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2.value, "-rtl"), directionConfig.value === "rtl"), _defineProperty(_classNames, "".concat(prefixCls2.value, "-align-").concat(mergedAlign.value), mergedAlign.value), _classNames));
    });
    var marginDirection = computed(function() {
      return directionConfig.value === "rtl" ? "marginLeft" : "marginRight";
    });
    var style3 = computed(function() {
      var gapStyle = {};
      if (supportFlexGap.value) {
        gapStyle.columnGap = "".concat(horizontalSize.value, "px");
        gapStyle.rowGap = "".concat(verticalSize.value, "px");
      }
      return _extends(_extends({}, gapStyle), props2.wrap && {
        flexWrap: "wrap",
        marginBottom: "".concat(-verticalSize.value, "px")
      });
    });
    return function() {
      var _a, _b;
      var wrap = props2.wrap, _props$direction = props2.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction;
      var items = filterEmpty((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      var len = items.length;
      if (len === 0) {
        return null;
      }
      var split = (_b = slots.split) === null || _b === void 0 ? void 0 : _b.call(slots);
      var itemClassName = "".concat(prefixCls2.value, "-item");
      var horizontalSizeVal = horizontalSize.value;
      var latestIndex = len - 1;
      return createVNode("div", {
        "class": cn.value,
        "style": style3.value
      }, [items.map(function(child, index2) {
        var itemStyle = {};
        if (!supportFlexGap.value) {
          if (direction === "vertical") {
            if (index2 < latestIndex) {
              itemStyle = {
                marginBottom: "".concat(horizontalSizeVal / (split ? 2 : 1), "px")
              };
            }
          } else {
            itemStyle = _extends(_extends({}, index2 < latestIndex && _defineProperty({}, marginDirection.value, "".concat(horizontalSizeVal / (split ? 2 : 1), "px"))), wrap && {
              paddingBottom: "".concat(verticalSize.value, "px")
            });
          }
        }
        return createVNode(Fragment, null, [createVNode("div", {
          "class": itemClassName,
          "style": itemStyle
        }, [child]), index2 < latestIndex && split && createVNode("span", {
          "class": "".concat(itemClassName, "-split"),
          "style": itemStyle
        }, [split])]);
      })]);
    };
  }
});
var index$3 = withInstall(Space);
function isFlexSupported() {
  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    var documentElement = window.document.documentElement;
    return "flex" in documentElement.style || "webkitFlex" in documentElement.style || "Flex" in documentElement.style || "msFlex" in documentElement.style;
  }
  return false;
}
var Steps$2 = defineComponent({
  name: "Steps",
  mixins: [BaseMixin],
  props: {
    type: PropsTypes.string.def("default"),
    prefixCls: PropsTypes.string.def("rc-steps"),
    iconPrefix: PropsTypes.string.def("rc"),
    direction: PropsTypes.string.def("horizontal"),
    labelPlacement: PropsTypes.string.def("horizontal"),
    status: PropsTypes.string.def("process"),
    size: PropsTypes.string.def(""),
    progressDot: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func])),
    initial: PropsTypes.number.def(0),
    current: PropsTypes.number.def(0),
    icons: PropsTypes.shape({
      finish: PropsTypes.any,
      error: PropsTypes.any
    }).loose,
    canClick: PropsTypes.looseBool
  },
  data: function data61() {
    this.calcStepOffsetWidth = debounce$1(this.calcStepOffsetWidth, 150);
    return {
      flexSupported: true,
      lastStepOffsetWidth: 0
    };
  },
  mounted: function mounted32() {
    var _this = this;
    this.$nextTick(function() {
      _this.calcStepOffsetWidth();
      if (!isFlexSupported()) {
        _this.setState({
          flexSupported: false
        });
      }
    });
  },
  updated: function updated18() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.calcStepOffsetWidth();
    });
  },
  beforeUnmount: function beforeUnmount23() {
    if (this.calcTimeout) {
      clearTimeout(this.calcTimeout);
    }
    if (this.calcStepOffsetWidth && this.calcStepOffsetWidth.cancel) {
      this.calcStepOffsetWidth.cancel();
    }
  },
  methods: {
    onStepClick: function onStepClick(next3) {
      var current2 = this.$props.current;
      if (current2 !== next3) {
        this.__emit("change", next3);
      }
    },
    calcStepOffsetWidth: function calcStepOffsetWidth() {
      var _this3 = this;
      if (isFlexSupported()) {
        return;
      }
      var lastStepOffsetWidth = this.$data.lastStepOffsetWidth;
      var domNode = this.$refs.vcStepsRef;
      if (domNode.children.length > 0) {
        if (this.calcTimeout) {
          clearTimeout(this.calcTimeout);
        }
        this.calcTimeout = setTimeout(function() {
          var offsetWidth = (domNode.lastChild.offsetWidth || 0) + 1;
          if (lastStepOffsetWidth === offsetWidth || Math.abs(lastStepOffsetWidth - offsetWidth) <= 3) {
            return;
          }
          _this3.setState({
            lastStepOffsetWidth: offsetWidth
          });
        });
      }
    }
  },
  render: function render116() {
    var _classString, _this4 = this;
    var prefixCls2 = this.prefixCls, direction = this.direction, type2 = this.type, labelPlacement = this.labelPlacement, iconPrefix = this.iconPrefix, status = this.status, size = this.size, current2 = this.current, progressDot = this.progressDot, initial = this.initial, icons = this.icons, canClick = this.canClick;
    var isNav = type2 === "navigation";
    var lastStepOffsetWidth = this.lastStepOffsetWidth, flexSupported = this.flexSupported;
    var filteredChildren = getSlot(this);
    var lastIndex = filteredChildren.length - 1;
    var adjustedlabelPlacement = progressDot ? "vertical" : labelPlacement;
    var classString = (_classString = {}, _defineProperty(_classString, prefixCls2, true), _defineProperty(_classString, "".concat(prefixCls2, "-").concat(direction), true), _defineProperty(_classString, "".concat(prefixCls2, "-").concat(size), size), _defineProperty(_classString, "".concat(prefixCls2, "-label-").concat(adjustedlabelPlacement), direction === "horizontal"), _defineProperty(_classString, "".concat(prefixCls2, "-dot"), !!progressDot), _defineProperty(_classString, "".concat(prefixCls2, "-navigation"), isNav), _defineProperty(_classString, "".concat(prefixCls2, "-flex-not-supported"), !flexSupported), _classString);
    var stepsProps2 = {
      class: classString,
      ref: "vcStepsRef"
    };
    return createVNode("div", stepsProps2, [filteredChildren.map(function(child, index2) {
      var childProps = getPropsData(child);
      var stepNumber = initial + index2;
      var stepProps = _extends({
        stepNumber: "".concat(stepNumber + 1),
        stepIndex: stepNumber,
        prefixCls: prefixCls2,
        iconPrefix,
        progressDot,
        icons
      }, childProps);
      if (canClick) {
        stepProps.onStepClick = _this4.onStepClick;
      }
      if (!flexSupported && direction !== "vertical") {
        if (isNav) {
          stepProps.itemWidth = "".concat(100 / (lastIndex + 1), "%");
          stepProps.adjustMarginRight = 0;
        } else if (index2 !== lastIndex) {
          stepProps.itemWidth = "".concat(100 / lastIndex, "%");
          stepProps.adjustMarginRight = "".concat(-Math.round(lastStepOffsetWidth / lastIndex + 1), "px");
        }
      }
      if (status === "error" && index2 === current2 - 1) {
        stepProps.class = "".concat(prefixCls2, "-next-error");
      }
      if (!childProps.status) {
        if (stepNumber === current2) {
          stepProps.status = status;
        } else if (stepNumber < current2) {
          stepProps.status = "finish";
        } else {
          stepProps.status = "wait";
        }
      }
      stepProps.active = stepNumber === current2;
      return cloneElement(child, stepProps);
    })]);
  }
});
function isString2(str) {
  return typeof str === "string";
}
function noop$7() {
}
var Step$1 = defineComponent({
  name: "Step",
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    wrapperStyle: PropsTypes.object,
    itemWidth: PropsTypes.string,
    active: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    status: PropsTypes.string,
    iconPrefix: PropsTypes.string,
    icon: PropsTypes.any,
    adjustMarginRight: PropsTypes.string,
    stepNumber: PropsTypes.string,
    stepIndex: PropsTypes.number,
    description: PropsTypes.any,
    title: PropsTypes.any,
    subTitle: PropsTypes.any,
    progressDot: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func])),
    tailContent: PropsTypes.any,
    icons: PropsTypes.shape({
      finish: PropsTypes.any,
      error: PropsTypes.any
    }).loose,
    onClick: PropsTypes.func,
    onStepClick: PropsTypes.func
  },
  methods: {
    onItemClick: function onItemClick() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.__emit.apply(this, ["click"].concat(args));
      this.__emit("stepClick", this.stepIndex);
    },
    renderIconNode: function renderIconNode() {
      var _iconClassName;
      var _getOptionProps = getOptionProps(this), prefixCls2 = _getOptionProps.prefixCls, stepNumber = _getOptionProps.stepNumber, status = _getOptionProps.status, iconPrefix = _getOptionProps.iconPrefix, icons = _getOptionProps.icons, progressDot = _getOptionProps.progressDot;
      var icon = getComponent(this, "icon");
      var title2 = getComponent(this, "title");
      var description2 = getComponent(this, "description");
      var iconNode;
      var iconClassName = (_iconClassName = {}, _defineProperty(_iconClassName, "".concat(prefixCls2, "-icon"), true), _defineProperty(_iconClassName, "".concat(iconPrefix, "icon"), true), _defineProperty(_iconClassName, "".concat(iconPrefix, "icon-").concat(icon), icon && isString2(icon)), _defineProperty(_iconClassName, "".concat(iconPrefix, "icon-check"), !icon && status === "finish" && icons && !icons.finish), _defineProperty(_iconClassName, "".concat(iconPrefix, "icon-close"), !icon && status === "error" && icons && !icons.error), _iconClassName);
      var iconDot = createVNode("span", {
        "class": "".concat(prefixCls2, "-icon-dot")
      }, null);
      if (progressDot) {
        if (typeof progressDot === "function") {
          iconNode = createVNode("span", {
            "class": "".concat(prefixCls2, "-icon")
          }, [progressDot({
            index: stepNumber - 1,
            status,
            title: title2,
            description: description2,
            prefixCls: prefixCls2
          })]);
        } else {
          iconNode = createVNode("span", {
            "class": "".concat(prefixCls2, "-icon")
          }, [iconDot]);
        }
      } else if (icon && !isString2(icon)) {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [icon]);
      } else if (icons && icons.finish && status === "finish") {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [icons.finish]);
      } else if (icons && icons.error && status === "error") {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [icons.error]);
      } else if (icon || status === "finish" || status === "error") {
        iconNode = createVNode("span", {
          "class": iconClassName
        }, null);
      } else {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [stepNumber]);
      }
      return iconNode;
    }
  },
  render: function render117() {
    var _classString;
    var _getOptionProps2 = getOptionProps(this), prefixCls2 = _getOptionProps2.prefixCls, itemWidth = _getOptionProps2.itemWidth, active = _getOptionProps2.active, _getOptionProps2$stat = _getOptionProps2.status, status = _getOptionProps2$stat === void 0 ? "wait" : _getOptionProps2$stat, tailContent = _getOptionProps2.tailContent, adjustMarginRight = _getOptionProps2.adjustMarginRight, disabled = _getOptionProps2.disabled, onClick7 = _getOptionProps2.onClick, onStepClick2 = _getOptionProps2.onStepClick;
    var title2 = getComponent(this, "title");
    var subTitle = getComponent(this, "subTitle");
    var description2 = getComponent(this, "description");
    var classString = (_classString = {}, _defineProperty(_classString, "".concat(prefixCls2, "-item"), true), _defineProperty(_classString, "".concat(prefixCls2, "-item-").concat(status), true), _defineProperty(_classString, "".concat(prefixCls2, "-item-custom"), getComponent(this, "icon")), _defineProperty(_classString, "".concat(prefixCls2, "-item-active"), active), _defineProperty(_classString, "".concat(prefixCls2, "-item-disabled"), disabled === true), _classString);
    var stepProps = {
      class: classString
    };
    var stepItemStyle = {};
    if (itemWidth) {
      stepItemStyle.width = itemWidth;
    }
    if (adjustMarginRight) {
      stepItemStyle.marginRight = adjustMarginRight;
    }
    var accessibilityProps = {
      onClick: onClick7 || noop$7
    };
    if (onStepClick2 && !disabled) {
      accessibilityProps.role = "button";
      accessibilityProps.tabindex = 0;
      accessibilityProps.onClick = this.onItemClick;
    }
    return createVNode("div", _objectSpread2(_objectSpread2({}, stepProps), {}, {
      "style": stepItemStyle
    }), [createVNode("div", _objectSpread2(_objectSpread2({}, accessibilityProps), {}, {
      "class": "".concat(prefixCls2, "-item-container")
    }), [createVNode("div", {
      "class": "".concat(prefixCls2, "-item-tail")
    }, [tailContent]), createVNode("div", {
      "class": "".concat(prefixCls2, "-item-icon")
    }, [this.renderIconNode()]), createVNode("div", {
      "class": "".concat(prefixCls2, "-item-content")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-item-title")
    }, [title2, subTitle && createVNode("div", {
      "title": subTitle,
      "class": "".concat(prefixCls2, "-item-subtitle")
    }, [subTitle])]), description2 && createVNode("div", {
      "class": "".concat(prefixCls2, "-item-description")
    }, [description2])])])]);
  }
});
Steps$2.Step = Step$1;
var stepsProps = {
  prefixCls: PropsTypes.string,
  iconPrefix: PropsTypes.string,
  current: PropsTypes.number,
  initial: PropsTypes.number,
  labelPlacement: PropsTypes.oneOf(tuple("horizontal", "vertical")).def("horizontal"),
  status: PropsTypes.oneOf(tuple("wait", "process", "finish", "error")),
  size: PropsTypes.oneOf(tuple("default", "small")),
  direction: PropsTypes.oneOf(tuple("horizontal", "vertical")),
  progressDot: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func])),
  type: PropsTypes.oneOf(tuple("default", "navigation")),
  onChange: PropsTypes.func,
  "onUpdate:current": PropsTypes.func
};
var Steps2 = defineComponent({
  name: "ASteps",
  inheritAttrs: false,
  props: initDefaultProps$1(stepsProps, {
    current: 0
  }),
  emits: ["update:current", "change"],
  setup: function setup126() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  Step: _extends(_extends({}, Steps$2.Step), {
    name: "AStep"
  }),
  methods: {
    handleChange: function handleChange18(current2) {
      this.$emit("update:current", current2);
      this.$emit("change", current2);
    }
  },
  render: function render118() {
    var _this = this;
    var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
    var customizePrefixCls = props2.prefixCls, customizeIconPrefixCls = props2.iconPrefix;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("steps", customizePrefixCls);
    var iconPrefix = getPrefixCls2("", customizeIconPrefixCls);
    var progressDot = getComponent(this, "progressDot", this, false);
    var icons = {
      finish: createVNode(CheckOutlined, {
        "class": "".concat(prefixCls2, "-finish-icon")
      }, null),
      error: createVNode(CloseOutlined, {
        "class": "".concat(prefixCls2, "-error-icon")
      }, null)
    };
    var stepsProps2 = _extends(_extends({
      icons,
      iconPrefix,
      prefixCls: prefixCls2,
      progressDot
    }, props2), {
      canClick: !!(this.onChange || this["onUpdate:current"]),
      onChange: this.handleChange
    });
    return createVNode(Steps$2, stepsProps2, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
Steps2.install = function(app) {
  app.component(Steps2.name, Steps2);
  app.component(Steps2.Step.name, Steps2.Step);
  return app;
};
var Step = Steps2.Step;
var Steps$1 = Steps2;
var SwitchSizes = tuple("small", "default");
var switchProps = {
  prefixCls: PropsTypes.string,
  size: PropsTypes.oneOf(SwitchSizes),
  disabled: PropsTypes.looseBool,
  checkedChildren: PropsTypes.VNodeChild,
  unCheckedChildren: PropsTypes.VNodeChild,
  tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  autofocus: PropsTypes.looseBool,
  loading: PropsTypes.looseBool,
  checked: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.looseBool]),
  checkedValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.looseBool]).def(true),
  unCheckedValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.looseBool]).def(false),
  onChange: {
    type: Function
  },
  onClick: {
    type: Function
  },
  onKeydown: {
    type: Function
  },
  onMouseup: {
    type: Function
  },
  "onUpdate:checked": {
    type: Function
  }
};
var Switch = defineComponent({
  name: "ASwitch",
  __ANT_SWITCH: true,
  inheritAttrs: false,
  props: switchProps,
  slots: ["checkedChildren", "unCheckedChildren"],
  emits: ["update:checked", "mouseup", "change", "click", "keydown"],
  setup: function setup127(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots, expose = _ref.expose, emit = _ref.emit;
    onBeforeMount(function() {
      warning$1(!("defaultChecked" in attrs), "Switch", "'defaultChecked' is deprecated, please use 'v-model:checked'");
      warning$1(!("value" in attrs), "Switch", "`value` is not validate prop, do you mean `checked`?");
    });
    var checked2 = ref(props2.checked !== void 0 ? props2.checked : attrs.defaultChecked);
    var checkedStatus = computed(function() {
      return checked2.value === props2.checkedValue;
    });
    watch(function() {
      return props2.checked;
    }, function() {
      checked2.value = props2.checked;
    });
    var _useConfigInject = useConfigInject("switch", props2), prefixCls2 = _useConfigInject.prefixCls;
    var refSwitchNode = ref();
    var focus27 = function focus28() {
      var _a;
      (_a = refSwitchNode.value) === null || _a === void 0 ? void 0 : _a.focus();
    };
    var blur24 = function blur25() {
      var _a;
      (_a = refSwitchNode.value) === null || _a === void 0 ? void 0 : _a.blur();
    };
    expose({
      focus: focus27,
      blur: blur24
    });
    onMounted(function() {
      nextTick(function() {
        if (props2.autofocus && !props2.disabled) {
          refSwitchNode.value.focus();
        }
      });
    });
    var setChecked = function setChecked2(check, e) {
      if (props2.disabled) {
        return;
      }
      emit("update:checked", check);
      emit("change", check, e);
    };
    var handleClick5 = function handleClick6(e) {
      focus27();
      var newChecked = checkedStatus.value ? props2.unCheckedValue : props2.checkedValue;
      setChecked(newChecked, e);
      emit("click", newChecked, e);
    };
    var handleKeyDown7 = function handleKeyDown8(e) {
      if (e.keyCode === KeyCode$2.LEFT) {
        setChecked(props2.unCheckedValue, e);
      } else if (e.keyCode === KeyCode$2.RIGHT) {
        setChecked(props2.checkedValue, e);
      }
      emit("keydown", e);
    };
    var handleMouseUp2 = function handleMouseUp3(e) {
      var _a;
      (_a = refSwitchNode.value) === null || _a === void 0 ? void 0 : _a.blur();
      emit("mouseup", e);
    };
    var classNames2 = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(prefixCls2.value, "-small"), props2.size === "small"), _defineProperty(_ref2, "".concat(prefixCls2.value, "-loading"), props2.loading), _defineProperty(_ref2, "".concat(prefixCls2.value, "-checked"), checkedStatus.value), _defineProperty(_ref2, "".concat(prefixCls2.value, "-disabled"), props2.disabled), _defineProperty(_ref2, prefixCls2.value, true), _ref2;
    });
    return function() {
      return createVNode(Wave, {
        "insertExtraNode": true
      }, {
        default: function _default8() {
          return [createVNode("button", _objectSpread2(_objectSpread2(_objectSpread2({}, omit(props2, ["prefixCls", "checkedChildren", "unCheckedChildren", "checked", "autofocus", "defaultChecked", "checkedValue", "unCheckedValue"])), attrs), {}, {
            "onKeydown": handleKeyDown7,
            "onClick": handleClick5,
            "onMouseup": handleMouseUp2,
            "type": "button",
            "role": "switch",
            "aria-checked": checked2.value,
            "disabled": props2.disabled || props2.loading,
            "class": [attrs.class, classNames2.value],
            "ref": refSwitchNode
          }), [props2.loading ? createVNode(LoadingOutlined, {
            "class": "".concat(prefixCls2.value, "-loading-icon")
          }, null) : null, createVNode("span", {
            "class": "".concat(prefixCls2.value, "-inner")
          }, [checkedStatus.value ? getPropsSlot(slots, props2, "checkedChildren") : getPropsSlot(slots, props2, "unCheckedChildren")])])];
        }
      });
    };
  }
});
var index$2 = withInstall(Switch);
var scrollbarVerticalSize;
var scrollbarHorizontalSize;
var scrollbarMeasure = {
  position: "absolute",
  top: "-9999px",
  width: "50px",
  height: "50px"
};
var INTERNAL_COL_DEFINE = "RC_TABLE_INTERNAL_COL_DEFINE";
function measureScrollbar(_ref) {
  var _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? "vertical" : _ref$direction, prefixCls2 = _ref.prefixCls;
  if (typeof document === "undefined" || typeof window === "undefined") {
    return 0;
  }
  var isVertical2 = direction === "vertical";
  if (isVertical2 && scrollbarVerticalSize) {
    return scrollbarVerticalSize;
  }
  if (!isVertical2 && scrollbarHorizontalSize) {
    return scrollbarHorizontalSize;
  }
  var scrollDiv = document.createElement("div");
  Object.keys(scrollbarMeasure).forEach(function(scrollProp) {
    scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
  });
  scrollDiv.className = "".concat(prefixCls2, "-hide-scrollbar scroll-div-append-to-body");
  if (isVertical2) {
    scrollDiv.style.overflowY = "scroll";
  } else {
    scrollDiv.style.overflowX = "scroll";
  }
  document.body.appendChild(scrollDiv);
  var size = 0;
  if (isVertical2) {
    size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    scrollbarVerticalSize = size;
  } else {
    size = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    scrollbarHorizontalSize = size;
  }
  document.body.removeChild(scrollDiv);
  return size;
}
function debounce(func, wait, immediate) {
  var timeout;
  function debounceFunc() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context2 = this;
    if (args[0] && args[0].persist) {
      args[0].persist();
    }
    var later = function later2() {
      timeout = null;
      if (!immediate) {
        func.apply(context2, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      func.apply(context2, args);
    }
  }
  debounceFunc.cancel = function cancel2() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  return debounceFunc;
}
function remove2(array, item) {
  var index2 = array.indexOf(item);
  var front = array.slice(0, index2);
  var last = array.slice(index2 + 1, array.length);
  return front.concat(last);
}
function getDataAndAriaProps(props2) {
  return Object.keys(props2).reduce(function(memo, key2) {
    if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-") {
      memo[key2] = props2[key2];
    }
    return memo;
  }, {});
}
function getColumnsKey(columns2) {
  var columnKeys = [];
  columns2.forEach(function(column) {
    var _ref2 = column || {}, key2 = _ref2.key, dataIndex = _ref2.dataIndex;
    columnKeys.push(key2 !== void 0 ? key2 : dataIndex);
  });
  return columnKeys;
}
function validateValue(val) {
  return val !== null && val !== void 0;
}
var ColGroup = {
  name: "ColGroup",
  inheritAttrs: false,
  props: {
    fixed: PropsTypes.string,
    columns: PropsTypes.array
  },
  setup: function setup128() {
    return {
      table: inject("table", {}),
      store: inject("table-store", function() {
        return {};
      })
    };
  },
  render: function render119() {
    var fixed = this.fixed, table = this.table;
    var prefixCls2 = table.prefixCls, expandIconAsCell = table.expandIconAsCell, onColumnResize = table.onColumnResize;
    var cols = [];
    if (expandIconAsCell && fixed !== "right") {
      cols.push(createVNode("col", {
        "class": "".concat(prefixCls2, "-expand-icon-col"),
        "key": "rc-table-expand-icon-col"
      }, null));
    }
    var leafColumns;
    var columnManager = this.store.columnManager;
    if (fixed === "left") {
      leafColumns = columnManager.leftLeafColumns;
    } else if (fixed === "right") {
      leafColumns = columnManager.rightLeafColumns;
    } else {
      leafColumns = columnManager.leafColumns;
    }
    cols = cols.concat(leafColumns.map(function(_ref) {
      var key2 = _ref.key, dataIndex = _ref.dataIndex, width = _ref.width, additionalProps = _ref[INTERNAL_COL_DEFINE];
      var mergedKey = key2 !== void 0 ? key2 : dataIndex;
      var w = typeof width === "number" ? "".concat(width, "px") : width;
      return createVNode(ResizeObserver, {
        "onResize": function onResize(_ref2) {
          var offsetWidth = _ref2.offsetWidth;
          onColumnResize(mergedKey, offsetWidth);
        }
      }, {
        default: function _default8() {
          return [createVNode("col", _objectSpread2({
            "data-key": mergedKey,
            "key": mergedKey,
            "style": {
              width: w,
              minWidth: w
            }
          }, additionalProps), null)];
        }
      });
    }));
    return createVNode("colgroup", null, [cols]);
  }
};
function getCellFixedInfo(colStart, colEnd, columns2, stickyOffsets, direction) {
  var startColumn = columns2[colStart] || {};
  var endColumn = columns2[colEnd] || {};
  var fixLeft;
  var fixRight;
  if (startColumn.fixed === "left") {
    fixLeft = stickyOffsets.left[colStart];
  } else if (endColumn.fixed === "right") {
    fixRight = stickyOffsets.right[colEnd];
  }
  var lastFixLeft = false;
  var firstFixRight = false;
  var lastFixRight = false;
  var firstFixLeft = false;
  var nextColumn = columns2[colEnd + 1];
  var prevColumn = columns2[colStart - 1];
  if (direction === "rtl") {
    if (fixLeft !== void 0) {
      var prevFixLeft = prevColumn && prevColumn.fixed === "left";
      firstFixLeft = !prevFixLeft;
    } else if (fixRight !== void 0) {
      var nextFixRight = nextColumn && nextColumn.fixed === "right";
      lastFixRight = !nextFixRight;
    }
  } else if (fixLeft !== void 0) {
    var nextFixLeft = nextColumn && nextColumn.fixed === "left";
    lastFixLeft = !nextFixLeft;
  } else if (fixRight !== void 0) {
    var prevFixRight = prevColumn && prevColumn.fixed === "right";
    firstFixRight = !prevFixRight;
  }
  return {
    fixLeft,
    fixRight,
    lastFixLeft,
    firstFixRight,
    lastFixRight,
    firstFixLeft,
    isSticky: stickyOffsets.isSticky
  };
}
var __rest$e = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var TableHeaderRow = {
  name: "TableHeaderRow",
  inheritAttrs: false,
  props: {
    index: PropsTypes.number,
    fixed: PropsTypes.string,
    columns: PropsTypes.array,
    rows: PropsTypes.array,
    row: PropsTypes.array,
    components: PropsTypes.object,
    customHeaderRow: PropsTypes.func,
    prefixCls: PropsTypes.prefixCls
  },
  setup: function setup129(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    return {
      height: computed(function() {
        var fixedColumnsHeadRowsHeight = store.fixedColumnsHeadRowsHeight;
        var columns2 = props2.columns, rows = props2.rows, fixed = props2.fixed;
        var headerHeight = fixedColumnsHeadRowsHeight[0];
        if (!fixed) {
          return null;
        }
        if (headerHeight && columns2) {
          if (headerHeight === "auto") {
            return "auto";
          }
          return "".concat(headerHeight / rows.length, "px");
        }
        return null;
      }),
      store
    };
  },
  render: function render120() {
    var row = this.row, index2 = this.index, height = this.height, components3 = this.components, customHeaderRow2 = this.customHeaderRow, prefixCls2 = this.prefixCls;
    var HeaderRow = components3.header.row;
    var HeaderCell = components3.header.cell;
    var rowProps2 = customHeaderRow2(row.map(function(cell) {
      return cell.column;
    }), index2);
    var customStyle = rowProps2 ? rowProps2.style : {};
    var style3 = _extends({
      height
    }, customStyle);
    if (style3.height === null) {
      delete style3.height;
    }
    var _this$store = this.store, stickyOffsets = _this$store.stickyOffsets, columnManager = _this$store.columnManager;
    return createVNode(HeaderRow, _objectSpread2(_objectSpread2({}, rowProps2), {}, {
      "style": style3
    }), {
      default: function _default8() {
        return [row.map(function(cell, i) {
          var _classNames;
          var column = cell.column, isLast = cell.isLast, children = cell.children;
          cell.className;
          var cellProps = __rest$e(cell, ["column", "isLast", "children", "className"]);
          var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, columnManager.leafColumns, stickyOffsets);
          var customProps = column.customHeaderCell ? column.customHeaderCell(column) : {};
          var headerCellProps = _extends(_extends(_extends({}, cellProps), customProps), {
            key: column.key || column.dataIndex || i
          });
          if (headerCellProps.colSpan === 0) {
            return null;
          }
          if (column.align) {
            headerCellProps.style = _extends(_extends({}, customProps.style), {
              textAlign: column.align
            });
          }
          var fixLeft = fixedInfo.fixLeft, fixRight = fixedInfo.fixRight, firstFixLeft = fixedInfo.firstFixLeft, lastFixLeft = fixedInfo.lastFixLeft, firstFixRight = fixedInfo.firstFixRight, lastFixRight = fixedInfo.lastFixRight;
          var fixedStyle = {};
          var isFixLeft = typeof fixLeft === "number";
          var isFixRight = typeof fixRight === "number";
          if (isFixLeft) {
            fixedStyle.position = "sticky";
            fixedStyle.left = "".concat(fixLeft, "px");
          }
          if (isFixRight) {
            fixedStyle.position = "sticky";
            fixedStyle.right = "".concat(fixRight, "px");
          }
          headerCellProps.class = classNames(customProps.class, customProps.className, column.class, column.className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-align-").concat(column.align), !!column.align), _defineProperty(_classNames, "".concat(prefixCls2, "-row-cell-ellipsis"), !!column.ellipsis), _defineProperty(_classNames, "".concat(prefixCls2, "-row-cell-break-word"), !!column.width), _defineProperty(_classNames, "".concat(prefixCls2, "-row-cell-last"), isLast), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-fix-left"), isFixLeft), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-fix-left-first"), firstFixLeft), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-fix-left-last"), lastFixLeft), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-fix-right"), isFixRight), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-fix-right-first"), firstFixRight), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-fix-right-last"), lastFixRight), _classNames));
          headerCellProps.style = _extends(_extends({}, headerCellProps.style || {}), fixedStyle);
          if (typeof HeaderCell === "function") {
            return HeaderCell(headerCellProps, children);
          }
          return createVNode(HeaderCell, headerCellProps, {
            default: function _default9() {
              return [children];
            }
          });
        })];
      }
    });
  }
};
var TableHeaderRow$1 = TableHeaderRow;
function parseHeaderRows(rootColumns) {
  var rows = [];
  function fillRowCells(columns2, colIndex) {
    var rowIndex2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    rows[rowIndex2] = rows[rowIndex2] || [];
    var currentColIndex = colIndex;
    var colSpans = columns2.filter(Boolean).map(function(column) {
      var cell = {
        key: column.key,
        className: column.className || column.class || "",
        children: column.title,
        column,
        colStart: currentColIndex
      };
      var colSpan = 1;
      var subColumns = column.children;
      if (subColumns && subColumns.length > 0) {
        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex2 + 1).reduce(function(total2, count) {
          return total2 + count;
        }, 0);
        cell.hasSubColumns = true;
      }
      if ("colSpan" in column) {
        colSpan = column.colSpan;
      }
      if ("rowSpan" in column) {
        cell.rowSpan = column.rowSpan;
      }
      cell.colSpan = colSpan;
      cell.colEnd = cell.colStart + colSpan - 1;
      rows[rowIndex2].push(cell);
      currentColIndex += colSpan;
      return colSpan;
    });
    return colSpans;
  }
  fillRowCells(rootColumns, 0);
  var rowCount = rows.length;
  var _loop = function _loop2(rowIndex2) {
    rows[rowIndex2].forEach(function(cell) {
      if (!("rowSpan" in cell) && !cell.hasSubColumns) {
        cell.rowSpan = rowCount - rowIndex2;
      }
    });
  };
  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
    _loop(rowIndex);
  }
  return rows;
}
var TableHeader = {
  name: "TableHeader",
  inheritAttrs: false,
  props: {
    fixed: PropsTypes.string,
    columns: PropsTypes.array.isRequired,
    expander: PropsTypes.object.isRequired
  },
  setup: function setup130() {
    return {
      table: inject("table", {})
    };
  },
  render: function render121() {
    var _this$table = this.table, components3 = _this$table.sComponents, prefixCls2 = _this$table.prefixCls, showHeader = _this$table.showHeader, customHeaderRow2 = _this$table.customHeaderRow;
    var expander = this.expander, columns2 = this.columns, fixed = this.fixed;
    if (!showHeader) {
      return null;
    }
    var rows = parseHeaderRows(this.columns);
    expander.renderExpandIndentCell(rows, fixed);
    var HeaderWrapper = components3.header.wrapper;
    return createVNode(HeaderWrapper, {
      "class": "".concat(prefixCls2, "-thead")
    }, {
      default: function _default8() {
        return [rows.map(function(row, index2) {
          return createVNode(TableHeaderRow$1, {
            "prefixCls": prefixCls2,
            "key": index2,
            "index": index2,
            "fixed": fixed,
            "columns": columns2,
            "rows": rows,
            "row": row,
            "components": components3,
            "customHeaderRow": customHeaderRow2
          }, null);
        })];
      }
    });
  }
};
function isInvalidRenderCellText(text) {
  return text && !isValidElement(text) && Object.prototype.toString.call(text) === "[object Object]";
}
var TableCell = {
  name: "TableCell",
  inheritAttrs: false,
  props: {
    record: PropsTypes.object,
    prefixCls: PropsTypes.string,
    index: PropsTypes.number,
    indent: PropsTypes.number,
    indentSize: PropsTypes.number,
    column: PropsTypes.object,
    expandIcon: PropsTypes.any,
    component: PropsTypes.any,
    colIndex: PropsTypes.number
  },
  setup: function setup131() {
    return {
      table: inject("table", {}),
      store: inject("table-store", {})
    };
  },
  methods: {
    handleClick: function handleClick3(e) {
      var record = this.record, onCellClick = this.column.onCellClick;
      if (onCellClick) {
        onCellClick(record, e);
      }
    }
  },
  render: function render122() {
    var _classNames;
    var record = this.record, indentSize = this.indentSize, prefixCls2 = this.prefixCls, indent = this.indent, index2 = this.index, expandIcon = this.expandIcon, column = this.column, BodyCell = this.component;
    var fixedInfoList = this.store.fixedInfoList || [];
    var fixedInfo = fixedInfoList[this.colIndex] || {};
    var fixLeft = fixedInfo.fixLeft, fixRight = fixedInfo.fixRight, firstFixLeft = fixedInfo.firstFixLeft, lastFixLeft = fixedInfo.lastFixLeft, firstFixRight = fixedInfo.firstFixRight, lastFixRight = fixedInfo.lastFixRight;
    var fixedStyle = {};
    var isFixLeft = typeof fixLeft === "number";
    var isFixRight = typeof fixRight === "number";
    if (isFixLeft) {
      fixedStyle.position = "sticky";
      fixedStyle.left = "".concat(fixLeft, "px");
    }
    if (isFixRight) {
      fixedStyle.position = "sticky";
      fixedStyle.right = "".concat(fixRight, "px");
    }
    var dataIndex = column.dataIndex, customRender = column.customRender, _column$className = column.className, className = _column$className === void 0 ? "" : _column$className;
    var _this$table = this.table, transformCellText = _this$table.transformCellText, rootPrefixCls = _this$table.prefixCls;
    var text;
    if (typeof dataIndex === "number") {
      text = get(record, dataIndex);
    } else if (!dataIndex || dataIndex.length === 0) {
      text = record;
    } else {
      text = get(record, dataIndex);
    }
    var tdProps = {
      onClick: this.handleClick
    };
    var colSpan;
    var rowSpan;
    if (customRender) {
      text = customRender({
        text,
        record,
        index: index2,
        column
      });
      if (isInvalidRenderCellText(text)) {
        tdProps = text.props || text.attrs || tdProps;
        var _tdProps = tdProps;
        colSpan = _tdProps.colSpan;
        rowSpan = _tdProps.rowSpan;
        text = text.children;
      }
    }
    if (column.customCell) {
      tdProps = _extends(_extends({}, tdProps), column.customCell(record, index2));
    }
    if (isInvalidRenderCellText(text)) {
      text = null;
    }
    if (transformCellText) {
      text = transformCellText({
        text,
        column,
        record,
        index: index2
      });
    }
    var indentText = expandIcon ? createVNode("span", {
      "style": {
        paddingLeft: "".concat(indentSize * indent, "px")
      },
      "class": "".concat(prefixCls2, "-indent indent-level-").concat(indent)
    }, null) : null;
    if (rowSpan === 0 || colSpan === 0) {
      return null;
    }
    if (column.align) {
      tdProps.style = _extends({
        textAlign: column.align
      }, tdProps.style);
    }
    var cellClassName = classNames(className, column.class, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-cell-ellipsis"), !!column.ellipsis), _defineProperty(_classNames, "".concat(prefixCls2, "-cell-break-word"), !!column.width), _defineProperty(_classNames, "".concat(rootPrefixCls, "-cell-fix-left"), isFixLeft), _defineProperty(_classNames, "".concat(rootPrefixCls, "-cell-fix-left-first"), firstFixLeft), _defineProperty(_classNames, "".concat(rootPrefixCls, "-cell-fix-left-last"), lastFixLeft), _defineProperty(_classNames, "".concat(rootPrefixCls, "-cell-fix-right"), isFixRight), _defineProperty(_classNames, "".concat(rootPrefixCls, "-cell-fix-right-first"), firstFixRight), _defineProperty(_classNames, "".concat(rootPrefixCls, "-cell-fix-right-last"), lastFixRight), _classNames));
    if (column.ellipsis) {
      if (typeof text === "string") {
        tdProps.title = text;
      }
    }
    return createVNode(BodyCell, _objectSpread2(_objectSpread2({
      "class": cellClassName
    }, tdProps), {}, {
      style: _extends(_extends({}, tdProps.style || {}), fixedStyle)
    }), {
      default: function _default8() {
        return [indentText, expandIcon, toRaw(text)];
      }
    });
  }
};
var __rest$d = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$6() {
}
var TableRow = {
  name: "TableRow",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: initDefaultProps$2({
    customRow: PropsTypes.func,
    record: PropsTypes.object,
    prefixCls: PropsTypes.string,
    columns: PropsTypes.array,
    index: PropsTypes.number,
    rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).isRequired,
    className: PropsTypes.string,
    indent: PropsTypes.number,
    indentSize: PropsTypes.number,
    hasExpandIcon: PropsTypes.func,
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    renderExpandIcon: PropsTypes.func,
    renderExpandIconCell: PropsTypes.func,
    components: PropsTypes.any,
    expandedRow: PropsTypes.looseBool,
    isAnyColumnsFixed: PropsTypes.looseBool,
    ancestorKeys: PropsTypes.array.isRequired,
    expandIconColumnIndex: PropsTypes.number,
    expandRowByClick: PropsTypes.looseBool
  }, {
    hasExpandIcon: function hasExpandIcon() {
    },
    renderExpandIcon: function renderExpandIcon2() {
    },
    renderExpandIconCell: function renderExpandIconCell() {
    }
  }),
  setup: function setup132(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    var visible9 = computed(function() {
      var expandedRowKeys2 = store.expandedRowKeys;
      var ancestorKeys = props2.ancestorKeys;
      return !!(ancestorKeys.length === 0 || ancestorKeys.every(function(k) {
        return expandedRowKeys2.includes(k);
      }));
    });
    var height = computed(function() {
      var expandedRowsHeight = store.expandedRowsHeight, fixedColumnsBodyRowsHeight = store.fixedColumnsBodyRowsHeight;
      var fixed = props2.fixed, rowKey = props2.rowKey;
      if (!fixed) {
        return null;
      }
      if (expandedRowsHeight[rowKey]) {
        return expandedRowsHeight[rowKey];
      }
      if (fixedColumnsBodyRowsHeight[rowKey]) {
        return fixedColumnsBodyRowsHeight[rowKey];
      }
      return null;
    });
    var hovered = computed(function() {
      var currentHoverKey = store.currentHoverKey;
      var rowKey = props2.rowKey;
      return currentHoverKey === rowKey;
    });
    return {
      store,
      visible: visible9,
      hovered,
      height
    };
  },
  data: function data62() {
    this.rowRef = null;
    return {
      shouldRender: this.visible
    };
  },
  mounted: function mounted33() {
    var _this = this;
    if (this.shouldRender) {
      this.$nextTick(function() {
        _this.saveRowRef();
      });
    }
  },
  watch: {
    visible: function visible8(val) {
      if (val) {
        this.shouldRender = true;
      }
    }
  },
  updated: function updated19() {
    var _this2 = this;
    if (this.shouldRender && !this.rowRef) {
      this.$nextTick(function() {
        _this2.saveRowRef();
      });
    }
  },
  methods: {
    onRowClick: function onRowClick(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$6;
      var record = this.record, index2 = this.index;
      this.__emit("rowClick", record, index2, event);
      rowPropFunc(event);
    },
    onRowDoubleClick: function onRowDoubleClick(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$6;
      var record = this.record, index2 = this.index;
      this.__emit("rowDoubleClick", record, index2, event);
      rowPropFunc(event);
    },
    onContextMenu: function onContextMenu(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$6;
      var record = this.record, index2 = this.index;
      this.__emit("rowContextmenu", record, index2, event);
      rowPropFunc(event);
    },
    onMouseEnter: function onMouseEnter2(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$6;
      var record = this.record, index2 = this.index, rowKey = this.rowKey;
      this.__emit("hover", true, rowKey);
      this.__emit("rowMouseenter", record, index2, event);
      rowPropFunc(event);
    },
    onMouseLeave: function onMouseLeave3(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$6;
      var record = this.record, index2 = this.index, rowKey = this.rowKey;
      this.__emit("hover", false, rowKey);
      this.__emit("rowMouseleave", record, index2, event);
      rowPropFunc(event);
    },
    setExpandedRowHeight: function setExpandedRowHeight() {
      var store = this.store, rowKey = this.rowKey;
      var expandedRowsHeight = store.expandedRowsHeight;
      var height = this.rowRef.getBoundingClientRect().height;
      expandedRowsHeight = _extends(_extends({}, expandedRowsHeight), _defineProperty({}, rowKey, height));
      store.expandedRowsHeight = expandedRowsHeight;
    },
    setRowHeight: function setRowHeight() {
      var store = this.store, rowKey = this.rowKey;
      var fixedColumnsBodyRowsHeight = store.fixedColumnsBodyRowsHeight;
      var height = this.rowRef.getBoundingClientRect().height;
      store.fixedColumnsBodyRowsHeight = _extends(_extends({}, fixedColumnsBodyRowsHeight), _defineProperty({}, rowKey, height));
    },
    getStyle: function getStyle2() {
      var height = this.height, visible9 = this.visible;
      var style3 = this.$attrs.style || {};
      if (height) {
        style3 = _extends(_extends({}, style3), {
          height
        });
      }
      if (!visible9 && !style3.display) {
        style3 = _extends(_extends({}, style3), {
          display: "none"
        });
      }
      return style3;
    },
    saveRowRef: function saveRowRef() {
      this.rowRef = findDOMNode(this);
      var isAnyColumnsFixed = this.isAnyColumnsFixed, fixed = this.fixed, expandedRow = this.expandedRow, ancestorKeys = this.ancestorKeys;
      if (!isAnyColumnsFixed) {
        return;
      }
      if (!fixed && expandedRow) {
        this.setExpandedRowHeight();
      }
      if (!fixed && ancestorKeys.length >= 0) {
        this.setRowHeight();
      }
    }
  },
  render: function render123() {
    var _this3 = this;
    if (!this.shouldRender) {
      return null;
    }
    var prefixCls2 = this.prefixCls, columns2 = this.columns, record = this.record, rowKey = this.rowKey, index2 = this.index, _this$customRow = this.customRow, customRow = _this$customRow === void 0 ? noop$6 : _this$customRow, indent = this.indent, indentSize = this.indentSize, hovered = this.hovered, height = this.height, visible9 = this.visible, components3 = this.components, hasExpandIcon3 = this.hasExpandIcon, renderExpandIcon5 = this.renderExpandIcon, renderExpandIconCell3 = this.renderExpandIconCell;
    var BodyRow = components3.body.row;
    var BodyCell = components3.body.cell;
    var className = this.$attrs.class || "";
    if (hovered) {
      className += " ".concat(prefixCls2, "-hover");
    }
    var cells = [];
    renderExpandIconCell3(cells);
    for (var i = 0; i < columns2.length; i += 1) {
      var column = columns2[i];
      warning$1(column.onCellClick === void 0, "column[onCellClick] is deprecated, please use column[customCell] instead.");
      cells.push(createVNode(TableCell, {
        "prefixCls": prefixCls2,
        "record": record,
        "indentSize": indentSize,
        "indent": indent,
        "index": index2,
        "colIndex": i,
        "column": column,
        "key": column.key || column.dataIndex,
        "expandIcon": hasExpandIcon3(i) && renderExpandIcon5(),
        "component": BodyCell
      }, null));
    }
    var _a = customRow(record, index2) || {}, customClass = _a.class, customClassName = _a.className, customStyle = _a.style, rowProps2 = __rest$d(_a, ["class", "className", "style"]);
    var style3 = {
      height: typeof height === "number" ? "".concat(height, "px") : height
    };
    if (!visible9) {
      style3.display = "none";
    }
    style3 = _extends(_extends({}, style3), customStyle);
    var rowClassName2 = classNames(prefixCls2, className, "".concat(prefixCls2, "-level-").concat(indent), customClassName, customClass);
    var bodyRowProps = _extends(_extends({}, rowProps2), {
      style: style3,
      onClick: function onClick7(e) {
        _this3.onRowClick(e, rowProps2.onClick);
      },
      onDblclick: function onDblclick(e) {
        _this3.onRowDoubleClick(e, rowProps2.onDblclick);
      },
      onMouseenter: function onMouseenter2(e) {
        _this3.onMouseEnter(e, rowProps2.onMouseenter);
      },
      onMouseleave: function onMouseleave2(e) {
        _this3.onMouseLeave(e, rowProps2.onMouseleave);
      },
      onContextmenu: function onContextmenu2(e) {
        _this3.onContextMenu(e, rowProps2.onContextmenu);
      },
      class: rowClassName2,
      "data-row-key": rowKey
    });
    return createVNode(BodyRow, bodyRowProps, {
      default: function _default8() {
        return [cells];
      }
    });
  }
};
var TableRow$1 = TableRow;
var ExpandIcon = {
  name: "ExpandIcon",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    record: PropsTypes.object,
    prefixCls: PropsTypes.string,
    expandable: PropsTypes.any,
    expanded: PropsTypes.looseBool,
    needIndentSpaced: PropsTypes.looseBool
  },
  methods: {
    onExpand: function onExpand(e) {
      this.__emit("expand", this.record, e);
    }
  },
  render: function render124() {
    var expandable = this.expandable, prefixCls2 = this.prefixCls, onExpand3 = this.onExpand, needIndentSpaced = this.needIndentSpaced, expanded = this.expanded;
    if (expandable) {
      var expandClassName = expanded ? "expanded" : "collapsed";
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-expand-icon ").concat(prefixCls2, "-").concat(expandClassName),
        "onClick": onExpand3
      }, null);
    }
    if (needIndentSpaced) {
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-expand-icon ").concat(prefixCls2, "-spaced")
      }, null);
    }
    return null;
  }
};
var ExpandableRow = {
  mixins: [BaseMixin],
  name: "ExpandableRow",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string.isRequired,
    rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).isRequired,
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    record: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.array]).isRequired,
    indentSize: PropsTypes.number,
    needIndentSpaced: PropsTypes.looseBool.isRequired,
    expandRowByClick: PropsTypes.looseBool,
    expandIconAsCell: PropsTypes.looseBool,
    expandIconColumnIndex: PropsTypes.number,
    childrenColumnName: PropsTypes.string,
    expandedRowRender: PropsTypes.func,
    expandIcon: PropsTypes.func
  },
  setup: function setup133(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    return {
      expanded: computed(function() {
        return store.expandedRowKeys.includes(props2.rowKey);
      })
    };
  },
  beforeUnmount: function beforeUnmount24() {
    this.handleDestroy();
  },
  methods: {
    hasExpandIcon: function hasExpandIcon2(columnIndex) {
      var _this$$props = this.$props, expandRowByClick = _this$$props.expandRowByClick, expandIcon = _this$$props.expandIcon;
      if (this.tempExpandIconAsCell || columnIndex !== this.tempExpandIconColumnIndex) {
        return false;
      }
      return !!expandIcon || !expandRowByClick;
    },
    handleExpandChange: function handleExpandChange(record, event) {
      var expanded = this.expanded, rowKey = this.rowKey;
      this.__emit("expandedChange", !expanded, record, event, rowKey);
    },
    handleDestroy: function handleDestroy() {
      var rowKey = this.rowKey, record = this.record;
      this.__emit("expandedChange", false, record, null, rowKey, true);
    },
    handleRowClick: function handleRowClick(record, index2, event) {
      var expandRowByClick = this.expandRowByClick;
      if (expandRowByClick) {
        this.handleExpandChange(record, event);
      }
      this.__emit("rowClick", record, index2, event);
    },
    renderExpandIcon: function renderExpandIcon3() {
      var prefixCls2 = this.prefixCls, expanded = this.expanded, record = this.record, needIndentSpaced = this.needIndentSpaced, expandIcon = this.expandIcon;
      if (expandIcon) {
        return expandIcon({
          prefixCls: prefixCls2,
          expanded,
          record,
          needIndentSpaced,
          expandable: this.expandable,
          onExpand: this.handleExpandChange
        });
      }
      return createVNode(ExpandIcon, {
        "expandable": this.expandable,
        "prefixCls": prefixCls2,
        "onExpand": this.handleExpandChange,
        "needIndentSpaced": needIndentSpaced,
        "expanded": expanded,
        "record": record
      }, null);
    },
    renderExpandIconCell: function renderExpandIconCell2(cells) {
      if (!this.tempExpandIconAsCell) {
        return;
      }
      var prefixCls2 = this.prefixCls;
      cells.push(createVNode("td", {
        "class": "".concat(prefixCls2, "-expand-icon-cell"),
        "key": "rc-table-expand-icon-cell"
      }, [this.renderExpandIcon()]));
    }
  },
  render: function render125() {
    var childrenColumnName = this.childrenColumnName, expandedRowRender = this.expandedRowRender, indentSize = this.indentSize, record = this.record, fixed = this.fixed, expanded = this.expanded;
    this.tempExpandIconAsCell = fixed !== "right" ? this.expandIconAsCell : false;
    this.tempExpandIconColumnIndex = fixed !== "right" ? this.expandIconColumnIndex : -1;
    var childrenData = record[childrenColumnName];
    this.expandable = !!(childrenData || expandedRowRender);
    var expandableRowProps = {
      indentSize,
      expanded,
      hasExpandIcon: this.hasExpandIcon,
      renderExpandIcon: this.renderExpandIcon,
      renderExpandIconCell: this.renderExpandIconCell,
      onRowClick: this.handleRowClick
    };
    return getSlot(this, "default", expandableRowProps);
  }
};
var ExpandableRow$1 = ExpandableRow;
function noop$5() {
}
var BaseTable = {
  name: "BaseTable",
  inheritAttrs: false,
  props: {
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    columns: PropsTypes.array.isRequired,
    tableClassName: PropsTypes.string.isRequired,
    hasHead: PropsTypes.looseBool.isRequired,
    hasBody: PropsTypes.looseBool.isRequired,
    expander: PropsTypes.object.isRequired,
    getRowKey: PropsTypes.func,
    isAnyColumnsFixed: PropsTypes.looseBool
  },
  setup: function setup134() {
    return {
      table: inject("table", function() {
        return {};
      }),
      store: inject("table-store", function() {
        return {};
      })
    };
  },
  methods: {
    getColumns: function getColumns2(cols) {
      var _this$$props$columns = this.$props.columns, columns2 = _this$$props$columns === void 0 ? [] : _this$$props$columns;
      return (cols || columns2).map(function(column) {
        return _extends(_extends({}, column), {
          className: classNames(column.className, column.class)
        });
      });
    },
    handleRowHover: function handleRowHover(isHover, key2) {
      this.store.currentHoverKey = isHover ? key2 : null;
    },
    renderRows: function renderRows(renderData, indent) {
      var _this = this;
      var ancestorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      var _Object$assign = _extends(_extends(_extends({}, this.table.$attrs), this.table.$props), this.table.$data), components3 = _Object$assign.sComponents, prefixCls2 = _Object$assign.prefixCls, childrenColumnName = _Object$assign.childrenColumnName, rowClassName2 = _Object$assign.rowClassName, _Object$assign$custom = _Object$assign.customRow, customRow = _Object$assign$custom === void 0 ? noop$5 : _Object$assign$custom, _Object$assign$onRowC = _Object$assign.onRowClick, onRowClick2 = _Object$assign$onRowC === void 0 ? noop$5 : _Object$assign$onRowC, _Object$assign$onRowD = _Object$assign.onRowDoubleClick, onRowDoubleClick2 = _Object$assign$onRowD === void 0 ? noop$5 : _Object$assign$onRowD, _Object$assign$onRowC2 = _Object$assign.onRowContextMenu, onRowContextMenu = _Object$assign$onRowC2 === void 0 ? noop$5 : _Object$assign$onRowC2, _Object$assign$onRowM = _Object$assign.onRowMouseEnter, onRowMouseEnter = _Object$assign$onRowM === void 0 ? noop$5 : _Object$assign$onRowM, _Object$assign$onRowM2 = _Object$assign.onRowMouseLeave, onRowMouseLeave = _Object$assign$onRowM2 === void 0 ? noop$5 : _Object$assign$onRowM2, rowRef2 = _Object$assign.rowRef;
      var columnManager = this.store.columnManager;
      var getRowKey2 = this.getRowKey, fixed = this.fixed, expander = this.expander, isAnyColumnsFixed = this.isAnyColumnsFixed;
      var rows = [];
      var _loop = function _loop2(i2) {
        var record = renderData[i2];
        var key2 = getRowKey2(record, i2);
        var className = typeof rowClassName2 === "string" ? rowClassName2 : rowClassName2(record, i2, indent);
        var onHoverProps = {};
        if (columnManager.isAnyColumnsFixed) {
          onHoverProps.onHover = _this.handleRowHover;
        }
        var leafColumns = void 0;
        if (fixed === "left") {
          leafColumns = columnManager.leftLeafColumns;
        } else if (fixed === "right") {
          leafColumns = columnManager.rightLeafColumns;
        } else {
          leafColumns = _this.getColumns(columnManager.leafColumns);
        }
        var rowPrefixCls = "".concat(prefixCls2, "-row");
        var expandableRowProps = _extends(_extends({}, expander.props), {
          fixed,
          index: i2,
          prefixCls: rowPrefixCls,
          record,
          rowKey: key2,
          needIndentSpaced: expander.needIndentSpaced,
          key: key2,
          onRowClick: onRowClick2,
          onExpandedChange: expander.handleExpandChange
        });
        var row = createVNode(ExpandableRow$1, expandableRowProps, {
          default: function _default8(expandableRow) {
            var tableRowProps = _extends(_extends(_extends({
              fixed,
              indent,
              record,
              index: i2,
              prefixCls: rowPrefixCls,
              childrenColumnName,
              columns: leafColumns,
              rowKey: key2,
              ancestorKeys,
              components: components3,
              isAnyColumnsFixed,
              customRow,
              onRowDoubleClick: onRowDoubleClick2,
              onRowContextMenu,
              onRowMouseEnter,
              onRowMouseLeave
            }, onHoverProps), {
              class: className,
              ref: rowRef2(record, i2, indent)
            }), expandableRow);
            return createVNode(TableRow$1, tableRowProps, null);
          }
        });
        rows.push(row);
        expander.renderRows(_this.renderRows, rows, record, i2, indent, fixed, key2, ancestorKeys);
      };
      for (var i = 0; i < renderData.length; i += 1) {
        _loop(i);
      }
      return rows;
    }
  },
  render: function render126() {
    var _this2 = this;
    var _this$table = this.table, components3 = _this$table.sComponents, prefixCls2 = _this$table.prefixCls, scroll = _this$table.scroll, data79 = _this$table.data;
    var _this$$props = this.$props, expander = _this$$props.expander, tableClassName = _this$$props.tableClassName, hasHead = _this$$props.hasHead, hasBody = _this$$props.hasBody, fixed = _this$$props.fixed;
    var columns2 = this.getColumns();
    var tableStyle = {};
    if (!fixed && scroll.x) {
      tableStyle.width = scroll.x === true ? "auto" : scroll.x;
      tableStyle.width = typeof tableStyle.width === "number" ? "".concat(tableStyle.width, "px") : tableStyle.width;
    }
    if (fixed) {
      var width = columns2.reduce(function(sum, _ref) {
        var w = _ref.width;
        return sum + parseFloat(w, 10);
      }, 0);
      if (width > 0) {
        tableStyle.width = width + "px";
      }
    }
    var Table2 = hasBody ? components3.table : "table";
    var BodyWrapper = components3.body.wrapper;
    var body;
    if (hasBody) {
      body = createVNode(BodyWrapper, {
        "class": "".concat(prefixCls2, "-tbody")
      }, {
        default: function _default8() {
          return [_this2.renderRows(data79, 0)];
        }
      });
    }
    return createVNode(Table2, {
      "class": tableClassName,
      "style": tableStyle,
      "key": "table"
    }, {
      default: function _default8() {
        return [createVNode(ColGroup, {
          "columns": columns2,
          "fixed": fixed
        }, null), hasHead && createVNode(TableHeader, {
          "expander": expander,
          "columns": columns2,
          "fixed": fixed
        }, null), body];
      }
    });
  }
};
var BaseTable$1 = BaseTable;
var HeadTable = {
  name: "HeadTable",
  inheritAttrs: false,
  props: {
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    columns: PropsTypes.array.isRequired,
    tableClassName: PropsTypes.string.isRequired,
    handleBodyScrollLeft: PropsTypes.func.isRequired,
    expander: PropsTypes.object.isRequired
  },
  setup: function setup135() {
    return {
      table: inject("table", {})
    };
  },
  render: function render127() {
    var columns2 = this.columns, fixed = this.fixed, tableClassName = this.tableClassName, handleBodyScrollLeft2 = this.handleBodyScrollLeft, expander = this.expander, table = this.table;
    var prefixCls2 = table.prefixCls, scroll = table.scroll, showHeader = table.showHeader, saveRef4 = table.saveRef;
    var useFixedHeader = table.useFixedHeader;
    var headStyle = {};
    var scrollbarWidth = measureScrollbar({
      direction: "vertical"
    });
    if (scroll.y) {
      useFixedHeader = true;
      var scrollbarWidthOfHeader = measureScrollbar({
        direction: "horizontal",
        prefixCls: prefixCls2
      });
      if (scrollbarWidthOfHeader > 0 && !fixed) {
        headStyle.marginBottom = "-".concat(scrollbarWidthOfHeader, "px");
        headStyle.paddingBottom = "0px";
        headStyle.minWidth = "".concat(scrollbarWidth, "px");
        headStyle.overflowX = "scroll";
        headStyle.overflowY = scrollbarWidth === 0 ? "hidden" : "scroll";
      }
    }
    if (!useFixedHeader || !showHeader) {
      return null;
    }
    return createVNode("div", {
      "key": "headTable",
      "ref": fixed ? function() {
      } : saveRef4("headTable"),
      "class": classNames("".concat(prefixCls2, "-header"), _defineProperty({}, "".concat(prefixCls2, "-hide-scrollbar"), scrollbarWidth > 0)),
      "style": headStyle,
      "onScroll": handleBodyScrollLeft2
    }, [createVNode(BaseTable$1, {
      "tableClassName": tableClassName,
      "hasHead": true,
      "hasBody": false,
      "fixed": fixed,
      "columns": columns2,
      "expander": expander
    }, null)]);
  }
};
var BodyTable = {
  name: "BodyTable",
  inheritAttrs: false,
  props: {
    columns: PropsTypes.array.isRequired,
    tableClassName: PropsTypes.string.isRequired,
    handleBodyScroll: PropsTypes.func.isRequired,
    handleWheel: PropsTypes.func.isRequired,
    getRowKey: PropsTypes.func.isRequired,
    expander: PropsTypes.object.isRequired,
    isAnyColumnsFixed: PropsTypes.looseBool
  },
  setup: function setup136() {
    return {
      table: inject("table", {})
    };
  },
  render: function render128() {
    var _this$table = this.table, prefixCls2 = _this$table.prefixCls, scroll = _this$table.scroll;
    var columns2 = this.columns, tableClassName = this.tableClassName, getRowKey2 = this.getRowKey, handleBodyScroll2 = this.handleBodyScroll, handleWheel2 = this.handleWheel, expander = this.expander, isAnyColumnsFixed = this.isAnyColumnsFixed;
    var _this$table2 = this.table, useFixedHeader = _this$table2.useFixedHeader, saveRef4 = _this$table2.saveRef;
    var bodyStyle = _extends({}, this.table.bodyStyle);
    if (scroll.y) {
      var maxHeight = bodyStyle.maxHeight || scroll.y;
      maxHeight = typeof maxHeight === "number" ? "".concat(maxHeight, "px") : maxHeight;
      bodyStyle.maxHeight = maxHeight;
      bodyStyle.overflowY = bodyStyle.overflowY || "scroll";
      useFixedHeader = true;
    }
    if (scroll.x) {
      bodyStyle.overflowX = bodyStyle.overflowX || "auto";
      bodyStyle.WebkitTransform = "translate3d (0, 0, 0)";
      if (!scroll.y) {
        bodyStyle.overflowY = "hidden";
      }
    }
    var baseTable = createVNode(BaseTable$1, {
      "tableClassName": tableClassName,
      "hasHead": !useFixedHeader,
      "hasBody": true,
      "columns": columns2,
      "expander": expander,
      "getRowKey": getRowKey2,
      "isAnyColumnsFixed": isAnyColumnsFixed
    }, null);
    var useTabIndex = scroll && (scroll.x || scroll.y);
    return createVNode("div", {
      "tabindex": useTabIndex ? -1 : void 0,
      "key": "bodyTable",
      "class": "".concat(prefixCls2, "-body"),
      "style": bodyStyle,
      "ref": saveRef4("bodyTable"),
      "onWheel": handleWheel2,
      "onScroll": handleBodyScroll2
    }, [baseTable]);
  }
};
var ExpandableTableProps = function ExpandableTableProps2() {
  return {
    expandIconAsCell: PropsTypes.looseBool,
    expandRowByClick: PropsTypes.looseBool,
    expandedRowKeys: PropsTypes.array,
    expandedRowClassName: PropsTypes.func,
    defaultExpandAllRows: PropsTypes.looseBool,
    defaultExpandedRowKeys: PropsTypes.array,
    expandIconColumnIndex: PropsTypes.number,
    expandedRowRender: PropsTypes.func,
    expandIcon: PropsTypes.func,
    childrenColumnName: PropsTypes.string,
    indentSize: PropsTypes.number,
    columnManager: PropsTypes.object.isRequired,
    prefixCls: PropsTypes.string.isRequired,
    data: PropsTypes.array,
    getRowKey: PropsTypes.func
  };
};
var ExpandableTable = {
  name: "ExpandableTable",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: initDefaultProps$2(ExpandableTableProps(), {
    expandIconAsCell: false,
    expandedRowClassName: function expandedRowClassName() {
      return "";
    },
    expandIconColumnIndex: 0,
    defaultExpandAllRows: false,
    defaultExpandedRowKeys: [],
    childrenColumnName: "children",
    indentSize: 15
  }),
  setup: function setup137(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    var data79 = props2.data, childrenColumnName = props2.childrenColumnName, defaultExpandAllRows = props2.defaultExpandAllRows, expandedRowKeys2 = props2.expandedRowKeys, defaultExpandedRowKeys = props2.defaultExpandedRowKeys, getRowKey2 = props2.getRowKey;
    var finalExpandedRowKeys = [];
    var rows = _toConsumableArray(data79);
    if (defaultExpandAllRows) {
      for (var i = 0; i < rows.length; i += 1) {
        var row = rows[i];
        finalExpandedRowKeys.push(getRowKey2(row, i));
        rows = rows.concat(row[childrenColumnName] || []);
      }
    } else {
      finalExpandedRowKeys = expandedRowKeys2 || defaultExpandedRowKeys;
    }
    _extends(store, {
      expandedRowsHeight: {},
      expandedRowKeys: finalExpandedRowKeys
    });
    return {
      store
    };
  },
  mounted: function mounted34() {
    this.handleUpdated();
  },
  updated: function updated20() {
    this.handleUpdated();
  },
  watch: {
    expandedRowKeys: function expandedRowKeys(val) {
      var _this = this;
      this.$nextTick(function() {
        _this.store.expandedRowKeys = val;
      });
    }
  },
  methods: {
    handleUpdated: function handleUpdated() {
      this.latestExpandedRows = null;
    },
    handleExpandChange: function handleExpandChange2(expanded, record, event, rowKey) {
      var destroy3 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      var expandedRowKeys2 = this.store.expandedRowKeys;
      if (expanded) {
        expandedRowKeys2 = [].concat(_toConsumableArray(expandedRowKeys2), [rowKey]);
      } else {
        var expandedRowIndex = expandedRowKeys2.indexOf(rowKey);
        if (expandedRowIndex !== -1) {
          expandedRowKeys2 = remove2(expandedRowKeys2, rowKey);
        }
      }
      if (!this.expandedRowKeys) {
        this.store.expandedRowKeys = expandedRowKeys2;
      }
      if (!this.latestExpandedRows || !shallowEqual$1(this.latestExpandedRows, expandedRowKeys2)) {
        this.latestExpandedRows = expandedRowKeys2;
        this.__emit("expandedRowsChange", expandedRowKeys2);
      }
      if (!destroy3) {
        this.__emit("expand", expanded, record);
      }
    },
    renderExpandIndentCell: function renderExpandIndentCell(rows, fixed) {
      var prefixCls2 = this.prefixCls, expandIconAsCell = this.expandIconAsCell;
      if (!expandIconAsCell || fixed === "right" || !rows.length) {
        return;
      }
      var iconColumn = {
        key: "rc-table-expand-icon-cell",
        className: "".concat(prefixCls2, "-expand-icon-th"),
        title: "",
        rowSpan: rows.length
      };
      rows[0].unshift(_extends(_extends({}, iconColumn), {
        column: iconColumn
      }));
    },
    renderExpandedRow: function renderExpandedRow(record, index2, expandedRowRender, className, ancestorKeys, indent, fixed) {
      var _this2 = this;
      var prefixCls2 = this.prefixCls, expandIconAsCell = this.expandIconAsCell, indentSize = this.indentSize;
      var parentKey = ancestorKeys[ancestorKeys.length - 1];
      var rowKey = "".concat(parentKey, "-extra-row");
      var components3 = {
        body: {
          row: "tr",
          cell: "td"
        }
      };
      var colCount;
      if (fixed === "left") {
        colCount = this.columnManager.leftLeafColumns.value.length;
      } else if (fixed === "right") {
        colCount = this.columnManager.rightLeafColumns.value.length;
      } else {
        colCount = this.columnManager.leafColumns.value.length;
      }
      var columns2 = [{
        key: "extra-row",
        customRender: function customRender() {
          var expandedRowKeys2 = _this2.store.expandedRowKeys;
          var expanded = expandedRowKeys2.includes(parentKey);
          return {
            props: {
              colSpan: colCount
            },
            children: fixed !== "right" ? expandedRowRender({
              record,
              index: index2,
              indent,
              expanded
            }) : "&nbsp;"
          };
        }
      }];
      if (expandIconAsCell && fixed !== "right") {
        columns2.unshift({
          key: "expand-icon-placeholder",
          customRender: function customRender() {
            return null;
          }
        });
      }
      return createVNode(TableRow$1, {
        "key": rowKey,
        "columns": columns2,
        "class": className,
        "rowKey": rowKey,
        "ancestorKeys": ancestorKeys,
        "prefixCls": "".concat(prefixCls2, "-expanded-row"),
        "indentSize": indentSize,
        "indent": indent,
        "fixed": fixed,
        "components": components3,
        "expandedRow": true,
        "hasExpandIcon": function hasExpandIcon3() {
        }
      }, null);
    },
    renderRows: function renderRows2(_renderRows, rows, record, index2, indent, fixed, parentKey, ancestorKeys) {
      var expandedRowClassName2 = this.expandedRowClassName, expandedRowRender = this.expandedRowRender, childrenColumnName = this.childrenColumnName;
      var childrenData = record[childrenColumnName];
      var nextAncestorKeys = [].concat(_toConsumableArray(ancestorKeys), [parentKey]);
      var nextIndent = indent + 1;
      if (expandedRowRender) {
        rows.push(this.renderExpandedRow(record, index2, expandedRowRender, expandedRowClassName2(record, index2, indent), nextAncestorKeys, nextIndent, fixed));
      }
      if (childrenData) {
        rows.push.apply(rows, _toConsumableArray(_renderRows(childrenData, nextIndent, nextAncestorKeys)));
      }
    }
  },
  render: function render129() {
    var data79 = this.data, childrenColumnName = this.childrenColumnName;
    var props2 = getOptionProps(this);
    var needIndentSpaced = data79.some(function(record) {
      return record[childrenColumnName];
    });
    return getSlot(this, "default", {
      props: _extends(_extends({}, props2), this.$attrs),
      needIndentSpaced,
      renderRows: this.renderRows,
      handleExpandChange: this.handleExpandChange,
      renderExpandIndentCell: this.renderExpandIndentCell
    });
  }
};
var ExpandableTable$1 = ExpandableTable;
function useLayoutState(defaultState) {
  var stateRef = ref(defaultState);
  var tempState = stateRef.value;
  var updateBatchRef = [];
  var rafRef = ref();
  function setFrameState(updater) {
    wrapperRaf.cancel(rafRef.value);
    updateBatchRef.push(updater);
    rafRef.value = wrapperRaf(function() {
      var prevBatch = updateBatchRef;
      updateBatchRef = [];
      prevBatch.forEach(function(batchUpdater) {
        tempState = batchUpdater(tempState);
      });
      stateRef.value = tempState;
    });
  }
  onBeforeUnmount(function() {
    wrapperRaf.cancel(rafRef.value);
  });
  return [stateRef, setFrameState];
}
function useColumnManager(columns2) {
  var _leafColumns = function _leafColumns2(cls) {
    var fixed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var leafColumns2 = [];
    cls.forEach(function(column) {
      column.fixed = fixed || column.fixed;
      if (!column.children) {
        leafColumns2.push(column);
      } else {
        leafColumns2.push.apply(leafColumns2, _toConsumableArray(_leafColumns2(column.children, column.fixed)));
      }
    });
    return leafColumns2;
  };
  var groupedColumns = computed(function() {
    var _groupColumns = function _groupColumns2(cls) {
      var currentRow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var parentColumn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var rows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
      var fixed = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      rows[currentRow] = rows[currentRow] || [];
      var grouped = [];
      var setRowSpan = function setRowSpan2(column) {
        var rowSpan = rows.length - currentRow;
        if (column && !column.children && rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {
          column.rowSpan = rowSpan;
        }
      };
      cls.forEach(function(column, index2) {
        var newColumn = _extends({}, column);
        newColumn.fixed = fixed || column.fixed;
        rows[currentRow].push(newColumn);
        parentColumn.colSpan = parentColumn.colSpan || 0;
        if (newColumn.children && newColumn.children.length > 0) {
          newColumn.children = _groupColumns2(newColumn.children, currentRow + 1, newColumn, rows, newColumn.fixed);
          parentColumn.colSpan += newColumn.colSpan;
        } else {
          parentColumn.colSpan += 1;
        }
        for (var i = 0; i < rows[currentRow].length - 1; i += 1) {
          setRowSpan(rows[currentRow][i]);
        }
        if (index2 + 1 === cls.length) {
          setRowSpan(newColumn);
        }
        grouped.push(newColumn);
      });
      return grouped;
    };
    return _groupColumns(columns2.value);
  });
  var isAnyColumnsFixed = computed(function() {
    return columns2.value.some(function(column) {
      return !!column.fixed;
    });
  });
  var isAnyColumnsLeftFixed = computed(function() {
    return columns2.value.some(function(column) {
      return column.fixed === "left" || column.fixed === true;
    });
  });
  var isAnyColumnsRightFixed = computed(function() {
    return columns2.value.some(function(column) {
      return column.fixed === "right";
    });
  });
  var leftColumns = computed(function() {
    return groupedColumns.value.filter(function(column) {
      return column.fixed === "left" || column.fixed === true;
    });
  });
  var rightColumns = computed(function() {
    return groupedColumns.value.filter(function(column) {
      return column.fixed === "right";
    });
  });
  var leafColumns = computed(function() {
    return _leafColumns(columns2.value);
  });
  var leftLeafColumns = computed(function() {
    return _leafColumns(leftColumns.value);
  });
  var rightLeafColumns = computed(function() {
    return _leafColumns(rightColumns.value);
  });
  return {
    groupedColumns,
    isAnyColumnsFixed,
    isAnyColumnsLeftFixed,
    isAnyColumnsRightFixed,
    leftColumns,
    rightColumns,
    leafColumns,
    leftLeafColumns,
    rightLeafColumns
  };
}
function useStickyOffsets(colWidths, columns2) {
  var stickyOffsets = ref({
    left: [],
    right: []
  });
  var columnCount = ref();
  watch(columns2, function() {
    columnCount.value = columns2.value.length;
  }, {
    immediate: true
  });
  watch([colWidths, columnCount], function() {
    var leftOffsets = [];
    var rightOffsets = [];
    var left = 0;
    var right = 0;
    for (var start = 0; start < columnCount.value; start += 1) {
      leftOffsets[start] = left;
      left += colWidths.value[start] || 0;
      var end = columnCount.value - start - 1;
      rightOffsets[end] = right;
      right += colWidths.value[end] || 0;
    }
    stickyOffsets.value = {
      left: leftOffsets,
      right: rightOffsets
    };
  });
  return stickyOffsets;
}
var Table$2 = defineComponent({
  name: "Table",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    data: PropsTypes.array,
    useFixedHeader: PropsTypes.looseBool,
    columns: PropsTypes.array,
    prefixCls: PropsTypes.string,
    bodyStyle: PropsTypes.object,
    rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
    rowClassName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
    customRow: PropsTypes.func,
    customHeaderRow: PropsTypes.func,
    showHeader: PropsTypes.looseBool,
    title: PropsTypes.func,
    id: PropsTypes.string,
    footer: PropsTypes.func,
    emptyText: PropsTypes.any,
    scroll: PropsTypes.object,
    rowRef: PropsTypes.func,
    components: PropsTypes.shape({
      table: PropsTypes.any,
      header: PropsTypes.shape({
        wrapper: PropsTypes.any,
        row: PropsTypes.any,
        cell: PropsTypes.any
      }).loose,
      body: PropsTypes.shape({
        wrapper: PropsTypes.any,
        row: PropsTypes.any,
        cell: PropsTypes.any
      }).loose
    }).loose,
    expandIconAsCell: PropsTypes.looseBool,
    expandedRowKeys: PropsTypes.array,
    expandedRowClassName: PropsTypes.func,
    defaultExpandAllRows: PropsTypes.looseBool,
    defaultExpandedRowKeys: PropsTypes.array,
    expandIconColumnIndex: PropsTypes.number,
    expandedRowRender: PropsTypes.func,
    childrenColumnName: PropsTypes.string,
    indentSize: PropsTypes.number,
    expandRowByClick: PropsTypes.looseBool,
    expandIcon: PropsTypes.func,
    tableLayout: PropsTypes.string,
    transformCellText: PropsTypes.func
  }, {
    data: [],
    useFixedHeader: false,
    rowKey: "key",
    rowClassName: function rowClassName() {
      return "";
    },
    prefixCls: "rc-table",
    bodyStyle: {},
    showHeader: true,
    scroll: {},
    rowRef: function rowRef() {
      return null;
    },
    emptyText: function emptyText() {
      return "No Data";
    },
    customHeaderRow: function customHeaderRow() {
    }
  }),
  setup: function setup138(props2) {
    var columnManager = useColumnManager(toRef(props2, "columns"));
    var colsKeys = computed(function() {
      return getColumnsKey(columnManager.leafColumns.value);
    });
    var _useLayoutState = useLayoutState(new Map()), _useLayoutState2 = _slicedToArray(_useLayoutState, 2), colsWidths = _useLayoutState2[0], updateColsWidths = _useLayoutState2[1];
    var pureColWidths = computed(function() {
      return colsKeys.value.map(function(columnKey) {
        return colsWidths.value.get(columnKey);
      });
    });
    var stickyOffsets = useStickyOffsets(pureColWidths, columnManager.leafColumns);
    var onColumnResize = function onColumnResize2(columnKey, width) {
      updateColsWidths(function(widths) {
        if (widths.get(columnKey) !== width) {
          var newWidths = new Map(widths);
          newWidths.set(columnKey, width);
          return newWidths;
        }
        return widths;
      });
    };
    var fixedInfoList = computed(function() {
      return columnManager.leafColumns.value.map(function(_, colIndex) {
        return getCellFixedInfo(colIndex, colIndex, columnManager.leafColumns.value, stickyOffsets.value);
      });
    });
    var store = reactive({
      currentHoverKey: null,
      fixedColumnsHeadRowsHeight: [],
      fixedColumnsBodyRowsHeight: {},
      expandedRowsHeight: {},
      expandedRowKeys: [],
      columnManager,
      fixedInfoList,
      stickyOffsets
    });
    provide("table-store", store);
    var bodyRef = ref();
    var pingedLeft = ref(false);
    var pingedRight = ref(false);
    var horizonScroll = computed(function() {
      return props2.scroll && validateValue(props2.scroll.x);
    });
    var onScroll2 = function onScroll3(currentTarget) {
      var scrollWidth = currentTarget.scrollWidth, clientWidth = currentTarget.clientWidth, scrollLeft = currentTarget.scrollLeft;
      pingedLeft.value = scrollLeft > 0;
      pingedRight.value = scrollLeft < scrollWidth - clientWidth;
    };
    onUpdated(function() {
      nextTick(function() {
        horizonScroll.value && onScroll2(bodyRef.value.$el);
      });
    });
    onMounted(function() {
      nextTick(function() {
        horizonScroll.value && onScroll2(bodyRef.value.$el);
      });
    });
    var onFullTableResize = function onFullTableResize2() {
      horizonScroll.value && onScroll2(bodyRef.value.$el);
    };
    return {
      bodyRef,
      store,
      onColumnResize,
      columnManager,
      onScroll: onScroll2,
      pingedLeft,
      pingedRight,
      onFullTableResize
    };
  },
  data: function data63() {
    this.preData = _toConsumableArray(this.data);
    return {
      sComponents: markRaw(merge({
        table: "table",
        header: {
          wrapper: "thead",
          row: "tr",
          cell: "th"
        },
        body: {
          wrapper: "tbody",
          row: "tr",
          cell: "td"
        }
      }, this.components))
    };
  },
  computed: {
    dataLen: function dataLen() {
      return this.$props.data.length;
    }
  },
  watch: {
    components: function components() {
      this._components = merge({
        table: "table",
        header: {
          wrapper: "thead",
          row: "tr",
          cell: "th"
        },
        body: {
          wrapper: "tbody",
          row: "tr",
          cell: "td"
        }
      }, this.components);
    },
    dataLen: function dataLen2(val, preVal) {
      var _this = this;
      if ((val === 0 || preVal === 0) && this.hasScrollX()) {
        nextTick(function() {
          _this.resetScrollX();
        });
      }
    }
  },
  created: function created16() {
    provide("table", this);
    this.setScrollPosition("left");
    this.debouncedWindowResize = debounce(this.handleWindowResize, 150);
  },
  mounted: function mounted35() {
    var _this2 = this;
    this.$nextTick(function() {
      if (_this2.columnManager.isAnyColumnsFixed.value) {
        _this2.handleWindowResize();
        _this2.resizeEvent = addEventListenerWrap(window, "resize", _this2.debouncedWindowResize);
      }
      if (_this2.ref_headTable) {
        _this2.ref_headTable.scrollLeft = 0;
      }
      if (_this2.ref_bodyTable) {
        _this2.ref_bodyTable.scrollLeft = 0;
      }
    });
  },
  updated: function updated21() {
    var _this3 = this;
    this.$nextTick(function() {
      if (_this3.columnManager.isAnyColumnsFixed.value) {
        _this3.handleWindowResize();
        if (!_this3.resizeEvent) {
          _this3.resizeEvent = addEventListenerWrap(window, "resize", _this3.debouncedWindowResize);
        }
      }
    });
  },
  beforeUnmount: function beforeUnmount25() {
    if (this.resizeEvent) {
      this.resizeEvent.remove();
    }
    if (this.debouncedWindowResize) {
      this.debouncedWindowResize.cancel();
    }
  },
  methods: {
    getRowKey: function getRowKey(record, index2) {
      var rowKey = this.rowKey;
      var key2 = typeof rowKey === "function" ? rowKey(record, index2) : record[rowKey];
      warning$1(key2 !== void 0, "Each record in table should have a unique `key` prop,or set `rowKey` to an unique primary key.");
      return key2 === void 0 ? index2 : key2;
    },
    setScrollPosition: function setScrollPosition(position) {
      this.scrollPosition = position;
      if (this.tableNode) {
        var prefixCls2 = this.prefixCls;
        if (position === "both") {
          classes3(this.tableNode).remove(new RegExp("^".concat(prefixCls2, "-scroll-position-.+$"))).add("".concat(prefixCls2, "-scroll-position-left")).add("".concat(prefixCls2, "-scroll-position-right"));
        } else {
          classes3(this.tableNode).remove(new RegExp("^".concat(prefixCls2, "-scroll-position-.+$"))).add("".concat(prefixCls2, "-scroll-position-").concat(position));
        }
      }
    },
    setScrollPositionClassName: function setScrollPositionClassName() {
      var node = this.ref_bodyTable;
      var scrollToLeft = node.scrollLeft === 0;
      var scrollToRight = node.scrollLeft + 1 >= node.children[0].getBoundingClientRect().width - node.getBoundingClientRect().width;
      if (scrollToLeft && scrollToRight) {
        this.setScrollPosition("both");
      } else if (scrollToLeft) {
        this.setScrollPosition("left");
      } else if (scrollToRight) {
        this.setScrollPosition("right");
      } else if (this.scrollPosition !== "middle") {
        this.setScrollPosition("middle");
      }
    },
    isTableLayoutFixed: function isTableLayoutFixed() {
      var _this$$props = this.$props, tableLayout = _this$$props.tableLayout, _this$$props$columns = _this$$props.columns, columns2 = _this$$props$columns === void 0 ? [] : _this$$props$columns, useFixedHeader = _this$$props.useFixedHeader, _this$$props$scroll = _this$$props.scroll, scroll = _this$$props$scroll === void 0 ? {} : _this$$props$scroll;
      if (typeof tableLayout !== "undefined") {
        return tableLayout === "fixed";
      }
      if (columns2.some(function(_ref) {
        var ellipsis = _ref.ellipsis;
        return !!ellipsis;
      })) {
        return true;
      }
      if (useFixedHeader || scroll.y) {
        return true;
      }
      if (scroll.x && scroll.x !== true && scroll.x !== "max-content") {
        return true;
      }
      return false;
    },
    handleWindowResize: function handleWindowResize() {
      this.syncFixedTableRowHeight();
      this.setScrollPositionClassName();
    },
    syncFixedTableRowHeight: function syncFixedTableRowHeight() {
      var tableRect = this.tableNode.getBoundingClientRect();
      if (tableRect.height !== void 0 && tableRect.height <= 0) {
        return;
      }
      var prefixCls2 = this.prefixCls;
      var headRows = this.ref_headTable ? this.ref_headTable.querySelectorAll("thead") : this.ref_bodyTable.querySelectorAll("thead");
      var bodyRows = this.ref_bodyTable.querySelectorAll(".".concat(prefixCls2, "-row")) || [];
      var fixedColumnsHeadRowsHeight = [].map.call(headRows, function(row) {
        return row.getBoundingClientRect().height ? row.getBoundingClientRect().height - 0.5 : "auto";
      });
      var state = this.store;
      var fixedColumnsBodyRowsHeight = [].reduce.call(bodyRows, function(acc, row) {
        var rowKey = row.getAttribute("data-row-key");
        var height = row.getBoundingClientRect().height || state.fixedColumnsBodyRowsHeight[rowKey] || "auto";
        acc[rowKey] = height;
        return acc;
      }, {});
      if (shallowEqual$1(state.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) && shallowEqual$1(state.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight)) {
        return;
      }
      this.store.fixedColumnsHeadRowsHeight = fixedColumnsHeadRowsHeight;
      this.store.fixedColumnsBodyRowsHeight = fixedColumnsBodyRowsHeight;
    },
    resetScrollX: function resetScrollX() {
      if (this.ref_headTable) {
        this.ref_headTable.scrollLeft = 0;
      }
      if (this.ref_bodyTable) {
        this.ref_bodyTable.scrollLeft = 0;
      }
    },
    hasScrollX: function hasScrollX() {
      var _this$scroll = this.scroll, scroll = _this$scroll === void 0 ? {} : _this$scroll;
      return "x" in scroll;
    },
    handleBodyScrollLeft: function handleBodyScrollLeft(e) {
      var target = e.target;
      var _this$scroll2 = this.scroll, scroll = _this$scroll2 === void 0 ? {} : _this$scroll2;
      var ref_headTable = this.ref_headTable, ref_bodyTable = this.ref_bodyTable;
      if (target.scrollLeft !== this.lastScrollLeft && scroll.x) {
        if (target === ref_bodyTable && ref_headTable) {
          ref_headTable.scrollLeft = target.scrollLeft;
        } else if (target === ref_headTable && ref_bodyTable) {
          ref_bodyTable.scrollLeft = target.scrollLeft;
        }
        this.setScrollPositionClassName();
      }
      this.lastScrollLeft = target.scrollLeft;
    },
    handleBodyScrollTop: function handleBodyScrollTop(e) {
      var target = e.target;
      if (e.currentTarget !== target) {
        return;
      }
      var _this$scroll3 = this.scroll, scroll = _this$scroll3 === void 0 ? {} : _this$scroll3;
      var ref_headTable = this.ref_headTable, ref_bodyTable = this.ref_bodyTable, ref_fixedColumnsBodyLeft = this.ref_fixedColumnsBodyLeft, ref_fixedColumnsBodyRight = this.ref_fixedColumnsBodyRight;
      if (target.scrollTop !== this.lastScrollTop && scroll.y && target !== ref_headTable) {
        var scrollTop = target.scrollTop;
        if (ref_fixedColumnsBodyLeft && target !== ref_fixedColumnsBodyLeft) {
          ref_fixedColumnsBodyLeft.scrollTop = scrollTop;
        }
        if (ref_fixedColumnsBodyRight && target !== ref_fixedColumnsBodyRight) {
          ref_fixedColumnsBodyRight.scrollTop = scrollTop;
        }
        if (ref_bodyTable && target !== ref_bodyTable) {
          ref_bodyTable.scrollTop = scrollTop;
        }
      }
      this.lastScrollTop = target.scrollTop;
    },
    handleBodyScroll: function handleBodyScroll(e) {
      this.onScroll(e.target);
      this.handleBodyScrollLeft(e);
      this.handleBodyScrollTop(e);
    },
    handleWheel: function handleWheel(event) {
      var _this$$props$scroll2 = this.$props.scroll, scroll = _this$$props$scroll2 === void 0 ? {} : _this$$props$scroll2;
      if (window.navigator.userAgent.match(/Trident\/7\./) && scroll.y) {
        event.preventDefault();
        var wd = event.deltaY;
        var target = event.target;
        var bodyTable = this.ref_bodyTable, fixedColumnsBodyLeft = this.ref_fixedColumnsBodyLeft, fixedColumnsBodyRight = this.ref_fixedColumnsBodyRight;
        var scrollTop = 0;
        if (this.lastScrollTop) {
          scrollTop = this.lastScrollTop + wd;
        } else {
          scrollTop = wd;
        }
        if (fixedColumnsBodyLeft && target !== fixedColumnsBodyLeft) {
          fixedColumnsBodyLeft.scrollTop = scrollTop;
        }
        if (fixedColumnsBodyRight && target !== fixedColumnsBodyRight) {
          fixedColumnsBodyRight.scrollTop = scrollTop;
        }
        if (bodyTable && target !== bodyTable) {
          bodyTable.scrollTop = scrollTop;
        }
      }
    },
    saveRef: function saveRef3(name2) {
      var _this4 = this;
      return function(node) {
        _this4["ref_".concat(name2)] = node;
      };
    },
    saveTableNodeRef: function saveTableNodeRef(node) {
      this.tableNode = node;
    },
    renderMainTable: function renderMainTable() {
      var scroll = this.scroll, prefixCls2 = this.prefixCls;
      var isAnyColumnsFixed = this.columnManager.isAnyColumnsFixed.value;
      var scrollable = isAnyColumnsFixed || scroll.x || scroll.y;
      var table = [this.renderTable({
        columns: this.columnManager.groupedColumns.value,
        isAnyColumnsFixed
      }), this.renderEmptyText(), this.renderFooter()];
      return scrollable ? createVNode(ResizeObserver, {
        "onResize": this.onFullTableResize
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "class": "".concat(prefixCls2, "-scroll")
          }, [table])];
        }
      }) : table;
    },
    renderTable: function renderTable(options2) {
      var columns2 = options2.columns, isAnyColumnsFixed = options2.isAnyColumnsFixed;
      var prefixCls2 = this.prefixCls, _this$scroll4 = this.scroll, scroll = _this$scroll4 === void 0 ? {} : _this$scroll4;
      var tableClassName = scroll.x ? "".concat(prefixCls2, "-fixed") : "";
      var headTable = createVNode(HeadTable, {
        "key": "head",
        "columns": columns2,
        "tableClassName": tableClassName,
        "handleBodyScrollLeft": this.handleBodyScrollLeft,
        "expander": this.expander
      }, null);
      var bodyTable = createVNode(BodyTable, {
        "key": "body",
        "columns": columns2,
        "tableClassName": tableClassName,
        "getRowKey": this.getRowKey,
        "handleWheel": this.handleWheel,
        "handleBodyScroll": this.handleBodyScroll,
        "expander": this.expander,
        "isAnyColumnsFixed": isAnyColumnsFixed,
        "ref": "bodyRef"
      }, null);
      return [headTable, bodyTable];
    },
    renderTitle: function renderTitle() {
      var title2 = this.title, prefixCls2 = this.prefixCls, data79 = this.data;
      return title2 ? createVNode("div", {
        "class": "".concat(prefixCls2, "-title"),
        "key": "title"
      }, [title2(data79)]) : null;
    },
    renderFooter: function renderFooter4() {
      var footer = this.footer, prefixCls2 = this.prefixCls, data79 = this.data;
      return footer ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer"),
        "key": "footer"
      }, [footer(data79)]) : null;
    },
    renderEmptyText: function renderEmptyText() {
      var emptyText2 = this.emptyText, prefixCls2 = this.prefixCls, data79 = this.data;
      if (data79.length) {
        return null;
      }
      var emptyClassName = "".concat(prefixCls2, "-placeholder");
      return createVNode("div", {
        "class": emptyClassName,
        "key": "emptyText"
      }, [typeof emptyText2 === "function" ? emptyText2() : emptyText2]);
    }
  },
  render: function render130() {
    var _classNames, _this5 = this;
    var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
    var columnManager = this.columnManager, getRowKey2 = this.getRowKey;
    var prefixCls2 = props2.prefixCls;
    var tableClassName = classNames(props2.prefixCls, props2.class, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-fixed-header"), props2.useFixedHeader || props2.scroll && props2.scroll.y), _defineProperty(_classNames, "".concat(prefixCls2, "-scroll-position-left ").concat(prefixCls2, "-scroll-position-right"), this.scrollPosition === "both"), _defineProperty(_classNames, "".concat(prefixCls2, "-scroll-position-").concat(this.scrollPosition), this.scrollPosition !== "both"), _defineProperty(_classNames, "".concat(prefixCls2, "-layout-fixed"), this.isTableLayoutFixed()), _defineProperty(_classNames, "".concat(prefixCls2, "-ping-left"), this.pingedLeft), _defineProperty(_classNames, "".concat(prefixCls2, "-ping-right"), this.pingedRight), _classNames));
    var dataAndAriaProps = getDataAndAriaProps(props2);
    var expandableTableProps = _extends(_extends({}, props2), {
      columnManager,
      getRowKey: getRowKey2
    });
    return createVNode(ExpandableTable$1, expandableTableProps, {
      default: function _default8(expander) {
        _this5.expander = expander;
        return createVNode("div", _objectSpread2({
          "ref": _this5.saveTableNodeRef,
          "class": tableClassName,
          "style": props2.style,
          "id": props2.id
        }, dataAndAriaProps), [_this5.renderTitle(), createVNode("div", {
          "class": "".concat(prefixCls2, "-content")
        }, [_this5.renderMainTable()])]);
      }
    });
  }
});
var FilterDropdownMenuWrapper = function FilterDropdownMenuWrapper2(props2, _ref) {
  var slots = _ref.slots;
  var _a;
  return createVNode("div", {
    "class": props2.class,
    "onClick": function onClick7(e) {
      return e.stopPropagation();
    }
  }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
};
FilterDropdownMenuWrapper.inheritAttrs = false;
var FilterDropdownMenuWrapper$1 = FilterDropdownMenuWrapper;
paginationProps$1();
var ColumnFilterItem = PropsTypes.shape({
  text: PropsTypes.string,
  value: PropsTypes.string,
  children: PropsTypes.array
}).loose;
var columnProps = {
  title: PropsTypes.VNodeChild,
  key: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  dataIndex: PropsTypes.string,
  customRender: PropsTypes.func,
  customCell: PropsTypes.func,
  customHeaderCell: PropsTypes.func,
  align: PropsTypes.oneOf(tuple("left", "right", "center")),
  ellipsis: PropsTypes.looseBool,
  filters: PropsTypes.arrayOf(ColumnFilterItem),
  onFilter: {
    type: Function
  },
  filterMultiple: PropsTypes.looseBool,
  filterDropdown: PropsTypes.any,
  filterDropdownVisible: PropsTypes.looseBool,
  onFilterDropdownVisibleChange: {
    type: Function
  },
  sorter: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func]),
  defaultSortOrder: PropsTypes.oneOf(tuple("ascend", "descend")),
  colSpan: PropsTypes.number,
  width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  className: PropsTypes.string,
  fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.oneOf(tuple("left", "right"))])),
  filterIcon: PropsTypes.any,
  filteredValue: PropsTypes.array,
  filtered: PropsTypes.looseBool,
  defaultFilteredValue: PropsTypes.array,
  sortOrder: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.oneOf(tuple("ascend", "descend"))])),
  sortDirections: PropsTypes.array
};
var TableLocale = PropsTypes.shape({
  filterTitle: PropsTypes.string,
  filterConfirm: PropsTypes.any,
  filterReset: PropsTypes.any,
  emptyText: PropsTypes.any,
  selectAll: PropsTypes.any,
  selectInvert: PropsTypes.any,
  sortTitle: PropsTypes.string,
  expand: PropsTypes.string,
  collapse: PropsTypes.string
}).loose;
var RowSelectionType = PropsTypes.oneOf(tuple("checkbox", "radio"));
var tableRowSelection = {
  type: RowSelectionType,
  selectedRowKeys: PropsTypes.array,
  getCheckboxProps: PropsTypes.func,
  selections: withUndefined(PropsTypes.oneOfType([PropsTypes.array, PropsTypes.looseBool])),
  hideDefaultSelections: PropsTypes.looseBool,
  fixed: PropsTypes.looseBool,
  columnWidth: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  selectWay: PropsTypes.oneOf(tuple("onSelect", "onSelectMultiple", "onSelectAll", "onSelectInvert")),
  columnTitle: PropsTypes.any
};
var paginationProps2 = paginationConfig();
var tableProps = {
  prefixCls: PropsTypes.string,
  dropdownPrefixCls: PropsTypes.string,
  rowSelection: PropsTypes.oneOfType([PropsTypes.shape(tableRowSelection).loose, Object]),
  pagination: withUndefined(PropsTypes.oneOfType([PropsTypes.shape(paginationProps2).loose, PropsTypes.looseBool])),
  size: PropsTypes.oneOf(tuple("default", "middle", "small", "large")),
  dataSource: PropsTypes.array,
  components: PropsTypes.object,
  columns: {
    type: Array
  },
  rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  rowClassName: PropsTypes.func,
  expandedRowRender: PropsTypes.any,
  defaultExpandAllRows: PropsTypes.looseBool,
  defaultExpandedRowKeys: PropsTypes.array,
  expandedRowKeys: PropsTypes.array,
  expandIconAsCell: PropsTypes.looseBool,
  expandIconColumnIndex: PropsTypes.number,
  expandRowByClick: PropsTypes.looseBool,
  loading: PropsTypes.oneOfType([PropsTypes.shape(getSpinProps()).loose, PropsTypes.looseBool]),
  locale: TableLocale,
  indentSize: PropsTypes.number,
  customRow: PropsTypes.func,
  customHeaderRow: PropsTypes.func,
  useFixedHeader: PropsTypes.looseBool,
  bordered: PropsTypes.looseBool,
  showHeader: PropsTypes.looseBool,
  footer: PropsTypes.func,
  title: PropsTypes.func,
  scroll: {
    type: Object
  },
  childrenColumnName: PropsTypes.oneOfType([PropsTypes.array, PropsTypes.string]),
  bodyStyle: PropsTypes.style,
  sortDirections: {
    type: Array
  },
  tableLayout: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  expandIcon: PropsTypes.func,
  transformCellText: PropsTypes.func,
  onExpandedRowsChange: PropsTypes.func,
  onExpand: PropsTypes.func,
  onChange: PropsTypes.func,
  onRowClick: PropsTypes.func
};
var SelectionCheckboxAllProps = {
  propsSymbol: PropsTypes.any,
  store: PropsTypes.any,
  locale: PropsTypes.any,
  disabled: PropsTypes.looseBool,
  getCheckboxPropsByItem: PropsTypes.func,
  getRecordKey: PropsTypes.func,
  data: PropsTypes.array,
  prefixCls: PropsTypes.string,
  hideDefaultSelections: PropsTypes.looseBool,
  selections: PropsTypes.oneOfType([PropsTypes.array, PropsTypes.looseBool]),
  getPopupContainer: PropsTypes.func,
  onSelect: PropsTypes.func
};
var SelectionBoxProps = {
  store: PropsTypes.any,
  type: RowSelectionType,
  defaultSelection: PropsTypes.array,
  rowIndex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  name: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  id: PropsTypes.string
};
var FilterMenuProps = {
  locale: TableLocale,
  selectedKeys: PropsTypes.array,
  column: PropsTypes.object,
  confirmFilter: PropsTypes.func,
  prefixCls: PropsTypes.string,
  dropdownPrefixCls: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  handleFilter: PropsTypes.func
};
var BaseMixin2 = {
  methods: {
    setState: function setState2() {
      var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      var newState = typeof state === "function" ? state(this, this.$props) : state;
      if (this.getDerivedStateFromProps) {
        var s = this.getDerivedStateFromProps(getOptionProps(this), _extends(_extends({}, this), newState));
        if (s === null) {
          return;
        } else {
          newState = _extends(_extends({}, newState), s || {});
        }
      }
      _extends(this, newState);
      if (this._.isMounted) {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    __emit: function __emit2() {
      var args = [].slice.call(arguments, 0);
      var eventName = args[0];
      eventName = "on".concat(eventName[0].toUpperCase()).concat(eventName.substring(1));
      var event = this.$props[eventName] || this.$attrs[eventName];
      if (args.length && event) {
        if (Array.isArray(event)) {
          for (var i = 0, l = event.length; i < l; i++) {
            event[i].apply(event, _toConsumableArray(args.slice(1)));
          }
        } else {
          event.apply(void 0, _toConsumableArray(args.slice(1)));
        }
      }
    }
  }
};
function flatArray() {
  var data79 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var childrenName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "children";
  var result = [];
  var loop = function loop2(array) {
    array.forEach(function(item) {
      if (item[childrenName]) {
        var newItem = _extends({}, item);
        delete newItem[childrenName];
        result.push(newItem);
        if (item[childrenName].length > 0) {
          loop2(item[childrenName]);
        }
      } else {
        result.push(item);
      }
    });
  };
  loop(data79);
  return result;
}
function treeMap(tree, mapper) {
  var childrenName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  return tree.map(function(node, index2) {
    var extra = {};
    if (node[childrenName]) {
      extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);
    }
    return _extends(_extends({}, mapper(node, index2)), extra);
  });
}
function flatFilter(tree, callback) {
  return tree.reduce(function(acc, node) {
    if (callback(node)) {
      acc.push(node);
    }
    if (node.children) {
      var children = flatFilter(node.children, callback);
      acc.push.apply(acc, _toConsumableArray(children));
    }
    return acc;
  }, []);
}
function generateValueMaps(items) {
  var maps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  (items || []).forEach(function(_ref) {
    var value26 = _ref.value, children = _ref.children;
    maps[value26.toString()] = value26;
    generateValueMaps(children, maps);
  });
  return maps;
}
function stopPropagation$1(e) {
  e.stopPropagation();
}
var FilterDropdown = defineComponent({
  name: "FilterMenu",
  mixins: [BaseMixin2],
  inheritAttrs: false,
  props: initDefaultProps$1(FilterMenuProps, {
    column: {}
  }),
  setup: function setup139(props2) {
    var sSelectedKeys = computed(function() {
      return props2.selectedKeys;
    });
    var sVisible = computed(function() {
      return "filterDropdownVisible" in props2.column ? props2.column.filterDropdownVisible : false;
    });
    var sValueKeys = computed(function() {
      return generateValueMaps(props2.column.filters);
    });
    var state = reactive({
      neverShown: false,
      sSelectedKeys: sSelectedKeys.value,
      sKeyPathOfSelectedItem: {},
      sVisible: sVisible.value,
      sValueKeys: sValueKeys.value
    });
    watch(sSelectedKeys, function() {
      state.sSelectedKeys = sSelectedKeys.value;
    });
    watch(sVisible, function() {
      state.sVisible = sVisible.value;
    });
    watch(sValueKeys, function() {
      state.sValueKeys = sValueKeys.value;
    });
    return state;
  },
  methods: {
    getDropdownVisible: function getDropdownVisible() {
      return !!this.sVisible;
    },
    setSelectedKeys: function setSelectedKeys(_ref) {
      var selectedKeys3 = _ref.selectedKeys;
      this.setState({
        sSelectedKeys: selectedKeys3
      });
    },
    setVisible: function setVisible2(visible9) {
      var column = this.column;
      if (!("filterDropdownVisible" in column)) {
        this.setState({
          sVisible: visible9
        });
      }
      if (column.onFilterDropdownVisibleChange) {
        column.onFilterDropdownVisibleChange(visible9);
      }
    },
    handleClearFilters: function handleClearFilters() {
      this.setState({
        sSelectedKeys: []
      }, this.handleConfirm);
    },
    handleConfirm: function handleConfirm() {
      this.setVisible(false);
      this.$forceUpdate();
      nextTick(this.confirmFilter2);
    },
    onVisibleChange: function onVisibleChange5(visible9) {
      this.setVisible(visible9);
      var column = this.$props.column;
      if (!visible9 && !(column.filterDropdown instanceof Function)) {
        this.confirmFilter2();
      }
    },
    handleMenuItemClick: function handleMenuItemClick(info3) {
      var selectedKeys3 = this.sSelectedKeys;
      if (!info3.keyPath || info3.keyPath.length <= 1) {
        return;
      }
      var keyPathOfSelectedItem = this.sKeyPathOfSelectedItem;
      if (selectedKeys3 && selectedKeys3.indexOf(info3.key) >= 0) {
        delete keyPathOfSelectedItem[info3.key];
      } else {
        keyPathOfSelectedItem[info3.key] = info3.keyPath;
      }
      this.setState({
        sKeyPathOfSelectedItem: keyPathOfSelectedItem
      });
    },
    hasSubMenu: function hasSubMenu() {
      var _this$column$filters = this.column.filters, filters = _this$column$filters === void 0 ? [] : _this$column$filters;
      return filters.some(function(item) {
        return !!(item.children && item.children.length > 0);
      });
    },
    confirmFilter2: function confirmFilter2() {
      var _this$$props = this.$props, column = _this$$props.column, propSelectedKeys = _this$$props.selectedKeys, confirmFilter = _this$$props.confirmFilter;
      var selectedKeys3 = this.sSelectedKeys, valueKeys = this.sValueKeys;
      var filterDropdown = column.filterDropdown;
      if (!shallowEqual$1(selectedKeys3, propSelectedKeys)) {
        confirmFilter(column, filterDropdown ? selectedKeys3 : selectedKeys3.map(function(key2) {
          return valueKeys[key2];
        }).filter(function(key2) {
          return key2 !== void 0;
        }));
      }
    },
    renderMenus: function renderMenus(items) {
      var _this = this;
      var _this$$props2 = this.$props, dropdownPrefixCls = _this$$props2.dropdownPrefixCls, prefixCls2 = _this$$props2.prefixCls;
      return items.map(function(item) {
        if (item.children && item.children.length > 0) {
          var sKeyPathOfSelectedItem = _this.sKeyPathOfSelectedItem;
          var containSelected = Object.keys(sKeyPathOfSelectedItem).some(function(key2) {
            return sKeyPathOfSelectedItem[key2].indexOf(item.value) >= 0;
          });
          var subMenuCls = classNames("".concat(prefixCls2, "-dropdown-submenu"), _defineProperty({}, "".concat(dropdownPrefixCls, "-submenu-contain-selected"), containSelected));
          return createVNode(SubMenu, {
            "title": item.text,
            "popupClassName": subMenuCls,
            "key": item.value
          }, {
            default: function _default8() {
              return [_this.renderMenus(item.children)];
            }
          });
        }
        return _this.renderMenuItem(item);
      });
    },
    renderFilterIcon: function renderFilterIcon() {
      var _classNames2;
      var _a, _b;
      var column = this.column, locale2 = this.locale, prefixCls2 = this.prefixCls, selectedKeys3 = this.selectedKeys;
      var filtered = selectedKeys3 && selectedKeys3.length > 0;
      var filterIcon = column.filterIcon;
      if (typeof filterIcon === "function") {
        filterIcon = filterIcon({
          filtered,
          column
        });
      }
      var dropdownIconClass = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-selected"), "filtered" in column ? column.filtered : filtered), _defineProperty(_classNames2, "".concat(prefixCls2, "-open"), this.getDropdownVisible()), _classNames2));
      if (!filterIcon) {
        return createVNode(FilterFilled, {
          "title": locale2.filterTitle,
          "class": dropdownIconClass,
          "onClick": stopPropagation$1
        }, null);
      }
      if (filterIcon.length === 1 && isValidElement(filterIcon[0])) {
        return cloneElement(filterIcon[0], {
          title: ((_a = filterIcon.props) === null || _a === void 0 ? void 0 : _a.title) || locale2.filterTitle,
          onClick: stopPropagation$1,
          class: classNames("".concat(prefixCls2, "-icon"), dropdownIconClass, (_b = filterIcon.props) === null || _b === void 0 ? void 0 : _b.class)
        });
      }
      return createVNode("span", {
        "class": classNames("".concat(prefixCls2, "-icon"), dropdownIconClass),
        "onClick": stopPropagation$1
      }, [filterIcon]);
    },
    renderMenuItem: function renderMenuItem(item) {
      var column = this.column;
      var selectedKeys3 = this.sSelectedKeys;
      var multiple = "filterMultiple" in column ? column.filterMultiple : true;
      var input = multiple ? createVNode(Checkbox, {
        "checked": selectedKeys3 && selectedKeys3.indexOf(item.value) >= 0
      }, null) : createVNode(Radio, {
        "checked": selectedKeys3 && selectedKeys3.indexOf(item.value) >= 0
      }, null);
      return createVNode(MenuItem, {
        "key": item.value
      }, {
        default: function _default8() {
          return [input, createVNode("span", null, [item.text])];
        }
      });
    }
  },
  render: function render131() {
    var _this2 = this;
    var originSelectedKeys = this.sSelectedKeys;
    var column = this.column, locale2 = this.locale, prefixCls2 = this.prefixCls, dropdownPrefixCls = this.dropdownPrefixCls, getPopupContainer = this.getPopupContainer;
    var multiple = "filterMultiple" in column ? column.filterMultiple : true;
    var dropdownMenuClass = classNames(_defineProperty({}, "".concat(dropdownPrefixCls, "-menu-without-submenu"), !this.hasSubMenu()));
    var filterDropdown = column.filterDropdown;
    if (filterDropdown instanceof Function) {
      filterDropdown = filterDropdown({
        prefixCls: "".concat(dropdownPrefixCls, "-custom"),
        setSelectedKeys: function setSelectedKeys2(selectedKeys3) {
          return _this2.setSelectedKeys({
            selectedKeys: selectedKeys3
          });
        },
        selectedKeys: originSelectedKeys,
        confirm: this.handleConfirm,
        clearFilters: this.handleClearFilters,
        filters: column.filters,
        visible: this.getDropdownVisible(),
        column
      });
    }
    var menus = filterDropdown ? createVNode(FilterDropdownMenuWrapper$1, {
      "class": "".concat(prefixCls2, "-dropdown")
    }, {
      default: function _default8() {
        return [filterDropdown];
      }
    }) : createVNode(FilterDropdownMenuWrapper$1, {
      "class": "".concat(prefixCls2, "-dropdown")
    }, {
      default: function _default8() {
        return [createVNode(Menu, {
          "multiple": multiple,
          "onClick": _this2.handleMenuItemClick,
          "prefixCls": "".concat(dropdownPrefixCls, "-menu"),
          "class": dropdownMenuClass,
          "onSelect": _this2.setSelectedKeys,
          "onDeselect": _this2.setSelectedKeys,
          "selectedKeys": originSelectedKeys,
          "getPopupContainer": getPopupContainer
        }, {
          default: function _default9() {
            return [_this2.renderMenus(column.filters)];
          }
        }), createVNode("div", {
          "class": "".concat(prefixCls2, "-dropdown-btns")
        }, [createVNode("a", {
          "class": "".concat(prefixCls2, "-dropdown-link confirm"),
          "onClick": _this2.handleConfirm
        }, [locale2.filterConfirm]), createVNode("a", {
          "class": "".concat(prefixCls2, "-dropdown-link clear"),
          "onClick": _this2.handleClearFilters
        }, [locale2.filterReset])])];
      }
    });
    return createVNode(Dropdown$1, {
      "trigger": ["click"],
      "placement": "bottomRight",
      "visible": this.getDropdownVisible(),
      "onVisibleChange": this.onVisibleChange,
      "getPopupContainer": getPopupContainer,
      "forceRender": true,
      "overlay": menus
    }, {
      default: function _default8() {
        return [_this2.renderFilterIcon()];
      }
    });
  }
});
var __rest$c = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var SelectionBox = defineComponent({
  name: "SelectionBox",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: SelectionBoxProps,
  setup: function setup140(props2) {
    return {
      checked: computed(function() {
        var store = props2.store, defaultSelection = props2.defaultSelection, rowIndex = props2.rowIndex;
        var checked2 = false;
        if (store.selectionDirty) {
          checked2 = store.selectedRowKeys.indexOf(rowIndex) >= 0;
        } else {
          checked2 = store.selectedRowKeys.indexOf(rowIndex) >= 0 || defaultSelection.indexOf(rowIndex) >= 0;
        }
        return checked2;
      })
    };
  },
  render: function render132() {
    var _a = _extends(_extends({}, getOptionProps(this)), this.$attrs), type2 = _a.type, rowIndex = _a.rowIndex, rest = __rest$c(_a, ["type", "rowIndex"]);
    var checked2 = this.checked;
    var checkboxProps = _extends({
      checked: checked2
    }, rest);
    if (type2 === "radio") {
      checkboxProps.value = rowIndex;
      return createVNode(Radio, checkboxProps, null);
    }
    return createVNode(Checkbox, checkboxProps, null);
  }
});
function checkSelection(_ref) {
  var store = _ref.store, getCheckboxPropsByItem2 = _ref.getCheckboxPropsByItem, getRecordKey2 = _ref.getRecordKey, data79 = _ref.data, type2 = _ref.type, byDefaultChecked = _ref.byDefaultChecked;
  return byDefaultChecked ? data79[type2](function(item, i) {
    return getCheckboxPropsByItem2(item, i).defaultChecked;
  }) : data79[type2](function(item, i) {
    return store.selectedRowKeys.indexOf(getRecordKey2(item, i)) >= 0;
  });
}
function getIndeterminateState(props2) {
  var store = props2.store, data79 = props2.data;
  if (!data79.length) {
    return false;
  }
  var someCheckedNotByDefaultChecked = checkSelection(_extends(_extends({}, props2), {
    data: data79,
    type: "some",
    byDefaultChecked: false
  })) && !checkSelection(_extends(_extends({}, props2), {
    data: data79,
    type: "every",
    byDefaultChecked: false
  }));
  var someCheckedByDefaultChecked = checkSelection(_extends(_extends({}, props2), {
    data: data79,
    type: "some",
    byDefaultChecked: true
  })) && !checkSelection(_extends(_extends({}, props2), {
    data: data79,
    type: "every",
    byDefaultChecked: true
  }));
  if (store.selectionDirty) {
    return someCheckedNotByDefaultChecked;
  }
  return someCheckedNotByDefaultChecked || someCheckedByDefaultChecked;
}
function getCheckState(props2) {
  var store = props2.store, data79 = props2.data;
  if (!data79.length) {
    return false;
  }
  if (store.selectionDirty) {
    return checkSelection(_extends(_extends({}, props2), {
      data: data79,
      type: "every",
      byDefaultChecked: false
    }));
  }
  return checkSelection(_extends(_extends({}, props2), {
    data: data79,
    type: "every",
    byDefaultChecked: false
  })) || checkSelection(_extends(_extends({}, props2), {
    data: data79,
    type: "every",
    byDefaultChecked: true
  }));
}
var SelectionCheckboxAll = defineComponent({
  name: "SelectionCheckboxAll",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: SelectionCheckboxAllProps,
  setup: function setup141(props2) {
    return {
      defaultSelections: [],
      checked: computed(function() {
        return getCheckState(props2);
      }),
      indeterminate: computed(function() {
        return getIndeterminateState(props2);
      })
    };
  },
  created: function created17() {
    var props2 = this.$props;
    this.defaultSelections = props2.hideDefaultSelections ? [] : [{
      key: "all",
      text: props2.locale.selectAll
    }, {
      key: "invert",
      text: props2.locale.selectInvert
    }];
  },
  methods: {
    handleSelectAllChange: function handleSelectAllChange(e) {
      var checked2 = e.target.checked;
      this.$emit("select", checked2 ? "all" : "removeAll", 0, null);
    },
    renderMenus: function renderMenus2(selections) {
      var _this = this;
      return selections.map(function(selection, index2) {
        return createVNode(Menu.Item, {
          "key": selection.key || index2
        }, {
          default: function _default8() {
            return [createVNode("div", {
              "onClick": function onClick7() {
                _this.$emit("select", selection.key, index2, selection.onSelect);
              }
            }, [selection.text])];
          }
        });
      });
    }
  },
  render: function render133() {
    var _this2 = this;
    var disabled = this.disabled, prefixCls2 = this.prefixCls, selections = this.selections, getPopupContainer = this.getPopupContainer, checked2 = this.checked, indeterminate = this.indeterminate;
    var selectionPrefixCls = "".concat(prefixCls2, "-selection");
    var customSelections = null;
    if (selections) {
      var newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections) : this.defaultSelections;
      var menu = createVNode(Menu, {
        "class": "".concat(selectionPrefixCls, "-menu"),
        "selectedKeys": []
      }, {
        default: function _default8() {
          return [_this2.renderMenus(newSelections)];
        }
      });
      customSelections = newSelections.length > 0 ? createVNode(Dropdown$1, {
        "getPopupContainer": getPopupContainer,
        "overlay": menu
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "class": "".concat(selectionPrefixCls, "-down")
          }, [createVNode(DownOutlined, null, null)])];
        }
      }) : null;
    }
    return createVNode("div", {
      "class": selectionPrefixCls
    }, [createVNode(Checkbox, {
      "class": classNames(_defineProperty({}, "".concat(selectionPrefixCls, "-select-all-custom"), customSelections)),
      "checked": checked2,
      "indeterminate": indeterminate,
      "disabled": disabled,
      "onChange": this.handleSelectAllChange
    }, null), customSelections]);
  }
});
var Column = defineComponent({
  name: "ATableColumn",
  props: columnProps,
  render: function render134() {
    return null;
  }
});
var ColumnGroup = defineComponent({
  name: "ATableColumnGroup",
  props: {
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.oneOf(tuple("left", "right"))])),
    title: PropsTypes.any
  },
  __ANT_TABLE_COLUMN_GROUP: true,
  render: function render135() {
    return null;
  }
});
var BodyRowProps = {
  store: PropsTypes.object,
  rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  prefixCls: PropsTypes.string
};
function createBodyRow() {
  var Component = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "tr";
  var BodyRow = defineComponent({
    name: "BodyRow",
    inheritAttrs: false,
    props: BodyRowProps,
    setup: function setup161(props2) {
      return {
        selected: computed(function() {
          var _a;
          return ((_a = props2.store) === null || _a === void 0 ? void 0 : _a.selectedRowKeys.indexOf(props2.rowKey)) >= 0;
        })
      };
    },
    render: function render165() {
      var _className, _this = this;
      var rowProps2 = omit(_extends(_extends({}, this.$props), this.$attrs), ["prefixCls", "rowKey", "store", "class"]);
      var className = (_className = {}, _defineProperty(_className, "".concat(this.prefixCls, "-row-selected"), this.selected), _defineProperty(_className, this.$attrs.class, !!this.$attrs.class), _className);
      return createVNode(Component, _objectSpread2({
        "class": className
      }, rowProps2), {
        default: function _default8() {
          return [getSlot(_this)];
        }
      });
    }
  });
  return BodyRow;
}
var __rest$b = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function noop$4() {
}
function stopPropagation(e) {
  e.stopPropagation();
}
function getRowSelection(props2) {
  return props2.rowSelection || {};
}
function getColumnKey(column, index2) {
  return column.key || column.dataIndex || index2;
}
function isSameColumn(a, b) {
  if (a && b && a.key && a.key === b.key) {
    return true;
  }
  return a === b || shallowEqual$1(a, b, function(value26, other) {
    if (typeof value26 === "function" && typeof other === "function") {
      return value26 === other || value26.toString() === other.toString();
    }
    if (Array.isArray(value26) && Array.isArray(other)) {
      return value26 === other || shallowEqual$1(value26, other);
    }
  });
}
var defaultPagination = {
  onChange: noop$4,
  onShowSizeChange: noop$4
};
var emptyObject = {};
var createComponents = function createComponents2() {
  var components3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var bodyRow = components3 && components3.body && components3.body.row;
  return _extends(_extends({}, components3), {
    body: _extends(_extends({}, components3.body), {
      row: createBodyRow(bodyRow)
    })
  });
};
function isTheSameComponents() {
  var components1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var components22 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return components1 === components22 || ["table", "header", "body"].every(function(key2) {
    return shallowEqual$1(components1[key2], components22[key2]);
  });
}
function getFilteredValueColumns(state, columns2) {
  return flatFilter(columns2 || (state || {}).columns || [], function(column) {
    return typeof column.filteredValue !== "undefined";
  });
}
function getFiltersFromColumns(state, columns2) {
  var filters = {};
  getFilteredValueColumns(state, columns2).forEach(function(col) {
    var colKey = getColumnKey(col);
    filters[colKey] = col.filteredValue;
  });
  return filters;
}
function isFiltersChanged(state, filters) {
  if (Object.keys(filters).length !== Object.keys(state.filters).length) {
    return true;
  }
  return Object.keys(filters).some(function(columnKey) {
    return filters[columnKey] !== state.filters[columnKey];
  });
}
var defaultTableProps = initDefaultProps$1(tableProps, {
  dataSource: [],
  useFixedHeader: false,
  size: "default",
  loading: false,
  bordered: false,
  indentSize: 20,
  locale: {},
  rowKey: "key",
  showHeader: true,
  sortDirections: ["ascend", "descend"],
  childrenColumnName: "children"
});
var T$1 = defineComponent({
  name: "Table",
  mixins: [BaseMixin],
  inheritAttrs: false,
  Column,
  ColumnGroup,
  props: defaultTableProps,
  setup: function setup142(props2) {
    var store = reactive({
      selectedRowKeys: getRowSelection(props2).selectedRowKeys || [],
      selectionDirty: false
    });
    return {
      vcTable: null,
      checkboxPropsCache: {},
      store,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data64() {
    var props2 = getOptionProps(this);
    warning$1(!props2.expandedRowRender || !("scroll" in props2), "`expandedRowRender` and `scroll` are not compatible. Please use one of them at one time.");
    var getDefaultSortOrder2 = this.getDefaultSortOrder, getDefaultFilters2 = this.getDefaultFilters, getDefaultPagination2 = this.getDefaultPagination;
    return _extends(_extends({}, getDefaultSortOrder2(props2.columns || [])), {
      sFilters: getDefaultFilters2(props2.columns),
      sPagination: getDefaultPagination2(this.$props),
      pivot: void 0,
      sComponents: markRaw(createComponents(this.components)),
      filterDataCnt: 0
    });
  },
  watch: {
    pagination: {
      handler: function handler5(val) {
        this.setState(function(previousState) {
          var newPagination = _extends(_extends(_extends({}, defaultPagination), previousState.sPagination), val);
          newPagination.current = newPagination.current || 1;
          newPagination.pageSize = newPagination.pageSize || 10;
          return {
            sPagination: val !== false ? newPagination : emptyObject
          };
        });
      },
      deep: true
    },
    rowSelection: {
      handler: function handler6(val, oldVal) {
        if (val && "selectedRowKeys" in val) {
          this.store.selectedRowKeys = val.selectedRowKeys || [];
          var rowSelection = this.rowSelection;
          if (rowSelection && val.getCheckboxProps !== rowSelection.getCheckboxProps) {
            this.checkboxPropsCache = {};
          }
        } else if (oldVal && !val) {
          this.store.selectedRowKeys = [];
        }
      },
      deep: true
    },
    dataSource: function dataSource() {
      this.store.selectionDirty = false;
      this.checkboxPropsCache = {};
    },
    columns: function columns(val) {
      var filteredValueColumns = getFilteredValueColumns({
        columns: val
      }, val);
      if (filteredValueColumns.length > 0) {
        var filtersFromColumns = getFiltersFromColumns({
          columns: val
        }, val);
        var newFilters = _extends({}, this.sFilters);
        Object.keys(filtersFromColumns).forEach(function(key2) {
          newFilters[key2] = filtersFromColumns[key2];
        });
        if (isFiltersChanged({
          filters: this.sFilters
        }, newFilters)) {
          this.setState({
            sFilters: newFilters
          });
        }
      }
    },
    components: {
      handler: function handler7(val, oldVal) {
        if (!isTheSameComponents(val, oldVal)) {
          var components3 = createComponents(val);
          this.setState({
            sComponents: components3
          });
        }
      },
      deep: true
    }
  },
  updated: function updated22() {
    var columns2 = this.columns, sortColumn = this.sSortColumn, sortOrder = this.sSortOrder;
    if (this.getSortOrderColumns(columns2).length > 0) {
      var sortState = this.getSortStateFromColumns(columns2);
      if (!isSameColumn(sortState.sSortColumn, sortColumn) || sortState.sSortOrder !== sortOrder) {
        this.setState(sortState);
      }
    }
  },
  methods: {
    setTableRef: function setTableRef(table) {
      this.vcTable = table;
    },
    getCheckboxPropsByItem: function getCheckboxPropsByItem(item, index2) {
      var rowSelection = getRowSelection(this.$props);
      if (!rowSelection.getCheckboxProps) {
        return {};
      }
      var key2 = this.getRecordKey(item, index2);
      if (!this.checkboxPropsCache[key2]) {
        this.checkboxPropsCache[key2] = rowSelection.getCheckboxProps(item) || {};
      }
      return this.checkboxPropsCache[key2];
    },
    getDefaultSelection: function getDefaultSelection() {
      var _this = this;
      var rowSelection = getRowSelection(this.$props);
      if (!rowSelection.getCheckboxProps) {
        return [];
      }
      return this.getFlatData().filter(function(item, rowIndex) {
        return _this.getCheckboxPropsByItem(item, rowIndex).defaultChecked;
      }).map(function(record, rowIndex) {
        return _this.getRecordKey(record, rowIndex);
      });
    },
    getDefaultPagination: function getDefaultPagination(props2) {
      var pagination = _typeof(props2.pagination) === "object" ? props2.pagination : {};
      var current2;
      if ("current" in pagination) {
        current2 = pagination.current;
      } else if ("defaultCurrent" in pagination) {
        current2 = pagination.defaultCurrent;
      }
      var pageSize2;
      if ("pageSize" in pagination) {
        pageSize2 = pagination.pageSize;
      } else if ("defaultPageSize" in pagination) {
        pageSize2 = pagination.defaultPageSize;
      }
      return this.hasPagination(props2) ? _extends(_extends(_extends({}, defaultPagination), pagination), {
        current: current2 || 1,
        pageSize: pageSize2 || 10
      }) : {};
    },
    getSortOrderColumns: function getSortOrderColumns(columns2) {
      return flatFilter(columns2 || this.columns || [], function(column) {
        return "sortOrder" in column;
      });
    },
    getDefaultFilters: function getDefaultFilters(columns2) {
      var definedFilters = getFiltersFromColumns({
        columns: this.columns
      }, columns2);
      var defaultFilteredValueColumns = flatFilter(columns2 || [], function(column) {
        return typeof column.defaultFilteredValue !== "undefined";
      });
      var defaultFilters = defaultFilteredValueColumns.reduce(function(soFar, col) {
        var colKey = getColumnKey(col);
        soFar[colKey] = col.defaultFilteredValue;
        return soFar;
      }, {});
      return _extends(_extends({}, defaultFilters), definedFilters);
    },
    getDefaultSortOrder: function getDefaultSortOrder(columns2) {
      var definedSortState = this.getSortStateFromColumns(columns2);
      var defaultSortedColumn = flatFilter(columns2 || [], function(column) {
        return column.defaultSortOrder != null;
      })[0];
      if (defaultSortedColumn && !definedSortState.sortColumn) {
        return {
          sSortColumn: defaultSortedColumn,
          sSortOrder: defaultSortedColumn.defaultSortOrder
        };
      }
      return definedSortState;
    },
    getSortStateFromColumns: function getSortStateFromColumns(columns2) {
      var sortedColumn = this.getSortOrderColumns(columns2).filter(function(col) {
        return col.sortOrder;
      })[0];
      if (sortedColumn) {
        return {
          sSortColumn: sortedColumn,
          sSortOrder: sortedColumn.sortOrder
        };
      }
      return {
        sSortColumn: null,
        sSortOrder: null
      };
    },
    getMaxCurrent: function getMaxCurrent(total2) {
      var _this$sPagination = this.sPagination, current2 = _this$sPagination.current, pageSize2 = _this$sPagination.pageSize;
      if ((current2 - 1) * pageSize2 >= total2) {
        return Math.floor((total2 - 1) / pageSize2) + 1;
      }
      return current2;
    },
    getRecordKey: function getRecordKey(record, index2) {
      var rowKey = this.rowKey;
      var recordKey = typeof rowKey === "function" ? rowKey(record, index2) : record[rowKey];
      warning$1(recordKey !== void 0, "Table", "Each record in dataSource of table should have a unique `key` prop, or set `rowKey` of Table to an unique primary key, ");
      return recordKey === void 0 ? index2 : recordKey;
    },
    getSorterFn: function getSorterFn(state) {
      var _ref = state || this.$data, sortOrder = _ref.sSortOrder, sortColumn = _ref.sSortColumn;
      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== "function") {
        return;
      }
      return function(a, b) {
        var result = sortColumn.sorter(a, b, sortOrder);
        if (result !== 0) {
          return sortOrder === "descend" ? -result : result;
        }
        return 0;
      };
    },
    getCurrentPageData: function getCurrentPageData() {
      var data79 = this.getLocalData();
      this.filterDataCnt = data79.length;
      var current2;
      var pageSize2;
      var sPagination = this.sPagination;
      if (!this.hasPagination()) {
        pageSize2 = Number.MAX_VALUE;
        current2 = 1;
      } else {
        pageSize2 = sPagination.pageSize;
        current2 = this.getMaxCurrent(sPagination.total || data79.length);
      }
      if (data79.length > pageSize2 || pageSize2 === Number.MAX_VALUE) {
        data79 = data79.slice((current2 - 1) * pageSize2, current2 * pageSize2);
      }
      return data79;
    },
    getFlatData: function getFlatData() {
      var childrenColumnName = this.$props.childrenColumnName;
      return flatArray(this.getLocalData(null, false), childrenColumnName);
    },
    getFlatCurrentPageData: function getFlatCurrentPageData() {
      var childrenColumnName = this.$props.childrenColumnName;
      return flatArray(this.getCurrentPageData(), childrenColumnName);
    },
    getLocalData: function getLocalData(state) {
      var _this2 = this;
      var filter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var currentState = state || this.$data;
      var filters = currentState.sFilters;
      var dataSource3 = this.$props.dataSource;
      var data79 = dataSource3 || [];
      data79 = data79.slice(0);
      var sorterFn = this.getSorterFn(currentState);
      if (sorterFn) {
        data79 = this.recursiveSort(_toConsumableArray(data79), sorterFn);
      }
      if (filter && filters) {
        Object.keys(filters).forEach(function(columnKey) {
          var col = _this2.findColumn(columnKey);
          if (!col) {
            return;
          }
          var values = filters[columnKey] || [];
          if (values.length === 0) {
            return;
          }
          var onFilter = col.onFilter;
          data79 = onFilter ? data79.filter(function(record) {
            return values.some(function(v) {
              return onFilter(v, record);
            });
          }) : data79;
        });
      }
      return data79;
    },
    onRow: function onRow(prefixCls2, record, index2) {
      var customRow = this.customRow;
      var custom = customRow ? customRow(record, index2) : {};
      return _extends(_extends({}, custom), {
        prefixCls: prefixCls2,
        store: this.store,
        rowKey: this.getRecordKey(record, index2)
      });
    },
    setSelectedRowKeys: function setSelectedRowKeys(selectedRowKeys, selectionInfo) {
      var _this3 = this;
      var selectWay = selectionInfo.selectWay, record = selectionInfo.record, checked2 = selectionInfo.checked, changeRowKeys = selectionInfo.changeRowKeys, nativeEvent = selectionInfo.nativeEvent;
      var rowSelection = getRowSelection(this.$props);
      if (rowSelection && !("selectedRowKeys" in rowSelection)) {
        this.store.selectedRowKeys = selectedRowKeys;
      }
      var data79 = this.getFlatData();
      if (!rowSelection.onChange && !rowSelection[selectWay]) {
        return;
      }
      var selectedRows = data79.filter(function(row, i) {
        return selectedRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
      });
      if (rowSelection.onChange) {
        rowSelection.onChange(selectedRowKeys, selectedRows);
      }
      if (selectWay === "onSelect" && rowSelection.onSelect) {
        rowSelection.onSelect(record, checked2, selectedRows, nativeEvent);
      } else if (selectWay === "onSelectMultiple" && rowSelection.onSelectMultiple) {
        var changeRows = data79.filter(function(row, i) {
          return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
        });
        rowSelection.onSelectMultiple(checked2, selectedRows, changeRows);
      } else if (selectWay === "onSelectAll" && rowSelection.onSelectAll) {
        var _changeRows = data79.filter(function(row, i) {
          return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
        });
        rowSelection.onSelectAll(checked2, selectedRows, _changeRows);
      } else if (selectWay === "onSelectInvert" && rowSelection.onSelectInvert) {
        rowSelection.onSelectInvert(selectedRowKeys);
      }
    },
    generatePopupContainerFunc: function generatePopupContainerFunc(getPopupContainer) {
      var scroll = this.$props.scroll;
      var table = this.vcTable;
      if (getPopupContainer) {
        return getPopupContainer;
      }
      return scroll && table ? function() {
        return table.tableNode;
      } : void 0;
    },
    scrollToFirstRow: function scrollToFirstRow() {
      var _this4 = this;
      var scroll = this.$props.scroll;
      if (scroll && scroll.scrollToFirstRowOnChange !== false) {
        scrollTo$1(0, {
          getContainer: function getContainer5() {
            return _this4.vcTable.ref_bodyTable;
          }
        });
      }
    },
    isSameColumn: function isSameColumn2(a, b) {
      if (a && b && a.key && a.key === b.key) {
        return true;
      }
      return a === b || shallowEqual$1(a, b, function(value26, other) {
        if (typeof value26 === "function" && typeof other === "function") {
          return value26 === other || value26.toString() === other.toString();
        }
      });
    },
    handleFilter: function handleFilter(column, nextFilters) {
      var _this5 = this;
      var props2 = this.$props;
      var pagination = _extends({}, this.sPagination);
      var filters = _extends(_extends({}, this.sFilters), _defineProperty({}, getColumnKey(column), nextFilters));
      var currentColumnKeys = [];
      treeMap(this.columns, function(c) {
        if (!c.children) {
          currentColumnKeys.push(getColumnKey(c));
        }
      });
      Object.keys(filters).forEach(function(columnKey) {
        if (currentColumnKeys.indexOf(columnKey) < 0) {
          delete filters[columnKey];
        }
      });
      if (props2.pagination) {
        pagination.current = 1;
        pagination.onChange(pagination.current);
      }
      var newState = {
        sPagination: pagination,
        sFilters: {}
      };
      var filtersToSetState = _extends({}, filters);
      getFilteredValueColumns({
        columns: props2.columns
      }).forEach(function(col) {
        var columnKey = getColumnKey(col);
        if (columnKey) {
          delete filtersToSetState[columnKey];
        }
      });
      if (Object.keys(filtersToSetState).length > 0) {
        newState.sFilters = filtersToSetState;
      }
      if (_typeof(props2.pagination) === "object" && "current" in props2.pagination) {
        newState.sPagination = _extends(_extends({}, pagination), {
          current: this.sPagination.current
        });
      }
      this.setState(newState, function() {
        _this5.scrollToFirstRow();
        _this5.store.selectionDirty = false;
        _this5.$emit.apply(_this5, ["change"].concat(_toConsumableArray(_this5.prepareParamsArguments(_extends(_extends({}, _this5.$data), {
          sSelectionDirty: false,
          sFilters: filters,
          sPagination: pagination
        })))));
      });
    },
    handleSelect: function handleSelect2(record, rowIndex, e) {
      var _this6 = this;
      var checked2 = e.target.checked;
      var nativeEvent = e.nativeEvent;
      var defaultSelection = this.store.selectionDirty ? [] : this.getDefaultSelection();
      var selectedRowKeys = this.store.selectedRowKeys.concat(defaultSelection);
      var key2 = this.getRecordKey(record, rowIndex);
      var pivot = this.$data.pivot;
      var rows = this.getFlatCurrentPageData();
      var realIndex = rowIndex;
      if (this.$props.expandedRowRender) {
        realIndex = rows.findIndex(function(row) {
          return _this6.getRecordKey(row, rowIndex) === key2;
        });
      }
      if (nativeEvent.shiftKey && pivot !== void 0 && realIndex !== pivot) {
        var changeRowKeys = [];
        var direction = Math.sign(pivot - realIndex);
        var dist = Math.abs(pivot - realIndex);
        var step = 0;
        var _loop = function _loop2() {
          var i = realIndex + step * direction;
          step += 1;
          var row = rows[i];
          var rowKey = _this6.getRecordKey(row, i);
          var checkboxProps = _this6.getCheckboxPropsByItem(row, i);
          if (!checkboxProps.disabled) {
            if (selectedRowKeys.includes(rowKey)) {
              if (!checked2) {
                selectedRowKeys = selectedRowKeys.filter(function(j) {
                  return rowKey !== j;
                });
                changeRowKeys.push(rowKey);
              }
            } else if (checked2) {
              selectedRowKeys.push(rowKey);
              changeRowKeys.push(rowKey);
            }
          }
        };
        while (step <= dist) {
          _loop();
        }
        this.setState({
          pivot: realIndex
        });
        this.store.selectionDirty = true;
        this.setSelectedRowKeys(selectedRowKeys, {
          selectWay: "onSelectMultiple",
          record,
          checked: checked2,
          changeRowKeys,
          nativeEvent
        });
      } else {
        if (checked2) {
          selectedRowKeys.push(this.getRecordKey(record, realIndex));
        } else {
          selectedRowKeys = selectedRowKeys.filter(function(i) {
            return key2 !== i;
          });
        }
        this.setState({
          pivot: realIndex
        });
        this.store.selectionDirty = true;
        this.setSelectedRowKeys(selectedRowKeys, {
          selectWay: "onSelect",
          record,
          checked: checked2,
          changeRowKeys: void 0,
          nativeEvent
        });
      }
    },
    handleRadioSelect: function handleRadioSelect(record, rowIndex, e) {
      var checked2 = e.target.checked;
      var nativeEvent = e.nativeEvent;
      var key2 = this.getRecordKey(record, rowIndex);
      var selectedRowKeys = [key2];
      this.store.selectionDirty = true;
      this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: "onSelect",
        record,
        checked: checked2,
        changeRowKeys: void 0,
        nativeEvent
      });
    },
    handleSelectRow: function handleSelectRow(selectionKey, index2, onSelectFunc) {
      var _this7 = this;
      var data79 = this.getFlatCurrentPageData();
      var defaultSelection = this.store.selectionDirty ? [] : this.getDefaultSelection();
      var selectedRowKeys = this.store.selectedRowKeys.concat(defaultSelection);
      var changeableRowKeys = data79.filter(function(item, i) {
        return !_this7.getCheckboxPropsByItem(item, i).disabled;
      }).map(function(item, i) {
        return _this7.getRecordKey(item, i);
      });
      var changeRowKeys = [];
      var selectWay = "onSelectAll";
      var checked2;
      switch (selectionKey) {
        case "all":
          changeableRowKeys.forEach(function(key2) {
            if (selectedRowKeys.indexOf(key2) < 0) {
              selectedRowKeys.push(key2);
              changeRowKeys.push(key2);
            }
          });
          selectWay = "onSelectAll";
          checked2 = true;
          break;
        case "removeAll":
          changeableRowKeys.forEach(function(key2) {
            if (selectedRowKeys.indexOf(key2) >= 0) {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key2), 1);
              changeRowKeys.push(key2);
            }
          });
          selectWay = "onSelectAll";
          checked2 = false;
          break;
        case "invert":
          changeableRowKeys.forEach(function(key2) {
            if (selectedRowKeys.indexOf(key2) < 0) {
              selectedRowKeys.push(key2);
            } else {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key2), 1);
            }
            changeRowKeys.push(key2);
            selectWay = "onSelectInvert";
          });
          break;
      }
      this.store.selectionDirty = true;
      var rowSelection = this.rowSelection;
      var customSelectionStartIndex = 2;
      if (rowSelection && rowSelection.hideDefaultSelections) {
        customSelectionStartIndex = 0;
      }
      if (index2 >= customSelectionStartIndex && typeof onSelectFunc === "function") {
        return onSelectFunc(changeableRowKeys);
      }
      this.setSelectedRowKeys(selectedRowKeys, {
        selectWay,
        checked: checked2,
        changeRowKeys
      });
    },
    handlePageChange: function handlePageChange(current2) {
      var props2 = this.$props;
      var pagination = _extends({}, this.sPagination);
      if (current2) {
        pagination.current = current2;
      } else {
        pagination.current = pagination.current || 1;
      }
      for (var _len = arguments.length, otherArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        otherArguments[_key - 1] = arguments[_key];
      }
      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));
      var newState = {
        sPagination: pagination
      };
      if (props2.pagination && _typeof(props2.pagination) === "object" && "current" in props2.pagination) {
        newState.sPagination = _extends(_extends({}, pagination), {
          current: this.sPagination.current
        });
      }
      this.setState(newState, this.scrollToFirstRow);
      this.store.selectionDirty = false;
      this.$emit.apply(this, ["change"].concat(_toConsumableArray(this.prepareParamsArguments(_extends(_extends({}, this.$data), {
        sSelectionDirty: false,
        sPagination: pagination
      })))));
    },
    handleShowSizeChange: function handleShowSizeChange(current2, pageSize2) {
      var pagination = this.sPagination;
      pagination.onShowSizeChange(current2, pageSize2);
      var nextPagination = _extends(_extends({}, pagination), {
        pageSize: pageSize2,
        current: current2
      });
      this.setState({
        sPagination: nextPagination
      }, this.scrollToFirstRow);
      this.$emit.apply(this, ["change"].concat(_toConsumableArray(this.prepareParamsArguments(_extends(_extends({}, this.$data), {
        sPagination: nextPagination
      })))));
    },
    toggleSortOrder: function toggleSortOrder(column) {
      var sortDirections = column.sortDirections || this.sortDirections;
      var sortOrder = this.sSortOrder, sortColumn = this.sSortColumn;
      var newSortOrder;
      if (isSameColumn(sortColumn, column) && sortOrder !== void 0) {
        var methodIndex = sortDirections.indexOf(sortOrder) + 1;
        newSortOrder = methodIndex === sortDirections.length ? void 0 : sortDirections[methodIndex];
      } else {
        newSortOrder = sortDirections[0];
      }
      var newState = {
        sSortOrder: newSortOrder,
        sSortColumn: newSortOrder ? column : null
      };
      if (this.getSortOrderColumns().length === 0) {
        this.setState(newState, this.scrollToFirstRow);
      }
      this.$emit.apply(this, ["change"].concat(_toConsumableArray(this.prepareParamsArguments(_extends(_extends({}, this.$data), newState), column))));
    },
    hasPagination: function hasPagination(props2) {
      return (props2 || this.$props).pagination !== false;
    },
    isSortColumn: function isSortColumn(column) {
      var sortColumn = this.sSortColumn;
      if (!column || !sortColumn) {
        return false;
      }
      return getColumnKey(sortColumn) === getColumnKey(column);
    },
    prepareParamsArguments: function prepareParamsArguments(state, column) {
      var pagination = _extends({}, state.sPagination);
      delete pagination.onChange;
      delete pagination.onShowSizeChange;
      var filters = state.sFilters;
      var sorter = {};
      var currentColumn = column;
      if (state.sSortColumn && state.sSortOrder) {
        currentColumn = state.sSortColumn;
        sorter.column = state.sSortColumn;
        sorter.order = state.sSortOrder;
      }
      if (currentColumn) {
        sorter.field = currentColumn.dataIndex;
        sorter.columnKey = getColumnKey(currentColumn);
      }
      var extra = {
        currentDataSource: this.getLocalData(state)
      };
      return [pagination, filters, sorter, extra];
    },
    findColumn: function findColumn(myKey) {
      var column;
      treeMap(this.columns, function(c) {
        if (getColumnKey(c) === myKey) {
          column = c;
        }
      });
      return column;
    },
    recursiveSort: function recursiveSort(data79, sorterFn) {
      var _this8 = this;
      var _this$childrenColumnN = this.childrenColumnName, childrenColumnName = _this$childrenColumnN === void 0 ? "children" : _this$childrenColumnN;
      return data79.sort(sorterFn).map(function(item) {
        return item[childrenColumnName] ? _extends(_extends({}, item), _defineProperty({}, childrenColumnName, _this8.recursiveSort(_toConsumableArray(item[childrenColumnName]), sorterFn))) : item;
      });
    },
    renderExpandIcon: function renderExpandIcon4(prefixCls2) {
      if (this.expandIcon) {
        return this.expandIcon;
      }
      return function(_ref2) {
        var expandable = _ref2.expandable, expanded = _ref2.expanded, needIndentSpaced = _ref2.needIndentSpaced, record = _ref2.record, onExpand3 = _ref2.onExpand;
        if (expandable) {
          return createVNode(LocaleReceiver, {
            "componentName": "Table",
            "defaultLocale": defaultLocale.Table,
            "children": function children(locale2) {
              var _classNames;
              return createVNode(TransButton$1, {
                "class": classNames("".concat(prefixCls2, "-row-expand-icon"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-row-collapsed"), !expanded), _defineProperty(_classNames, "".concat(prefixCls2, "-row-expanded"), expanded), _classNames)),
                "onClick": function onClick7(event) {
                  onExpand3(record, event);
                },
                "aria-label": expanded ? locale2.collapse : locale2.expand,
                "noStyle": true
              }, null);
            }
          }, null);
        }
        if (needIndentSpaced) {
          return createVNode("span", {
            "class": "".concat(prefixCls2, "-row-expand-icon ").concat(prefixCls2, "-row-spaced")
          }, null);
        }
        return null;
      };
    },
    renderPagination: function renderPagination2(prefixCls2, paginationPosition) {
      if (!this.hasPagination()) {
        return null;
      }
      var size = "default";
      var pagination = this.sPagination;
      if (pagination.size) {
        size = pagination.size;
      } else if (this.size === "middle" || this.size === "small") {
        size = "small";
      }
      var position = pagination.position || "bottom";
      var total2 = pagination.total || this.filterDataCnt;
      var cls = pagination.class, style3 = pagination.style;
      pagination.onChange;
      pagination.onShowSizeChange;
      var restProps = __rest$b(pagination, ["class", "style", "onChange", "onShowSizeChange"]);
      var paginationProps3 = _extends(_extends({
        key: "pagination-".concat(paginationPosition),
        class: classNames(cls, "".concat(prefixCls2, "-pagination"))
      }, restProps), {
        total: total2,
        size,
        current: this.getMaxCurrent(total2),
        style: style3,
        onChange: this.handlePageChange,
        onShowSizeChange: this.handleShowSizeChange
      });
      return total2 > 0 && (position === paginationPosition || position === "both") ? createVNode(Pagination, paginationProps3, null) : null;
    },
    renderSelectionBox: function renderSelectionBox(type2) {
      var _this9 = this;
      return function(_ref3) {
        var record = _ref3.record, index2 = _ref3.index;
        var rowKey = _this9.getRecordKey(record, index2);
        var props2 = _this9.getCheckboxPropsByItem(record, index2);
        var handleChange22 = function handleChange23(e) {
          type2 === "radio" ? _this9.handleRadioSelect(record, index2, e) : _this9.handleSelect(record, index2, e);
        };
        var selectionBoxProps = _extends({
          type: type2,
          store: _this9.store,
          rowIndex: rowKey,
          defaultSelection: _this9.getDefaultSelection(),
          onChange: handleChange22
        }, props2);
        return createVNode("span", {
          "onClick": stopPropagation
        }, [createVNode(SelectionBox, selectionBoxProps, null)]);
      };
    },
    renderRowSelection: function renderRowSelection(_ref4) {
      var _this10 = this;
      var prefixCls2 = _ref4.prefixCls, locale2 = _ref4.locale, getPopupContainer = _ref4.getPopupContainer;
      var rowSelection = this.rowSelection;
      var columns2 = this.columns.concat();
      if (rowSelection) {
        var data79 = this.getFlatCurrentPageData().filter(function(item, index2) {
          if (rowSelection.getCheckboxProps) {
            return !_this10.getCheckboxPropsByItem(item, index2).disabled;
          }
          return true;
        });
        var selectionColumnClass = classNames("".concat(prefixCls2, "-selection-column"), _defineProperty({}, "".concat(prefixCls2, "-selection-column-custom"), rowSelection.selections));
        var selectionColumn = _defineProperty({
          key: "selection-column",
          customRender: this.renderSelectionBox(rowSelection.type),
          className: selectionColumnClass,
          fixed: rowSelection.fixed,
          width: rowSelection.columnWidth,
          title: rowSelection.columnTitle
        }, INTERNAL_COL_DEFINE, {
          class: "".concat(prefixCls2, "-selection-col")
        });
        if (rowSelection.type !== "radio") {
          var checkboxAllDisabled = data79.every(function(item, index2) {
            return _this10.getCheckboxPropsByItem(item, index2).disabled;
          });
          selectionColumn.title = selectionColumn.title || createVNode(SelectionCheckboxAll, {
            "store": this.store,
            "locale": locale2,
            "data": data79,
            "getCheckboxPropsByItem": this.getCheckboxPropsByItem,
            "getRecordKey": this.getRecordKey,
            "disabled": checkboxAllDisabled,
            "prefixCls": prefixCls2,
            "onSelect": this.handleSelectRow,
            "selections": rowSelection.selections,
            "hideDefaultSelections": rowSelection.hideDefaultSelections,
            "getPopupContainer": this.generatePopupContainerFunc(getPopupContainer),
            "propsSymbol": Symbol()
          }, null);
        }
        if ("fixed" in rowSelection) {
          selectionColumn.fixed = rowSelection.fixed;
        } else if (columns2.some(function(column) {
          return column.fixed === "left" || column.fixed === true;
        })) {
          selectionColumn.fixed = "left";
        }
        if (columns2[0] && columns2[0].key === "selection-column") {
          columns2[0] = selectionColumn;
        } else {
          columns2.unshift(selectionColumn);
        }
      }
      return columns2;
    },
    renderColumnsDropdown: function renderColumnsDropdown(_ref5) {
      var _this11 = this;
      var prefixCls2 = _ref5.prefixCls, dropdownPrefixCls = _ref5.dropdownPrefixCls, columns2 = _ref5.columns, locale2 = _ref5.locale, getPopupContainer = _ref5.getPopupContainer;
      var sortOrder = this.sSortOrder, filters = this.sFilters;
      return treeMap(columns2, function(column, i) {
        var _classNames3;
        var key2 = getColumnKey(column, i);
        var filterDropdown;
        var sortButton;
        var customHeaderCell = column.customHeaderCell;
        var isSortColumn2 = _this11.isSortColumn(column);
        if (column.filters && column.filters.length > 0 || column.filterDropdown) {
          var colFilters = key2 in filters ? filters[key2] : [];
          filterDropdown = createVNode(FilterDropdown, {
            "locale": locale2,
            "column": column,
            "selectedKeys": colFilters,
            "confirmFilter": _this11.handleFilter,
            "prefixCls": "".concat(prefixCls2, "-filter"),
            "dropdownPrefixCls": dropdownPrefixCls || "ant-dropdown",
            "getPopupContainer": _this11.generatePopupContainerFunc(getPopupContainer),
            "key": "filter-dropdown"
          }, null);
        }
        if (column.sorter) {
          var sortDirections = column.sortDirections || _this11.sortDirections;
          var isAscend = isSortColumn2 && sortOrder === "ascend";
          var isDescend = isSortColumn2 && sortOrder === "descend";
          var ascend = sortDirections.indexOf("ascend") !== -1 && createVNode(CaretUpFilled, {
            "class": "".concat(prefixCls2, "-column-sorter-up ").concat(isAscend ? "on" : "off"),
            "key": "caret-up"
          }, null);
          var descend = sortDirections.indexOf("descend") !== -1 && createVNode(CaretDownFilled, {
            "class": "".concat(prefixCls2, "-column-sorter-down ").concat(isDescend ? "on" : "off"),
            "key": "caret-down"
          }, null);
          sortButton = createVNode("div", {
            "title": locale2.sortTitle,
            "class": classNames("".concat(prefixCls2, "-column-sorter-inner"), ascend && descend && "".concat(prefixCls2, "-column-sorter-inner-full")),
            "key": "sorter"
          }, [ascend, descend]);
          customHeaderCell = function customHeaderCell2(col) {
            var colProps2 = {};
            if (column.customHeaderCell) {
              colProps2 = _extends({}, column.customHeaderCell(col));
            }
            var onHeaderCellClick = colProps2.onClick;
            colProps2.onClick = function() {
              _this11.toggleSortOrder(column);
              if (onHeaderCellClick) {
                onHeaderCellClick.apply(void 0, arguments);
              }
            };
            return colProps2;
          };
        }
        return _extends(_extends({}, column), {
          className: classNames(column.className, (_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls2, "-column-has-actions"), sortButton || filterDropdown), _defineProperty(_classNames3, "".concat(prefixCls2, "-column-has-filters"), filterDropdown), _defineProperty(_classNames3, "".concat(prefixCls2, "-column-has-sorters"), sortButton), _defineProperty(_classNames3, "".concat(prefixCls2, "-column-sort"), isSortColumn2 && sortOrder), _classNames3)),
          title: [createVNode("span", {
            "key": "title",
            "class": "".concat(prefixCls2, "-header-column")
          }, [createVNode("div", {
            "class": sortButton ? "".concat(prefixCls2, "-column-sorters") : void 0
          }, [createVNode("span", {
            "class": "".concat(prefixCls2, "-column-title")
          }, [_this11.renderColumnTitle(column.title)]), createVNode("span", {
            "class": "".concat(prefixCls2, "-column-sorter")
          }, [sortButton])])]), filterDropdown],
          customHeaderCell
        });
      });
    },
    renderColumnTitle: function renderColumnTitle(title2) {
      var _this$$data = this.$data, filters = _this$$data.sFilters, sortOrder = _this$$data.sSortOrder, sortColumn = _this$$data.sSortColumn;
      if (title2 instanceof Function) {
        return title2({
          filters,
          sortOrder,
          sortColumn
        });
      }
      return title2;
    },
    renderTable: function renderTable2(_ref6) {
      var _classNames4, _this12 = this;
      var prefixCls2 = _ref6.prefixCls, renderEmpty2 = _ref6.renderEmpty, dropdownPrefixCls = _ref6.dropdownPrefixCls, contextLocale = _ref6.contextLocale, contextGetPopupContainer = _ref6.getPopupContainer, transformCellText = _ref6.transformCellText;
      var _a = _extends(_extends({}, getOptionProps(this)), this.$attrs), showHeader = _a.showHeader, locale2 = _a.locale, getPopupContainer = _a.getPopupContainer;
      _a.style;
      var restProps = __rest$b(_a, ["showHeader", "locale", "getPopupContainer", "style"]);
      var data79 = this.getCurrentPageData();
      var expandIconAsCell = this.expandedRowRender && this.expandIconAsCell !== false;
      var realGetPopupContainer = getPopupContainer || contextGetPopupContainer;
      var mergedLocale = _extends(_extends({}, contextLocale), locale2);
      if (!locale2 || !locale2.emptyText) {
        mergedLocale.emptyText = renderEmpty2("Table");
      }
      var classString = classNames((_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls2, "-").concat(this.size), true), _defineProperty(_classNames4, "".concat(prefixCls2, "-bordered"), this.bordered), _defineProperty(_classNames4, "".concat(prefixCls2, "-empty"), !data79.length), _defineProperty(_classNames4, "".concat(prefixCls2, "-without-column-header"), !showHeader), _classNames4));
      var columnsWithRowSelection = this.renderRowSelection({
        prefixCls: prefixCls2,
        locale: mergedLocale,
        getPopupContainer: realGetPopupContainer
      });
      var columns2 = this.renderColumnsDropdown({
        columns: columnsWithRowSelection,
        prefixCls: prefixCls2,
        dropdownPrefixCls,
        locale: mergedLocale,
        getPopupContainer: realGetPopupContainer
      }).map(function(column, i) {
        var newColumn = _extends({}, column);
        newColumn.key = getColumnKey(newColumn, i);
        return newColumn;
      });
      var expandIconColumnIndex = columns2[0] && columns2[0].key === "selection-column" ? 1 : 0;
      if ("expandIconColumnIndex" in restProps) {
        expandIconColumnIndex = restProps.expandIconColumnIndex;
      }
      var vcTableProps = _extends(_extends({
        key: "table",
        expandIcon: this.renderExpandIcon(prefixCls2)
      }, restProps), {
        customRow: function customRow(record, index2) {
          return _this12.onRow(prefixCls2, record, index2);
        },
        components: this.sComponents,
        prefixCls: prefixCls2,
        data: data79,
        columns: columns2,
        showHeader,
        expandIconColumnIndex,
        expandIconAsCell,
        emptyText: mergedLocale.emptyText,
        transformCellText,
        class: classString,
        ref: this.setTableRef
      });
      return createVNode(Table$2, vcTableProps, null);
    }
  },
  render: function render136() {
    var _this13 = this;
    var customizePrefixCls = this.prefixCls, customizeDropdownPrefixCls = this.dropdownPrefixCls, customizeTransformCellText = this.transformCellText;
    var data79 = this.getCurrentPageData();
    var _this$configProvider = this.configProvider, getContextPopupContainer = _this$configProvider.getPopupContainer, tct = _this$configProvider.transformCellText;
    var getPopupContainer = this.getPopupContainer || getContextPopupContainer;
    var transformCellText = customizeTransformCellText || tct;
    var loading = this.loading;
    if (typeof loading === "boolean") {
      loading = {
        spinning: loading
      };
    }
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var renderEmpty2 = this.configProvider.renderEmpty;
    var prefixCls2 = getPrefixCls2("table", customizePrefixCls);
    var dropdownPrefixCls = getPrefixCls2("dropdown", customizeDropdownPrefixCls);
    var table = createVNode(LocaleReceiver, {
      "componentName": "Table",
      "defaultLocale": defaultLocale.Table,
      "children": function children(locale2) {
        return _this13.renderTable({
          prefixCls: prefixCls2,
          renderEmpty: renderEmpty2,
          dropdownPrefixCls,
          contextLocale: locale2,
          getPopupContainer,
          transformCellText
        });
      }
    }, null);
    var paginationPatchClass = this.hasPagination() && data79 && data79.length !== 0 ? "".concat(prefixCls2, "-with-pagination") : "".concat(prefixCls2, "-without-pagination");
    var spinProps = _extends(_extends({}, loading), {
      class: loading && loading.spinning ? "".concat(paginationPatchClass, " ").concat(prefixCls2, "-spin-holder") : ""
    });
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    return createVNode("div", {
      "class": classNames("".concat(prefixCls2, "-wrapper"), className),
      "style": style3
    }, [createVNode(Spin, spinProps, {
      default: function _default8() {
        return [_this13.renderPagination(prefixCls2, "top"), table, _this13.renderPagination(prefixCls2, "bottom")];
      }
    })]);
  }
});
var __rest$a = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Table = defineComponent({
  name: "ATable",
  Column: T$1.Column,
  ColumnGroup: T$1.ColumnGroup,
  inheritAttrs: false,
  props: defaultTableProps,
  methods: {
    normalize: function normalize() {
      var _this = this;
      var elements = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var flattenElements = flattenChildren(elements);
      var columns2 = [];
      flattenElements.forEach(function(element) {
        var _a, _b, _c, _d;
        if (!element) {
          return;
        }
        var key2 = getKey$2(element);
        var style3 = ((_a = element.props) === null || _a === void 0 ? void 0 : _a.style) || {};
        var cls = ((_b = element.props) === null || _b === void 0 ? void 0 : _b.class) || "";
        var props2 = getPropsData(element);
        var _e = element.children || {}, children = _e.default, restSlots = __rest$a(_e, ["default"]);
        var column = _extends(_extends(_extends({}, restSlots), props2), {
          style: style3,
          class: cls
        });
        if (key2) {
          column.key = key2;
        }
        if ((_c = element.type) === null || _c === void 0 ? void 0 : _c.__ANT_TABLE_COLUMN_GROUP) {
          column.children = _this.normalize(typeof children === "function" ? children() : children);
        } else {
          var customRender = (_d = element.children) === null || _d === void 0 ? void 0 : _d.default;
          column.customRender = column.customRender || customRender;
        }
        columns2.push(column);
      });
      return columns2;
    },
    updateColumns: function updateColumns() {
      var _this2 = this;
      var cols = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var columns2 = [];
      var $slots = this.$slots;
      cols.forEach(function(col) {
        var _col$slots = col.slots, slots = _col$slots === void 0 ? {} : _col$slots, restProps = __rest$a(col, ["slots"]);
        var column = _extends({}, restProps);
        Object.keys(slots).forEach(function(key2) {
          var name2 = slots[key2];
          if (column[key2] === void 0 && $slots[name2]) {
            column[key2] = $slots[name2];
          }
        });
        if (col.children) {
          column.children = _this2.updateColumns(column.children);
        }
        columns2.push(column);
      });
      return columns2;
    }
  },
  render: function render137() {
    var normalize2 = this.normalize, $slots = this.$slots;
    var props2 = _extends(_extends({}, getOptionProps(this)), this.$attrs);
    var columns2 = props2.columns ? this.updateColumns(props2.columns) : normalize2(getSlot(this));
    var title2 = props2.title, footer = props2.footer;
    var slotTitle = $slots.title, slotFooter = $slots.footer, _$slots$expandedRowRe = $slots.expandedRowRender, expandedRowRender = _$slots$expandedRowRe === void 0 ? props2.expandedRowRender : _$slots$expandedRowRe, expandIcon = $slots.expandIcon;
    title2 = title2 || slotTitle;
    footer = footer || slotFooter;
    var tProps = _extends(_extends({}, props2), {
      columns: columns2,
      title: title2,
      footer,
      expandedRowRender,
      expandIcon: this.$props.expandIcon || expandIcon
    });
    return createVNode(T$1, _objectSpread2(_objectSpread2({}, tProps), {}, {
      "ref": "table"
    }), null);
  }
});
Table.install = function(app) {
  app.component(Table.name, Table);
  app.component(Table.Column.name, Table.Column);
  app.component(Table.ColumnGroup.name, Table.ColumnGroup);
  return app;
};
var TableColumn = Table.Column;
var TableColumnGroup = Table.ColumnGroup;
var Table$1 = Table;
var TransferSearchProps = {
  prefixCls: PropsTypes.string,
  placeholder: PropsTypes.string,
  value: PropsTypes.any,
  handleClear: PropsTypes.func,
  disabled: PropsTypes.looseBool,
  onChange: PropsTypes.func
};
var Search = defineComponent({
  name: "Search",
  inheritAttrs: false,
  props: initDefaultProps$1(TransferSearchProps, {
    placeholder: ""
  }),
  methods: {
    handleChange: function handleChange19(e) {
      this.$emit("change", e);
    },
    handleClear2: function handleClear2(e) {
      e.preventDefault();
      var _this$$props = this.$props, handleClear3 = _this$$props.handleClear, disabled = _this$$props.disabled;
      if (!disabled && handleClear3) {
        handleClear3(e);
      }
    }
  },
  render: function render138() {
    var _getOptionProps = getOptionProps(this), placeholder = _getOptionProps.placeholder, value26 = _getOptionProps.value, prefixCls2 = _getOptionProps.prefixCls, disabled = _getOptionProps.disabled;
    var icon = value26 && value26.length > 0 ? createVNode("a", {
      "href": "#",
      "class": "".concat(prefixCls2, "-action"),
      "onClick": this.handleClear2
    }, [createVNode(CloseCircleFilled, null, null)]) : createVNode("span", {
      "class": "".concat(prefixCls2, "-action")
    }, [createVNode(SearchOutlined, null, null)]);
    return createVNode(Fragment, null, [createVNode(Input, {
      "placeholder": placeholder,
      "class": prefixCls2,
      "value": value26,
      "onChange": this.handleChange,
      "disabled": disabled
    }, null), icon]);
  }
});
var style = function style2(element, prop) {
  var styleVal = "";
  if (typeof getComputedStyle !== "undefined") {
    styleVal = window.getComputedStyle(element, null).getPropertyValue(prop);
  } else {
    styleVal = element.style[prop];
  }
  return styleVal;
};
var overflow = function overflow2(element) {
  return style(element, "overflow") + style(element, "overflow-y") + style(element, "overflow-x");
};
var scrollParent = function scrollParent2(element) {
  if (!(element instanceof window.HTMLElement)) {
    return window;
  }
  var parent = element;
  while (parent) {
    if (parent === document.body || parent === document.documentElement) {
      break;
    }
    if (!parent.parentNode) {
      break;
    }
    if (/(scroll|auto)/.test(overflow(parent))) {
      return parent;
    }
    parent = parent.parentNode;
  }
  return window;
};
var parentScroll = scrollParent;
function getElementPosition(element) {
  var rect = element.getBoundingClientRect();
  return {
    top: rect.top + window.pageYOffset,
    left: rect.left + window.pageXOffset
  };
}
var isHidden = function isHidden2(element) {
  return element.offsetParent === null;
};
function inViewport(element, container, customOffset) {
  if (isHidden(element)) {
    return false;
  }
  var top;
  var bottom;
  var left;
  var right;
  if (typeof container === "undefined" || container === window) {
    top = window.pageYOffset;
    left = window.pageXOffset;
    bottom = top + window.innerHeight;
    right = left + window.innerWidth;
  } else {
    var containerPosition = getElementPosition(container);
    top = containerPosition.top;
    left = containerPosition.left;
    bottom = top + container.offsetHeight;
    right = left + container.offsetWidth;
  }
  var elementPosition = getElementPosition(element);
  return top <= elementPosition.top + element.offsetHeight + customOffset.top && bottom >= elementPosition.top - customOffset.bottom && left <= elementPosition.left + element.offsetWidth + customOffset.left && right >= elementPosition.left - customOffset.right;
}
var lazyLoadProps = {
  debounce: PropsTypes.looseBool,
  elementType: PropsTypes.string,
  height: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  offset: PropsTypes.number,
  offsetBottom: PropsTypes.number,
  offsetHorizontal: PropsTypes.number,
  offsetLeft: PropsTypes.number,
  offsetRight: PropsTypes.number,
  offsetTop: PropsTypes.number,
  offsetVertical: PropsTypes.number,
  threshold: PropsTypes.number,
  throttle: PropsTypes.number,
  width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])
};
var LazyLoad = defineComponent({
  name: "LazyLoad",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(lazyLoadProps, {
    elementType: "div",
    debounce: true,
    offset: 0,
    offsetBottom: 0,
    offsetHorizontal: 0,
    offsetLeft: 0,
    offsetRight: 0,
    offsetTop: 0,
    offsetVertical: 0,
    throttle: 250
  }),
  data: function data65() {
    if (this.throttle > 0) {
      if (this.debounce) {
        this.lazyLoadHandler = debounce$1(this.lazyLoadHandler, this.throttle);
      } else {
        this.lazyLoadHandler = throttle(this.lazyLoadHandler, this.throttle);
      }
    }
    return {
      visible: false
    };
  },
  mounted: function mounted36() {
    var _this = this;
    this.$nextTick(function() {
      watchEffect(function() {
        if (!_this.visible) {
          _this.lazyLoadHandler(_this.$props);
        }
      });
      var eventNode = _this.getEventNode();
      if (_this.lazyLoadHandler.flush) {
        _this.lazyLoadHandler.flush();
      }
      _this.resizeHander = addEventListenerWrap(window, "resize", _this.lazyLoadHandler);
      _this.scrollHander = addEventListenerWrap(eventNode, "scroll", _this.lazyLoadHandler);
    });
  },
  beforeUnmount: function beforeUnmount26() {
    if (this.lazyLoadHandler.cancel) {
      this.lazyLoadHandler.cancel();
    }
    this.detachListeners();
  },
  methods: {
    getEventNode: function getEventNode() {
      return parentScroll(findDOMNode(this));
    },
    getOffset: function getOffset2() {
      var _this$$props = this.$props, offset2 = _this$$props.offset, offsetVertical = _this$$props.offsetVertical, offsetHorizontal = _this$$props.offsetHorizontal, offsetTop = _this$$props.offsetTop, offsetBottom = _this$$props.offsetBottom, offsetLeft = _this$$props.offsetLeft, offsetRight = _this$$props.offsetRight, threshold = _this$$props.threshold;
      var _offsetAll = threshold || offset2;
      var _offsetVertical = offsetVertical || _offsetAll;
      var _offsetHorizontal = offsetHorizontal || _offsetAll;
      return {
        top: offsetTop || _offsetVertical,
        bottom: offsetBottom || _offsetVertical,
        left: offsetLeft || _offsetHorizontal,
        right: offsetRight || _offsetHorizontal
      };
    },
    lazyLoadHandler: function lazyLoadHandler() {
      var _this2 = this;
      if (!this._.isMounted) {
        return;
      }
      var offset2 = this.getOffset();
      var node = findDOMNode(this);
      var eventNode = this.getEventNode();
      if (inViewport(node, eventNode, offset2)) {
        this.setState({
          visible: true
        }, function() {
          _this2.__emit("contentVisible");
        });
        this.detachListeners();
      }
    },
    detachListeners: function detachListeners() {
      this.resizeHander && this.resizeHander.remove();
      this.scrollHander && this.scrollHander.remove();
    }
  },
  render: function render139() {
    var children = getSlot(this);
    if (children.length !== 1) {
      warning$1(false, "lazyLoad\u7EC4\u4EF6\u53EA\u80FD\u5305\u542B\u4E00\u4E2A\u5B50\u5143\u7D20");
      return null;
    }
    var _this$$props2 = this.$props, height = _this$$props2.height, width = _this$$props2.width, ElementType = _this$$props2.elementType;
    var visible9 = this.visible;
    var className = this.$attrs.class;
    var elStyles = {
      height: typeof height === "number" ? height + "px" : height,
      width: typeof width === "number" ? width + "px" : width
    };
    var elClasses = _defineProperty({
      LazyLoad: true,
      "is-visible": visible9
    }, className, className);
    return createVNode(ElementType, {
      "class": elClasses,
      "style": elStyles
    }, {
      default: function _default8() {
        return [visible9 ? children[0] : null];
      }
    });
  }
});
function noop$3() {
}
var ListItem = defineComponent({
  name: "ListItem",
  inheritAttrs: false,
  props: {
    renderedText: PropsTypes.any,
    renderedEl: PropsTypes.any,
    item: PropsTypes.any,
    lazy: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    checked: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    onClick: PropsTypes.func
  },
  render: function render140() {
    var _classNames, _this = this;
    var _this$$props = this.$props, renderedText = _this$$props.renderedText, renderedEl = _this$$props.renderedEl, item = _this$$props.item, lazy = _this$$props.lazy, checked2 = _this$$props.checked, disabled = _this$$props.disabled, prefixCls2 = _this$$props.prefixCls;
    var className = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-content-item"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-content-item-disabled"), disabled || item.disabled), _classNames));
    var title2;
    if (typeof renderedText === "string" || typeof renderedText === "number") {
      title2 = String(renderedText);
    }
    var listItem = createVNode("li", {
      "class": className,
      "title": title2,
      "onClick": disabled || item.disabled ? noop$3 : function() {
        _this.$emit("click", item);
      }
    }, [createVNode(Checkbox, {
      "checked": checked2,
      "disabled": disabled || item.disabled
    }, null), createVNode("span", {
      "class": "".concat(prefixCls2, "-content-item-text")
    }, [renderedEl])]);
    var children = null;
    if (lazy) {
      var lazyProps = _extends({
        height: 32,
        offset: 500,
        throttle: 0,
        debounce: false
      }, lazy);
      children = createVNode(LazyLoad, lazyProps, {
        default: function _default8() {
          return [listItem];
        }
      });
    } else {
      children = listItem;
    }
    return children;
  }
});
var ListBody = defineComponent({
  name: "ListBody",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    filteredRenderItems: PropsTypes.array.def([]),
    lazy: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    selectedKeys: PropsTypes.array,
    disabled: PropsTypes.looseBool,
    onItemSelect: PropsTypes.func,
    onItemSelectAll: PropsTypes.func,
    onScroll: PropsTypes.func
  },
  setup: function setup143() {
    return {
      mountId: null,
      lazyId: null
    };
  },
  data: function data66() {
    return {
      mounted: false
    };
  },
  computed: {
    itemsLength: function itemsLength() {
      return this.filteredRenderItems ? this.filteredRenderItems.length : 0;
    }
  },
  watch: {
    itemsLength: function itemsLength2() {
      var _this = this;
      nextTick(function() {
        var lazy = _this.$props.lazy;
        if (lazy !== false) {
          var container = findDOMNode(_this);
          wrapperRaf.cancel(_this.lazyId);
          _this.lazyId = wrapperRaf(function() {
            if (container) {
              var scrollEvent = new Event("scroll", {
                bubbles: true
              });
              container.dispatchEvent(scrollEvent);
            }
          });
        }
      });
    }
  },
  mounted: function mounted37() {
    var _this2 = this;
    this.mountId = wrapperRaf(function() {
      _this2.mounted = true;
    });
  },
  beforeUnmount: function beforeUnmount27() {
    wrapperRaf.cancel(this.mountId);
    wrapperRaf.cancel(this.lazyId);
  },
  methods: {
    handleItemSelect: function handleItemSelect(item) {
      var selectedKeys3 = this.$props.selectedKeys;
      var checked2 = selectedKeys3.indexOf(item.key) >= 0;
      this.$emit("itemSelect", item.key, !checked2);
    },
    handleScroll: function handleScroll(e) {
      this.$emit("scroll", e);
    }
  },
  render: function render141() {
    var _this3 = this;
    var mounted45 = this.$data.mounted;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, filteredRenderItems = _this$$props.filteredRenderItems, lazy = _this$$props.lazy, selectedKeys3 = _this$$props.selectedKeys, globalDisabled = _this$$props.disabled;
    var items = filteredRenderItems.map(function(_ref) {
      var renderedEl = _ref.renderedEl, renderedText = _ref.renderedText, item = _ref.item;
      var disabled = item.disabled;
      var checked2 = selectedKeys3.indexOf(item.key) >= 0;
      return createVNode(ListItem, {
        "disabled": globalDisabled || disabled,
        "key": item.key,
        "item": item,
        "lazy": lazy,
        "renderedText": renderedText,
        "renderedEl": renderedEl,
        "checked": checked2,
        "prefixCls": prefixCls2,
        "onClick": _this3.handleItemSelect
      }, null);
    });
    var transitionProps = getTransitionGroupProps(mounted45 ? "".concat(prefixCls2, "-content-item-highlight") : "", {
      tag: "ul",
      class: "".concat(prefixCls2, "-content"),
      onScroll: this.handleScroll
    });
    return createVNode(TransitionGroup, transitionProps, {
      default: function _default8() {
        return [items];
      }
    });
  }
});
var defaultRenderList = function(props2) {
  return createVNode(ListBody, props2, null);
};
function triggerEvent2(el, type2) {
  if ("createEvent" in document) {
    var e = document.createEvent("HTMLEvents");
    e.initEvent(type2, false, true);
    el.dispatchEvent(e);
  }
}
var defaultRender = function defaultRender2() {
  return null;
};
var TransferItem$1 = {
  key: PropsTypes.string,
  title: PropsTypes.string,
  description: PropsTypes.string,
  disabled: PropsTypes.looseBool
};
function isRenderResultPlainObject(result) {
  return result && !isValidElement(result) && Object.prototype.toString.call(result) === "[object Object]";
}
var TransferListProps = {
  prefixCls: PropsTypes.string,
  titleText: PropsTypes.string,
  dataSource: PropsTypes.arrayOf(PropsTypes.shape(TransferItem$1).loose),
  filter: PropsTypes.string,
  filterOption: PropsTypes.func,
  checkedKeys: PropsTypes.arrayOf(PropsTypes.string),
  handleFilter: PropsTypes.func,
  handleSelect: PropsTypes.func,
  handleSelectAll: PropsTypes.func,
  handleClear: PropsTypes.func,
  renderItem: PropsTypes.func,
  showSearch: PropsTypes.looseBool,
  searchPlaceholder: PropsTypes.string,
  notFoundContent: PropsTypes.any,
  itemUnit: PropsTypes.string,
  itemsUnit: PropsTypes.string,
  body: PropsTypes.any,
  renderList: PropsTypes.any,
  footer: PropsTypes.any,
  lazy: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
  disabled: PropsTypes.looseBool,
  direction: PropsTypes.string,
  showSelectAll: PropsTypes.looseBool,
  onItemSelect: PropsTypes.func,
  onItemSelectAll: PropsTypes.func,
  onScroll: PropsTypes.func
};
function renderListNode(renderList, props2) {
  var bodyContent = renderList ? renderList(props2) : null;
  var customize = !!bodyContent && filterEmpty(bodyContent).length > 0;
  if (!customize) {
    bodyContent = defaultRenderList(props2);
  }
  return {
    customize,
    bodyContent
  };
}
var List = defineComponent({
  name: "TransferList",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(TransferListProps, {
    dataSource: [],
    titleText: "",
    showSearch: false,
    lazy: {}
  }),
  setup: function setup144() {
    return {
      timer: null,
      triggerScrollTimer: null,
      scrollEvent: null
    };
  },
  data: function data67() {
    return {
      filterValue: ""
    };
  },
  beforeUnmount: function beforeUnmount28() {
    clearTimeout(this.triggerScrollTimer);
  },
  updated: function updated23() {
    var _this = this;
    nextTick(function() {
      if (_this.scrollEvent) {
        _this.scrollEvent.remove();
      }
    });
  },
  methods: {
    handleScroll: function handleScroll2(e) {
      this.$emit("scroll", e);
    },
    getCheckStatus: function getCheckStatus(filteredItems) {
      var checkedKeys = this.$props.checkedKeys;
      if (checkedKeys.length === 0) {
        return "none";
      }
      if (filteredItems.every(function(item) {
        return checkedKeys.indexOf(item.key) >= 0 || !!item.disabled;
      })) {
        return "all";
      }
      return "part";
    },
    getFilteredItems: function getFilteredItems(dataSource3, filterValue) {
      var _this2 = this;
      var filteredItems = [];
      var filteredRenderItems = [];
      dataSource3.forEach(function(item) {
        var renderedItem = _this2.renderItemHtml(item);
        var renderedText = renderedItem.renderedText;
        if (filterValue && filterValue.trim() && !_this2.matchFilter(renderedText, item)) {
          return null;
        }
        filteredItems.push(item);
        filteredRenderItems.push(renderedItem);
      });
      return {
        filteredItems,
        filteredRenderItems
      };
    },
    getListBody: function getListBody(prefixCls2, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled) {
      var search = showSearch ? createVNode("div", {
        "class": "".concat(prefixCls2, "-body-search-wrapper")
      }, [createVNode(Search, {
        "prefixCls": "".concat(prefixCls2, "-search"),
        "onChange": this._handleFilter,
        "handleClear": this._handleClear,
        "placeholder": searchPlaceholder,
        "value": filterValue,
        "disabled": disabled
      }, null)]) : null;
      var listBody = bodyDom;
      if (!listBody) {
        var bodyNode;
        var _splitAttrs = splitAttrs(this.$attrs), onEvents = _splitAttrs.onEvents;
        var _renderListNode = renderListNode(renderList, _extends(_extends(_extends({}, this.$props), {
          filteredItems,
          filteredRenderItems,
          selectedKeys: checkedKeys
        }), onEvents)), bodyContent = _renderListNode.bodyContent, customize = _renderListNode.customize;
        if (customize) {
          bodyNode = createVNode("div", {
            "class": "".concat(prefixCls2, "-body-customize-wrapper")
          }, [bodyContent]);
        } else {
          bodyNode = filteredItems.length ? bodyContent : createVNode("div", {
            "class": "".concat(prefixCls2, "-body-not-found")
          }, [notFoundContent]);
        }
        listBody = createVNode("div", {
          "class": classNames(showSearch ? "".concat(prefixCls2, "-body ").concat(prefixCls2, "-body-with-search") : "".concat(prefixCls2, "-body"))
        }, [search, bodyNode]);
      }
      return listBody;
    },
    getCheckBox: function getCheckBox(filteredItems, showSelectAll, disabled) {
      var _this3 = this;
      var checkStatus = this.getCheckStatus(filteredItems);
      var checkedAll = checkStatus === "all";
      var checkAllCheckbox = showSelectAll !== false && createVNode(Checkbox, {
        "disabled": disabled,
        "checked": checkedAll,
        "indeterminate": checkStatus === "part",
        "onChange": function onChange9() {
          _this3.$emit("itemSelectAll", filteredItems.filter(function(item) {
            return !item.disabled;
          }).map(function(_ref) {
            var key2 = _ref.key;
            return key2;
          }), !checkedAll);
        }
      }, null);
      return checkAllCheckbox;
    },
    _handleSelect: function _handleSelect(selectedItem) {
      var checkedKeys = this.$props.checkedKeys;
      var result = checkedKeys.some(function(key2) {
        return key2 === selectedItem.key;
      });
      this.handleSelect(selectedItem, !result);
    },
    _handleFilter: function _handleFilter(e) {
      var _this4 = this;
      var handleFilter3 = this.$props.handleFilter;
      var filterValue = e.target.value;
      this.setState({
        filterValue
      });
      handleFilter3(e);
      if (!filterValue) {
        return;
      }
      this.triggerScrollTimer = setTimeout(function() {
        var transferNode = findDOMNode(_this4);
        var listNode = transferNode.querySelectorAll(".ant-transfer-list-content")[0];
        if (listNode) {
          triggerEvent2(listNode, "scroll");
        }
      }, 0);
    },
    _handleClear: function _handleClear(e) {
      this.setState({
        filterValue: ""
      });
      this.handleClear(e);
    },
    matchFilter: function matchFilter(text, item) {
      var filterValue = this.$data.filterValue;
      var filterOption2 = this.$props.filterOption;
      if (filterOption2) {
        return filterOption2(filterValue, item);
      }
      return text.indexOf(filterValue) >= 0;
    },
    renderItemHtml: function renderItemHtml(item) {
      var _this$$props$renderIt = this.$props.renderItem, renderItem = _this$$props$renderIt === void 0 ? defaultRender : _this$$props$renderIt;
      var renderResult = renderItem(item);
      var isRenderResultPlain = isRenderResultPlainObject(renderResult);
      return {
        renderedText: isRenderResultPlain ? renderResult.value : renderResult,
        renderedEl: isRenderResultPlain ? renderResult.label : renderResult,
        item
      };
    },
    filterNull: function filterNull(arr) {
      return arr.filter(function(item) {
        return item !== null;
      });
    }
  },
  render: function render142() {
    var filterValue = this.$data.filterValue;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, dataSource3 = _this$$props.dataSource, titleText = _this$$props.titleText, checkedKeys = _this$$props.checkedKeys, disabled = _this$$props.disabled, body = _this$$props.body, footer = _this$$props.footer, showSearch = _this$$props.showSearch, searchPlaceholder = _this$$props.searchPlaceholder, notFoundContent = _this$$props.notFoundContent, itemUnit = _this$$props.itemUnit, itemsUnit = _this$$props.itemsUnit, renderList = _this$$props.renderList, showSelectAll = _this$$props.showSelectAll;
    var footerDom = footer && footer(_extends({}, this.$props));
    var bodyDom = body && body(_extends({}, this.$props));
    var listCls = classNames(prefixCls2, _defineProperty({}, "".concat(prefixCls2, "-with-footer"), !!footerDom));
    var _this$getFilteredItem = this.getFilteredItems(dataSource3, filterValue), filteredItems = _this$getFilteredItem.filteredItems, filteredRenderItems = _this$getFilteredItem.filteredRenderItems;
    var unit = dataSource3.length > 1 ? itemsUnit : itemUnit;
    var listBody = this.getListBody(prefixCls2, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled);
    var listFooter = footerDom ? createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footerDom]) : null;
    var checkAllCheckbox = this.getCheckBox(filteredItems, showSelectAll, disabled);
    return createVNode("div", {
      "class": listCls,
      "style": this.$attrs.style
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [checkAllCheckbox, createVNode("span", {
      "class": "".concat(prefixCls2, "-header-selected")
    }, [createVNode("span", null, [(checkedKeys.length > 0 ? "".concat(checkedKeys.length, "/") : "") + filteredItems.length, " ", unit]), createVNode("span", {
      "class": "".concat(prefixCls2, "-header-title")
    }, [titleText])])]), listBody, listFooter]);
  }
});
function noop$2() {
}
var Operation = function Operation2(props2) {
  var disabled = props2.disabled, _props$moveToLeft = props2.moveToLeft, moveToLeft2 = _props$moveToLeft === void 0 ? noop$2 : _props$moveToLeft, _props$moveToRight = props2.moveToRight, moveToRight2 = _props$moveToRight === void 0 ? noop$2 : _props$moveToRight, _props$leftArrowText = props2.leftArrowText, leftArrowText = _props$leftArrowText === void 0 ? "" : _props$leftArrowText, _props$rightArrowText = props2.rightArrowText, rightArrowText = _props$rightArrowText === void 0 ? "" : _props$rightArrowText, leftActive = props2.leftActive, rightActive = props2.rightActive, className = props2.class, style3 = props2.style;
  return createVNode("div", {
    "class": className,
    "style": style3
  }, [createVNode(Button$1, {
    "type": "primary",
    "size": "small",
    "disabled": disabled || !rightActive,
    "onClick": moveToRight2,
    "icon": createVNode(RightOutlined, null, null)
  }, {
    default: function _default8() {
      return [rightArrowText];
    }
  }), createVNode(Button$1, {
    "type": "primary",
    "size": "small",
    "disabled": disabled || !leftActive,
    "onClick": moveToLeft2,
    "icon": createVNode(LeftOutlined, null, null)
  }, {
    default: function _default8() {
      return [leftArrowText];
    }
  })]);
};
Operation.inheritAttrs = false;
var Operation$1 = Operation;
var TransferItem = {
  key: PropsTypes.string,
  title: PropsTypes.string,
  description: PropsTypes.string,
  disabled: PropsTypes.looseBool
};
var TransferProps = {
  prefixCls: PropsTypes.string,
  dataSource: PropsTypes.arrayOf(PropsTypes.shape(TransferItem).loose),
  disabled: PropsTypes.looseBool,
  targetKeys: PropsTypes.arrayOf(PropsTypes.string),
  selectedKeys: PropsTypes.arrayOf(PropsTypes.string),
  render: PropsTypes.func,
  listStyle: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.object]),
  operationStyle: PropsTypes.object,
  titles: PropsTypes.arrayOf(PropsTypes.string),
  operations: PropsTypes.arrayOf(PropsTypes.string),
  showSearch: PropsTypes.looseBool,
  filterOption: PropsTypes.func,
  searchPlaceholder: PropsTypes.string,
  notFoundContent: PropsTypes.any,
  locale: PropsTypes.object,
  rowKey: PropsTypes.func,
  lazy: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool]),
  showSelectAll: PropsTypes.looseBool,
  children: PropsTypes.any,
  onChange: PropsTypes.func,
  onSelectChange: PropsTypes.func,
  onSearchChange: PropsTypes.func,
  onSearch: PropsTypes.func,
  onScroll: PropsTypes.func
};
var Transfer = defineComponent({
  name: "ATransfer",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(TransferProps, {
    dataSource: [],
    locale: {},
    showSearch: false,
    listStyle: function listStyle() {
    }
  }),
  setup: function setup145() {
    return {
      separatedDataSource: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data68() {
    var _this$selectedKeys = this.selectedKeys, selectedKeys3 = _this$selectedKeys === void 0 ? [] : _this$selectedKeys, _this$targetKeys = this.targetKeys, targetKeys2 = _this$targetKeys === void 0 ? [] : _this$targetKeys;
    return {
      leftFilter: "",
      rightFilter: "",
      sourceSelectedKeys: selectedKeys3.filter(function(key2) {
        return targetKeys2.indexOf(key2) === -1;
      }),
      targetSelectedKeys: selectedKeys3.filter(function(key2) {
        return targetKeys2.indexOf(key2) > -1;
      })
    };
  },
  watch: {
    targetKeys: function targetKeys() {
      this.updateState();
      if (this.selectedKeys) {
        var targetKeys2 = this.targetKeys || [];
        this.setState({
          sourceSelectedKeys: this.selectedKeys.filter(function(key2) {
            return !targetKeys2.includes(key2);
          }),
          targetSelectedKeys: this.selectedKeys.filter(function(key2) {
            return targetKeys2.includes(key2);
          })
        });
      }
    },
    dataSource: function dataSource2() {
      this.updateState();
    },
    selectedKeys: function selectedKeys() {
      if (this.selectedKeys) {
        var targetKeys2 = this.targetKeys || [];
        this.setState({
          sourceSelectedKeys: this.selectedKeys.filter(function(key2) {
            return !targetKeys2.includes(key2);
          }),
          targetSelectedKeys: this.selectedKeys.filter(function(key2) {
            return targetKeys2.includes(key2);
          })
        });
      }
    }
  },
  mounted: function mounted38() {
  },
  methods: {
    getSelectedKeysName: function getSelectedKeysName(direction) {
      return direction === "left" ? "sourceSelectedKeys" : "targetSelectedKeys";
    },
    getTitles: function getTitles(transferLocale) {
      if (this.titles) {
        return this.titles;
      }
      return transferLocale.titles || ["", ""];
    },
    getLocale: function getLocale(transferLocale, renderEmpty2) {
      var oldLocale = {
        notFoundContent: renderEmpty2("Transfer")
      };
      var notFoundContent = getComponent(this, "notFoundContent");
      if (notFoundContent) {
        oldLocale.notFoundContent = notFoundContent;
      }
      if (hasProp(this, "searchPlaceholder")) {
        oldLocale.searchPlaceholder = this.$props.searchPlaceholder;
      }
      return _extends(_extends(_extends({}, transferLocale), oldLocale), this.$props.locale);
    },
    updateState: function updateState2() {
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      this.separatedDataSource = null;
      if (!this.selectedKeys) {
        var dataSource3 = this.dataSource, _this$targetKeys2 = this.targetKeys, targetKeys2 = _this$targetKeys2 === void 0 ? [] : _this$targetKeys2;
        var newSourceSelectedKeys = [];
        var newTargetSelectedKeys = [];
        dataSource3.forEach(function(_ref) {
          var key2 = _ref.key;
          if (sourceSelectedKeys.includes(key2) && !targetKeys2.includes(key2)) {
            newSourceSelectedKeys.push(key2);
          }
          if (targetSelectedKeys.includes(key2) && targetKeys2.includes(key2)) {
            newTargetSelectedKeys.push(key2);
          }
        });
        this.setState({
          sourceSelectedKeys: newSourceSelectedKeys,
          targetSelectedKeys: newTargetSelectedKeys
        });
      }
    },
    moveTo: function moveTo2(direction) {
      var _this$$props = this.$props, _this$$props$targetKe = _this$$props.targetKeys, targetKeys2 = _this$$props$targetKe === void 0 ? [] : _this$$props$targetKe, _this$$props$dataSour = _this$$props.dataSource, dataSource3 = _this$$props$dataSour === void 0 ? [] : _this$$props$dataSour;
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      var moveKeys = direction === "right" ? sourceSelectedKeys : targetSelectedKeys;
      var newMoveKeys = moveKeys.filter(function(key2) {
        return !dataSource3.some(function(data79) {
          return !!(key2 === data79.key && data79.disabled);
        });
      });
      var newTargetKeys = direction === "right" ? newMoveKeys.concat(targetKeys2) : targetKeys2.filter(function(targetKey) {
        return newMoveKeys.indexOf(targetKey) === -1;
      });
      var oppositeDirection = direction === "right" ? "left" : "right";
      this.setState(_defineProperty({}, this.getSelectedKeysName(oppositeDirection), []));
      this.handleSelectChange(oppositeDirection, []);
      this.$emit("change", newTargetKeys, direction, newMoveKeys);
    },
    moveToLeft: function moveToLeft() {
      this.moveTo("left");
    },
    moveToRight: function moveToRight() {
      this.moveTo("right");
    },
    onItemSelectAll: function onItemSelectAll(direction, selectedKeys3, checkAll) {
      var originalSelectedKeys = this.$data[this.getSelectedKeysName(direction)] || [];
      var mergedCheckedKeys = [];
      if (checkAll) {
        mergedCheckedKeys = Array.from(new Set([].concat(_toConsumableArray(originalSelectedKeys), _toConsumableArray(selectedKeys3))));
      } else {
        mergedCheckedKeys = originalSelectedKeys.filter(function(key2) {
          return selectedKeys3.indexOf(key2) === -1;
        });
      }
      this.handleSelectChange(direction, mergedCheckedKeys);
      if (!this.$props.selectedKeys) {
        this.setState(_defineProperty({}, this.getSelectedKeysName(direction), mergedCheckedKeys));
      }
    },
    handleSelectAll: function handleSelectAll(direction, filteredDataSource, checkAll) {
      this.onItemSelectAll(direction, filteredDataSource.map(function(_ref2) {
        var key2 = _ref2.key;
        return key2;
      }), !checkAll);
    },
    handleLeftSelectAll: function handleLeftSelectAll(filteredDataSource, checkAll) {
      return this.handleSelectAll("left", filteredDataSource, !checkAll);
    },
    handleRightSelectAll: function handleRightSelectAll(filteredDataSource, checkAll) {
      return this.handleSelectAll("right", filteredDataSource, !checkAll);
    },
    onLeftItemSelectAll: function onLeftItemSelectAll(selectedKeys3, checkAll) {
      return this.onItemSelectAll("left", selectedKeys3, checkAll);
    },
    onRightItemSelectAll: function onRightItemSelectAll(selectedKeys3, checkAll) {
      return this.onItemSelectAll("right", selectedKeys3, checkAll);
    },
    handleFilter: function handleFilter2(direction, e) {
      var value26 = e.target.value;
      this.$emit("search", direction, value26);
    },
    handleLeftFilter: function handleLeftFilter(e) {
      this.handleFilter("left", e);
    },
    handleRightFilter: function handleRightFilter(e) {
      this.handleFilter("right", e);
    },
    handleClear: function handleClear(direction) {
      this.$emit("search", direction, "");
    },
    handleLeftClear: function handleLeftClear() {
      this.handleClear("left");
    },
    handleRightClear: function handleRightClear() {
      this.handleClear("right");
    },
    onItemSelect: function onItemSelect(direction, selectedKey, checked2) {
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      var holder = direction === "left" ? _toConsumableArray(sourceSelectedKeys) : _toConsumableArray(targetSelectedKeys);
      var index2 = holder.indexOf(selectedKey);
      if (index2 > -1) {
        holder.splice(index2, 1);
      }
      if (checked2) {
        holder.push(selectedKey);
      }
      this.handleSelectChange(direction, holder);
      if (!this.selectedKeys) {
        this.setState(_defineProperty({}, this.getSelectedKeysName(direction), holder));
      }
    },
    onLeftItemSelect: function onLeftItemSelect(selectedKey, checked2) {
      return this.onItemSelect("left", selectedKey, checked2);
    },
    onRightItemSelect: function onRightItemSelect(selectedKey, checked2) {
      return this.onItemSelect("right", selectedKey, checked2);
    },
    handleScroll: function handleScroll3(direction, e) {
      this.$emit("scroll", direction, e);
    },
    handleLeftScroll: function handleLeftScroll(e) {
      this.handleScroll("left", e);
    },
    handleRightScroll: function handleRightScroll(e) {
      this.handleScroll("right", e);
    },
    handleSelectChange: function handleSelectChange(direction, holder) {
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      if (direction === "left") {
        this.$emit("selectChange", holder, targetSelectedKeys);
      } else {
        this.$emit("selectChange", sourceSelectedKeys, holder);
      }
    },
    handleListStyle: function handleListStyle(listStyle2, direction) {
      if (typeof listStyle2 === "function") {
        return listStyle2({
          direction
        });
      }
      return listStyle2;
    },
    separateDataSource: function separateDataSource() {
      var _this$$props2 = this.$props, dataSource3 = _this$$props2.dataSource, rowKey = _this$$props2.rowKey, _this$$props2$targetK = _this$$props2.targetKeys, targetKeys2 = _this$$props2$targetK === void 0 ? [] : _this$$props2$targetK;
      var leftDataSource = [];
      var rightDataSource = new Array(targetKeys2.length);
      dataSource3.forEach(function(record) {
        if (rowKey) {
          record.key = rowKey(record);
        }
        var indexOfKey = targetKeys2.indexOf(record.key);
        if (indexOfKey !== -1) {
          rightDataSource[indexOfKey] = record;
        } else {
          leftDataSource.push(record);
        }
      });
      return {
        leftDataSource,
        rightDataSource
      };
    },
    renderTransfer: function renderTransfer(transferLocale) {
      var _classNames;
      var props2 = getOptionProps(this);
      var customizePrefixCls = props2.prefixCls, disabled = props2.disabled, _props$operations = props2.operations, operations = _props$operations === void 0 ? [] : _props$operations, showSearch = props2.showSearch, listStyle2 = props2.listStyle, operationStyle = props2.operationStyle, filterOption2 = props2.filterOption, lazy = props2.lazy, showSelectAll = props2.showSelectAll;
      var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
      var children = getComponent(this, "children", {}, false);
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("transfer", customizePrefixCls);
      var renderEmpty2 = this.configProvider.renderEmpty;
      var locale2 = this.getLocale(transferLocale, renderEmpty2);
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys, $slots = this.$slots;
      var body = $slots.body, footer = $slots.footer;
      var renderItem = props2.render || this.$slots.render;
      var _this$separateDataSou = this.separateDataSource(), leftDataSource = _this$separateDataSou.leftDataSource, rightDataSource = _this$separateDataSou.rightDataSource;
      var leftActive = targetSelectedKeys.length > 0;
      var rightActive = sourceSelectedKeys.length > 0;
      var cls = classNames(prefixCls2, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls2, "-customize-list"), !!children), _classNames));
      var titles = this.getTitles(locale2);
      return createVNode("div", {
        "class": cls,
        "style": style3
      }, [createVNode(List, {
        "key": "leftList",
        "prefixCls": "".concat(prefixCls2, "-list"),
        "titleText": titles[0],
        "dataSource": leftDataSource,
        "filterOption": filterOption2,
        "style": this.handleListStyle(listStyle2, "left"),
        "checkedKeys": sourceSelectedKeys,
        "handleFilter": this.handleLeftFilter,
        "handleClear": this.handleLeftClear,
        "handleSelectAll": this.handleLeftSelectAll,
        "onItemSelect": this.onLeftItemSelect,
        "onItemSelectAll": this.onLeftItemSelectAll,
        "renderItem": renderItem,
        "showSearch": showSearch,
        "body": body,
        "renderList": children,
        "footer": footer,
        "lazy": lazy,
        "onScroll": this.handleLeftScroll,
        "disabled": disabled,
        "direction": "left",
        "showSelectAll": showSelectAll,
        "itemUnit": locale2.itemUnit,
        "itemsUnit": locale2.itemsUnit,
        "notFoundContent": locale2.notFoundContent,
        "searchPlaceholder": locale2.searchPlaceholder
      }, null), createVNode(Operation$1, {
        "key": "operation",
        "class": "".concat(prefixCls2, "-operation"),
        "rightActive": rightActive,
        "rightArrowText": operations[0],
        "moveToRight": this.moveToRight,
        "leftActive": leftActive,
        "leftArrowText": operations[1],
        "moveToLeft": this.moveToLeft,
        "style": operationStyle,
        "disabled": disabled
      }, null), createVNode(List, {
        "key": "rightList",
        "prefixCls": "".concat(prefixCls2, "-list"),
        "titleText": titles[1],
        "dataSource": rightDataSource,
        "filterOption": filterOption2,
        "style": this.handleListStyle(listStyle2, "right"),
        "checkedKeys": targetSelectedKeys,
        "handleFilter": this.handleRightFilter,
        "handleClear": this.handleRightClear,
        "handleSelectAll": this.handleRightSelectAll,
        "onItemSelect": this.onRightItemSelect,
        "onItemSelectAll": this.onRightItemSelectAll,
        "renderItem": renderItem,
        "showSearch": showSearch,
        "body": body,
        "renderList": children,
        "footer": footer,
        "lazy": lazy,
        "onScroll": this.handleRightScroll,
        "disabled": disabled,
        "direction": "right",
        "showSelectAll": showSelectAll,
        "itemUnit": locale2.itemUnit,
        "itemsUnit": locale2.itemsUnit,
        "notFoundContent": locale2.notFoundContent,
        "searchPlaceholder": locale2.searchPlaceholder
      }, null)]);
    }
  },
  render: function render143() {
    return createVNode(LocaleReceiver, {
      "componentName": "Transfer",
      "defaultLocale": defaultLocale.Transfer,
      "children": this.renderTransfer
    }, null);
  }
});
var index$1 = withInstall(Transfer);
function noop$1() {
}
var ICON_OPEN = "open";
var ICON_CLOSE = "close";
var defaultTitle = "---";
var TreeNode$4 = defineComponent({
  name: "TreeNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  __ANT_TREE_NODE: true,
  props: initDefaultProps$2({
    eventKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    prefixCls: PropsTypes.string,
    root: PropsTypes.object,
    expanded: PropsTypes.looseBool,
    selected: PropsTypes.looseBool,
    checked: PropsTypes.looseBool,
    loaded: PropsTypes.looseBool,
    loading: PropsTypes.looseBool,
    halfChecked: PropsTypes.looseBool,
    title: PropsTypes.any,
    pos: PropsTypes.string,
    dragOver: PropsTypes.looseBool,
    dragOverGapTop: PropsTypes.looseBool,
    dragOverGapBottom: PropsTypes.looseBool,
    isLeaf: PropsTypes.looseBool,
    checkable: PropsTypes.looseBool,
    selectable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    disableCheckbox: PropsTypes.looseBool,
    icon: PropsTypes.any,
    dataRef: PropsTypes.object,
    switcherIcon: PropsTypes.any,
    label: PropsTypes.any,
    value: PropsTypes.any
  }, {}),
  setup: function setup146() {
    return {
      vcTree: inject("vcTree", {}),
      vcTreeNode: inject("vcTreeNode", {})
    };
  },
  data: function data69() {
    this.children = null;
    return {
      dragNodeHighlight: false
    };
  },
  created: function created18() {
    provide("vcTreeNode", this);
  },
  mounted: function mounted39() {
    var eventKey = this.eventKey, registerTreeNode2 = this.vcTree.registerTreeNode;
    this.syncLoadData(this.$props);
    registerTreeNode2 && registerTreeNode2(eventKey, this);
  },
  updated: function updated24() {
    this.syncLoadData(this.$props);
  },
  beforeUnmount: function beforeUnmount29() {
    var eventKey = this.eventKey, registerTreeNode2 = this.vcTree.registerTreeNode;
    registerTreeNode2 && registerTreeNode2(eventKey, null);
  },
  methods: {
    onSelectorClick: function onSelectorClick(e) {
      var onNodeClick2 = this.vcTree.onNodeClick;
      onNodeClick2(e, this);
      if (this.isSelectable()) {
        this.onSelect(e);
      } else {
        this.onCheck(e);
      }
    },
    onSelectorDoubleClick: function onSelectorDoubleClick(e) {
      var onNodeDoubleClick2 = this.vcTree.onNodeDoubleClick;
      onNodeDoubleClick2(e, this);
    },
    onSelect: function onSelect5(e) {
      if (this.isDisabled())
        return;
      var onNodeSelect2 = this.vcTree.onNodeSelect;
      e.preventDefault();
      onNodeSelect2(e, this);
    },
    onCheck: function onCheck(e) {
      if (this.isDisabled())
        return;
      var disableCheckbox = this.disableCheckbox, checked2 = this.checked;
      var onNodeCheck2 = this.vcTree.onNodeCheck;
      if (!this.isCheckable() || disableCheckbox)
        return;
      e.preventDefault();
      var targetChecked = !checked2;
      onNodeCheck2(e, this, targetChecked);
    },
    onMouseEnter: function onMouseEnter3(e) {
      var onNodeMouseEnter2 = this.vcTree.onNodeMouseEnter;
      onNodeMouseEnter2(e, this);
    },
    onMouseLeave: function onMouseLeave4(e) {
      var onNodeMouseLeave2 = this.vcTree.onNodeMouseLeave;
      onNodeMouseLeave2(e, this);
    },
    onContextMenu: function onContextMenu2(e) {
      var onNodeContextMenu2 = this.vcTree.onNodeContextMenu;
      onNodeContextMenu2(e, this);
    },
    onDragStart: function onDragStart(e) {
      var onNodeDragStart2 = this.vcTree.onNodeDragStart;
      e.stopPropagation();
      this.setState({
        dragNodeHighlight: true
      });
      onNodeDragStart2(e, this);
      try {
        e.dataTransfer.setData("text/plain", "");
      } catch (error3) {
      }
    },
    onDragEnter: function onDragEnter(e) {
      var onNodeDragEnter2 = this.vcTree.onNodeDragEnter;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragEnter2(e, this);
    },
    onDragOver: function onDragOver(e) {
      var onNodeDragOver2 = this.vcTree.onNodeDragOver;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragOver2(e, this);
    },
    onDragLeave: function onDragLeave(e) {
      var onNodeDragLeave2 = this.vcTree.onNodeDragLeave;
      e.stopPropagation();
      onNodeDragLeave2(e, this);
    },
    onDragEnd: function onDragEnd(e) {
      var onNodeDragEnd2 = this.vcTree.onNodeDragEnd;
      e.stopPropagation();
      this.setState({
        dragNodeHighlight: false
      });
      onNodeDragEnd2(e, this);
    },
    onDrop: function onDrop(e) {
      var onNodeDrop2 = this.vcTree.onNodeDrop;
      e.preventDefault();
      e.stopPropagation();
      this.setState({
        dragNodeHighlight: false
      });
      onNodeDrop2(e, this);
    },
    onExpand: function onExpand2(e) {
      var onNodeExpand2 = this.vcTree.onNodeExpand;
      onNodeExpand2(e, this);
    },
    setSelectHandle: function setSelectHandle(node) {
      this.selectHandle = node;
    },
    getNodeChildren: function getNodeChildren$1() {
      var originList = this.children;
      var targetList = getNodeChildren(originList);
      if (originList.length !== targetList.length)
        ;
      return targetList;
    },
    getNodeState: function getNodeState() {
      var expanded = this.expanded;
      if (this.isLeaf2()) {
        return null;
      }
      return expanded ? ICON_OPEN : ICON_CLOSE;
    },
    isLeaf2: function isLeaf2() {
      var isLeaf = this.isLeaf, loaded = this.loaded;
      var loadData = this.vcTree.loadData;
      var hasChildren = this.getNodeChildren().length !== 0;
      if (isLeaf === false) {
        return false;
      }
      return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
    },
    isDisabled: function isDisabled() {
      var disabled = this.disabled;
      var treeDisabled = this.vcTree.disabled;
      if (disabled === false) {
        return false;
      }
      return !!(treeDisabled || disabled);
    },
    isCheckable: function isCheckable() {
      var checkable = this.$props.checkable;
      var treeCheckable = this.vcTree.checkable;
      if (!treeCheckable || checkable === false)
        return false;
      return treeCheckable;
    },
    syncLoadData: function syncLoadData(props2) {
      var expanded = props2.expanded, loading = props2.loading, loaded = props2.loaded;
      var _this$vcTree = this.vcTree, loadData = _this$vcTree.loadData, onNodeLoad2 = _this$vcTree.onNodeLoad;
      if (loading)
        return;
      if (loadData && expanded && !this.isLeaf2()) {
        var hasChildren = this.getNodeChildren().length !== 0;
        if (!hasChildren && !loaded) {
          onNodeLoad2(this);
        }
      }
    },
    isSelectable: function isSelectable() {
      var selectable = this.selectable;
      var treeSelectable = this.vcTree.selectable;
      if (typeof selectable === "boolean") {
        return selectable;
      }
      return treeSelectable;
    },
    renderSwitcher: function renderSwitcher() {
      var expanded = this.expanded;
      var prefixCls2 = this.vcTree.prefixCls;
      var switcherIcon = getComponent(this, "switcherIcon", {}, false) || getComponent(this.vcTree, "switcherIcon", {}, false);
      if (this.isLeaf2()) {
        return createVNode("span", {
          "key": "switcher",
          "class": classNames("".concat(prefixCls2, "-switcher"), "".concat(prefixCls2, "-switcher-noop"))
        }, [typeof switcherIcon === "function" ? switcherIcon(_extends(_extends(_extends({}, this.$props), this.$props.dataRef), {
          isLeaf: true
        })) : switcherIcon]);
      }
      var switcherCls = classNames("".concat(prefixCls2, "-switcher"), "".concat(prefixCls2, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE));
      return createVNode("span", {
        "key": "switcher",
        "onClick": this.onExpand,
        "class": switcherCls
      }, [typeof switcherIcon === "function" ? switcherIcon(_extends(_extends(_extends({}, this.$props), this.$props.dataRef), {
        isLeaf: false
      })) : switcherIcon]);
    },
    renderCheckbox: function renderCheckbox() {
      var checked2 = this.checked, halfChecked = this.halfChecked, disableCheckbox = this.disableCheckbox;
      var prefixCls2 = this.vcTree.prefixCls;
      var disabled = this.isDisabled();
      var checkable = this.isCheckable();
      if (!checkable)
        return null;
      var $custom = typeof checkable !== "boolean" ? checkable : null;
      return createVNode("span", {
        "key": "checkbox",
        "class": classNames("".concat(prefixCls2, "-checkbox"), checked2 && "".concat(prefixCls2, "-checkbox-checked"), !checked2 && halfChecked && "".concat(prefixCls2, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls2, "-checkbox-disabled")),
        "onClick": this.onCheck
      }, [$custom]);
    },
    renderIcon: function renderIcon3() {
      var loading = this.loading;
      var prefixCls2 = this.vcTree.prefixCls;
      return createVNode("span", {
        "key": "icon",
        "class": classNames("".concat(prefixCls2, "-iconEle"), "".concat(prefixCls2, "-icon__").concat(this.getNodeState() || "docu"), loading && "".concat(prefixCls2, "-icon_loading"))
      }, null);
    },
    renderSelector: function renderSelector() {
      var selected = this.selected, loading = this.loading, dragNodeHighlight = this.dragNodeHighlight;
      var icon = getComponent(this, "icon", {}, false);
      var _this$vcTree2 = this.vcTree, prefixCls2 = _this$vcTree2.prefixCls, showIcon = _this$vcTree2.showIcon, treeIcon = _this$vcTree2.icon, draggable = _this$vcTree2.draggable, loadData = _this$vcTree2.loadData;
      var disabled = this.isDisabled();
      var title2 = getComponent(this, "title", {}, false);
      var wrapClass = "".concat(prefixCls2, "-node-content-wrapper");
      var $icon;
      if (showIcon) {
        var currentIcon = icon || treeIcon;
        $icon = currentIcon ? createVNode("span", {
          "class": classNames("".concat(prefixCls2, "-iconEle"), "".concat(prefixCls2, "-icon__customize"))
        }, [typeof currentIcon === "function" ? currentIcon(_extends(_extends({}, this.$props), this.$props.dataRef)) : currentIcon]) : this.renderIcon();
      } else if (loadData && loading) {
        $icon = this.renderIcon();
      }
      var currentTitle = title2;
      var $title = currentTitle ? createVNode("span", {
        "class": "".concat(prefixCls2, "-title")
      }, [typeof currentTitle === "function" ? currentTitle(_extends(_extends({}, this.$props), this.$props.dataRef)) : currentTitle]) : createVNode("span", {
        "class": "".concat(prefixCls2, "-title")
      }, [defaultTitle]);
      return createVNode("span", {
        "key": "selector",
        "ref": this.setSelectHandle,
        "title": typeof title2 === "string" ? title2 : "",
        "class": classNames("".concat(wrapClass), "".concat(wrapClass, "-").concat(this.getNodeState() || "normal"), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls2, "-node-selected"), !disabled && draggable && "draggable"),
        "draggable": !disabled && draggable || void 0,
        "aria-grabbed": !disabled && draggable || void 0,
        "onMouseenter": this.onMouseEnter,
        "onMouseleave": this.onMouseLeave,
        "onContextmenu": this.onContextMenu,
        "onClick": this.onSelectorClick,
        "onDblclick": this.onSelectorDoubleClick,
        "onDragstart": draggable ? this.onDragStart : noop$1
      }, [$icon, $title]);
    },
    renderChildren: function renderChildren3() {
      var expanded = this.expanded, pos = this.pos;
      var _this$vcTree3 = this.vcTree, prefixCls2 = _this$vcTree3.prefixCls, openTransitionName = _this$vcTree3.openTransitionName, openAnimation2 = _this$vcTree3.openAnimation, renderTreeNode2 = _this$vcTree3.renderTreeNode;
      var animProps = {};
      if (openTransitionName) {
        animProps = getTransitionProps(openTransitionName);
      } else if (_typeof(openAnimation2) === "object") {
        animProps = _extends(_extends(_extends({}, openAnimation2), {
          css: false
        }), animProps);
      }
      var nodeList = this.getNodeChildren();
      if (nodeList.length === 0) {
        return null;
      }
      var $children;
      if (expanded) {
        $children = createVNode("ul", {
          "class": classNames("".concat(prefixCls2, "-child-tree"), expanded && "".concat(prefixCls2, "-child-tree-open")),
          "data-expanded": expanded,
          "role": "group"
        }, [mapChildren(nodeList, function(node, index2) {
          return renderTreeNode2(node, index2, pos);
        })]);
      }
      return createVNode(Transition, animProps, {
        default: function _default8() {
          return [$children];
        }
      });
    }
  },
  render: function render144() {
    var _ref;
    this.children = getSlot(this);
    var _this$$props = this.$props, dragOver = _this$$props.dragOver, dragOverGapTop = _this$$props.dragOverGapTop, dragOverGapBottom = _this$$props.dragOverGapBottom, isLeaf = _this$$props.isLeaf, expanded = _this$$props.expanded, selected = _this$$props.selected, checked2 = _this$$props.checked, halfChecked = _this$$props.halfChecked, loading = _this$$props.loading;
    var _this$vcTree4 = this.vcTree, prefixCls2 = _this$vcTree4.prefixCls, filterTreeNode2 = _this$vcTree4.filterTreeNode, draggable = _this$vcTree4.draggable;
    var disabled = this.isDisabled();
    var dataOrAriaAttributeProps = getDataAndAria(_extends(_extends({}, this.$props), this.$attrs));
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    return createVNode("li", _objectSpread2({
      "class": (_ref = {}, _defineProperty(_ref, className, className), _defineProperty(_ref, "".concat(prefixCls2, "-treenode-disabled"), disabled), _defineProperty(_ref, "".concat(prefixCls2, "-treenode-switcher-").concat(expanded ? "open" : "close"), !isLeaf), _defineProperty(_ref, "".concat(prefixCls2, "-treenode-checkbox-checked"), checked2), _defineProperty(_ref, "".concat(prefixCls2, "-treenode-checkbox-indeterminate"), halfChecked), _defineProperty(_ref, "".concat(prefixCls2, "-treenode-selected"), selected), _defineProperty(_ref, "".concat(prefixCls2, "-treenode-loading"), loading), _defineProperty(_ref, "drag-over", !disabled && dragOver), _defineProperty(_ref, "drag-over-gap-top", !disabled && dragOverGapTop), _defineProperty(_ref, "drag-over-gap-bottom", !disabled && dragOverGapBottom), _defineProperty(_ref, "filter-node", filterTreeNode2 && filterTreeNode2(this)), _ref),
      "style": style3,
      "role": "treeitem",
      "onDragenter": draggable ? this.onDragEnter : noop$1,
      "onDragover": draggable ? this.onDragOver : noop$1,
      "onDragleave": draggable ? this.onDragLeave : noop$1,
      "onDrop": draggable ? this.onDrop : noop$1,
      "onDragend": draggable ? this.onDragEnd : noop$1
    }, dataOrAriaAttributeProps), [this.renderSwitcher(), this.renderCheckbox(), this.renderSelector(), this.renderChildren()]);
  }
});
TreeNode$4.isTreeNode = 1;
var TreeNode$5 = TreeNode$4;
var __rest$9 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var DRAG_SIDE_RANGE = 0.25;
var DRAG_MIN_GAP = 2;
function arrDel(list, value26) {
  var clone = list.slice();
  var index2 = clone.indexOf(value26);
  if (index2 >= 0) {
    clone.splice(index2, 1);
  }
  return clone;
}
function arrAdd(list, value26) {
  var clone = list.slice();
  if (clone.indexOf(value26) === -1) {
    clone.push(value26);
  }
  return clone;
}
function posToArr(pos) {
  return pos.split("-");
}
function getPosition(level2, index2) {
  return "".concat(level2, "-").concat(index2);
}
function isTreeNode(node) {
  return node.type && node.type.isTreeNode;
}
function getNodeChildren() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return children.filter(isTreeNode);
}
function isCheckDisabled(node) {
  var _ref = getOptionProps(node) || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;
  return !!(disabled || disableCheckbox) || checkable === false;
}
function traverseTreeNodes(treeNodes, callback) {
  function processNode(node, index2, parent) {
    var children = node ? getSlot(node) : treeNodes;
    var pos = node ? getPosition(parent.pos, index2) : 0;
    var childList = getNodeChildren(children);
    if (node) {
      var key2 = node.key;
      if (!key2 && (key2 === void 0 || key2 === null)) {
        key2 = pos;
      }
      var data79 = {
        node,
        index: index2,
        pos,
        key: key2,
        parentPos: parent.node ? parent.pos : null
      };
      callback(data79);
    }
    childList.forEach(function(subNode, subIndex) {
      processNode(subNode, subIndex, {
        node,
        pos
      });
    });
  }
  processNode(null);
}
function mapChildren() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var func = arguments.length > 1 ? arguments[1] : void 0;
  var list = children.map(func);
  if (list.length === 1) {
    return list[0];
  }
  return list;
}
function getDragNodesKeys(treeNodes, node) {
  var _getOptionProps = getOptionProps(node), eventKey = _getOptionProps.eventKey, pos = _getOptionProps.pos;
  var dragNodesKeys = [];
  traverseTreeNodes(treeNodes, function(_ref2) {
    var key2 = _ref2.key;
    dragNodesKeys.push(key2);
  });
  dragNodesKeys.push(eventKey || pos);
  return dragNodesKeys;
}
function calcDropPosition(event, treeNode) {
  var clientY = event.clientY;
  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(), top = _treeNode$selectHandl.top, bottom = _treeNode$selectHandl.bottom, height = _treeNode$selectHandl.height;
  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);
  if (clientY <= top + des) {
    return -1;
  }
  if (clientY >= bottom - des) {
    return 1;
  }
  return 0;
}
function calcSelectedKeys(selectedKeys3, props2) {
  if (!selectedKeys3) {
    return void 0;
  }
  var multiple = props2.multiple;
  if (multiple) {
    return selectedKeys3.slice();
  }
  if (selectedKeys3.length) {
    return [selectedKeys3[0]];
  }
  return selectedKeys3;
}
var internalProcessProps = function internalProcessProps2() {
  var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _extends(_extends({}, props2), {
    class: props2.class || props2.className,
    style: props2.style,
    key: props2.key
  });
};
function convertDataToTree$1(treeData, processor) {
  if (!treeData)
    return [];
  var _ref3 = processor || {}, _ref3$processProps = _ref3.processProps, processProps2 = _ref3$processProps === void 0 ? internalProcessProps : _ref3$processProps;
  var list = Array.isArray(treeData) ? treeData : [treeData];
  return list.map(function(_a) {
    var children = _a.children, props2 = __rest$9(_a, ["children"]);
    var childrenNodes = convertDataToTree$1(children, processor);
    return createVNode(TreeNode$5, processProps2(props2), {
      default: function _default8() {
        return [childrenNodes];
      }
    });
  });
}
function convertTreeToEntities$1(treeNodes) {
  var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, initWrapper2 = _ref4.initWrapper, processEntity2 = _ref4.processEntity, onProcessFinished = _ref4.onProcessFinished;
  var posEntities = new Map();
  var keyEntities = new Map();
  var wrapper = {
    posEntities,
    keyEntities
  };
  if (initWrapper2) {
    wrapper = initWrapper2(wrapper) || wrapper;
  }
  traverseTreeNodes(treeNodes, function(item) {
    var node = item.node, index2 = item.index, pos = item.pos, key2 = item.key, parentPos = item.parentPos;
    var entity = {
      node,
      index: index2,
      key: key2,
      pos
    };
    posEntities.set(pos, entity);
    keyEntities.set(key2, entity);
    entity.parent = posEntities.get(parentPos);
    if (entity.parent) {
      entity.parent.children = entity.parent.children || [];
      entity.parent.children.push(entity);
    }
    if (processEntity2) {
      processEntity2(entity, wrapper);
    }
  });
  if (onProcessFinished) {
    onProcessFinished(wrapper);
  }
  return wrapper;
}
function parseCheckedKeys(keys) {
  if (!keys) {
    return null;
  }
  var keyProps;
  if (Array.isArray(keys)) {
    keyProps = {
      checkedKeys: keys,
      halfCheckedKeys: void 0
    };
  } else if (_typeof(keys) === "object") {
    keyProps = {
      checkedKeys: keys.checked || void 0,
      halfCheckedKeys: keys.halfChecked || void 0
    };
  } else {
    return null;
  }
  return keyProps;
}
function conductCheck$1(keyList, isCheck, keyEntities) {
  var checkStatus = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var checkedKeys = new Map();
  var halfCheckedKeys = new Map();
  (checkStatus.checkedKeys || []).forEach(function(key3) {
    checkedKeys.set(key3, true);
  });
  (checkStatus.halfCheckedKeys || []).forEach(function(key3) {
    halfCheckedKeys.set(key3, true);
  });
  function conductUp(key3) {
    if (checkedKeys.get(key3) === isCheck)
      return;
    var entity = keyEntities.get(key3);
    if (!entity)
      return;
    var children = entity.children, parent = entity.parent, node = entity.node;
    if (isCheckDisabled(node))
      return;
    var everyChildChecked = true;
    var someChildChecked = false;
    (children || []).filter(function(child) {
      return !isCheckDisabled(child.node);
    }).forEach(function(_ref5) {
      var childKey = _ref5.key;
      var childChecked = checkedKeys.get(childKey);
      var childHalfChecked = halfCheckedKeys.get(childKey);
      if (childChecked || childHalfChecked)
        someChildChecked = true;
      if (!childChecked)
        everyChildChecked = false;
    });
    if (isCheck) {
      checkedKeys.set(key3, everyChildChecked);
    } else {
      checkedKeys.set(key3, false);
    }
    halfCheckedKeys.set(key3, someChildChecked);
    if (parent) {
      conductUp(parent.key);
    }
  }
  function conductDown(key3) {
    if (checkedKeys.get(key3) === isCheck)
      return;
    var entity = keyEntities.get(key3);
    if (!entity)
      return;
    var children = entity.children, node = entity.node;
    if (isCheckDisabled(node))
      return;
    checkedKeys.set(key3, isCheck);
    (children || []).forEach(function(child) {
      conductDown(child.key);
    });
  }
  function conduct(key3) {
    var entity = keyEntities.get(key3);
    if (!entity) {
      return;
    }
    var children = entity.children, parent = entity.parent, node = entity.node;
    checkedKeys.set(key3, isCheck);
    if (isCheckDisabled(node))
      return;
    (children || []).filter(function(child) {
      return !isCheckDisabled(child.node);
    }).forEach(function(child) {
      conductDown(child.key);
    });
    if (parent) {
      conductUp(parent.key);
    }
  }
  (keyList || []).forEach(function(key3) {
    conduct(key3);
  });
  var checkedKeyList = [];
  var halfCheckedKeyList = [];
  var _iterator = _createForOfIteratorHelper(checkedKeys), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _step$value = _slicedToArray(_step.value, 2), key2 = _step$value[0], value26 = _step$value[1];
      if (value26) {
        checkedKeyList.push(key2);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var _iterator2 = _createForOfIteratorHelper(halfCheckedKeys), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var _step2$value = _slicedToArray(_step2.value, 2), _key = _step2$value[0], _value = _step2$value[1];
      if (!checkedKeys.get(_key) && _value) {
        halfCheckedKeyList.push(_key);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return {
    checkedKeys: checkedKeyList,
    halfCheckedKeys: halfCheckedKeyList
  };
}
function conductExpandParent(keyList, keyEntities) {
  var expandedKeys2 = new Map();
  function conductUp(key2) {
    if (expandedKeys2.get(key2))
      return;
    var entity = keyEntities.get(key2);
    if (!entity)
      return;
    expandedKeys2.set(key2, true);
    var parent = entity.parent, node = entity.node;
    var props2 = getOptionProps(node);
    if (props2 && props2.disabled)
      return;
    if (parent) {
      conductUp(parent.key);
    }
  }
  (keyList || []).forEach(function(key2) {
    conductUp(key2);
  });
  return _toConsumableArray(expandedKeys2.keys());
}
function getDataAndAria(props2) {
  return Object.keys(props2).reduce(function(prev3, key2) {
    if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-") {
      prev3[key2] = props2[key2];
    }
    return prev3;
  }, {});
}
function getWatch$1() {
  var keys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var watch2 = {};
  keys.forEach(function(k) {
    watch2[k] = {
      handler: function handler8() {
        this.needSyncKeys[k] = true;
      },
      flush: "sync"
    };
  });
  return watch2;
}
var Tree$1 = defineComponent({
  name: "Tree",
  mixins: [BaseMixin],
  provide: function provide2() {
    return {
      vcTree: this
    };
  },
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    children: PropsTypes.any,
    treeData: PropsTypes.array,
    showLine: PropsTypes.looseBool,
    showIcon: PropsTypes.looseBool,
    icon: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
    focusable: PropsTypes.looseBool,
    selectable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    multiple: PropsTypes.looseBool,
    checkable: withUndefined(PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool])),
    checkStrictly: PropsTypes.looseBool,
    draggable: PropsTypes.looseBool,
    defaultExpandParent: PropsTypes.looseBool,
    autoExpandParent: PropsTypes.looseBool,
    defaultExpandAll: PropsTypes.looseBool,
    defaultExpandedKeys: PropsTypes.array,
    expandedKeys: PropsTypes.array,
    defaultCheckedKeys: PropsTypes.array,
    checkedKeys: PropsTypes.oneOfType([PropsTypes.array, PropsTypes.object]),
    defaultSelectedKeys: PropsTypes.array,
    selectedKeys: PropsTypes.array,
    loadData: PropsTypes.func,
    loadedKeys: PropsTypes.array,
    filterTreeNode: PropsTypes.func,
    openTransitionName: PropsTypes.string,
    openAnimation: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    switcherIcon: PropsTypes.any,
    __propsSymbol__: PropsTypes.any
  }, {
    prefixCls: "rc-tree",
    showLine: false,
    showIcon: true,
    selectable: true,
    multiple: false,
    checkable: false,
    disabled: false,
    checkStrictly: false,
    draggable: false,
    defaultExpandParent: true,
    autoExpandParent: false,
    defaultExpandAll: false,
    defaultExpandedKeys: [],
    defaultCheckedKeys: [],
    defaultSelectedKeys: []
  }),
  data: function data70() {
    warning_1(this.$props.__propsSymbol__);
    warning_1(this.$props.children);
    this.needSyncKeys = {};
    this.domTreeNodes = {};
    var state = {
      _posEntities: new Map(),
      _keyEntities: new Map(),
      _expandedKeys: [],
      _selectedKeys: [],
      _checkedKeys: [],
      _halfCheckedKeys: [],
      _loadedKeys: [],
      _loadingKeys: [],
      _treeNode: [],
      _prevProps: null,
      _dragOverNodeKey: "",
      _dropPosition: null,
      _dragNodesKeys: []
    };
    return _extends(_extends({}, state), this.getDerivedState(getOptionProps(this), state));
  },
  watch: _extends(_extends({}, getWatch$1(["treeData", "children", "expandedKeys", "autoExpandParent", "selectedKeys", "checkedKeys", "loadedKeys"])), {
    __propsSymbol__: function __propsSymbol__2() {
      this.setState(this.getDerivedState(getOptionProps(this), this.$data));
      this.needSyncKeys = {};
    }
  }),
  methods: {
    getDerivedState: function getDerivedState(props2, prevState) {
      var _prevProps = prevState._prevProps;
      var newState = {
        _prevProps: _extends({}, props2)
      };
      var self = this;
      function needSync(name2) {
        return !_prevProps && name2 in props2 || _prevProps && self.needSyncKeys[name2];
      }
      var treeNode = null;
      if (needSync("treeData")) {
        treeNode = convertDataToTree$1(props2.treeData);
      } else if (needSync("children")) {
        treeNode = props2.children;
      }
      if (treeNode) {
        newState._treeNode = treeNode;
        var entitiesMap = convertTreeToEntities$1(treeNode);
        newState._keyEntities = entitiesMap.keyEntities;
      }
      var keyEntities = newState._keyEntities || prevState._keyEntities;
      if (needSync("expandedKeys") || _prevProps && needSync("autoExpandParent")) {
        newState._expandedKeys = props2.autoExpandParent || !_prevProps && props2.defaultExpandParent ? conductExpandParent(props2.expandedKeys, keyEntities) : props2.expandedKeys;
      } else if (!_prevProps && props2.defaultExpandAll) {
        newState._expandedKeys = _toConsumableArray(keyEntities.keys());
      } else if (!_prevProps && props2.defaultExpandedKeys) {
        newState._expandedKeys = props2.autoExpandParent || props2.defaultExpandParent ? conductExpandParent(props2.defaultExpandedKeys, keyEntities) : props2.defaultExpandedKeys;
      }
      if (props2.selectable) {
        if (needSync("selectedKeys")) {
          newState._selectedKeys = calcSelectedKeys(props2.selectedKeys, props2);
        } else if (!_prevProps && props2.defaultSelectedKeys) {
          newState._selectedKeys = calcSelectedKeys(props2.defaultSelectedKeys, props2);
        }
      }
      if (props2.checkable) {
        var checkedKeyEntity;
        if (needSync("checkedKeys")) {
          checkedKeyEntity = parseCheckedKeys(props2.checkedKeys) || {};
        } else if (!_prevProps && props2.defaultCheckedKeys) {
          checkedKeyEntity = parseCheckedKeys(props2.defaultCheckedKeys) || {};
        } else if (treeNode) {
          checkedKeyEntity = parseCheckedKeys(props2.checkedKeys) || {
            checkedKeys: prevState._checkedKeys,
            halfCheckedKeys: prevState._halfCheckedKeys
          };
        }
        if (checkedKeyEntity) {
          var _checkedKeyEntity = checkedKeyEntity, _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys, checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che, _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys, halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;
          if (!props2.checkStrictly) {
            var conductKeys = conductCheck$1(checkedKeys, true, keyEntities);
            checkedKeys = conductKeys.checkedKeys;
            halfCheckedKeys = conductKeys.halfCheckedKeys;
          }
          newState._checkedKeys = checkedKeys;
          newState._halfCheckedKeys = halfCheckedKeys;
        }
      }
      if (needSync("loadedKeys")) {
        newState._loadedKeys = props2.loadedKeys;
      }
      return newState;
    },
    onNodeDragStart: function onNodeDragStart(event, node) {
      var _expandedKeys = this.$data._expandedKeys;
      var eventKey = node.eventKey;
      var children = getSlot(node);
      this.dragNode = node;
      this.setState({
        _dragNodesKeys: getDragNodesKeys(typeof children === "function" ? children() : children, node),
        _expandedKeys: arrDel(_expandedKeys, eventKey)
      });
      this.__emit("dragstart", {
        event,
        node
      });
    },
    onNodeDragEnter: function onNodeDragEnter(event, node) {
      var _this = this;
      var expandedKeys2 = this.$data._expandedKeys;
      var pos = node.pos, eventKey = node.eventKey;
      if (!this.dragNode || !node.selectHandle)
        return;
      var dropPosition = calcDropPosition(event, node);
      if (this.dragNode.eventKey === eventKey && dropPosition === 0) {
        this.setState({
          _dragOverNodeKey: "",
          _dropPosition: null
        });
        return;
      }
      setTimeout(function() {
        _this.setState({
          _dragOverNodeKey: eventKey,
          _dropPosition: dropPosition
        });
        if (!_this.delayedDragEnterLogic) {
          _this.delayedDragEnterLogic = {};
        }
        Object.keys(_this.delayedDragEnterLogic).forEach(function(key2) {
          clearTimeout(_this.delayedDragEnterLogic[key2]);
        });
        _this.delayedDragEnterLogic[pos] = setTimeout(function() {
          var newExpandedKeys = arrAdd(expandedKeys2, eventKey);
          if (!hasProp(_this, "expandedKeys")) {
            _this.setState({
              _expandedKeys: newExpandedKeys
            });
          }
          _this.__emit("dragenter", {
            event,
            node,
            expandedKeys: newExpandedKeys
          });
        }, 400);
      }, 0);
    },
    onNodeDragOver: function onNodeDragOver(event, node) {
      var eventKey = node.eventKey;
      var _this$$data = this.$data, _dragOverNodeKey = _this$$data._dragOverNodeKey, _dropPosition = _this$$data._dropPosition;
      if (this.dragNode && eventKey === _dragOverNodeKey && node.selectHandle) {
        var dropPosition = calcDropPosition(event, node);
        if (dropPosition === _dropPosition)
          return;
        this.setState({
          _dropPosition: dropPosition
        });
      }
      this.__emit("dragover", {
        event,
        node
      });
    },
    onNodeDragLeave: function onNodeDragLeave(event, node) {
      this.setState({
        _dragOverNodeKey: ""
      });
      this.__emit("dragleave", {
        event,
        node
      });
    },
    onNodeDragEnd: function onNodeDragEnd(event, node) {
      this.setState({
        _dragOverNodeKey: ""
      });
      this.__emit("dragend", {
        event,
        node
      });
      this.dragNode = null;
    },
    onNodeDrop: function onNodeDrop(event, node) {
      var _this$$data2 = this.$data, _this$$data2$_dragNod = _this$$data2._dragNodesKeys, _dragNodesKeys = _this$$data2$_dragNod === void 0 ? [] : _this$$data2$_dragNod, _dropPosition = _this$$data2._dropPosition;
      var eventKey = node.eventKey, pos = node.pos;
      this.setState({
        _dragOverNodeKey: ""
      });
      if (_dragNodesKeys.indexOf(eventKey) !== -1) {
        return;
      }
      var posArr = posToArr(pos);
      var dropResult = {
        event,
        node,
        dragNode: this.dragNode,
        dragNodesKeys: _dragNodesKeys.slice(),
        dropPosition: _dropPosition + Number(posArr[posArr.length - 1]),
        dropToGap: false
      };
      if (_dropPosition !== 0) {
        dropResult.dropToGap = true;
      }
      this.__emit("drop", dropResult);
      this.dragNode = null;
    },
    onNodeClick: function onNodeClick(e, treeNode) {
      this.__emit("click", e, treeNode);
    },
    onNodeDoubleClick: function onNodeDoubleClick(e, treeNode) {
      this.__emit("dblclick", e, treeNode);
    },
    onNodeSelect: function onNodeSelect(e, treeNode) {
      var selectedKeys3 = this.$data._selectedKeys;
      var keyEntities = this.$data._keyEntities;
      var multiple = this.$props.multiple;
      var _getOptionProps = getOptionProps(treeNode), selected = _getOptionProps.selected, eventKey = _getOptionProps.eventKey;
      var targetSelected = !selected;
      if (!targetSelected) {
        selectedKeys3 = arrDel(selectedKeys3, eventKey);
      } else if (!multiple) {
        selectedKeys3 = [eventKey];
      } else {
        selectedKeys3 = arrAdd(selectedKeys3, eventKey);
      }
      var selectedNodes = selectedKeys3.map(function(key2) {
        var entity = keyEntities.get(key2);
        if (!entity)
          return null;
        return entity.node;
      }).filter(function(node) {
        return node;
      });
      this.setUncontrolledState({
        _selectedKeys: selectedKeys3
      });
      var eventObj = {
        event: "select",
        selected: targetSelected,
        node: treeNode,
        selectedNodes,
        nativeEvent: e
      };
      this.__emit("select", selectedKeys3, eventObj);
    },
    onNodeCheck: function onNodeCheck(e, treeNode, checked2) {
      var _this$$data3 = this.$data, keyEntities = _this$$data3._keyEntities, oriCheckedKeys = _this$$data3._checkedKeys, oriHalfCheckedKeys = _this$$data3._halfCheckedKeys;
      var checkStrictly = this.$props.checkStrictly;
      var _getOptionProps2 = getOptionProps(treeNode), eventKey = _getOptionProps2.eventKey;
      var checkedObj;
      var eventObj = {
        event: "check",
        node: treeNode,
        checked: checked2,
        nativeEvent: e
      };
      if (checkStrictly) {
        var checkedKeys = checked2 ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);
        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);
        checkedObj = {
          checked: checkedKeys,
          halfChecked: halfCheckedKeys
        };
        eventObj.checkedNodes = checkedKeys.map(function(key2) {
          return keyEntities.get(key2);
        }).filter(function(entity) {
          return entity;
        }).map(function(entity) {
          return entity.node;
        });
        this.setUncontrolledState({
          _checkedKeys: checkedKeys
        });
      } else {
        var _conductCheck = conductCheck$1([eventKey], checked2, keyEntities, {
          checkedKeys: oriCheckedKeys,
          halfCheckedKeys: oriHalfCheckedKeys
        }), _checkedKeys = _conductCheck.checkedKeys, _halfCheckedKeys = _conductCheck.halfCheckedKeys;
        checkedObj = _checkedKeys;
        eventObj.checkedNodes = [];
        eventObj.checkedNodesPositions = [];
        eventObj.halfCheckedKeys = _halfCheckedKeys;
        _checkedKeys.forEach(function(key2) {
          var entity = keyEntities.get(key2);
          if (!entity)
            return;
          var node = entity.node, pos = entity.pos;
          eventObj.checkedNodes.push(node);
          eventObj.checkedNodesPositions.push({
            node,
            pos
          });
        });
        this.setUncontrolledState({
          _checkedKeys,
          _halfCheckedKeys
        });
      }
      this.__emit("check", checkedObj, eventObj);
    },
    onNodeLoad: function onNodeLoad(treeNode) {
      var _this2 = this;
      return new Promise(function(resolve) {
        _this2.setState(function(_ref) {
          var _ref$_loadedKeys = _ref._loadedKeys, loadedKeys = _ref$_loadedKeys === void 0 ? [] : _ref$_loadedKeys, _ref$_loadingKeys = _ref._loadingKeys, loadingKeys = _ref$_loadingKeys === void 0 ? [] : _ref$_loadingKeys;
          var loadData = _this2.$props.loadData;
          var _getOptionProps3 = getOptionProps(treeNode), eventKey = _getOptionProps3.eventKey;
          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {
            return {};
          }
          var promise = loadData(treeNode);
          promise.then(function() {
            var _this2$$data = _this2.$data, currentLoadedKeys = _this2$$data._loadedKeys, currentLoadingKeys = _this2$$data._loadingKeys;
            var newLoadedKeys = arrAdd(currentLoadedKeys, eventKey);
            var newLoadingKeys = arrDel(currentLoadingKeys, eventKey);
            _this2.__emit("load", newLoadedKeys, {
              event: "load",
              node: treeNode
            });
            _this2.setUncontrolledState({
              _loadedKeys: newLoadedKeys
            });
            _this2.setState({
              _loadingKeys: newLoadingKeys
            });
            resolve();
          });
          return {
            _loadingKeys: arrAdd(loadingKeys, eventKey)
          };
        });
      });
    },
    onNodeExpand: function onNodeExpand(e, treeNode) {
      var _this3 = this;
      var expandedKeys2 = this.$data._expandedKeys;
      var loadData = this.$props.loadData;
      var _getOptionProps4 = getOptionProps(treeNode), eventKey = _getOptionProps4.eventKey, expanded = _getOptionProps4.expanded;
      expandedKeys2.indexOf(eventKey);
      var targetExpanded = !expanded;
      if (targetExpanded) {
        expandedKeys2 = arrAdd(expandedKeys2, eventKey);
      } else {
        expandedKeys2 = arrDel(expandedKeys2, eventKey);
      }
      this.setUncontrolledState({
        _expandedKeys: expandedKeys2
      });
      this.__emit("expand", expandedKeys2, {
        node: treeNode,
        expanded: targetExpanded,
        nativeEvent: e
      });
      if (targetExpanded && loadData) {
        var loadPromise = this.onNodeLoad(treeNode);
        return loadPromise ? loadPromise.then(function() {
          _this3.setUncontrolledState({
            _expandedKeys: expandedKeys2
          });
        }) : null;
      }
      return null;
    },
    onNodeMouseEnter: function onNodeMouseEnter(event, node) {
      this.__emit("mouseenter", {
        event,
        node
      });
    },
    onNodeMouseLeave: function onNodeMouseLeave(event, node) {
      this.__emit("mouseleave", {
        event,
        node
      });
    },
    onNodeContextMenu: function onNodeContextMenu(event, node) {
      event.preventDefault();
      this.__emit("rightClick", {
        event,
        node
      });
    },
    setUncontrolledState: function setUncontrolledState(state) {
      var needSync = false;
      var newState = {};
      var props2 = getOptionProps(this);
      Object.keys(state).forEach(function(name2) {
        if (name2.replace("_", "") in props2)
          return;
        needSync = true;
        newState[name2] = state[name2];
      });
      if (needSync) {
        this.setState(newState);
      }
    },
    registerTreeNode: function registerTreeNode(key2, node) {
      if (node) {
        this.domTreeNodes[key2] = node;
      } else {
        delete this.domTreeNodes[key2];
      }
    },
    isKeyChecked: function isKeyChecked(key2) {
      var _this$$data$_checkedK = this.$data._checkedKeys, checkedKeys = _this$$data$_checkedK === void 0 ? [] : _this$$data$_checkedK;
      return checkedKeys.indexOf(key2) !== -1;
    },
    renderTreeNode: function renderTreeNode(child, index2) {
      var level2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var _this$$data4 = this.$data, keyEntities = _this$$data4._keyEntities, _this$$data4$_expande = _this$$data4._expandedKeys, expandedKeys2 = _this$$data4$_expande === void 0 ? [] : _this$$data4$_expande, _this$$data4$_selecte = _this$$data4._selectedKeys, selectedKeys3 = _this$$data4$_selecte === void 0 ? [] : _this$$data4$_selecte, _this$$data4$_halfChe = _this$$data4._halfCheckedKeys, halfCheckedKeys = _this$$data4$_halfChe === void 0 ? [] : _this$$data4$_halfChe, _this$$data4$_loadedK = _this$$data4._loadedKeys, loadedKeys = _this$$data4$_loadedK === void 0 ? [] : _this$$data4$_loadedK, _this$$data4$_loading = _this$$data4._loadingKeys, loadingKeys = _this$$data4$_loading === void 0 ? [] : _this$$data4$_loading, dragOverNodeKey = _this$$data4._dragOverNodeKey, dropPosition = _this$$data4._dropPosition;
      var pos = getPosition(level2, index2);
      var key2 = child.key;
      if (!key2 && (key2 === void 0 || key2 === null)) {
        key2 = pos;
      }
      if (!keyEntities.get(key2)) {
        return null;
      }
      return cloneElement(child, {
        eventKey: key2,
        expanded: expandedKeys2.indexOf(key2) !== -1,
        selected: selectedKeys3.indexOf(key2) !== -1,
        loaded: loadedKeys.indexOf(key2) !== -1,
        loading: loadingKeys.indexOf(key2) !== -1,
        checked: this.isKeyChecked(key2),
        halfChecked: halfCheckedKeys.indexOf(key2) !== -1,
        pos,
        dragOver: dragOverNodeKey === key2 && dropPosition === 0,
        dragOverGapTop: dragOverNodeKey === key2 && dropPosition === -1,
        dragOverGapBottom: dragOverNodeKey === key2 && dropPosition === 1,
        key: key2
      });
    }
  },
  render: function render145() {
    var _this4 = this;
    var treeNode = this.$data._treeNode;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, focusable = _this$$props.focusable, showLine = _this$$props.showLine, _this$$props$tabindex = _this$$props.tabindex, tabindex = _this$$props$tabindex === void 0 ? 0 : _this$$props$tabindex;
    var domProps = getDataAndAria(_extends(_extends({}, this.$props), this.$attrs));
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    return createVNode("ul", _objectSpread2(_objectSpread2({}, domProps), {}, {
      "class": classNames(prefixCls2, className, _defineProperty({}, "".concat(prefixCls2, "-show-line"), showLine)),
      "style": style3,
      "role": "tree",
      "unselectable": "on",
      "tabindex": focusable ? tabindex : null
    }), [mapChildren(treeNode, function(node, index2) {
      return _this4.renderTreeNode(node, index2);
    })]);
  }
});
var Tree$2 = Tree$1;
Tree$2.TreeNode = TreeNode$5;
var __rest$8 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var TreeNode$3 = Tree$2.TreeNode;
function TreeProps() {
  return {
    showLine: PropsTypes.looseBool,
    multiple: PropsTypes.looseBool,
    autoExpandParent: PropsTypes.looseBool,
    checkStrictly: PropsTypes.looseBool,
    checkable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    defaultExpandAll: PropsTypes.looseBool,
    defaultExpandParent: PropsTypes.looseBool,
    defaultExpandedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    expandedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    checkedKeys: PropsTypes.oneOfType([PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])), PropsTypes.shape({
      checked: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
      halfChecked: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]))
    }).loose]),
    defaultCheckedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    selectedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    defaultSelectedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    selectable: PropsTypes.looseBool,
    filterAntTreeNode: PropsTypes.func,
    loadData: PropsTypes.func,
    loadedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    draggable: PropsTypes.looseBool,
    showIcon: PropsTypes.looseBool,
    icon: PropsTypes.func,
    switcherIcon: PropsTypes.any,
    prefixCls: PropsTypes.string,
    filterTreeNode: PropsTypes.func,
    openAnimation: PropsTypes.any,
    treeData: {
      type: Array
    },
    replaceFields: PropsTypes.object,
    blockNode: PropsTypes.looseBool,
    onExpand: PropsTypes.func,
    onCheck: PropsTypes.func,
    onSelect: PropsTypes.func,
    onClick: PropsTypes.func,
    onDoubleclick: PropsTypes.func,
    onDblclick: PropsTypes.func,
    "onUpdate:selectedKeys": PropsTypes.func,
    "onUpdate:checkedKeys": PropsTypes.func,
    "onUpdate:expandedKeys": PropsTypes.func
  };
}
var Tree = defineComponent({
  name: "ATree",
  inheritAttrs: false,
  props: initDefaultProps$1(TreeProps(), {
    checkable: false,
    showIcon: false,
    openAnimation: _extends(_extends({}, animation$2), {
      appear: null
    }),
    blockNode: false
  }),
  setup: function setup147() {
    return {
      tree: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  TreeNode: TreeNode$3,
  methods: {
    renderSwitcherIcon: function renderSwitcherIcon(prefixCls2, switcherIcon, _ref) {
      var isLeaf = _ref.isLeaf, loading = _ref.loading, expanded = _ref.expanded;
      var showLine = this.$props.showLine;
      if (loading) {
        return createVNode(LoadingOutlined, {
          "class": "".concat(prefixCls2, "-switcher-loading-icon")
        }, null);
      }
      if (isLeaf) {
        return showLine ? createVNode(FileTwoTone, {
          "class": "".concat(prefixCls2, "-switcher-line-icon")
        }, null) : null;
      }
      var switcherCls = "".concat(prefixCls2, "-switcher-icon");
      if (switcherIcon) {
        return cloneElement(switcherIcon, {
          class: switcherCls
        });
      }
      return showLine ? expanded ? createVNode(MinusSquareOutlined, {
        "class": "".concat(prefixCls2, "-switcher-line-icon")
      }, null) : createVNode(PlusSquareOutlined, {
        "class": "".concat(prefixCls2, "-switcher-line-icon")
      }, null) : createVNode(CaretDownFilled, {
        "class": switcherCls
      }, null);
    },
    updateTreeData: function updateTreeData(treeData) {
      var _this = this;
      var $slots = this.$slots;
      var defaultFields = {
        children: "children",
        title: "title",
        key: "key"
      };
      var replaceFields = _extends(_extends({}, defaultFields), this.$props.replaceFields);
      return treeData.map(function(item) {
        var key2 = item[replaceFields.key];
        var children = item[replaceFields.children];
        var _item$slots = item.slots, slots = _item$slots === void 0 ? {} : _item$slots, cls = item.class, style3 = item.style, restProps = __rest$8(item, ["slots", "class", "style"]);
        var treeNodeProps = _extends(_extends({}, restProps), {
          icon: $slots[slots.icon] || restProps.icon,
          switcherIcon: $slots[slots.switcherIcon] || restProps.switcherIcon,
          title: $slots[slots.title] || $slots.title || restProps[replaceFields.title],
          dataRef: item,
          key: key2,
          class: cls,
          style: style3
        });
        if (children) {
          return _extends(_extends({}, treeNodeProps), {
            children: _this.updateTreeData(children)
          });
        }
        return treeNodeProps;
      });
    },
    setTreeRef: function setTreeRef(node) {
      this.tree = node;
    },
    handleCheck: function handleCheck(checkedObj, eventObj) {
      this.$emit("update:checkedKeys", checkedObj);
      this.$emit("check", checkedObj, eventObj);
    },
    handleExpand: function handleExpand(expandedKeys2, eventObj) {
      this.$emit("update:expandedKeys", expandedKeys2);
      this.$emit("expand", expandedKeys2, eventObj);
    },
    handleSelect: function handleSelect3(selectedKeys3, eventObj) {
      this.$emit("update:selectedKeys", selectedKeys3);
      this.$emit("select", selectedKeys3, eventObj);
    }
  },
  render: function render146() {
    var _this2 = this, _classNames;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, showIcon = props2.showIcon, treeNodes = props2.treeNodes, blockNode = props2.blockNode;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tree", customizePrefixCls);
    var _switcherIcon = getComponent(this, "switcherIcon");
    var checkable = props2.checkable;
    var treeData = props2.treeData || treeNodes;
    if (treeData) {
      treeData = this.updateTreeData(treeData);
    }
    var _a = this.$attrs, className = _a.class, restAttrs = __rest$8(_a, ["class"]);
    var vcTreeProps = _extends(_extends(_extends(_extends({}, props2), {
      prefixCls: prefixCls2,
      checkable: checkable ? createVNode("span", {
        "class": "".concat(prefixCls2, "-checkbox-inner")
      }, null) : checkable,
      children: getSlot(this),
      switcherIcon: function switcherIcon(nodeProps) {
        return _this2.renderSwitcherIcon(prefixCls2, _switcherIcon, nodeProps);
      },
      ref: this.setTreeRef
    }), restAttrs), {
      class: classNames(className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-icon-hide"), !showIcon), _defineProperty(_classNames, "".concat(prefixCls2, "-block-node"), blockNode), _classNames)),
      onCheck: this.handleCheck,
      onExpand: this.handleExpand,
      onSelect: this.handleSelect
    });
    if (treeData) {
      vcTreeProps.treeData = treeData;
    }
    return createVNode(Tree$2, _objectSpread2(_objectSpread2({}, vcTreeProps), {}, {
      "__propsSymbol__": []
    }), null);
  }
});
var Record;
(function(Record2) {
  Record2[Record2["None"] = 0] = "None";
  Record2[Record2["Start"] = 1] = "Start";
  Record2[Record2["End"] = 2] = "End";
})(Record || (Record = {}));
function traverseNodesKey(rootChildren, callback) {
  var nodeList = getNodeChildren(rootChildren) || [];
  function processNode(node) {
    var key2 = node.key;
    var children = getSlot(node);
    if (callback(key2, node) !== false) {
      traverseNodesKey(children, callback);
    }
  }
  nodeList.forEach(processNode);
}
function getFullKeyList(children) {
  var _convertTreeToEntitie = convertTreeToEntities$1(children), keyEntities = _convertTreeToEntitie.keyEntities;
  return _toConsumableArray(keyEntities.keys());
}
function calcRangeKeys(rootChildren, expandedKeys2, startKey, endKey) {
  var keys = [];
  var record = Record.None;
  if (startKey && startKey === endKey) {
    return [startKey];
  }
  if (!startKey || !endKey) {
    return [];
  }
  function matchKey(key2) {
    return key2 === startKey || key2 === endKey;
  }
  traverseNodesKey(rootChildren, function(key2) {
    if (record === Record.End) {
      return false;
    }
    if (matchKey(key2)) {
      keys.push(key2);
      if (record === Record.None) {
        record = Record.Start;
      } else if (record === Record.Start) {
        record = Record.End;
        return false;
      }
    } else if (record === Record.Start) {
      keys.push(key2);
    }
    if (expandedKeys2.indexOf(key2) === -1) {
      return false;
    }
    return true;
  });
  return keys;
}
function convertDirectoryKeysToNodes(rootChildren, keys) {
  var restKeys = _toConsumableArray(keys);
  var nodes = [];
  traverseNodesKey(rootChildren, function(key2, node) {
    var index2 = restKeys.indexOf(key2);
    if (index2 !== -1) {
      nodes.push(node);
      restKeys.splice(index2, 1);
    }
    return !!restKeys.length;
  });
  return nodes;
}
function getFullKeyListByTreeData(treeData) {
  var replaceFields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var keys = [];
  var _replaceFields$key = replaceFields.key, key2 = _replaceFields$key === void 0 ? "key" : _replaceFields$key, _replaceFields$childr = replaceFields.children, children = _replaceFields$childr === void 0 ? "children" : _replaceFields$childr;
  (treeData || []).forEach(function(item) {
    keys.push(item[key2]);
    if (item[children]) {
      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item[children], replaceFields)));
    }
  });
  return keys;
}
var __rest$7 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function getIcon2(props2) {
  var isLeaf = props2.isLeaf, expanded = props2.expanded;
  if (isLeaf) {
    return createVNode(FileTwoTone, null, null);
  }
  return expanded ? createVNode(FolderOpenOutlined, null, null) : createVNode(FolderOutlined, null, null);
}
var DirectoryTree = defineComponent({
  name: "ADirectoryTree",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(_extends(_extends({}, TreeProps()), {
    expandAction: PropsTypes.oneOf([false, "click", "doubleclick", "dblclick"])
  }), {
    showIcon: true,
    expandAction: "click"
  }),
  setup: function setup148() {
    return {
      children: null,
      onDebounceExpand: null,
      tree: null,
      lastSelectedKey: "",
      cachedSelectedKeys: [],
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data71() {
    var props2 = getOptionProps(this);
    var defaultExpandAll = props2.defaultExpandAll, defaultExpandParent = props2.defaultExpandParent, expandedKeys2 = props2.expandedKeys, defaultExpandedKeys = props2.defaultExpandedKeys;
    var children = getSlot(this);
    var _convertTreeToEntitie = convertTreeToEntities$1(children), keyEntities = _convertTreeToEntitie.keyEntities;
    var state = {};
    state._selectedKeys = props2.selectedKeys || props2.defaultSelectedKeys || [];
    if (defaultExpandAll) {
      if (props2.treeData) {
        state._expandedKeys = getFullKeyListByTreeData(props2.treeData, props2.replaceFields);
      } else {
        state._expandedKeys = getFullKeyList(children);
      }
    } else if (defaultExpandParent) {
      state._expandedKeys = conductExpandParent(expandedKeys2 || defaultExpandedKeys, keyEntities);
    } else {
      state._expandedKeys = expandedKeys2 || defaultExpandedKeys;
    }
    return _extends({
      _selectedKeys: [],
      _expandedKeys: []
    }, state);
  },
  watch: {
    expandedKeys: function expandedKeys(val) {
      this.setState({
        _expandedKeys: val
      });
    },
    selectedKeys: function selectedKeys2(val) {
      this.setState({
        _selectedKeys: val
      });
    }
  },
  created: function created19() {
    this.onDebounceExpand = debounce$1(this.expandFolderNode, 200, {
      leading: true
    });
  },
  methods: {
    handleExpand: function handleExpand2(expandedKeys2, info3) {
      this.setUncontrolledState({
        _expandedKeys: expandedKeys2
      });
      this.$emit("update:expandedKeys", expandedKeys2);
      this.$emit("expand", expandedKeys2, info3);
      return void 0;
    },
    handleClick: function handleClick4(event, node) {
      var expandAction = this.$props.expandAction;
      if (expandAction === "click") {
        this.onDebounceExpand(event, node);
      }
      this.$emit("click", event, node);
    },
    handleDoubleClick: function handleDoubleClick(event, node) {
      var expandAction = this.$props.expandAction;
      if (expandAction === "dblclick" || expandAction === "doubleclick") {
        this.onDebounceExpand(event, node);
      }
      this.$emit("doubleclick", event, node);
      this.$emit("dblclick", event, node);
    },
    hanldeSelect: function hanldeSelect(keys, event) {
      var multiple = this.$props.multiple;
      var children = this.children || [];
      var _this$$data$_expanded = this.$data._expandedKeys, expandedKeys2 = _this$$data$_expanded === void 0 ? [] : _this$$data$_expanded;
      var node = event.node, nativeEvent = event.nativeEvent;
      var _node$eventKey = node.eventKey, eventKey = _node$eventKey === void 0 ? "" : _node$eventKey;
      var newState = {};
      var newEvent = _extends(_extends({}, event), {
        selected: true
      });
      var ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;
      var shiftPick = nativeEvent.shiftKey;
      var newSelectedKeys;
      if (multiple && ctrlPick) {
        newSelectedKeys = keys;
        this.lastSelectedKey = eventKey;
        this.cachedSelectedKeys = newSelectedKeys;
        newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);
      } else if (multiple && shiftPick) {
        newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(this.cachedSelectedKeys || []), _toConsumableArray(calcRangeKeys(children, expandedKeys2, eventKey, this.lastSelectedKey)))));
        newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);
      } else {
        newSelectedKeys = [eventKey];
        this.lastSelectedKey = eventKey;
        this.cachedSelectedKeys = newSelectedKeys;
        newEvent.selectedNodes = [event.node];
      }
      newState._selectedKeys = newSelectedKeys;
      this.$emit("update:selectedKeys", newSelectedKeys);
      this.$emit("select", newSelectedKeys, newEvent);
      this.setUncontrolledState(newState);
    },
    setTreeRef: function setTreeRef2(node) {
      this.tree = node;
    },
    expandFolderNode: function expandFolderNode(event, node) {
      var isLeaf = node.isLeaf;
      if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {
        return;
      }
      if (this.tree.tree) {
        var internalTree = this.tree.tree;
        internalTree.onNodeExpand(event, node);
      }
    },
    setUncontrolledState: function setUncontrolledState2(state) {
      var newState = omit(state, Object.keys(getOptionProps(this)).map(function(p) {
        return "_".concat(p);
      }));
      if (Object.keys(newState).length) {
        this.setState(newState);
      }
    },
    handleCheck: function handleCheck2(checkedObj, eventObj) {
      this.$emit("update:checkedKeys", checkedObj);
      this.$emit("check", checkedObj, eventObj);
    }
  },
  render: function render147() {
    var _this = this;
    this.children = getSlot(this);
    var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, props2 = __rest$7(_a, ["prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tree", customizePrefixCls);
    var _this$$data = this.$data, expandedKeys2 = _this$$data._expandedKeys, selectedKeys3 = _this$$data._selectedKeys;
    var _b = this.$attrs, className = _b.class, restAttrs = __rest$7(_b, ["class"]);
    var connectClassName = classNames("".concat(prefixCls2, "-directory"), className);
    var treeProps = _extends(_extends(_extends({
      icon: getIcon2
    }, restAttrs), omit(props2, ["onUpdate:selectedKeys", "onUpdate:checkedKeys", "onUpdate:expandedKeys"])), {
      prefixCls: prefixCls2,
      expandedKeys: expandedKeys2,
      selectedKeys: selectedKeys3,
      switcherIcon: getComponent(this, "switcherIcon"),
      ref: this.setTreeRef,
      class: connectClassName,
      onSelect: this.hanldeSelect,
      onClick: this.handleClick,
      onDblclick: this.handleDoubleClick,
      onExpand: this.handleExpand,
      onCheck: this.handleCheck
    });
    return createVNode(Tree, treeProps, _objectSpread2({
      default: function _default8() {
        return [_this.children];
      }
    }, omit(this.$slots, ["default"])));
  }
});
Tree.TreeNode.name = "ATreeNode";
Tree.DirectoryTree = DirectoryTree;
Tree.install = function(app) {
  app.component(Tree.name, Tree);
  app.component(Tree.TreeNode.name, Tree.TreeNode);
  app.component(DirectoryTree.name, DirectoryTree);
  return app;
};
var TreeNode$2 = Tree.TreeNode;
function hasClass(node, className) {
  if (node.classList) {
    return node.classList.contains(className);
  }
  var originClass = node.className;
  return " ".concat(originClass, " ").indexOf(" ".concat(className, " ")) > -1;
}
var SHOW_ALL = "SHOW_ALL";
var SHOW_PARENT = "SHOW_PARENT";
var SHOW_CHILD = "SHOW_CHILD";
function findPopupContainer(node, prefixClass) {
  var current2 = node;
  while (current2) {
    if (hasClass(current2, prefixClass)) {
      return current2;
    }
    current2 = current2.parentNode;
  }
  return null;
}
function toTitle(title2) {
  if (typeof title2 === "string") {
    return title2;
  }
  return null;
}
function toArray(data79) {
  if (data79 === void 0 || data79 === null)
    return [];
  return Array.isArray(data79) ? data79 : [data79];
}
function createRef() {
  var func = function setRef(node) {
    func.current = node;
  };
  return func;
}
var UNSELECTABLE_STYLE = {
  userSelect: "none",
  WebkitUserSelect: "none"
};
var UNSELECTABLE_ATTRIBUTE = {
  unselectable: "unselectable"
};
function flatToHierarchy(positionList) {
  if (!positionList.length) {
    return [];
  }
  var entrances = {};
  var posMap = {};
  var parsedList = positionList.slice().map(function(entity) {
    var clone = _extends(_extends({}, entity), {
      fields: entity.pos.split("-")
    });
    delete clone.children;
    return clone;
  });
  parsedList.forEach(function(entity) {
    posMap[entity.pos] = entity;
  });
  parsedList.sort(function(a, b) {
    return a.fields.length - b.fields.length;
  });
  parsedList.forEach(function(entity) {
    var parentPos = entity.fields.slice(0, -1).join("-");
    var parentEntity = posMap[parentPos];
    if (!parentEntity) {
      entrances[entity.pos] = entity;
    } else {
      parentEntity.children = parentEntity.children || [];
      parentEntity.children.push(entity);
    }
    delete entity.key;
    delete entity.fields;
  });
  return Object.keys(entrances).map(function(key2) {
    return entrances[key2];
  });
}
var ariaId = 0;
function generateAriaId(prefix) {
  ariaId += 1;
  return "".concat(prefix, "_").concat(ariaId);
}
function isLabelInValue(props2) {
  var treeCheckable = props2.treeCheckable, treeCheckStrictly = props2.treeCheckStrictly, labelInValue = props2.labelInValue;
  if (treeCheckable && treeCheckStrictly) {
    return true;
  }
  return labelInValue || false;
}
function parseSimpleTreeData(treeData, _ref) {
  var id2 = _ref.id, pId = _ref.pId, rootPId = _ref.rootPId;
  var keyNodes = {};
  var rootNodeList = [];
  var nodeList = treeData.map(function(node) {
    var clone = _extends({}, node);
    var key2 = clone[id2];
    keyNodes[key2] = clone;
    clone.key = clone.key || key2;
    return clone;
  });
  nodeList.forEach(function(node) {
    var parentKey = node[pId];
    var parent = keyNodes[parentKey];
    if (parent) {
      parent.children = parent.children || [];
      parent.children.push(node);
    }
    if (parentKey === rootPId || !parent && rootPId === null) {
      rootNodeList.push(node);
    }
  });
  return rootNodeList;
}
function isPosRelated(pos1, pos2) {
  var fields1 = pos1.split("-");
  var fields2 = pos2.split("-");
  var minLen = Math.min(fields1.length, fields2.length);
  for (var i = 0; i < minLen; i += 1) {
    if (fields1[i] !== fields2[i]) {
      return false;
    }
  }
  return true;
}
function cleanEntity(_ref2) {
  var node = _ref2.node, pos = _ref2.pos, children = _ref2.children;
  var instance = {
    node,
    pos
  };
  if (children) {
    instance.children = children.map(cleanEntity);
  }
  return instance;
}
function getFilterTree(treeNodes, searchValue2, filterFunc, valueEntities, Component) {
  if (!searchValue2) {
    return null;
  }
  function mapFilteredNodeToData(node) {
    if (!node || isEmptyElement(node))
      return null;
    var match2 = false;
    if (filterFunc(searchValue2, node)) {
      match2 = true;
    }
    var children = getSlot(node);
    children = ((typeof children === "function" ? children() : children) || []).map(mapFilteredNodeToData).filter(function(n) {
      return n;
    });
    if (children.length || match2) {
      return createVNode(Component, _objectSpread2(_objectSpread2({}, node.props), {}, {
        "key": valueEntities[getPropsData(node).value].key
      }), {
        default: function _default8() {
          return [children];
        }
      });
    }
    return null;
  }
  return treeNodes.map(mapFilteredNodeToData).filter(function(node) {
    return node;
  });
}
function formatInternalValue(value26, props2) {
  var valueList = toArray(value26);
  if (isLabelInValue(props2)) {
    return valueList.map(function(val) {
      if (_typeof(val) !== "object" || !val) {
        return {
          value: "",
          label: ""
        };
      }
      return val;
    });
  }
  return valueList.map(function(val) {
    return {
      value: val
    };
  });
}
function getLabel2(wrappedValue, entity, treeNodeLabelProp) {
  if (wrappedValue.label) {
    return wrappedValue.label;
  }
  if (entity) {
    var props2 = getPropsData(entity.node);
    if (Object.keys(props2).length) {
      return props2[treeNodeLabelProp];
    }
  }
  return wrappedValue.value;
}
function formatSelectorValue(valueList, props2, valueEntities) {
  var treeNodeLabelProp = props2.treeNodeLabelProp, treeCheckable = props2.treeCheckable, treeCheckStrictly = props2.treeCheckStrictly, showCheckedStrategy = props2.showCheckedStrategy;
  if (treeCheckable && !treeCheckStrictly) {
    var values = {};
    valueList.forEach(function(wrappedValue) {
      values[wrappedValue.value] = wrappedValue;
    });
    var hierarchyList = flatToHierarchy(valueList.map(function(_ref3) {
      var value26 = _ref3.value;
      return valueEntities[value26];
    }));
    if (showCheckedStrategy === SHOW_PARENT) {
      return hierarchyList.map(function(_ref4) {
        var node = _ref4.node;
        var value26 = getPropsData(node).value;
        return {
          label: getLabel2(values[value26], valueEntities[value26], treeNodeLabelProp),
          value: value26
        };
      });
    }
    if (showCheckedStrategy === SHOW_CHILD) {
      var targetValueList = [];
      var traverse = function traverse2(_ref5) {
        var node = _ref5.node, children = _ref5.children;
        var value26 = getPropsData(node).value;
        if (!children || children.length === 0) {
          targetValueList.push({
            label: getLabel2(values[value26], valueEntities[value26], treeNodeLabelProp),
            value: value26
          });
          return;
        }
        children.forEach(function(entity) {
          traverse2(entity);
        });
      };
      hierarchyList.forEach(function(entity) {
        traverse(entity);
      });
      return targetValueList;
    }
  }
  return valueList.map(function(wrappedValue) {
    return {
      label: getLabel2(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),
      value: wrappedValue.value
    };
  });
}
function processProps(props2) {
  var title2 = props2.title, label = props2.label, key2 = props2.key, value26 = props2.value;
  var cloneProps = _extends({}, props2);
  if (label && !title2) {
    cloneProps.title = label;
  }
  if (!key2 && (key2 === void 0 || key2 === null)) {
    cloneProps.key = value26;
  }
  return cloneProps;
}
function convertDataToTree(treeData) {
  return convertDataToTree$1(treeData, {
    processProps
  });
}
function initWrapper(wrapper) {
  return _extends(_extends({}, wrapper), {
    valueEntities: {}
  });
}
function processEntity(entity, wrapper) {
  var value26 = getPropsData(entity.node).value;
  entity.value = value26;
  var currentEntity = wrapper.valueEntities[value26];
  if (currentEntity) {
    warning_1(false, "Conflict! value of node '".concat(entity.key, "' (").concat(value26, ") has already used by node '").concat(currentEntity.key, "'."));
  }
  wrapper.valueEntities[value26] = entity;
}
function convertTreeToEntities(treeNodes) {
  return convertTreeToEntities$1(treeNodes, {
    initWrapper,
    processEntity
  });
}
function getHalfCheckedKeys(valueList, valueEntities) {
  var values = {};
  valueList.forEach(function(_ref6) {
    var value26 = _ref6.value;
    values[value26] = false;
  });
  valueList.forEach(function(_ref7) {
    var value26 = _ref7.value;
    var current2 = valueEntities[value26];
    while (current2 && current2.parent) {
      var parentValue = current2.parent.value;
      if (parentValue in values)
        break;
      values[parentValue] = true;
      current2 = current2.parent;
    }
  });
  return Object.keys(values).filter(function(value26) {
    return values[value26];
  }).map(function(value26) {
    return valueEntities[value26].key;
  });
}
var conductCheck = conductCheck$1;
var BUILT_IN_PLACEMENTS = {
  bottomLeft: {
    points: ["tl", "bl"],
    offset: [0, 4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    },
    ignoreShake: true
  },
  topLeft: {
    points: ["bl", "tl"],
    offset: [0, -4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    },
    ignoreShake: true
  }
};
var SelectTrigger = {
  name: "SelectTrigger",
  inheritAttrs: false,
  props: {
    disabled: PropsTypes.looseBool,
    showSearch: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    dropdownPopupAlign: PropsTypes.object,
    dropdownClassName: PropsTypes.string,
    dropdownStyle: PropsTypes.object,
    transitionName: PropsTypes.string,
    animation: PropsTypes.string,
    getPopupContainer: PropsTypes.func,
    dropdownMatchSelectWidth: PropsTypes.looseBool,
    isMultiple: PropsTypes.looseBool,
    dropdownPrefixCls: PropsTypes.string,
    dropdownVisibleChange: PropsTypes.func,
    popupElement: PropsTypes.any,
    open: PropsTypes.looseBool
  },
  created: function created20() {
    this.triggerRef = createRef();
  },
  methods: {
    getDropdownTransitionName: function getDropdownTransitionName() {
      var _this$$props = this.$props, transitionName2 = _this$$props.transitionName, animation2 = _this$$props.animation, dropdownPrefixCls = _this$$props.dropdownPrefixCls;
      if (!transitionName2 && animation2) {
        return "".concat(dropdownPrefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    forcePopupAlign: function forcePopupAlign2() {
      var $trigger = this.triggerRef.current;
      if ($trigger) {
        $trigger.forcePopupAlign();
      }
    }
  },
  render: function render148() {
    var _classNames, _this = this;
    var _this$$props2 = this.$props, disabled = _this$$props2.disabled, isMultiple2 = _this$$props2.isMultiple, dropdownPopupAlign = _this$$props2.dropdownPopupAlign, dropdownMatchSelectWidth = _this$$props2.dropdownMatchSelectWidth, dropdownClassName = _this$$props2.dropdownClassName, dropdownStyle = _this$$props2.dropdownStyle, dropdownVisibleChange2 = _this$$props2.dropdownVisibleChange, getPopupContainer = _this$$props2.getPopupContainer, dropdownPrefixCls = _this$$props2.dropdownPrefixCls, popupElement = _this$$props2.popupElement, open6 = _this$$props2.open;
    var stretch;
    if (dropdownMatchSelectWidth !== false) {
      stretch = dropdownMatchSelectWidth ? "width" : "minWidth";
    }
    return createVNode(Trigger, {
      "ref": this.triggerRef,
      "action": disabled ? [] : ["click"],
      "popupPlacement": "bottomLeft",
      "builtinPlacements": BUILT_IN_PLACEMENTS,
      "popupAlign": dropdownPopupAlign,
      "prefixCls": dropdownPrefixCls,
      "popupTransitionName": this.getDropdownTransitionName(),
      "onPopupVisibleChange": dropdownVisibleChange2,
      "popup": popupElement,
      "popupVisible": open6,
      "getPopupContainer": getPopupContainer,
      "stretch": stretch,
      "popupClassName": classNames(dropdownClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(dropdownPrefixCls, "--multiple"), isMultiple2), _defineProperty(_classNames, "".concat(dropdownPrefixCls, "--single"), !isMultiple2), _classNames)),
      "popupStyle": dropdownStyle
    }, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
};
var SelectTrigger$1 = SelectTrigger;
var selectorPropTypes = function selectorPropTypes2() {
  return {
    prefixCls: PropsTypes.string,
    open: PropsTypes.looseBool,
    selectorValueList: PropsTypes.array,
    allowClear: PropsTypes.looseBool,
    showArrow: PropsTypes.looseBool,
    removeSelected: PropsTypes.func,
    choiceTransitionName: PropsTypes.string,
    ariaId: PropsTypes.string,
    inputIcon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    removeIcon: PropsTypes.any,
    placeholder: PropsTypes.any,
    disabled: PropsTypes.looseBool,
    focused: PropsTypes.looseBool,
    isMultiple: PropsTypes.looseBool,
    showSearch: PropsTypes.looseBool,
    searchValue: PropsTypes.string
  };
};
function noop() {
}
function generateSelector() {
  var BaseSelector = {
    name: "BaseSelector",
    inheritAttrs: false,
    mixins: [BaseMixin],
    props: initDefaultProps$2(_extends(_extends({}, selectorPropTypes()), {
      renderSelection: PropsTypes.func.isRequired,
      renderPlaceholder: PropsTypes.func,
      tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string])
    }), {
      tabindex: 0
    }),
    setup: function setup161() {
      return {
        vcTreeSelect: inject("vcTreeSelect", {})
      };
    },
    created: function created26() {
      this.domRef = createRef();
    },
    methods: {
      onFocus: function onFocus6(e) {
        var focused = this.$props.focused;
        var onSelectorFocus2 = this.vcTreeSelect.onSelectorFocus;
        if (!focused) {
          onSelectorFocus2();
        }
        this.__emit("focus", e);
      },
      onBlur: function onBlur7(e) {
        var onSelectorBlur2 = this.vcTreeSelect.onSelectorBlur;
        onSelectorBlur2();
        this.__emit("blur", e);
      },
      focus: function focus27() {
        this.domRef.current.focus();
      },
      blur: function blur24() {
        this.domRef.current.blur();
      },
      renderClear: function renderClear() {
        var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, allowClear = _this$$props.allowClear, selectorValueList = _this$$props.selectorValueList;
        var onSelectorClear2 = this.vcTreeSelect.onSelectorClear;
        if (!allowClear || !selectorValueList.length) {
          return null;
        }
        var clearIcon = getComponent(this, "clearIcon");
        return createVNode("span", {
          "key": "clear",
          "unselectable": "on",
          "aria-hidden": "true",
          "style": "user-select: none;",
          "class": "".concat(prefixCls2, "-clear"),
          "onClick": onSelectorClear2
        }, [clearIcon]);
      },
      renderArrow: function renderArrow() {
        var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, showArrow = _this$$props2.showArrow;
        if (!showArrow) {
          return null;
        }
        var inputIcon = getComponent(this, "inputIcon");
        return createVNode("span", {
          "key": "arrow",
          "class": "".concat(prefixCls2, "-arrow"),
          "style": {
            outline: "none",
            userSelect: "none"
          }
        }, [inputIcon]);
      }
    },
    render: function render165() {
      var _classNames;
      var _this$$props3 = this.$props, prefixCls2 = _this$$props3.prefixCls, open6 = _this$$props3.open, focused = _this$$props3.focused, disabled = _this$$props3.disabled, allowClear = _this$$props3.allowClear, ariaId2 = _this$$props3.ariaId, renderSelection3 = _this$$props3.renderSelection, renderPlaceholder = _this$$props3.renderPlaceholder, tabindex = _this$$props3.tabindex, isMultiple2 = _this$$props3.isMultiple, showArrow = _this$$props3.showArrow, showSearch = _this$$props3.showSearch;
      var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style, _this$$attrs$onClick = _this$$attrs.onClick, onClick7 = _this$$attrs$onClick === void 0 ? noop : _this$$attrs$onClick;
      var onSelectorKeyDown = this.vcTreeSelect.onSelectorKeyDown;
      var myTabIndex = tabindex;
      if (disabled) {
        myTabIndex = null;
      }
      var mergedClassName = classNames(prefixCls2, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-focused"), open6 || focused), _defineProperty(_classNames, "".concat(prefixCls2, "-multiple"), isMultiple2), _defineProperty(_classNames, "".concat(prefixCls2, "-single"), !isMultiple2), _defineProperty(_classNames, "".concat(prefixCls2, "-allow-clear"), allowClear), _defineProperty(_classNames, "".concat(prefixCls2, "-show-arrow"), showArrow), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls2, "-open"), open6), _defineProperty(_classNames, "".concat(prefixCls2, "-show-search"), showSearch), _classNames));
      return createVNode("div", {
        "style": style3,
        "onClick": onClick7,
        "class": mergedClassName,
        "ref": this.domRef,
        "role": "combobox",
        "aria-expanded": open6,
        "aria-owns": open6 ? ariaId2 : void 0,
        "aria-controls": open6 ? ariaId2 : void 0,
        "aria-haspopup": "listbox",
        "aria-disabled": disabled,
        "tabindex": myTabIndex,
        "onFocus": this.onFocus,
        "onBlur": this.onBlur,
        "onKeydown": onSelectorKeyDown
      }, [createVNode("span", {
        "class": "".concat(prefixCls2, "-selector")
      }, [renderSelection3(), renderPlaceholder && renderPlaceholder()]), this.renderArrow(), this.renderClear()]);
    }
  };
  return BaseSelector;
}
var BaseInput = defineComponent({
  props: {
    value: PropsTypes.string.def("")
  },
  emits: ["change", "input"],
  setup: function setup149(_p, _ref) {
    var emit = _ref.emit;
    var inputRef = ref(null);
    var handleChange22 = function handleChange23(e) {
      var composing = e.target.composing;
      if (e.isComposing || composing) {
        emit("input", e);
      } else {
        emit("input", e);
        emit("change", e);
      }
    };
    return {
      inputRef,
      focus: function focus27() {
        if (inputRef.value) {
          inputRef.value.focus();
        }
      },
      blur: function blur24() {
        if (inputRef.value) {
          inputRef.value.blur();
        }
      },
      handleChange: handleChange22
    };
  },
  render: function render149() {
    return withDirectives(createVNode("input", _objectSpread2(_objectSpread2(_objectSpread2({}, this.$props), this.$attrs), {}, {
      "onInput": this.handleChange,
      "onChange": this.handleChange,
      "ref": "inputRef"
    }), null), [[antInput$1]]);
  }
});
var BaseInput$1 = BaseInput;
var SearchInput = {
  name: "SearchInput",
  inheritAttrs: false,
  props: {
    open: PropsTypes.looseBool,
    searchValue: PropsTypes.string,
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    renderPlaceholder: PropsTypes.func,
    needAlign: PropsTypes.looseBool,
    ariaId: PropsTypes.string,
    isMultiple: PropsTypes.looseBool.def(true),
    showSearch: PropsTypes.looseBool
  },
  emits: ["mirrorSearchValueChange"],
  setup: function setup150(props2, _ref) {
    var emit = _ref.emit;
    var measureRef = ref();
    var inputWidth = ref(0);
    var mirrorSearchValue = ref(props2.searchValue);
    watch(computed(function() {
      return props2.searchValue;
    }), function() {
      mirrorSearchValue.value = props2.searchValue;
    });
    watch(mirrorSearchValue, function() {
      emit("mirrorSearchValueChange", mirrorSearchValue.value);
    }, {
      immediate: true
    });
    onMounted(function() {
      if (props2.isMultiple) {
        watch(mirrorSearchValue, function() {
          inputWidth.value = measureRef.value.scrollWidth;
        }, {
          flush: "post",
          immediate: true
        });
      }
    });
    return {
      measureRef,
      inputWidth,
      vcTreeSelect: inject("vcTreeSelect", {}),
      mirrorSearchValue
    };
  },
  created: function created21() {
    this.inputRef = createRef();
    this.prevProps = _extends({}, this.$props);
  },
  mounted: function mounted40() {
    var _this = this;
    this.$nextTick(function() {
      var open6 = _this.$props.open;
      if (open6) {
        _this.focus(true);
      }
    });
  },
  updated: function updated25() {
    var _this2 = this;
    var open6 = this.$props.open;
    var prevProps = this.prevProps;
    this.$nextTick(function() {
      if (open6 && prevProps.open !== open6) {
        _this2.focus();
      }
      _this2.prevProps = _extends({}, _this2.$props);
    });
  },
  methods: {
    focus: function focus22(isDidMount) {
      var _this3 = this;
      if (this.inputRef.current) {
        if (isDidMount) {
          setTimeout(function() {
            _this3.inputRef.current.focus();
          }, 0);
        } else {
          this.inputRef.current.focus();
        }
      }
    },
    blur: function blur19() {
      if (this.inputRef.current) {
        this.inputRef.current.blur();
      }
    },
    handleInputChange: function handleInputChange2(e) {
      var _e$target = e.target, value26 = _e$target.value, composing = _e$target.composing;
      var _this$searchValue = this.searchValue, searchValue2 = _this$searchValue === void 0 ? "" : _this$searchValue;
      if (e.isComposing || composing || searchValue2 === value26) {
        this.mirrorSearchValue = value26;
        return;
      }
      this.vcTreeSelect.onSearchInputChange(e);
    }
  },
  render: function render150() {
    var _this$$props = this.$props, searchValue2 = _this$$props.searchValue, prefixCls2 = _this$$props.prefixCls, disabled = _this$$props.disabled, renderPlaceholder = _this$$props.renderPlaceholder, open6 = _this$$props.open, ariaId2 = _this$$props.ariaId, isMultiple2 = _this$$props.isMultiple, showSearch = _this$$props.showSearch;
    var onSearchInputKeyDown2 = this.vcTreeSelect.onSearchInputKeyDown, handleInputChange3 = this.handleInputChange, mirrorSearchValue = this.mirrorSearchValue, inputWidth = this.inputWidth;
    return createVNode(Fragment, null, [createVNode("span", {
      "class": "".concat(prefixCls2, "-selection-search"),
      "style": isMultiple2 ? {
        width: inputWidth + "px"
      } : {}
    }, [createVNode(BaseInput$1, {
      "type": "text",
      "ref": this.inputRef,
      "onChange": handleInputChange3,
      "onKeydown": onSearchInputKeyDown2,
      "value": searchValue2,
      "disabled": disabled,
      "readonly": !showSearch,
      "class": "".concat(prefixCls2, "-selection-search-input"),
      "aria-label": "filter select",
      "aria-autocomplete": "list",
      "aria-controls": open6 ? ariaId2 : void 0,
      "aria-multiline": "false"
    }, null), isMultiple2 ? createVNode("span", {
      "ref": "measureRef",
      "class": "".concat(prefixCls2, "-selection-search-mirror"),
      "aria-hidden": true
    }, [mirrorSearchValue, createTextVNode("\xA0")]) : null]), renderPlaceholder && !mirrorSearchValue ? renderPlaceholder() : null]);
  }
};
var SearchInput$1 = SearchInput;
var Selector$1 = generateSelector();
var SingleSelector = {
  name: "SingleSelector",
  inheritAttrs: false,
  props: selectorPropTypes(),
  created: function created22() {
    this.selectorRef = createRef();
    this.inputRef = createRef();
  },
  data: function data72() {
    return {
      mirrorSearchValue: this.searchValue
    };
  },
  watch: {
    searchValue: function searchValue(val) {
      this.mirrorSearchValue = val;
    }
  },
  methods: {
    onPlaceholderClick: function onPlaceholderClick() {
      this.inputRef.current.focus();
    },
    focus: function focus23() {
      this.selectorRef.current.focus();
    },
    blur: function blur20() {
      this.selectorRef.current.blur();
    },
    _renderPlaceholder: function _renderPlaceholder() {
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, placeholder = _this$$props.placeholder, searchPlaceholder = _this$$props.searchPlaceholder, selectorValueList = _this$$props.selectorValueList;
      var currentPlaceholder = placeholder || searchPlaceholder;
      if (!currentPlaceholder)
        return null;
      var hidden = this.mirrorSearchValue || selectorValueList.length;
      return createVNode("span", {
        "style": {
          display: hidden ? "none" : "block"
        },
        "onClick": this.onPlaceholderClick,
        "class": "".concat(prefixCls2, "-selection-placeholder")
      }, [currentPlaceholder]);
    },
    onMirrorSearchValueChange: function onMirrorSearchValueChange(value26) {
      this.mirrorSearchValue = value26;
    },
    renderSelection: function renderSelection() {
      var _this$$props2 = this.$props, selectorValueList = _this$$props2.selectorValueList, prefixCls2 = _this$$props2.prefixCls;
      var selectedValueNodes = [];
      if (selectorValueList.length && !this.mirrorSearchValue) {
        var _selectorValueList$ = selectorValueList[0], label = _selectorValueList$.label, value26 = _selectorValueList$.value;
        selectedValueNodes.push(createVNode("span", {
          "key": value26,
          "title": toTitle(label),
          "class": "".concat(prefixCls2, "-selection-item")
        }, [label || value26]));
      }
      selectedValueNodes.push(createVNode(SearchInput$1, _objectSpread2(_objectSpread2(_objectSpread2({}, this.$props), this.$attrs), {}, {
        "ref": this.inputRef,
        "isMultiple": false,
        "onMirrorSearchValueChange": this.onMirrorSearchValueChange
      }), null));
      return selectedValueNodes;
    }
  },
  render: function render151() {
    var props2 = _extends(_extends(_extends({}, getOptionProps(this)), this.$attrs), {
      renderSelection: this.renderSelection,
      renderPlaceholder: this._renderPlaceholder,
      ref: this.selectorRef
    });
    return createVNode(Selector$1, props2, null);
  }
};
var SingleSelector$1 = SingleSelector;
var Selection = {
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    maxTagTextLength: PropsTypes.number,
    label: PropsTypes.any,
    value: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    removeIcon: PropsTypes.any
  },
  methods: {
    onRemove: function onRemove(event) {
      var value26 = this.$props.value;
      this.__emit("remove", event, value26);
      event.stopPropagation();
    }
  },
  render: function render152() {
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, maxTagTextLength = _this$$props.maxTagTextLength, label = _this$$props.label, value26 = _this$$props.value;
    var content = label || value26;
    if (maxTagTextLength && typeof content === "string" && content.length > maxTagTextLength) {
      content = "".concat(content.slice(0, maxTagTextLength), "...");
    }
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style, onRemove2 = _this$$attrs.onRemove;
    return createVNode("span", _objectSpread2(_objectSpread2({
      "style": _extends(_extends({}, UNSELECTABLE_STYLE), style3)
    }, UNSELECTABLE_ATTRIBUTE), {}, {
      "role": "menuitem",
      "class": classNames("".concat(prefixCls2, "-selection-item"), className),
      "title": toTitle(label)
    }), [createVNode("span", {
      "class": "".concat(prefixCls2, "-selection-item-content")
    }, [content]), onRemove2 && createVNode("span", {
      "class": "".concat(prefixCls2, "-selection-item-remove"),
      "onClick": this.onRemove
    }, [getComponent(this, "removeIcon")])]);
  }
};
var Selection$1 = Selection;
var TREE_SELECT_EMPTY_VALUE_KEY = "RC_TREE_SELECT_EMPTY_VALUE_KEY";
var Selector = generateSelector();
var MultipleSelector = {
  name: "MultipleSelector",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends(_extends(_extends({}, selectorPropTypes()), SearchInput$1.props), {
    selectorValueList: PropsTypes.array,
    disabled: PropsTypes.looseBool,
    labelInValue: PropsTypes.looseBool,
    maxTagCount: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.any
  }),
  setup: function setup151() {
    return {
      vcTreeSelect: inject("vcTreeSelect", {})
    };
  },
  created: function created23() {
    this.inputRef = createRef();
  },
  methods: {
    onPlaceholderClick: function onPlaceholderClick2() {
      this.inputRef.current.focus();
    },
    focus: function focus24() {
      this.inputRef.current.focus();
    },
    blur: function blur21() {
      this.inputRef.current.blur();
    },
    _renderPlaceholder: function _renderPlaceholder2() {
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, placeholder = _this$$props.placeholder, searchPlaceholder = _this$$props.searchPlaceholder, searchValue2 = _this$$props.searchValue, selectorValueList = _this$$props.selectorValueList;
      var currentPlaceholder = placeholder || searchPlaceholder;
      if (!currentPlaceholder)
        return null;
      var hidden = searchValue2 || selectorValueList.length;
      return createVNode("span", {
        "style": {
          display: hidden ? "none" : "block"
        },
        "onClick": this.onPlaceholderClick,
        "class": "".concat(prefixCls2, "-selection-placeholder")
      }, [currentPlaceholder]);
    },
    onChoiceAnimationLeave: function onChoiceAnimationLeave() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.__emit.apply(this, ["choiceAnimationLeave"].concat(args));
    },
    renderSelection: function renderSelection2() {
      var _this = this;
      var _this$$props2 = this.$props, selectorValueList = _this$$props2.selectorValueList, labelInValue = _this$$props2.labelInValue, maxTagCount = _this$$props2.maxTagCount;
      var children = getSlot(this);
      var onMultipleSelectorRemove2 = this.vcTreeSelect.onMultipleSelectorRemove;
      var myValueList = selectorValueList;
      if (maxTagCount >= 0) {
        myValueList = selectorValueList.slice(0, maxTagCount);
      }
      var selectedValueNodes = myValueList.map(function(_ref) {
        var label = _ref.label, value26 = _ref.value;
        return createVNode(Selection$1, _objectSpread2(_objectSpread2({}, _extends(_extends({}, _this.$props), {
          label,
          value: value26,
          onRemove: onMultipleSelectorRemove2
        })), {}, {
          "key": value26 || TREE_SELECT_EMPTY_VALUE_KEY
        }), {
          default: function _default8() {
            return [children];
          }
        });
      });
      if (maxTagCount >= 0 && maxTagCount < selectorValueList.length) {
        var content = "+ ".concat(selectorValueList.length - maxTagCount, " ...");
        var maxTagPlaceholder = getComponent(this, "maxTagPlaceholder", {}, false);
        if (typeof maxTagPlaceholder === "string") {
          content = maxTagPlaceholder;
        } else if (typeof maxTagPlaceholder === "function") {
          var restValueList = selectorValueList.slice(maxTagCount);
          content = maxTagPlaceholder(labelInValue ? restValueList : restValueList.map(function(_ref2) {
            var value26 = _ref2.value;
            return value26;
          }));
        }
        var restNodeSelect = createVNode(Selection$1, _objectSpread2(_objectSpread2({}, _extends(_extends({}, this.$props), {
          label: content,
          value: null
        })), {}, {
          "key": "rc-tree-select-internal-max-tag-counter"
        }), {
          default: function _default8() {
            return [children];
          }
        });
        selectedValueNodes.push(restNodeSelect);
      }
      selectedValueNodes.push(createVNode(SearchInput$1, _objectSpread2(_objectSpread2(_objectSpread2({
        "key": "SearchInput"
      }, this.$props), this.$attrs), {}, {
        "ref": this.inputRef
      }), {
        default: function _default8() {
          return [children];
        }
      }));
      return selectedValueNodes;
    }
  },
  render: function render153() {
    var _this2 = this;
    return createVNode(Selector, _extends(_extends(_extends({}, this.$props), this.$attrs), {
      tabindex: -1,
      showArrow: false,
      renderSelection: this.renderSelection,
      renderPlaceholder: this._renderPlaceholder
    }), {
      default: function _default8() {
        return [getSlot(_this2)];
      }
    });
  }
};
var MultipleSelector$1 = MultipleSelector;
var TreeNode$1 = Tree$2.TreeNode;
function SelectNode(_, _ref) {
  var attrs = _ref.attrs, slots = _ref.slots;
  return createVNode(TreeNode$1, attrs, slots);
}
SelectNode.isTreeNode = true;
SelectNode.inheritAttrs = false;
SelectNode.displayName = "ATreeSelectNode";
function getDerivedState2(nextProps, prevState) {
  var _ref = prevState || {}, _ref$_prevProps = _ref._prevProps, prevProps = _ref$_prevProps === void 0 ? {} : _ref$_prevProps, loadedKeys = _ref._loadedKeys, expandedKeyList = _ref._expandedKeyList, cachedExpandedKeyList = _ref._cachedExpandedKeyList;
  var valueList = nextProps.valueList, valueEntities = nextProps.valueEntities, keyEntities = nextProps.keyEntities, treeExpandedKeys = nextProps.treeExpandedKeys, filteredTreeNodes = nextProps.filteredTreeNodes, upperSearchValue = nextProps.upperSearchValue;
  var newState = {
    _prevProps: _extends({}, nextProps)
  };
  if (valueList !== prevProps.valueList) {
    newState._keyList = valueList.map(function(_ref2) {
      var value26 = _ref2.value;
      return valueEntities[value26];
    }).filter(function(entity) {
      return entity;
    }).map(function(_ref3) {
      var key2 = _ref3.key;
      return key2;
    });
  }
  if (!treeExpandedKeys && filteredTreeNodes && filteredTreeNodes.length && filteredTreeNodes !== prevProps.filteredTreeNodes) {
    newState._expandedKeyList = _toConsumableArray(keyEntities.keys());
  }
  if (upperSearchValue && !prevProps.upperSearchValue) {
    newState._cachedExpandedKeyList = expandedKeyList;
  } else if (!upperSearchValue && prevProps.upperSearchValue && !treeExpandedKeys) {
    newState._expandedKeyList = cachedExpandedKeyList || [];
    newState._cachedExpandedKeyList = [];
  }
  if (prevProps.treeExpandedKeys !== treeExpandedKeys) {
    newState._expandedKeyList = treeExpandedKeys;
  }
  if (nextProps.loadData) {
    newState._loadedKeys = loadedKeys.filter(function(key2) {
      return keyEntities.has(key2);
    });
  }
  return newState;
}
var BasePopup = {
  mixins: [BaseMixin],
  inheritAttrs: false,
  name: "BasePopup",
  props: {
    prefixCls: PropsTypes.string,
    upperSearchValue: PropsTypes.string,
    valueList: PropsTypes.array,
    searchHalfCheckedKeys: PropsTypes.array,
    valueEntities: PropsTypes.object,
    keyEntities: Map,
    treeIcon: PropsTypes.looseBool,
    treeLine: PropsTypes.looseBool,
    treeNodeFilterProp: PropsTypes.string,
    treeCheckable: PropsTypes.any,
    treeCheckStrictly: PropsTypes.looseBool,
    treeDefaultExpandAll: PropsTypes.looseBool,
    treeDefaultExpandedKeys: PropsTypes.array,
    treeExpandedKeys: PropsTypes.array,
    loadData: PropsTypes.func,
    multiple: PropsTypes.looseBool,
    searchValue: PropsTypes.string,
    treeNodes: PropsTypes.any,
    filteredTreeNodes: PropsTypes.any,
    notFoundContent: PropsTypes.any,
    ariaId: PropsTypes.string,
    switcherIcon: PropsTypes.any,
    renderSearch: PropsTypes.func,
    __propsSymbol__: PropsTypes.any
  },
  setup: function setup152() {
    return {
      vcTreeSelect: inject("vcTreeSelect", {})
    };
  },
  watch: {
    __propsSymbol__: function __propsSymbol__3() {
      var state = getDerivedState2(this.$props, this.$data);
      this.setState(state);
    }
  },
  data: function data73() {
    this.treeRef = createRef();
    warning_1(this.$props.__propsSymbol__);
    var _this$$props = this.$props, treeDefaultExpandAll = _this$$props.treeDefaultExpandAll, treeDefaultExpandedKeys = _this$$props.treeDefaultExpandedKeys, keyEntities = _this$$props.keyEntities;
    var expandedKeyList = treeDefaultExpandedKeys;
    if (treeDefaultExpandAll) {
      expandedKeyList = _toConsumableArray(keyEntities.keys());
    }
    var state = {
      _keyList: [],
      _expandedKeyList: expandedKeyList,
      _cachedExpandedKeyList: [],
      _loadedKeys: [],
      _prevProps: {}
    };
    return _extends(_extends({}, state), getDerivedState2(this.$props, state));
  },
  methods: {
    onTreeExpand: function onTreeExpand(expandedKeyList) {
      var _this = this;
      var treeExpandedKeys = this.$props.treeExpandedKeys;
      if (!treeExpandedKeys) {
        this.setState({
          _expandedKeyList: expandedKeyList
        }, function() {
          _this.__emit("treeExpanded");
        });
      }
      this.__emit("treeExpand", expandedKeyList);
    },
    onLoad: function onLoad(loadedKeys) {
      this.setState({
        _loadedKeys: loadedKeys
      });
    },
    getTree: function getTree() {
      return this.treeRef.current;
    },
    getLoadData: function getLoadData() {
      var _this$$props2 = this.$props, loadData = _this$$props2.loadData, upperSearchValue = _this$$props2.upperSearchValue;
      if (upperSearchValue)
        return null;
      return loadData;
    },
    filterTreeNode: function filterTreeNode(treeNode) {
      var _this$$props3 = this.$props, upperSearchValue = _this$$props3.upperSearchValue, treeNodeFilterProp = _this$$props3.treeNodeFilterProp;
      var filterVal = treeNode[treeNodeFilterProp];
      if (typeof filterVal === "string") {
        return upperSearchValue && filterVal.toUpperCase().indexOf(upperSearchValue) !== -1;
      }
      return false;
    },
    renderNotFound: function renderNotFound() {
      var _this$$props4 = this.$props, prefixCls2 = _this$$props4.prefixCls, notFoundContent = _this$$props4.notFoundContent;
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-not-found")
      }, [notFoundContent]);
    }
  },
  render: function render154() {
    var _this$$data = this.$data, keyList = _this$$data._keyList, expandedKeyList = _this$$data._expandedKeyList, loadedKeys = _this$$data._loadedKeys;
    var _this$$props5 = this.$props, prefixCls2 = _this$$props5.prefixCls, treeNodes = _this$$props5.treeNodes, filteredTreeNodes = _this$$props5.filteredTreeNodes, treeIcon = _this$$props5.treeIcon, treeLine = _this$$props5.treeLine, treeCheckable = _this$$props5.treeCheckable, treeCheckStrictly = _this$$props5.treeCheckStrictly, multiple = _this$$props5.multiple, ariaId2 = _this$$props5.ariaId, renderSearch = _this$$props5.renderSearch, switcherIcon = _this$$props5.switcherIcon, searchHalfCheckedKeys = _this$$props5.searchHalfCheckedKeys;
    var _this$vcTreeSelect = this.vcTreeSelect, onPopupKeyDown = _this$vcTreeSelect.onPopupKeyDown, onTreeNodeSelect2 = _this$vcTreeSelect.onTreeNodeSelect, onTreeNodeCheck2 = _this$vcTreeSelect.onTreeNodeCheck;
    var loadData = this.getLoadData();
    var treeProps = {};
    if (treeCheckable) {
      treeProps.checkedKeys = keyList;
    } else {
      treeProps.selectedKeys = keyList;
    }
    var $notFound;
    var $treeNodes;
    if (filteredTreeNodes) {
      if (filteredTreeNodes.length) {
        treeProps.checkStrictly = true;
        $treeNodes = filteredTreeNodes;
        if (treeCheckable && !treeCheckStrictly) {
          treeProps.checkedKeys = {
            checked: keyList,
            halfChecked: searchHalfCheckedKeys
          };
        }
      } else {
        $notFound = this.renderNotFound();
      }
    } else if (!treeNodes || !treeNodes.length) {
      $notFound = this.renderNotFound();
    } else {
      $treeNodes = treeNodes;
    }
    var $tree;
    if ($notFound) {
      $tree = $notFound;
    } else {
      var treeAllProps = _extends(_extends({
        prefixCls: "".concat(prefixCls2, "-tree"),
        showIcon: treeIcon,
        showLine: treeLine,
        selectable: !treeCheckable,
        checkable: treeCheckable,
        checkStrictly: treeCheckStrictly,
        multiple,
        loadData,
        loadedKeys,
        expandedKeys: expandedKeyList,
        filterTreeNode: this.filterTreeNode,
        switcherIcon
      }, treeProps), {
        children: $treeNodes,
        onSelect: onTreeNodeSelect2,
        onCheck: onTreeNodeCheck2,
        onExpand: this.onTreeExpand,
        onLoad: this.onLoad
      });
      $tree = createVNode(Tree$2, _objectSpread2(_objectSpread2({}, treeAllProps), {}, {
        "ref": this.treeRef,
        "__propsSymbol__": []
      }), null);
    }
    return createVNode("div", {
      "role": "listbox",
      "id": ariaId2,
      "onKeydown": onPopupKeyDown,
      "tabindex": -1
    }, [renderSearch ? renderSearch() : null, $tree]);
  }
};
var BasePopup$1 = BasePopup;
function getWatch() {
  var keys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var watch2 = {};
  keys.forEach(function(k) {
    watch2[k] = function() {
      this.needSyncKeys[k] = true;
    };
  });
  return watch2;
}
var Select = defineComponent({
  name: "Select",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    prefixAria: PropsTypes.string,
    multiple: PropsTypes.looseBool,
    showArrow: PropsTypes.looseBool,
    open: PropsTypes.looseBool,
    value: PropsTypes.any,
    autofocus: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool,
    defaultValue: PropsTypes.any,
    showSearch: PropsTypes.looseBool,
    placeholder: PropsTypes.any,
    inputValue: PropsTypes.string,
    searchValue: PropsTypes.string,
    autoClearSearchValue: PropsTypes.looseBool,
    searchPlaceholder: PropsTypes.any,
    disabled: PropsTypes.looseBool,
    children: PropsTypes.any,
    labelInValue: PropsTypes.looseBool,
    maxTagCount: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.any,
    maxTagTextLength: PropsTypes.number,
    showCheckedStrategy: PropsTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),
    dropdownClassName: PropsTypes.string,
    dropdownStyle: PropsTypes.object,
    dropdownVisibleChange: PropsTypes.func,
    dropdownMatchSelectWidth: PropsTypes.looseBool,
    treeData: PropsTypes.array,
    treeDataSimpleMode: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    treeNodeFilterProp: PropsTypes.string,
    treeNodeLabelProp: PropsTypes.string,
    treeCheckable: PropsTypes.any,
    treeCheckStrictly: PropsTypes.looseBool,
    treeIcon: PropsTypes.looseBool,
    treeLine: PropsTypes.looseBool,
    treeDefaultExpandAll: PropsTypes.looseBool,
    treeDefaultExpandedKeys: PropsTypes.array,
    treeExpandedKeys: PropsTypes.array,
    loadData: PropsTypes.func,
    filterTreeNode: withUndefined(PropsTypes.oneOfType([PropsTypes.func, PropsTypes.looseBool])),
    notFoundContent: PropsTypes.any,
    getPopupContainer: PropsTypes.func,
    allowClear: PropsTypes.looseBool,
    transitionName: PropsTypes.string,
    animation: PropsTypes.string,
    choiceTransitionName: PropsTypes.string,
    inputIcon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    removeIcon: PropsTypes.any,
    switcherIcon: PropsTypes.any,
    __propsSymbol__: PropsTypes.any
  }, {
    prefixCls: "rc-tree-select",
    prefixAria: "rc-tree-select",
    showArrow: true,
    showSearch: true,
    autoClearSearchValue: true,
    showCheckedStrategy: SHOW_CHILD,
    treeNodeFilterProp: "value",
    treeNodeLabelProp: "title",
    treeIcon: false,
    notFoundContent: "Not Found",
    dropdownStyle: {},
    dropdownVisibleChange: function dropdownVisibleChange() {
      return true;
    }
  }),
  data: function data74() {
    warning_1(this.$props.__propsSymbol__);
    var _this$$props = this.$props, prefixAria = _this$$props.prefixAria, defaultOpen = _this$$props.defaultOpen, open6 = _this$$props.open;
    this.needSyncKeys = {};
    this.selectorRef = createRef();
    this.selectTriggerRef = createRef();
    this.ariaId = generateAriaId("".concat(prefixAria, "-list"));
    var state = {
      _open: open6 || defaultOpen,
      _valueList: [],
      _searchHalfCheckedKeys: [],
      _missValueList: [],
      _selectorValueList: [],
      _valueEntities: {},
      _posEntities: new Map(),
      _keyEntities: new Map(),
      _searchValue: "",
      _prevProps: {},
      _init: true,
      _focused: void 0,
      _treeNodes: void 0,
      _filteredTreeNodes: void 0
    };
    var newState = this.getDerivedState(this.$props, state);
    return _extends(_extends({}, state), newState);
  },
  watch: _extends(_extends({}, getWatch(["treeData", "defaultValue", "value"])), {
    __propsSymbol__: function __propsSymbol__4() {
      var state = this.getDerivedState(this.$props, this.$data);
      this.setState(state);
      this.needSyncKeys = {};
    },
    _valueList: function _valueList() {
      var _this = this;
      this.$nextTick(function() {
        _this.forcePopupAlign();
      });
    },
    _open: function _open2(open6) {
      var _this2 = this;
      this.$nextTick(function() {
        if (!open6 && !_this2.isSearchValueControlled()) {
          _this2.setState({
            _searchValue: ""
          });
        }
        if (open6 && !_this2.$data._searchValue) {
          _this2.setState({
            _filteredTreeNodes: null
          });
        }
        var prefixCls2 = _this2.$props.prefixCls;
        var _this2$$data = _this2.$data, selectorValueList = _this2$$data._selectorValueList, valueEntities = _this2$$data._valueEntities;
        var isMultiple2 = _this2.isMultiple();
        if (!isMultiple2 && selectorValueList.length && open6 && _this2.popup) {
          var value26 = selectorValueList[0].value;
          var _this2$popup$getTree = _this2.popup.getTree(), domTreeNodes = _this2$popup$getTree.domTreeNodes;
          var _ref = valueEntities[value26] || {}, key2 = _ref.key;
          var treeNode = domTreeNodes[key2];
          if (treeNode) {
            var domNode = findDOMNode(treeNode);
            requestAnimationFrame(function() {
              var popupNode = findDOMNode(_this2.popup);
              var triggerContainer = findPopupContainer(popupNode, "".concat(prefixCls2, "-dropdown"));
              if (domNode && triggerContainer) {
                scrollIntoView$1(domNode, triggerContainer, {
                  onlyScrollIfNeeded: true,
                  offsetTop: 0
                });
              }
            });
          }
        }
      });
    }
  }),
  created: function created24() {
    provide("vcTreeSelect", {
      onSelectorFocus: this.onSelectorFocus,
      onSelectorBlur: this.onSelectorBlur,
      onSelectorKeyDown: this.onComponentKeyDown,
      onSelectorClear: this.onSelectorClear,
      onMultipleSelectorRemove: this.onMultipleSelectorRemove,
      onTreeNodeSelect: this.onTreeNodeSelect,
      onTreeNodeCheck: this.onTreeNodeCheck,
      onPopupKeyDown: this.onComponentKeyDown,
      onSearchInputChange: this.onSearchInputChange,
      onSearchInputKeyDown: this.onSearchInputKeyDown
    });
  },
  mounted: function mounted41() {
    var _this3 = this;
    this.$nextTick(function() {
      var _this3$$props = _this3.$props, autofocus = _this3$$props.autofocus, disabled = _this3$$props.disabled;
      if (autofocus && !disabled) {
        _this3.focus();
      }
    });
  },
  methods: {
    getDerivedState: function getDerivedState3(nextProps, prevState) {
      var _prevState$_prevProps = prevState._prevProps, prevProps = _prevState$_prevProps === void 0 ? {} : _prevState$_prevProps;
      var treeCheckable = nextProps.treeCheckable, treeCheckStrictly = nextProps.treeCheckStrictly, filterTreeNode2 = nextProps.filterTreeNode, treeNodeFilterProp = nextProps.treeNodeFilterProp, treeDataSimpleMode = nextProps.treeDataSimpleMode;
      var newState = {
        _prevProps: _extends({}, nextProps),
        _init: false
      };
      var self = this;
      function processState(propName, updater) {
        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {
          updater(nextProps[propName], prevProps[propName]);
          return true;
        }
        return false;
      }
      var valueRefresh = false;
      processState("open", function(propValue) {
        newState._open = propValue;
      });
      var treeNodes;
      var treeDataChanged = false;
      var treeDataModeChanged = false;
      processState("treeData", function(propValue) {
        treeNodes = convertDataToTree(propValue);
        treeDataChanged = true;
      });
      processState("treeDataSimpleMode", function(propValue, prevValue) {
        if (!propValue)
          return;
        var prev3 = !prevValue || prevValue === true ? {} : prevValue;
        if (!shallowEqual$1(propValue, prev3)) {
          treeDataModeChanged = true;
        }
      });
      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {
        var simpleMapper = _extends({
          id: "id",
          pId: "pId",
          rootPId: null
        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});
        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));
      }
      if (!nextProps.treeData) {
        treeNodes = this.children || [];
      }
      if (treeNodes) {
        var entitiesMap = convertTreeToEntities(treeNodes);
        newState._treeNodes = treeNodes;
        newState._posEntities = entitiesMap.posEntities;
        newState._valueEntities = entitiesMap.valueEntities;
        newState._keyEntities = entitiesMap.keyEntities;
        valueRefresh = true;
      }
      if (prevState._init) {
        processState("defaultValue", function(propValue) {
          newState._valueList = formatInternalValue(propValue, nextProps);
          valueRefresh = true;
        });
      }
      processState("value", function(propValue) {
        newState._valueList = formatInternalValue(propValue, nextProps);
        valueRefresh = true;
      });
      if (valueRefresh) {
        var missValueList = [];
        var filteredValueList = [];
        var keyList = [];
        var latestValueList = newState._valueList;
        if (!latestValueList) {
          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));
        }
        var valueLabels = {};
        latestValueList.forEach(function(wrapperValue) {
          var value26 = wrapperValue.value, label = wrapperValue.label;
          var entity = (newState._valueEntities || prevState._valueEntities)[value26];
          valueLabels[value26] = label;
          if (entity) {
            keyList.push(entity.key);
            filteredValueList.push(wrapperValue);
            return;
          }
          missValueList.push(wrapperValue);
        });
        if (treeCheckable && !treeCheckStrictly) {
          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities), checkedKeys = _conductCheck.checkedKeys;
          newState._valueList = checkedKeys.map(function(key2) {
            var val = (newState._keyEntities || prevState._keyEntities).get(key2).value;
            var wrappedValue = {
              value: val
            };
            if (valueLabels[val] !== void 0) {
              wrappedValue.label = valueLabels[val];
            }
            return wrappedValue;
          });
        } else {
          newState._valueList = filteredValueList;
        }
        newState._missValueList = missValueList;
        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);
      }
      processState("inputValue", function(propValue) {
        if (propValue !== null) {
          newState._searchValue = propValue;
        }
      });
      processState("searchValue", function(propValue) {
        newState._searchValue = propValue;
      });
      if (newState._searchValue !== void 0 || prevState._searchValue && treeNodes) {
        var searchValue2 = newState._searchValue !== void 0 ? newState._searchValue : prevState._searchValue;
        var upperSearchValue = String(searchValue2).toUpperCase();
        var filterTreeNodeFn = filterTreeNode2;
        if (filterTreeNode2 === false) {
          filterTreeNodeFn = function filterTreeNodeFn2() {
            return true;
          };
        } else if (typeof filterTreeNodeFn !== "function") {
          filterTreeNodeFn = function filterTreeNodeFn2(_, node) {
            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();
            return nodeValue.indexOf(upperSearchValue) !== -1;
          };
        }
        newState._filteredTreeNodes = getFilterTree(newState._treeNodes || prevState._treeNodes, searchValue2, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);
      }
      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {
        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);
      }
      processState("showCheckedStrategy", function() {
        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);
      });
      return newState;
    },
    onSelectorFocus: function onSelectorFocus() {
      this.setState({
        _focused: true
      });
    },
    onSelectorBlur: function onSelectorBlur() {
      this.setState({
        _focused: false
      });
    },
    onComponentKeyDown: function onComponentKeyDown(event) {
      var open6 = this.$data._open;
      var keyCode = event.keyCode;
      if (!open6) {
        if ([KeyCode$2.ENTER, KeyCode$2.DOWN].indexOf(keyCode) !== -1) {
          this.setOpenState(true);
        }
      } else if (KeyCode$2.ESC === keyCode) {
        this.setOpenState(false);
      } else if ([KeyCode$2.UP, KeyCode$2.DOWN, KeyCode$2.LEFT, KeyCode$2.RIGHT].indexOf(keyCode) !== -1) {
        event.stopPropagation();
      }
    },
    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {
      this.__emit("deselect", wrappedValue, node, nodeEventInfo);
    },
    onSelectorClear: function onSelectorClear(event) {
      var disabled = this.$props.disabled;
      if (disabled)
        return;
      this.triggerChange([], []);
      if (!this.isSearchValueControlled()) {
        this.setUncontrolledState({
          _searchValue: "",
          _filteredTreeNodes: null
        });
      }
      event.stopPropagation();
    },
    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {
      event.stopPropagation();
      var _this$$data = this.$data, valueList = _this$$data._valueList, missValueList = _this$$data._missValueList, valueEntities = _this$$data._valueEntities;
      var _this$$props2 = this.$props, treeCheckable = _this$$props2.treeCheckable, treeCheckStrictly = _this$$props2.treeCheckStrictly, treeNodeLabelProp = _this$$props2.treeNodeLabelProp, disabled = _this$$props2.disabled;
      if (disabled)
        return;
      var triggerEntity = valueEntities[removeValue];
      var newValueList = valueList;
      if (triggerEntity) {
        if (treeCheckable && !treeCheckStrictly) {
          newValueList = valueList.filter(function(_ref2) {
            var value26 = _ref2.value;
            var entity = valueEntities[value26];
            return !isPosRelated(entity.pos, triggerEntity.pos);
          });
        } else {
          newValueList = valueList.filter(function(_ref3) {
            var value26 = _ref3.value;
            return value26 !== removeValue;
          });
        }
      }
      var triggerNode = triggerEntity ? triggerEntity.node : null;
      var extraInfo = {
        triggerValue: removeValue,
        triggerNode
      };
      var deselectInfo = {
        node: triggerNode
      };
      if (treeCheckable) {
        var filteredEntityList = newValueList.map(function(_ref4) {
          var value26 = _ref4.value;
          return valueEntities[value26];
        });
        deselectInfo.event = "check";
        deselectInfo.checked = false;
        deselectInfo.checkedNodes = filteredEntityList.map(function(_ref5) {
          var node = _ref5.node;
          return node;
        });
        deselectInfo.checkedNodesPositions = filteredEntityList.map(function(_ref6) {
          var node = _ref6.node, pos = _ref6.pos;
          return {
            node,
            pos
          };
        });
        if (treeCheckStrictly) {
          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;
        } else {
          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function(_ref7) {
            var node = _ref7.node;
            return node;
          });
        }
      } else {
        deselectInfo.event = "select";
        deselectInfo.selected = false;
        deselectInfo.selectedNodes = newValueList.map(function(_ref8) {
          var value26 = _ref8.value;
          return (valueEntities[value26] || {}).node;
        });
      }
      var newMissValueList = missValueList.filter(function(_ref9) {
        var value26 = _ref9.value;
        return value26 !== removeValue;
      });
      var wrappedValue;
      if (this.isLabelInValue()) {
        wrappedValue = {
          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,
          value: removeValue
        };
      } else {
        wrappedValue = removeValue;
      }
      this.onDeselect(wrappedValue, triggerNode, deselectInfo);
      this.triggerChange(newMissValueList, newValueList, extraInfo);
    },
    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {
      var node = nodeEventInfo.node;
      var value26 = node.$props.value;
      var _this$$data2 = this.$data, missValueList = _this$$data2._missValueList, valueEntities = _this$$data2._valueEntities, keyEntities = _this$$data2._keyEntities, searchValue2 = _this$$data2._searchValue;
      var _this$$props3 = this.$props, disabled = _this$$props3.disabled, inputValue = _this$$props3.inputValue, treeNodeLabelProp = _this$$props3.treeNodeLabelProp, treeCheckable = _this$$props3.treeCheckable, treeCheckStrictly = _this$$props3.treeCheckStrictly, autoClearSearchValue = _this$$props3.autoClearSearchValue;
      var label = node.$props[treeNodeLabelProp];
      if (disabled)
        return;
      var wrappedValue;
      if (this.isLabelInValue()) {
        wrappedValue = {
          value: value26,
          label
        };
      } else {
        wrappedValue = value26;
      }
      if (isAdd) {
        this.__emit("select", wrappedValue, node, nodeEventInfo);
      } else {
        this.__emit("deselect", wrappedValue, node, nodeEventInfo);
      }
      var newValueList = nodeList.map(function(node2) {
        var props2 = getPropsData(node2);
        return {
          value: props2.value,
          label: props2[treeNodeLabelProp]
        };
      });
      if (treeCheckable && !treeCheckStrictly) {
        var keyList = newValueList.map(function(_ref10) {
          var val = _ref10.value;
          return valueEntities[val].key;
        });
        if (isAdd) {
          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;
        } else {
          keyList = conductCheck([valueEntities[value26].key], false, keyEntities, {
            checkedKeys: keyList
          }).checkedKeys;
        }
        newValueList = keyList.map(function(key2) {
          var props2 = getPropsData(keyEntities.get(key2).node);
          return {
            value: props2.value,
            label: props2[treeNodeLabelProp]
          };
        });
      }
      if (autoClearSearchValue || inputValue === null) {
        if (!this.isSearchValueControlled()) {
          this.setUncontrolledState({
            _searchValue: "",
            _filteredTreeNodes: null
          });
        }
        if (searchValue2 && searchValue2.length) {
          this.__emit("search", "");
        }
      }
      var extraInfo = _extends(_extends({}, nodeExtraInfo), {
        triggerValue: value26,
        triggerNode: node
      });
      this.triggerChange(missValueList, newValueList, extraInfo);
    },
    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {
      var _this$$data3 = this.$data, valueList = _this$$data3._valueList, valueEntities = _this$$data3._valueEntities;
      var _this$$props4 = this.$props, treeCheckable = _this$$props4.treeCheckable, multiple = _this$$props4.multiple;
      if (treeCheckable)
        return;
      if (!multiple) {
        this.setOpenState(false);
      }
      var isAdd = nodeEventInfo.selected;
      var selectedValue6 = nodeEventInfo.node.$props.value;
      var newValueList;
      if (!multiple) {
        newValueList = [{
          value: selectedValue6
        }];
      } else {
        newValueList = valueList.filter(function(_ref11) {
          var value26 = _ref11.value;
          return value26 !== selectedValue6;
        });
        if (isAdd) {
          newValueList.push({
            value: selectedValue6
          });
        }
      }
      var selectedNodes = newValueList.map(function(_ref12) {
        var value26 = _ref12.value;
        return valueEntities[value26];
      }).filter(function(entity) {
        return entity;
      }).map(function(_ref13) {
        var node = _ref13.node;
        return node;
      });
      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {
        selected: isAdd
      });
    },
    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {
      var _this$$data4 = this.$data, searchValue2 = _this$$data4._searchValue, keyEntities = _this$$data4._keyEntities, valueEntities = _this$$data4._valueEntities, valueList = _this$$data4._valueList;
      var treeCheckStrictly = this.$props.treeCheckStrictly;
      var checkedNodes = nodeEventInfo.checkedNodes, checkedNodesPositions = nodeEventInfo.checkedNodesPositions;
      var isAdd = nodeEventInfo.checked;
      var extraInfo = {
        checked: isAdd
      };
      var checkedNodeList = checkedNodes;
      if (searchValue2) {
        var oriKeyList = valueList.map(function(_ref14) {
          var value26 = _ref14.value;
          return valueEntities[value26];
        }).filter(function(entity) {
          return entity;
        }).map(function(_ref15) {
          var key2 = _ref15.key;
          return key2;
        });
        var keyList;
        if (isAdd) {
          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function(node) {
            var _getPropsData = getPropsData(node), value26 = _getPropsData.value;
            return valueEntities[value26].key;
          })))));
        } else {
          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {
            checkedKeys: oriKeyList
          }).checkedKeys;
        }
        checkedNodeList = keyList.map(function(key2) {
          return keyEntities.get(key2).node;
        });
        extraInfo.allCheckedNodes = keyList.map(function(key2) {
          return cleanEntity(keyEntities.get(key2));
        });
      } else if (treeCheckStrictly) {
        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;
      } else {
        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);
      }
      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);
    },
    onDropdownVisibleChange: function onDropdownVisibleChange(open6) {
      var _this$$props5 = this.$props, multiple = _this$$props5.multiple, treeCheckable = _this$$props5.treeCheckable;
      var _searchValue = this.$data._searchValue;
      if (open6 && !multiple && !treeCheckable && _searchValue) {
        this.setUncontrolledState({
          _searchValue: "",
          _filteredTreeNodes: null
        });
      }
      this.setOpenState(open6, true);
    },
    onSearchInputChange: function onSearchInputChange(event) {
      var value26 = event.target.value;
      var _this$$data5 = this.$data, treeNodes = _this$$data5._treeNodes, valueEntities = _this$$data5._valueEntities;
      var _this$$props6 = this.$props, filterTreeNode2 = _this$$props6.filterTreeNode, treeNodeFilterProp = _this$$props6.treeNodeFilterProp;
      this.__emit("search", value26);
      var isSet = false;
      if (!this.isSearchValueControlled()) {
        isSet = this.setUncontrolledState({
          _searchValue: value26
        });
        this.setOpenState(true);
      }
      if (isSet) {
        var upperSearchValue = String(value26).toUpperCase();
        var filterTreeNodeFn = filterTreeNode2;
        if (filterTreeNode2 === false) {
          filterTreeNodeFn = function filterTreeNodeFn2() {
            return true;
          };
        } else if (!filterTreeNodeFn) {
          filterTreeNodeFn = function filterTreeNodeFn2(_, node) {
            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();
            return nodeValue.indexOf(upperSearchValue) !== -1;
          };
        }
        this.setState({
          _filteredTreeNodes: getFilterTree(treeNodes, value26, filterTreeNodeFn, valueEntities, SelectNode)
        });
      }
    },
    onSearchInputKeyDown: function onSearchInputKeyDown(event) {
      var _this$$data6 = this.$data, searchValue2 = _this$$data6._searchValue, valueList = _this$$data6._valueList, valueEntities = _this$$data6._valueEntities;
      var keyCode = event.keyCode;
      if (KeyCode$2.BACKSPACE === keyCode && this.isMultiple() && !searchValue2 && valueList.length) {
        var lastValue = valueList[valueList.length - 1].value;
        var treeCheckStrictly = this.$props.treeCheckStrictly;
        if (!treeCheckStrictly) {
          (function() {
            var cur = valueEntities[lastValue];
            while (cur) {
              if (valueList.some(function(j) {
                return j.value === cur.value;
              })) {
                lastValue = cur.value;
                cur = cur.parent;
              } else {
                cur = null;
              }
            }
          })();
        }
        this.onMultipleSelectorRemove(event, lastValue);
      }
    },
    onChoiceAnimationLeave: function onChoiceAnimationLeave2() {
      var _this4 = this;
      requestAnimationFrame(function() {
        _this4.forcePopupAlign();
      });
    },
    setPopupRef: function setPopupRef(popup) {
      this.popup = popup;
    },
    setUncontrolledState: function setUncontrolledState3(state) {
      var needSync = false;
      var newState = {};
      var props2 = getOptionProps(this);
      Object.keys(state).forEach(function(name2) {
        if (name2.slice(1) in props2)
          return;
        needSync = true;
        newState[name2] = state[name2];
      });
      if (needSync) {
        this.setState(newState);
      }
      return needSync;
    },
    setOpenState: function setOpenState(open6) {
      var byTrigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var dropdownVisibleChange2 = this.$props.dropdownVisibleChange;
      if (dropdownVisibleChange2 && dropdownVisibleChange2(open6, {
        documentClickClose: !open6 && byTrigger
      }) === false) {
        return;
      }
      this.setUncontrolledState({
        _open: open6
      });
    },
    isMultiple: function isMultiple() {
      var _this$$props7 = this.$props, multiple = _this$$props7.multiple, treeCheckable = _this$$props7.treeCheckable;
      return !!(multiple || treeCheckable);
    },
    isLabelInValue: function isLabelInValue$1() {
      return isLabelInValue(this.$props);
    },
    isSearchValueControlled: function isSearchValueControlled() {
      var props2 = getOptionProps(this);
      var inputValue = props2.inputValue;
      if ("searchValue" in props2)
        return true;
      return "inputValue" in props2 && inputValue !== null;
    },
    forcePopupAlign: function forcePopupAlign3() {
      var $trigger = this.selectTriggerRef.current;
      if ($trigger) {
        $trigger.forcePopupAlign();
      }
    },
    delayForcePopupAlign: function delayForcePopupAlign() {
      var _this5 = this;
      requestAnimationFrame(function() {
        requestAnimationFrame(_this5.forcePopupAlign);
      });
    },
    triggerChange: function triggerChange4(missValueList, valueList) {
      var extraInfo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var _this$$data7 = this.$data, valueEntities = _this$$data7._valueEntities, searchValue2 = _this$$data7._searchValue, prevSelectorValueList = _this$$data7._selectorValueList;
      var props2 = getOptionProps(this);
      var disabled = props2.disabled, treeCheckable = props2.treeCheckable, treeCheckStrictly = props2.treeCheckStrictly;
      if (disabled)
        return;
      var extra = _extends({
        preValue: prevSelectorValueList.map(function(_ref16) {
          var label = _ref16.label, value26 = _ref16.value;
          return {
            label,
            value: value26
          };
        })
      }, extraInfo);
      var selectorValueList = formatSelectorValue(valueList, props2, valueEntities);
      if (!("value" in props2)) {
        var newState = {
          _missValueList: missValueList,
          _valueList: valueList,
          _selectorValueList: selectorValueList
        };
        if (searchValue2 && treeCheckable && !treeCheckStrictly) {
          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);
        }
        this.setState(newState);
      }
      if (this.$attrs.onChange) {
        var connectValueList;
        if (this.isMultiple()) {
          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));
        } else {
          connectValueList = selectorValueList.slice(0, 1);
        }
        var labelList = null;
        var returnValue;
        if (this.isLabelInValue()) {
          returnValue = connectValueList.map(function(_ref17) {
            var label = _ref17.label, value26 = _ref17.value;
            return {
              label,
              value: value26
            };
          });
        } else {
          labelList = [];
          returnValue = connectValueList.map(function(_ref18) {
            var label = _ref18.label, value26 = _ref18.value;
            labelList.push(label);
            return value26;
          });
        }
        if (!this.isMultiple()) {
          returnValue = returnValue[0];
        }
        this.__emit("change", returnValue, labelList, extra);
      }
    },
    focus: function focus25() {
      this.selectorRef.current.focus();
    },
    blur: function blur22() {
      this.selectorRef.current.blur();
    }
  },
  render: function render155() {
    var _this$$data8 = this.$data, valueList = _this$$data8._valueList, missValueList = _this$$data8._missValueList, selectorValueList = _this$$data8._selectorValueList, searchHalfCheckedKeys = _this$$data8._searchHalfCheckedKeys, valueEntities = _this$$data8._valueEntities, keyEntities = _this$$data8._keyEntities, searchValue2 = _this$$data8._searchValue, open6 = _this$$data8._open, focused = _this$$data8._focused, treeNodes = _this$$data8._treeNodes, filteredTreeNodes = _this$$data8._filteredTreeNodes;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, treeExpandedKeys = props2.treeExpandedKeys;
    var isMultiple2 = this.isMultiple();
    var passProps = _extends(_extends(_extends({}, props2), this.$attrs), {
      isMultiple: isMultiple2,
      valueList,
      searchHalfCheckedKeys,
      selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),
      valueEntities,
      keyEntities,
      searchValue: searchValue2,
      upperSearchValue: (searchValue2 || "").toUpperCase(),
      open: open6,
      focused,
      dropdownPrefixCls: "".concat(prefixCls2, "-dropdown"),
      ariaId: this.ariaId,
      onChoiceAnimationLeave: this.onChoiceAnimationLeave,
      vSlots: this.$slots
    });
    var popupProps = _extends(_extends({}, passProps), {
      treeNodes,
      filteredTreeNodes,
      treeExpandedKeys,
      onTreeExpanded: this.delayForcePopupAlign,
      ref: this.setPopupRef
    });
    var $popup = createVNode(BasePopup$1, _objectSpread2(_objectSpread2({}, popupProps), {}, {
      "__propsSymbol__": []
    }), null);
    var Selector2 = isMultiple2 ? MultipleSelector$1 : SingleSelector$1;
    var $selector = createVNode(Selector2, _objectSpread2(_objectSpread2({}, passProps), {}, {
      "isMultiple": isMultiple2,
      "ref": this.selectorRef
    }), null);
    var selectTriggerProps = _extends(_extends({}, passProps), {
      popupElement: $popup,
      dropdownVisibleChange: this.onDropdownVisibleChange,
      ref: this.selectTriggerRef
    });
    return createVNode(SelectTrigger$1, selectTriggerProps, {
      default: function _default8() {
        return [$selector];
      }
    });
  }
});
Select.TreeNode = SelectNode;
Select.SHOW_ALL = SHOW_ALL;
Select.SHOW_PARENT = SHOW_PARENT;
Select.SHOW_CHILD = SHOW_CHILD;
Select.name = "TreeSelect";
var Select$1 = Select;
var TreeNode = SelectNode;
PropsTypes.shape({
  key: PropsTypes.string,
  value: PropsTypes.string,
  label: PropsTypes.VNodeChild,
  slots: PropsTypes.object,
  children: PropsTypes.array
}).loose;
var TreeSelectProps = function TreeSelectProps2() {
  return _extends(_extends({}, SelectProps()), {
    autofocus: PropsTypes.looseBool,
    dropdownStyle: PropsTypes.object,
    filterTreeNode: withUndefined(PropsTypes.oneOfType([Function, Boolean])),
    getPopupContainer: PropsTypes.func,
    labelInValue: PropsTypes.looseBool,
    loadData: PropsTypes.func,
    maxTagCount: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.VNodeChild,
    value: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object, PropsTypes.array, PropsTypes.number]),
    defaultValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object, PropsTypes.array, PropsTypes.number]),
    multiple: PropsTypes.looseBool,
    notFoundContent: PropsTypes.VNodeChild,
    searchPlaceholder: PropsTypes.string,
    searchValue: PropsTypes.string,
    showCheckedStrategy: PropsTypes.oneOf(tuple("SHOW_ALL", "SHOW_PARENT", "SHOW_CHILD")),
    suffixIcon: PropsTypes.VNodeChild,
    treeCheckable: PropsTypes.looseBool,
    treeCheckStrictly: PropsTypes.looseBool,
    treeData: PropsTypes.arrayOf(Object),
    treeDataSimpleMode: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, Object])),
    dropdownClassName: PropsTypes.string,
    dropdownMatchSelectWidth: PropsTypes.looseBool,
    treeDefaultExpandAll: PropsTypes.looseBool,
    treeExpandedKeys: PropsTypes.array,
    treeIcon: PropsTypes.looseBool,
    treeDefaultExpandedKeys: PropsTypes.array,
    treeNodeFilterProp: PropsTypes.string,
    treeNodeLabelProp: PropsTypes.string,
    replaceFields: PropsTypes.object.def({}),
    clearIcon: PropsTypes.VNodeChild,
    removeIcon: PropsTypes.VNodeChild,
    onSelect: PropsTypes.func,
    onChange: PropsTypes.func,
    onSearch: PropsTypes.func,
    onTreeExpand: PropsTypes.func,
    "onUpdate:treeExpandedKeys": PropsTypes.func,
    "onUpdate:searchValue": PropsTypes.func,
    "onUpdate:value": PropsTypes.func
  });
};
var __rest$6 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function convertChildrenToData(nodes) {
  return flattenChildren(nodes).map(function(node) {
    if (!isValidElement(node) || !node.type) {
      return null;
    }
    var _a = node.children || {}, d = _a.default, restSlot = __rest$6(_a, ["default"]);
    var children = d ? d() : [];
    var key2 = node.key, _b = node.props, value26 = _b.value, restProps = __rest$6(_b, ["value"]);
    var data79 = _extends({
      key: key2,
      value: value26
    }, restProps);
    Object.keys(restSlot).forEach(function(p) {
      if (typeof restSlot[p] === "function") {
        data79[p] = createVNode(Fragment, null, [restSlot[p]()]);
      }
    });
    var childData = convertChildrenToData(children);
    if (childData.length) {
      data79.children = childData;
    }
    return data79;
  }).filter(function(data79) {
    return data79;
  });
}
var __rest$5 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var TreeSelect = defineComponent({
  TreeNode,
  SHOW_ALL,
  SHOW_PARENT,
  SHOW_CHILD,
  name: "ATreeSelect",
  inheritAttrs: false,
  props: initDefaultProps$1(TreeSelectProps(), {
    transitionName: "slide-up",
    choiceTransitionName: ""
  }),
  setup: function setup153() {
    return {
      vcTreeSelect: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  created: function created25() {
    warning$1(this.multiple !== false || !this.treeCheckable, "TreeSelect", "`multiple` will alway be `true` when `treeCheckable` is true");
  },
  methods: {
    saveTreeSelect: function saveTreeSelect(node) {
      this.vcTreeSelect = node;
    },
    focus: function focus26() {
      this.vcTreeSelect.focus();
    },
    blur: function blur23() {
      this.vcTreeSelect.blur();
    },
    renderSwitcherIcon: function renderSwitcherIcon2(prefixCls2, _ref) {
      var isLeaf = _ref.isLeaf, loading = _ref.loading;
      if (loading) {
        return createVNode(LoadingOutlined, {
          "class": "".concat(prefixCls2, "-switcher-loading-icon")
        }, null);
      }
      if (isLeaf) {
        return null;
      }
      return createVNode(CaretDownOutlined, {
        "class": "".concat(prefixCls2, "-switcher-icon")
      }, null);
    },
    handleChange: function handleChange20() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit("update:value", args[0]);
      this.$emit.apply(this, ["change"].concat(args));
    },
    handleTreeExpand: function handleTreeExpand() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      this.$emit("update:treeExpandedKeys", args[0]);
      this.$emit.apply(this, ["treeExpand"].concat(args));
    },
    handleSearch: function handleSearch2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this.$emit("update:searchValue", args[0]);
      this.$emit.apply(this, ["search"].concat(args));
    },
    updateTreeData: function updateTreeData2(treeData) {
      var _this = this;
      var $slots = this.$slots;
      var defaultFields = {
        children: "children",
        title: "title",
        key: "key",
        label: "label",
        value: "value"
      };
      var replaceFields = _extends(_extends({}, defaultFields), this.$props.replaceFields);
      return treeData.map(function(item) {
        var _item$slots = item.slots, slots = _item$slots === void 0 ? {} : _item$slots;
        var label = item[replaceFields.label];
        var title2 = item[replaceFields.title];
        var value26 = item[replaceFields.value];
        var key2 = item[replaceFields.key];
        var children = item[replaceFields.children];
        var newLabel = typeof label === "function" ? label() : label;
        var newTitle = typeof title2 === "function" ? title2() : title2;
        if (!newLabel && slots.label && $slots[slots.label]) {
          newLabel = createVNode(Fragment, null, [$slots[slots.label](item)]);
        }
        if (!newTitle && slots.title && $slots[slots.title]) {
          newTitle = createVNode(Fragment, null, [$slots[slots.title](item)]);
        }
        var treeNodeProps = _extends(_extends({}, item), {
          title: newTitle || newLabel,
          value: value26,
          dataRef: item,
          key: key2
        });
        if (children) {
          return _extends(_extends({}, treeNodeProps), {
            children: _this.updateTreeData(children)
          });
        }
        return treeNodeProps;
      });
    }
  },
  render: function render156() {
    var _cls, _this2 = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, size = props2.size, dropdownStyle = props2.dropdownStyle, dropdownClassName = props2.dropdownClassName, getPopupContainer = props2.getPopupContainer, restProps = __rest$5(props2, ["prefixCls", "size", "dropdownStyle", "dropdownClassName", "getPopupContainer"]);
    var className = this.$attrs.class;
    var _this$configProvider = this.configProvider, renderEmpty2 = _this$configProvider.renderEmpty, getPrefixCls2 = _this$configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("select", customizePrefixCls);
    var notFoundContent = getComponent(this, "notFoundContent");
    var removeIcon = getComponent(this, "removeIcon");
    var clearIcon = getComponent(this, "clearIcon");
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var rest = omit(restProps, ["inputIcon", "removeIcon", "clearIcon", "switcherIcon", "suffixIcon"]);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var treeData = props2.treeData;
    if (treeData) {
      treeData = this.updateTreeData(treeData);
    }
    var cls = (_cls = {}, _defineProperty(_cls, "".concat(prefixCls2, "-lg"), size === "large"), _defineProperty(_cls, "".concat(prefixCls2, "-sm"), size === "small"), _defineProperty(_cls, className, className), _cls);
    var showSearch = restProps.showSearch;
    if (!("showSearch" in restProps)) {
      showSearch = !!(restProps.multiple || restProps.treeCheckable);
    }
    var checkable = getComponent(this, "treeCheckable");
    if (checkable) {
      checkable = createVNode("span", {
        "class": "".concat(prefixCls2, "-tree-checkbox-inner")
      }, null);
    }
    var inputIcon = suffixIcon || createVNode(DownOutlined, {
      "class": "".concat(prefixCls2, "-arrow-icon")
    }, null);
    var finalRemoveIcon = removeIcon || createVNode(CloseOutlined, {
      "class": "".concat(prefixCls2, "-remove-icon")
    }, null);
    var finalClearIcon = clearIcon || createVNode(CloseCircleFilled, {
      "class": "".concat(prefixCls2, "-clear-icon")
    }, null);
    var VcTreeSelectProps = _extends(_extends(_extends(_extends({}, this.$attrs), {
      switcherIcon: function switcherIcon(nodeProps) {
        return _this2.renderSwitcherIcon(prefixCls2, nodeProps);
      },
      inputIcon,
      removeIcon: finalRemoveIcon,
      clearIcon: finalClearIcon
    }), rest), {
      showSearch,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      dropdownClassName: classNames(dropdownClassName, "".concat(prefixCls2, "-tree-dropdown")),
      prefixCls: prefixCls2,
      dropdownStyle: _extends({
        maxHeight: "100vh",
        overflow: "auto"
      }, dropdownStyle),
      treeCheckable: checkable,
      notFoundContent: notFoundContent || renderEmpty2("Select"),
      class: cls,
      onChange: this.handleChange,
      onSearch: this.handleSearch,
      onTreeExpand: this.handleTreeExpand,
      ref: this.saveTreeSelect,
      treeData: treeData ? treeData : convertChildrenToData(getSlot(this))
    });
    return createVNode(Select$1, _objectSpread2(_objectSpread2({}, VcTreeSelectProps), {}, {
      "__propsSymbol__": []
    }), omit(this.$slots, ["default"]));
  }
});
TreeSelect.install = function(app) {
  app.component(TreeSelect.name, TreeSelect);
  app.component(TreeSelect.TreeNode.displayName, TreeSelect.TreeNode);
  return app;
};
var TreeSelectNode = TreeSelect.TreeNode;
var TreeSelect$1 = TreeSelect;
var timelineItemProps = {
  prefixCls: PropsTypes.string,
  color: PropsTypes.string,
  dot: PropsTypes.any,
  pending: PropsTypes.looseBool,
  position: PropsTypes.oneOf(tuple("left", "right", "")).def("")
};
var TimelineItem = defineComponent({
  name: "ATimelineItem",
  props: initDefaultProps$1(timelineItemProps, {
    color: "blue",
    pending: false
  }),
  setup: function setup154() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render157() {
    var _classNames, _classNames2;
    var _a, _b;
    var _getOptionProps = getOptionProps(this), customizePrefixCls = _getOptionProps.prefixCls, _getOptionProps$color = _getOptionProps.color, color = _getOptionProps$color === void 0 ? "" : _getOptionProps$color, pending = _getOptionProps.pending;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("timeline", customizePrefixCls);
    var dot = getComponent(this, "dot");
    var itemClassName = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-item"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-item-pending"), pending), _classNames));
    var dotClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-item-head"), true), _defineProperty(_classNames2, "".concat(prefixCls2, "-item-head-custom"), dot), _defineProperty(_classNames2, "".concat(prefixCls2, "-item-head-").concat(color), true), _classNames2));
    return createVNode("li", {
      "class": itemClassName
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-item-tail")
    }, null), createVNode("div", {
      "class": dotClassName,
      "style": {
        borderColor: /blue|red|green|gray/.test(color) ? void 0 : color
      }
    }, [dot]), createVNode("div", {
      "class": "".concat(prefixCls2, "-item-content")
    }, [(_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)])]);
  }
});
var timelineProps = {
  prefixCls: PropsTypes.string,
  pending: PropsTypes.any,
  pendingDot: PropsTypes.string,
  reverse: PropsTypes.looseBool,
  mode: PropsTypes.oneOf(tuple("left", "alternate", "right", ""))
};
var Timeline = defineComponent({
  name: "ATimeline",
  props: initDefaultProps$1(timelineProps, {
    reverse: false,
    mode: ""
  }),
  setup: function setup155() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render158() {
    var _classNames;
    var _a, _b;
    var _getOptionProps = getOptionProps(this), customizePrefixCls = _getOptionProps.prefixCls, reverse = _getOptionProps.reverse, mode4 = _getOptionProps.mode;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("timeline", customizePrefixCls);
    var pendingDot = getComponent(this, "pendingDot");
    var pending = getComponent(this, "pending");
    var pendingNode = typeof pending === "boolean" ? null : pending;
    var classString = classNames(prefixCls2, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-pending"), !!pending), _defineProperty(_classNames, "".concat(prefixCls2, "-reverse"), !!reverse), _defineProperty(_classNames, "".concat(prefixCls2, "-").concat(mode4), !!mode4), _classNames));
    var children = filterEmpty((_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a));
    var pendingItem = pending ? createVNode(TimelineItem, {
      "pending": !!pending,
      "dot": pendingDot || createVNode(LoadingOutlined, null, null)
    }, {
      default: function _default8() {
        return [pendingNode];
      }
    }) : null;
    var timeLineItems = reverse ? [pendingItem].concat(_toConsumableArray(children.reverse())) : [].concat(_toConsumableArray(children), [pendingItem]);
    var getPositionCls = function getPositionCls2(ele, idx) {
      var eleProps = getPropsData(ele);
      if (mode4 === "alternate") {
        if (eleProps.position === "right")
          return "".concat(prefixCls2, "-item-right");
        if (eleProps.position === "left")
          return "".concat(prefixCls2, "-item-left");
        return idx % 2 === 0 ? "".concat(prefixCls2, "-item-left") : "".concat(prefixCls2, "-item-right");
      }
      if (mode4 === "left")
        return "".concat(prefixCls2, "-item-left");
      if (mode4 === "right")
        return "".concat(prefixCls2, "-item-right");
      if (eleProps.position === "right")
        return "".concat(prefixCls2, "-item-right");
      return "";
    };
    var truthyItems = timeLineItems.filter(function(item) {
      return !!item;
    });
    var itemsCount = truthyItems.length;
    var lastCls = "".concat(prefixCls2, "-item-last");
    var items = truthyItems.map(function(ele, idx) {
      var pendingClass = idx === itemsCount - 2 ? lastCls : "";
      var readyClass = idx === itemsCount - 1 ? lastCls : "";
      return cloneVNode(ele, {
        class: classNames([!reverse && !!pending ? pendingClass : readyClass, getPositionCls(ele, idx)])
      });
    });
    return createVNode("ul", {
      "class": classString
    }, [items]);
  }
});
Timeline.Item = TimelineItem;
Timeline.install = function(app) {
  app.component(Timeline.name, Timeline);
  app.component(TimelineItem.name, TimelineItem);
  return app;
};
var Editable = defineComponent({
  name: "Editable",
  props: {
    prefixCls: PropsTypes.string,
    value: PropsTypes.string,
    maxlength: PropsTypes.number,
    autoSize: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    onSave: PropsTypes.func,
    onCancel: PropsTypes.func,
    onEnd: PropsTypes.func,
    onChange: PropsTypes.func,
    originContent: PropsTypes.string
  },
  emits: ["save", "cancel", "end", "change"],
  setup: function setup156(props2, _ref) {
    var emit = _ref.emit;
    var state = reactive({
      current: props2.value || "",
      lastKeyCode: void 0,
      inComposition: false,
      cancelFlag: false
    });
    watch(function() {
      return props2.value;
    }, function(current2) {
      state.current = current2;
    });
    var textArea = ref();
    onMounted(function() {
      var _a;
      if (textArea.value) {
        var resizableTextArea = (_a = textArea.value) === null || _a === void 0 ? void 0 : _a.resizableTextArea;
        var innerTextArea = resizableTextArea === null || resizableTextArea === void 0 ? void 0 : resizableTextArea.textArea;
        innerTextArea.focus();
        var length = innerTextArea.value.length;
        innerTextArea.setSelectionRange(length, length);
      }
    });
    function saveTextAreaRef(node) {
      textArea.value = node;
    }
    function onChange9(_ref2) {
      var value26 = _ref2.target.value;
      state.current = value26.replace(/[\r\n]/g, "");
      emit("change", state.current);
    }
    function onCompositionStart2() {
      state.inComposition = true;
    }
    function onCompositionEnd2() {
      state.inComposition = false;
    }
    function onKeyDown14(e) {
      var keyCode = e.keyCode;
      if (keyCode === KeyCode$2.ENTER) {
        e.preventDefault();
      }
      if (state.inComposition)
        return;
      state.lastKeyCode = keyCode;
    }
    function onKeyUp3(e) {
      var keyCode = e.keyCode, ctrlKey = e.ctrlKey, altKey = e.altKey, metaKey = e.metaKey, shiftKey = e.shiftKey;
      if (state.lastKeyCode === keyCode && !state.inComposition && !ctrlKey && !altKey && !metaKey && !shiftKey) {
        if (keyCode === KeyCode$2.ENTER) {
          confirmChange();
          emit("end");
        } else if (keyCode === KeyCode$2.ESC) {
          state.current = props2.originContent;
          emit("cancel");
        }
      }
    }
    function onBlur7() {
      confirmChange();
      emit("end");
    }
    function confirmChange() {
      emit("save", state.current.trim());
    }
    return function() {
      return createVNode("div", {
        "class": "".concat(props2.prefixCls, " ").concat(props2.prefixCls, "-edit-content")
      }, [createVNode(TextArea, {
        "ref": saveTextAreaRef,
        "maxlength": props2.maxlength,
        "value": state.current,
        "onChange": onChange9,
        "onKeydown": onKeyDown14,
        "onKeyup": onKeyUp3,
        "onCompositionstart": onCompositionStart2,
        "onCompositionend": onCompositionEnd2,
        "onBlur": onBlur7,
        "autoSize": props2.autoSize === void 0 || props2.autoSize
      }, null), createVNode(EnterOutlined, {
        "class": "".concat(props2.prefixCls, "-edit-content-confirm")
      }, null)]);
    };
  }
});
var Editable$1 = Editable;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var ellipsisContainer;
var wrapperStyle = {
  padding: 0,
  margin: 0,
  display: "inline",
  lineHeight: "inherit"
};
function pxToNumber(value26) {
  if (!value26)
    return 0;
  var match2 = value26.match(/^\d*(\.\d*)?/);
  return match2 ? Number(match2[0]) : 0;
}
function styleToString(style3) {
  var styleNames = Array.prototype.slice.apply(style3);
  return styleNames.map(function(name2) {
    return "".concat(name2, ": ").concat(style3.getPropertyValue(name2), ";");
  }).join("");
}
var measure = function(originEle, option, content, fixedContent, ellipsisStr) {
  if (!ellipsisContainer) {
    ellipsisContainer = document.createElement("div");
    ellipsisContainer.setAttribute("aria-hidden", "true");
    document.body.appendChild(ellipsisContainer);
  }
  var rows = option.rows, _option$suffix = option.suffix, suffix = _option$suffix === void 0 ? "" : _option$suffix;
  var originStyle = window.getComputedStyle(originEle);
  var originCSS = styleToString(originStyle);
  var lineHeight = pxToNumber(originStyle.lineHeight);
  var maxHeight = Math.round(lineHeight * (rows + 1) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom));
  ellipsisContainer.setAttribute("style", originCSS);
  ellipsisContainer.style.position = "fixed";
  ellipsisContainer.style.left = "0";
  ellipsisContainer.style.height = "auto";
  ellipsisContainer.style.minHeight = "auto";
  ellipsisContainer.style.maxHeight = "auto";
  ellipsisContainer.style.top = "-999999px";
  ellipsisContainer.style.zIndex = "-1000";
  ellipsisContainer.style.textOverflow = "clip";
  ellipsisContainer.style.whiteSpace = "normal";
  ellipsisContainer.style.webkitLineClamp = "none";
  var vm = createApp({
    render: function render165() {
      return createVNode("div", {
        "style": wrapperStyle
      }, [createVNode("span", {
        "style": wrapperStyle
      }, [content, suffix]), createVNode("span", {
        "style": wrapperStyle
      }, [fixedContent])]);
    }
  });
  vm.mount(ellipsisContainer);
  function inRange() {
    return ellipsisContainer.offsetHeight < maxHeight;
  }
  if (inRange()) {
    vm.unmount();
    return {
      content,
      text: ellipsisContainer.innerHTML,
      ellipsis: false
    };
  }
  var childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(function(_ref) {
    var nodeType = _ref.nodeType, data79 = _ref.data;
    return nodeType !== COMMENT_NODE && data79 !== "";
  });
  var fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);
  vm.unmount();
  var ellipsisChildren = [];
  ellipsisContainer.innerHTML = "";
  var ellipsisContentHolder = document.createElement("span");
  ellipsisContainer.appendChild(ellipsisContentHolder);
  var ellipsisTextNode = document.createTextNode(ellipsisStr + suffix);
  ellipsisContentHolder.appendChild(ellipsisTextNode);
  fixedNodes.forEach(function(childNode) {
    ellipsisContainer.appendChild(childNode);
  });
  function appendChildNode(node) {
    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);
  }
  function measureText(textNode, fullText) {
    var startLoc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var endLoc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : fullText.length;
    var lastSuccessLoc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    var midLoc = Math.floor((startLoc + endLoc) / 2);
    var currentText = fullText.slice(0, midLoc);
    textNode.textContent = currentText;
    if (startLoc >= endLoc - 1) {
      for (var step = endLoc; step >= startLoc; step -= 1) {
        var currentStepText = fullText.slice(0, step);
        textNode.textContent = currentStepText;
        if (inRange() || !currentStepText) {
          return step === fullText.length ? {
            finished: false,
            vNode: fullText
          } : {
            finished: true,
            vNode: currentStepText
          };
        }
      }
    }
    if (inRange()) {
      return measureText(textNode, fullText, midLoc, endLoc, midLoc);
    }
    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);
  }
  function measureNode(childNode) {
    var type2 = childNode.nodeType;
    if (type2 === TEXT_NODE) {
      var fullText = childNode.textContent || "";
      var textNode = document.createTextNode(fullText);
      appendChildNode(textNode);
      return measureText(textNode, fullText);
    }
    return {
      finished: false,
      vNode: null
    };
  }
  childNodes.some(function(childNode) {
    var _measureNode = measureNode(childNode), finished = _measureNode.finished, vNode = _measureNode.vNode;
    if (vNode) {
      ellipsisChildren.push(vNode);
    }
    return finished;
  });
  return {
    content: ellipsisChildren,
    text: ellipsisContainer.innerHTML,
    ellipsis: true
  };
};
var __rest$4 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Typography = defineComponent({
  name: "ATypography",
  inheritAttrs: false,
  setup: function setup157(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("typography", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      var _b = _extends(_extends({}, props2), attrs);
      _b.prefixCls;
      _b.class;
      var _b$component = _b.component, Component = _b$component === void 0 ? "article" : _b$component, restProps = __rest$4(_b, ["prefixCls", "class", "component"]);
      return createVNode(Component, _objectSpread2({
        "class": classNames(prefixCls2.value, attrs.class)
      }, restProps), {
        default: function _default8() {
          return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
        }
      });
    };
  }
});
Typography.props = {
  prefixCls: PropsTypes.string,
  component: PropsTypes.string
};
var Typography$1 = Typography;
var deselectCurrent = function deselectCurrent2() {
  var selection = document.getSelection();
  if (!selection.rangeCount) {
    return function() {
    };
  }
  var active = document.activeElement;
  var ranges = [];
  for (var i = 0; i < selection.rangeCount; i++) {
    ranges.push(selection.getRangeAt(i));
  }
  switch (active.tagName.toUpperCase()) {
    case "INPUT":
    case "TEXTAREA":
      active.blur();
      break;
    default:
      active = null;
      break;
  }
  selection.removeAllRanges();
  return function() {
    selection.type === "Caret" && selection.removeAllRanges();
    if (!selection.rangeCount) {
      ranges.forEach(function(range) {
        selection.addRange(range);
      });
    }
    active && active.focus();
  };
};
var deselectCurrent$1 = deselectCurrent;
var clipboardToIE11Formatting = {
  "text/plain": "Text",
  "text/html": "Url",
  default: "Text"
};
var defaultMessage = "Copy to clipboard: #{key}, Enter";
function format2(message2) {
  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
  return message2.replace(/#{\s*key\s*}/g, copyKey);
}
function copy(text, options2) {
  var message2, reselectPrevious, range, selection, mark, success3 = false;
  if (!options2) {
    options2 = {};
  }
  var debug = options2.debug || false;
  try {
    reselectPrevious = deselectCurrent$1();
    range = document.createRange();
    selection = document.getSelection();
    mark = document.createElement("span");
    mark.textContent = text;
    mark.style.all = "unset";
    mark.style.position = "fixed";
    mark.style.top = 0;
    mark.style.clip = "rect(0, 0, 0, 0)";
    mark.style.whiteSpace = "pre";
    mark.style.webkitUserSelect = "text";
    mark.style.MozUserSelect = "text";
    mark.style.msUserSelect = "text";
    mark.style.userSelect = "text";
    mark.addEventListener("copy", function(e) {
      e.stopPropagation();
      if (options2.format) {
        e.preventDefault();
        if (typeof e.clipboardData === "undefined") {
          debug && console.warn("unable to use e.clipboardData");
          debug && console.warn("trying IE specific stuff");
          window.clipboardData.clearData();
          var _format = clipboardToIE11Formatting[options2.format] || clipboardToIE11Formatting["default"];
          window.clipboardData.setData(_format, text);
        } else {
          e.clipboardData.clearData();
          e.clipboardData.setData(options2.format, text);
        }
      }
      if (options2.onCopy) {
        e.preventDefault();
        options2.onCopy(e.clipboardData);
      }
    });
    document.body.appendChild(mark);
    range.selectNodeContents(mark);
    selection.addRange(range);
    var successful = document.execCommand("copy");
    if (!successful) {
      throw new Error("copy command was unsuccessful");
    }
    success3 = true;
  } catch (err) {
    debug && console.error("unable to copy using execCommand: ", err);
    debug && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(options2.format || "text", text);
      options2.onCopy && options2.onCopy(window.clipboardData);
      success3 = true;
    } catch (err2) {
      debug && console.error("unable to copy using clipboardData: ", err2);
      debug && console.error("falling back to prompt");
      message2 = format2("message" in options2 ? options2.message : defaultMessage);
      window.prompt(message2, text);
    }
  } finally {
    if (selection) {
      if (typeof selection.removeRange == "function") {
        selection.removeRange(range);
      } else {
        selection.removeAllRanges();
      }
    }
    if (mark) {
      document.body.removeChild(mark);
    }
    reselectPrevious();
  }
  return success3;
}
var __rest$3 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var isLineClampSupport = isStyleSupport("webkitLineClamp");
var isTextOverflowSupport = isStyleSupport("textOverflow");
var ELLIPSIS_STR = "...";
var Base = defineComponent({
  name: "Base",
  inheritAttrs: false,
  emits: ["update:content"],
  setup: function setup158(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var _useConfigInject = useConfigInject("typography", props2), prefixCls2 = _useConfigInject.prefixCls;
    var state = reactive({
      edit: false,
      copied: false,
      ellipsisText: "",
      ellipsisContent: null,
      isEllipsis: false,
      expanded: false,
      clientRendered: false,
      expandStr: "",
      copyStr: "",
      copiedStr: "",
      editStr: "",
      copyId: void 0,
      rafId: void 0,
      prevProps: void 0,
      originContent: ""
    });
    var contentRef = ref();
    var editIcon = ref();
    var ellipsis = computed(function() {
      var ellipsis2 = props2.ellipsis;
      if (!ellipsis2)
        return {};
      return _extends({
        rows: 1,
        expandable: false
      }, _typeof(ellipsis2) === "object" ? ellipsis2 : null);
    });
    onMounted(function() {
      state.clientRendered = true;
    });
    onBeforeUnmount(function() {
      window.clearTimeout(state.copyId);
      wrapperRaf.cancel(state.rafId);
    });
    watch([function() {
      return ellipsis.value.rows;
    }, function() {
      return props2.content;
    }], function() {
      nextTick(function() {
        resizeOnNextFrame2();
      });
    }, {
      flush: "post",
      deep: true,
      immediate: true
    });
    watchEffect(function() {
      if (props2.content === void 0) {
        warning$1(!props2.editable, "Typography", "When `editable` is enabled, please use `content` instead of children");
        warning$1(!props2.ellipsis, "Typography", "When `ellipsis` is enabled, please use `content` instead of children");
      }
    });
    function getChildrenText() {
      var _a, _b;
      return props2.ellipsis || props2.editable ? props2.content : (_b = (_a = contentRef.value) === null || _a === void 0 ? void 0 : _a.$el) === null || _b === void 0 ? void 0 : _b.innerText;
    }
    function onExpandClick(e) {
      var onExpand3 = ellipsis.value.onExpand;
      state.expanded = true;
      onExpand3 === null || onExpand3 === void 0 ? void 0 : onExpand3(e);
    }
    function onEditClick(e) {
      e.preventDefault();
      state.originContent = props2.content;
      triggerEdit(true);
    }
    function onEditChange(value26) {
      onContentChange(value26);
      triggerEdit(false);
    }
    function onContentChange(value26) {
      var onChange9 = editable.value.onChange;
      if (value26 !== props2.content) {
        emit("update:content", value26);
        onChange9 === null || onChange9 === void 0 ? void 0 : onChange9(value26);
      }
    }
    function onEditCancel() {
      var _a, _b;
      (_b = (_a = editable.value).onCancel) === null || _b === void 0 ? void 0 : _b.call(_a);
      triggerEdit(false);
    }
    function onCopyClick(e) {
      e.preventDefault();
      var copyable = props2.copyable;
      var copyConfig = _extends({}, _typeof(copyable) === "object" ? copyable : null);
      if (copyConfig.text === void 0) {
        copyConfig.text = getChildrenText();
      }
      copy(copyConfig.text || "");
      state.copied = true;
      nextTick(function() {
        if (copyConfig.onCopy) {
          copyConfig.onCopy();
        }
        state.copyId = window.setTimeout(function() {
          state.copied = false;
        }, 3e3);
      });
    }
    var editable = computed(function() {
      var editable2 = props2.editable;
      if (!editable2)
        return {
          editing: state.edit
        };
      return _extends({
        editing: state.edit
      }, _typeof(editable2) === "object" ? editable2 : null);
    });
    function triggerEdit(edit) {
      var onStart4 = editable.value.onStart;
      if (edit && onStart4) {
        onStart4();
      }
      state.edit = edit;
      nextTick(function() {
        var _a;
        if (!edit) {
          (_a = editIcon.value) === null || _a === void 0 ? void 0 : _a.focus();
        }
      });
    }
    function resizeOnNextFrame2() {
      wrapperRaf.cancel(state.rafId);
      state.rafId = wrapperRaf(function() {
        syncEllipsis();
      });
    }
    var canUseCSSEllipsis = computed(function() {
      var _ellipsis$value = ellipsis.value, rows = _ellipsis$value.rows, expandable = _ellipsis$value.expandable, suffix = _ellipsis$value.suffix, onEllipsis = _ellipsis$value.onEllipsis, tooltip = _ellipsis$value.tooltip;
      if (suffix || tooltip)
        return false;
      if (props2.editable || props2.copyable || expandable || onEllipsis) {
        return false;
      }
      if (rows === 1) {
        return isTextOverflowSupport;
      }
      return isLineClampSupport;
    });
    var syncEllipsis = function syncEllipsis2() {
      var _a, _b;
      var ellipsisText = state.ellipsisText, isEllipsis = state.isEllipsis;
      var _ellipsis$value2 = ellipsis.value, rows = _ellipsis$value2.rows, suffix = _ellipsis$value2.suffix, onEllipsis = _ellipsis$value2.onEllipsis;
      if (!rows || rows < 0 || !((_a = contentRef.value) === null || _a === void 0 ? void 0 : _a.$el) || state.expanded || props2.content === void 0)
        return;
      if (canUseCSSEllipsis.value)
        return;
      var _measure = measure((_b = contentRef.value) === null || _b === void 0 ? void 0 : _b.$el, {
        rows,
        suffix
      }, props2.content, renderOperations(true), ELLIPSIS_STR), content = _measure.content, text = _measure.text, ell = _measure.ellipsis;
      if (ellipsisText !== text || state.isEllipsis !== ell) {
        state.ellipsisText = text;
        state.ellipsisContent = content;
        state.isEllipsis = ell;
        if (isEllipsis !== ell && onEllipsis) {
          onEllipsis(ell);
        }
      }
    };
    function wrapperDecorations(_ref2, content) {
      var mark = _ref2.mark, code = _ref2.code, underline = _ref2.underline, del = _ref2.delete, strong = _ref2.strong, keyboard = _ref2.keyboard;
      var currentContent = content;
      function wrap(needed, Tag2) {
        if (!needed)
          return;
        var _currentContent = function() {
          return currentContent;
        }();
        currentContent = createVNode(Tag2, null, {
          default: function _default8() {
            return [_currentContent];
          }
        });
      }
      wrap(strong, "strong");
      wrap(underline, "u");
      wrap(del, "del");
      wrap(code, "code");
      wrap(mark, "mark");
      wrap(keyboard, "kbd");
      return currentContent;
    }
    function renderExpand(forceRender) {
      var _ellipsis$value3 = ellipsis.value, expandable = _ellipsis$value3.expandable, symbol = _ellipsis$value3.symbol;
      if (!expandable)
        return null;
      if (!forceRender && (state.expanded || !state.isEllipsis))
        return null;
      var expandContent = (slots.ellipsisSymbol ? slots.ellipsisSymbol() : symbol) || state.expandStr;
      return createVNode("a", {
        "key": "expand",
        "class": "".concat(prefixCls2.value, "-expand"),
        "onClick": onExpandClick,
        "aria-label": state.expandStr
      }, [expandContent]);
    }
    function renderEdit() {
      if (!props2.editable)
        return;
      var tooltip = props2.editable.tooltip;
      var icon = slots.editableIcon ? slots.editableIcon() : createVNode(EditOutlined, {
        "role": "button"
      }, null);
      var title2 = slots.editableTooltip ? slots.editableTooltip() : state.editStr;
      var ariaLabel = typeof title2 === "string" ? title2 : "";
      return createVNode(Tooltip, {
        "key": "edit",
        "title": tooltip === false ? "" : title2
      }, {
        default: function _default8() {
          return [createVNode(TransButton$1, {
            "ref": editIcon,
            "class": "".concat(prefixCls2.value, "-edit"),
            "onClick": onEditClick,
            "aria-label": ariaLabel
          }, {
            default: function _default9() {
              return [icon];
            }
          })];
        }
      });
    }
    function renderCopy() {
      if (!props2.copyable)
        return;
      var tooltip = props2.copyable.tooltip;
      var defaultTitle2 = state.copied ? state.copiedStr : state.copyStr;
      var title2 = slots.copyableTooltip ? slots.copyableTooltip({
        copied: state.copied
      }) : defaultTitle2;
      var ariaLabel = typeof title2 === "string" ? title2 : "";
      var defaultIcon = state.copied ? createVNode(CheckOutlined, null, null) : createVNode(CopyOutlined, null, null);
      var icon = slots.copyableIcon ? slots.copyableIcon({
        copied: !!state.copied
      }) : defaultIcon;
      return createVNode(Tooltip, {
        "key": "copy",
        "title": tooltip === false ? "" : title2
      }, {
        default: function _default8() {
          return [createVNode(TransButton$1, {
            "class": ["".concat(prefixCls2.value, "-copy"), _defineProperty({}, "".concat(prefixCls2.value, "-copy-success"), state.copied)],
            "onClick": onCopyClick,
            "aria-label": ariaLabel
          }, {
            default: function _default9() {
              return [icon];
            }
          })];
        }
      });
    }
    function renderEditInput() {
      var className = attrs.class, style3 = attrs.style;
      var _editable$value = editable.value, maxlength = _editable$value.maxlength, autoSize = _editable$value.autoSize, onEnd3 = _editable$value.onEnd;
      return createVNode(Editable$1, {
        "class": className,
        "style": style3,
        "prefixCls": prefixCls2.value,
        "value": props2.content,
        "originContent": state.originContent,
        "maxlength": maxlength,
        "autoSize": autoSize,
        "onSave": onEditChange,
        "onChange": onContentChange,
        "onCancel": onEditCancel,
        "onEnd": onEnd3
      }, null);
    }
    function renderOperations(forceRenderExpanded) {
      return [renderExpand(forceRenderExpanded), renderEdit(), renderCopy()].filter(function(node) {
        return node;
      });
    }
    return function() {
      var _a;
      var editing = editable.value.editing;
      var _children = props2.ellipsis || props2.editable ? props2.content !== void 0 ? props2.content : (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots) : slots.default ? slots.default() : props2.content;
      if (editing) {
        return renderEditInput();
      }
      return createVNode(LocaleReceiver, {
        "componentName": "Text",
        "children": function children(locale2) {
          var _ref4;
          var _a2 = _extends(_extends({}, props2), attrs), type2 = _a2.type, disabled = _a2.disabled;
          _a2.content;
          var className = _a2.class, style3 = _a2.style, restProps = __rest$3(_a2, ["type", "disabled", "content", "class", "style"]);
          var _ellipsis$value4 = ellipsis.value, rows = _ellipsis$value4.rows, suffix = _ellipsis$value4.suffix, tooltip = _ellipsis$value4.tooltip;
          var edit = locale2.edit, copyStr = locale2.copy, copied = locale2.copied, expand = locale2.expand;
          state.editStr = edit;
          state.copyStr = copyStr;
          state.copiedStr = copied;
          state.expandStr = expand;
          var textProps = omit(restProps, ["prefixCls", "editable", "copyable", "ellipsis", "mark", "code", "delete", "underline", "strong", "keyboard"]);
          var cssEllipsis = canUseCSSEllipsis.value;
          var cssTextOverflow = rows === 1 && cssEllipsis;
          var cssLineClamp = rows && rows > 1 && cssEllipsis;
          var textNode = _children;
          var ariaLabel;
          if (rows && state.isEllipsis && !state.expanded && !cssEllipsis) {
            var _title = restProps.title;
            var restContent = _title || "";
            if (!_title && (typeof _children === "string" || typeof _children === "number")) {
              restContent = String(_children);
            }
            restContent = restContent === null || restContent === void 0 ? void 0 : restContent.slice(String(state.ellipsisContent || "").length);
            textNode = createVNode(Fragment, null, [toRaw(state.ellipsisContent), createVNode("span", {
              "title": restContent,
              "aria-hidden": "true"
            }, [ELLIPSIS_STR]), suffix]);
          } else {
            textNode = createVNode(Fragment, null, [_children, suffix]);
          }
          textNode = wrapperDecorations(props2, textNode);
          var showTooltip = tooltip && rows && state.isEllipsis && !state.expanded && !cssEllipsis;
          var title2 = slots.ellipsisTooltip ? slots.ellipsisTooltip() : tooltip;
          return createVNode(ResizeObserver, {
            "onResize": resizeOnNextFrame2,
            "disabled": !rows
          }, {
            default: function _default8() {
              return [createVNode(Typography$1, _objectSpread2({
                "ref": contentRef,
                "class": [(_ref4 = {}, _defineProperty(_ref4, "".concat(prefixCls2.value, "-").concat(type2), type2), _defineProperty(_ref4, "".concat(prefixCls2.value, "-disabled"), disabled), _defineProperty(_ref4, "".concat(prefixCls2.value, "-ellipsis"), rows), _defineProperty(_ref4, "".concat(prefixCls2.value, "-single-line"), rows === 1), _defineProperty(_ref4, "".concat(prefixCls2.value, "-ellipsis-single-line"), cssTextOverflow), _defineProperty(_ref4, "".concat(prefixCls2.value, "-ellipsis-multiple-line"), cssLineClamp), _ref4), className],
                "style": _extends(_extends({}, style3), {
                  WebkitLineClamp: cssLineClamp ? rows : void 0
                }),
                "aria-label": ariaLabel
              }, textProps), {
                default: function _default9() {
                  return [showTooltip ? createVNode(Tooltip, {
                    "title": tooltip === true ? _children : title2
                  }, {
                    default: function _default10() {
                      return [createVNode("span", null, [textNode])];
                    }
                  }) : textNode, renderOperations()];
                }
              })];
            }
          });
        }
      }, null);
    };
  }
});
var baseProps = function baseProps2() {
  return {
    editable: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    copyable: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    prefixCls: PropsTypes.string,
    component: PropsTypes.string,
    type: PropsTypes.oneOf(["secondary", "success", "danger", "warning"]),
    disabled: PropsTypes.looseBool,
    ellipsis: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    code: PropsTypes.looseBool,
    mark: PropsTypes.looseBool,
    underline: PropsTypes.looseBool,
    delete: PropsTypes.looseBool,
    strong: PropsTypes.looseBool,
    keyboard: PropsTypes.looseBool,
    content: PropsTypes.string
  };
};
Base.props = baseProps();
var Base$1 = Base;
var __rest$2 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Link = function Link2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var _a = _extends(_extends({}, props2), attrs), ellipsis = _a.ellipsis, rel = _a.rel, restProps = __rest$2(_a, ["ellipsis", "rel"]);
  warning$1(_typeof(ellipsis) !== "object", "Typography.Link", "`ellipsis` only supports boolean value.");
  var mergedProps = _extends(_extends({}, restProps), {
    rel: rel === void 0 && restProps.target === "_blank" ? "noopener noreferrer" : rel,
    ellipsis: !!ellipsis,
    component: "a"
  });
  delete mergedProps.navigate;
  return createVNode(Base$1, mergedProps, slots);
};
Link.displayName = "ATypographyLink";
Link.inheritAttrs = false;
Link.props = omit(_extends(_extends({}, baseProps()), {
  ellipsis: PropsTypes.looseBool
}), ["component"]);
var Link$1 = Link;
var Paragraph = function Paragraph2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var paragraphProps = _extends(_extends(_extends({}, props2), {
    component: "div"
  }), attrs);
  return createVNode(Base$1, paragraphProps, slots);
};
Paragraph.displayName = "ATypographyParagraph";
Paragraph.inheritAttrs = false;
Paragraph.props = omit(baseProps(), ["component"]);
var Paragraph$1 = Paragraph;
var Text = function Text2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var ellipsis = props2.ellipsis;
  warning$1(_typeof(ellipsis) !== "object" || !ellipsis || !("expandable" in ellipsis) && !("rows" in ellipsis), "Typography.Text", "`ellipsis` do not support `expandable` or `rows` props.");
  var textProps = _extends(_extends(_extends({}, props2), {
    ellipsis: ellipsis && _typeof(ellipsis) === "object" ? omit(ellipsis, ["expandable", "rows"]) : ellipsis,
    component: "span"
  }), attrs);
  return createVNode(Base$1, textProps, slots);
};
Text.displayName = "ATypographyText";
Text.inheritAttrs = false;
Text.props = omit(baseProps(), ["component"]);
var Text$1 = Text;
var __rest$1 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var TITLE_ELE_LIST = tupleNum(1, 2, 3, 4, 5);
var Title = function Title2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var _props$level = props2.level, level2 = _props$level === void 0 ? 1 : _props$level, restProps = __rest$1(props2, ["level"]);
  var component;
  if (TITLE_ELE_LIST.indexOf(level2) !== -1) {
    component = "h".concat(level2);
  } else {
    warning$1(false, "Typography", "Title only accept `1 | 2 | 3 | 4 | 5` as `level` value.");
    component = "h1";
  }
  var titleProps = _extends(_extends(_extends({}, restProps), {
    component
  }), attrs);
  return createVNode(Base$1, titleProps, slots);
};
Title.displayName = "ATypographyTitle";
Title.inheritAttrs = false;
Title.props = omit(_extends(_extends({}, baseProps()), {
  level: PropsTypes.number
}), ["component", "strong"]);
var Title$1 = Title;
Typography$1.Text = Text$1;
Typography$1.Title = Title$1;
Typography$1.Paragraph = Paragraph$1;
Typography$1.Link = Link$1;
Typography$1.Base = Base$1;
Typography$1.install = function(app) {
  app.component(Typography$1.name, Typography$1);
  app.component(Typography$1.Text.displayName, Text$1);
  app.component(Typography$1.Title.displayName, Title$1);
  app.component(Typography$1.Paragraph.displayName, Paragraph$1);
  app.component(Typography$1.Link.displayName, Link$1);
  return app;
};
function getError(option, xhr) {
  var msg = "cannot ".concat(option.method, " ").concat(option.action, " ").concat(xhr.status, "'");
  var err = new Error(msg);
  err.status = xhr.status;
  err.method = option.method;
  err.url = option.action;
  return err;
}
function getBody(xhr) {
  var text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }
  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}
function upload(option) {
  var xhr = new window.XMLHttpRequest();
  if (option.onProgress && xhr.upload) {
    xhr.upload.onprogress = function progress(e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }
      option.onProgress(e);
    };
  }
  var formData = new window.FormData();
  if (option.data) {
    Object.keys(option.data).forEach(function(key2) {
      var value26 = option.data[key2];
      if (Array.isArray(value26)) {
        value26.forEach(function(item) {
          formData.append("".concat(key2, "[]"), item);
        });
        return;
      }
      formData.append(key2, option.data[key2]);
    });
  }
  formData.append(option.filename, option.file);
  xhr.onerror = function error3(e) {
    option.onError(e);
  };
  xhr.onload = function onload() {
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(option, xhr), getBody(xhr));
    }
    option.onSuccess(getBody(xhr), xhr);
  };
  xhr.open(option.method, option.action, true);
  if (option.withCredentials && "withCredentials" in xhr) {
    xhr.withCredentials = true;
  }
  var headers = option.headers || {};
  if (headers["X-Requested-With"] !== null) {
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
  }
  for (var h2 in headers) {
    if (headers.hasOwnProperty(h2) && headers[h2] !== null) {
      xhr.setRequestHeader(h2, headers[h2]);
    }
  }
  xhr.send(formData);
  return {
    abort: function abort4() {
      xhr.abort();
    }
  };
}
var now = +new Date();
var index = 0;
function uid() {
  return "vc-upload-".concat(now, "-").concat(++index);
}
function endsWith(str, suffix) {
  return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
var attrAccept = function(file, acceptedFiles) {
  if (file && acceptedFiles) {
    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
    var fileName = file.name || "";
    var mimeType = file.type || "";
    var baseMimeType = mimeType.replace(/\/.*$/, "");
    return acceptedFilesArray.some(function(type2) {
      var validType = type2.trim();
      if (validType.charAt(0) === ".") {
        return endsWith(fileName.toLowerCase(), validType.toLowerCase());
      } else if (/\/\*$/.test(validType)) {
        return baseMimeType === validType.replace(/\/.*$/, "");
      }
      return mimeType === validType;
    });
  }
  return true;
};
function loopFiles(item, callback) {
  var dirReader = item.createReader();
  var fileList2 = [];
  function sequence() {
    dirReader.readEntries(function(entries) {
      var entryList = Array.prototype.slice.apply(entries);
      fileList2 = fileList2.concat(entryList);
      var isFinished = !entryList.length;
      if (isFinished) {
        callback(fileList2);
      } else {
        sequence();
      }
    });
  }
  sequence();
}
var traverseFileTree = function traverseFileTree2(files2, callback, isAccepted) {
  var _traverseFileTree = function _traverseFileTree2(item, path2) {
    path2 = path2 || "";
    if (item.isFile) {
      item.file(function(file2) {
        if (isAccepted(file2)) {
          if (item.fullPath && !file2.webkitRelativePath) {
            Object.defineProperties(file2, {
              webkitRelativePath: {
                writable: true
              }
            });
            file2.webkitRelativePath = item.fullPath.replace(/^\//, "");
            Object.defineProperties(file2, {
              webkitRelativePath: {
                writable: false
              }
            });
          }
          callback([file2]);
        }
      });
    } else if (item.isDirectory) {
      loopFiles(item, function(entries) {
        entries.forEach(function(entryItem) {
          _traverseFileTree2(entryItem, "".concat(path2).concat(item.name, "/"));
        });
      });
    }
  };
  var _iterator = _createForOfIteratorHelper(files2), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var file = _step.value;
      _traverseFileTree(file.webkitGetAsEntry());
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
var traverseFileTree$1 = traverseFileTree;
var upLoadPropTypes = {
  componentTag: PropsTypes.string,
  prefixCls: PropsTypes.string,
  name: PropsTypes.string,
  multiple: PropsTypes.looseBool,
  directory: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  accept: PropsTypes.string,
  data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
  action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  headers: PropsTypes.object,
  beforeUpload: PropsTypes.func,
  customRequest: PropsTypes.func,
  withCredentials: PropsTypes.looseBool,
  openFileDialogOnClick: PropsTypes.looseBool,
  transformFile: PropsTypes.func,
  method: PropsTypes.string
};
var AjaxUploader = {
  inheritAttrs: false,
  name: "ajaxUploader",
  mixins: [BaseMixin],
  props: upLoadPropTypes,
  data: function data75() {
    this.reqs = {};
    return {
      uid: uid()
    };
  },
  mounted: function mounted42() {
    this._isMounted = true;
  },
  beforeUnmount: function beforeUnmount30() {
    this._isMounted = false;
    this.abort();
  },
  methods: {
    onChange: function onChange7(e) {
      var files2 = e.target.files;
      this.uploadFiles(files2);
      this.reset();
    },
    onClick: function onClick6() {
      var el = this.$refs.fileInputRef;
      if (!el) {
        return;
      }
      el.click();
    },
    onKeyDown: function onKeyDown13(e) {
      if (e.key === "Enter") {
        this.onClick();
      }
    },
    onFileDrop: function onFileDrop(e) {
      var _this = this;
      var multiple = this.$props.multiple;
      e.preventDefault();
      if (e.type === "dragover") {
        return;
      }
      if (this.directory) {
        traverseFileTree$1(e.dataTransfer.items, this.uploadFiles, function(_file) {
          return attrAccept(_file, _this.accept);
        });
      } else {
        var files2 = partition(Array.prototype.slice.call(e.dataTransfer.files), function(file) {
          return attrAccept(file, _this.accept);
        });
        var successFiles = files2[0];
        var errorFiles = files2[1];
        if (multiple === false) {
          successFiles = successFiles.slice(0, 1);
        }
        this.uploadFiles(successFiles);
        if (errorFiles.length) {
          this.__emit("reject", errorFiles);
        }
      }
    },
    uploadFiles: function uploadFiles(files2) {
      var _this2 = this;
      var postFiles = Array.prototype.slice.call(files2);
      postFiles.map(function(file) {
        file.uid = uid();
        return file;
      }).forEach(function(file) {
        _this2.upload(file, postFiles);
      });
    },
    upload: function upload2(file, fileList2) {
      var _this3 = this;
      if (!this.beforeUpload) {
        return setTimeout(function() {
          return _this3.post(file);
        }, 0);
      }
      var before = this.beforeUpload(file, fileList2);
      if (before && before.then) {
        before.then(function(processedFile) {
          var processedFileType = Object.prototype.toString.call(processedFile);
          if (processedFileType === "[object File]" || processedFileType === "[object Blob]") {
            return _this3.post(processedFile);
          }
          return _this3.post(file);
        }).catch(function(e) {
          console && console.log(e);
        });
      } else if (before !== false) {
        setTimeout(function() {
          return _this3.post(file);
        }, 0);
      }
    },
    post: function post(file) {
      var _this4 = this;
      if (!this._isMounted) {
        return;
      }
      var props2 = this.$props;
      var data79 = props2.data;
      var _props$transformFile = props2.transformFile, transformFile = _props$transformFile === void 0 ? function(originFile) {
        return originFile;
      } : _props$transformFile;
      new Promise(function(resolve) {
        var action = _this4.action;
        if (typeof action === "function") {
          return resolve(action(file));
        }
        resolve(action);
      }).then(function(action) {
        var uid2 = file.uid;
        var request = _this4.customRequest || upload;
        var transform = Promise.resolve(transformFile(file)).catch(function(e) {
          console.error(e);
        });
        transform.then(function(transformedFile) {
          if (typeof data79 === "function") {
            data79 = data79(file);
          }
          var requestOption = {
            action,
            filename: _this4.name,
            data: data79,
            file: transformedFile,
            headers: _this4.headers,
            withCredentials: _this4.withCredentials,
            method: props2.method || "post",
            onProgress: function onProgress2(e) {
              _this4.__emit("progress", e, file);
            },
            onSuccess: function onSuccess2(ret, xhr) {
              delete _this4.reqs[uid2];
              _this4.__emit("success", ret, file, xhr);
            },
            onError: function onError2(err, ret) {
              delete _this4.reqs[uid2];
              _this4.__emit("error", err, ret, file);
            }
          };
          _this4.reqs[uid2] = request(requestOption);
          _this4.__emit("start", file);
        });
      });
    },
    reset: function reset() {
      this.setState({
        uid: uid()
      });
    },
    abort: function abort(file) {
      var reqs = this.reqs;
      if (file) {
        var uid2 = file;
        if (file && file.uid) {
          uid2 = file.uid;
        }
        if (reqs[uid2] && reqs[uid2].abort) {
          reqs[uid2].abort();
        }
        delete reqs[uid2];
      } else {
        Object.keys(reqs).forEach(function(uid3) {
          if (reqs[uid3] && reqs[uid3].abort) {
            reqs[uid3].abort();
          }
          delete reqs[uid3];
        });
      }
    }
  },
  render: function render159() {
    var _classNames, _this5 = this;
    var $props = this.$props, $attrs = this.$attrs;
    var Tag2 = $props.componentTag, prefixCls2 = $props.prefixCls, disabled = $props.disabled, multiple = $props.multiple, accept = $props.accept, directory = $props.directory, openFileDialogOnClick = $props.openFileDialogOnClick;
    var className = $attrs.class, style3 = $attrs.style, id2 = $attrs.id;
    var cls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls2, true), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, className, className), _classNames));
    var events = disabled ? {} : {
      onClick: openFileDialogOnClick ? this.onClick : function() {
      },
      onKeydown: openFileDialogOnClick ? this.onKeyDown : function() {
      },
      onDrop: this.onFileDrop,
      onDragover: this.onFileDrop
    };
    var tagProps2 = _extends(_extends({}, events), {
      role: "button",
      tabindex: disabled ? null : "0",
      class: cls,
      style: style3
    });
    return createVNode(Tag2, tagProps2, {
      default: function _default8() {
        return [createVNode("input", {
          "id": id2,
          "type": "file",
          "ref": "fileInputRef",
          "onClick": function onClick7(e) {
            return e.stopPropagation();
          },
          "key": _this5.uid,
          "style": {
            display: "none"
          },
          "accept": accept,
          "directory": directory ? "directory" : null,
          "webkitdirectory": directory ? "webkitdirectory" : null,
          "multiple": multiple,
          "onChange": _this5.onChange
        }, null), getSlot(_this5)];
      }
    });
  }
};
var AjaxUpload = AjaxUploader;
var IFRAME_STYLE = {
  position: "absolute",
  top: 0,
  opacity: 0,
  filter: "alpha(opacity=0)",
  left: 0,
  zIndex: 9999
};
var IframeUploader = {
  name: "IframeUploader",
  mixins: [BaseMixin],
  props: {
    componentTag: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    accept: PropsTypes.string,
    multiple: PropsTypes.looseBool,
    data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
    action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
    name: PropsTypes.string
  },
  data: function data76() {
    this.file = {};
    return {
      uploading: false
    };
  },
  methods: {
    onLoad: function onLoad2() {
      if (!this.uploading) {
        return;
      }
      var file = this.file;
      var response;
      try {
        var doc = this.getIframeDocument();
        var script = doc.getElementsByTagName("script")[0];
        if (script && script.parentNode === doc.body) {
          doc.body.removeChild(script);
        }
        response = doc.body.innerHTML;
        this.__emit("success", response, file);
      } catch (err) {
        warning$1(false, "cross domain error for Upload. Maybe server should return document.domain script. see Note from https://github.com/react-component/upload");
        response = "cross-domain";
        this.__emit("error", err, null, file);
      }
      this.endUpload();
    },
    onChange: function onChange8() {
      var _this = this;
      var target = this.getFormInputNode();
      var file = this.file = {
        uid: uid(),
        name: target.value && target.value.substring(target.value.lastIndexOf("\\") + 1, target.value.length)
      };
      this.startUpload();
      var props2 = this.$props;
      if (!props2.beforeUpload) {
        return this.post(file);
      }
      var before = props2.beforeUpload(file);
      if (before && before.then) {
        before.then(function() {
          _this.post(file);
        }, function() {
          _this.endUpload();
        });
      } else if (before !== false) {
        this.post(file);
      } else {
        this.endUpload();
      }
    },
    getIframeNode: function getIframeNode() {
      return this.$refs.iframeRef;
    },
    getIframeDocument: function getIframeDocument() {
      return this.getIframeNode().contentDocument;
    },
    getFormNode: function getFormNode() {
      return this.getIframeDocument().getElementById("form");
    },
    getFormInputNode: function getFormInputNode() {
      return this.getIframeDocument().getElementById("input");
    },
    getFormDataNode: function getFormDataNode() {
      return this.getIframeDocument().getElementById("data");
    },
    getFileForMultiple: function getFileForMultiple(file) {
      return this.multiple ? [file] : file;
    },
    getIframeHTML: function getIframeHTML(domain) {
      var domainScript = "";
      var domainInput = "";
      if (domain) {
        var script = "script";
        domainScript = "<".concat(script, '>document.domain="').concat(domain, '";</').concat(script, ">");
        domainInput = '<input name="_documentDomain" value="'.concat(domain, '" />');
      }
      return '\n      <!DOCTYPE html>\n      <html>\n      <head>\n      <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n      <style>\n      body,html {padding:0;margin:0;border:0;overflow:hidden;}\n      </style>\n      '.concat(domainScript, '\n      </head>\n      <body>\n      <form method="post"\n      encType="multipart/form-data"\n      action="" id="form"\n      style="display:block;height:9999px;position:relative;overflow:hidden;">\n      <input id="input" type="file"\n       name="').concat(this.name, '"\n       style="position:absolute;top:0;right:0;height:9999px;font-size:9999px;cursor:pointer;"/>\n      ').concat(domainInput, '\n      <span id="data"></span>\n      </form>\n      </body>\n      </html>\n      ');
    },
    initIframeSrc: function initIframeSrc() {
      if (this.domain) {
        this.getIframeNode().src = "javascript:void((function(){\n          var d = document;\n          d.open();\n          d.domain='".concat(this.domain, "';\n          d.write('');\n          d.close();\n        })())");
      }
    },
    initIframe: function initIframe() {
      var iframeNode = this.getIframeNode();
      var win = iframeNode.contentWindow;
      var doc;
      this.domain = this.domain || "";
      this.initIframeSrc();
      try {
        doc = win.document;
      } catch (e) {
        this.domain = document.domain;
        this.initIframeSrc();
        win = iframeNode.contentWindow;
        doc = win.document;
      }
      doc.open("text/html", "replace");
      doc.write(this.getIframeHTML(this.domain));
      doc.close();
      this.getFormInputNode().onchange = this.onChange;
    },
    endUpload: function endUpload() {
      if (this.uploading) {
        this.file = {};
        this.uploading = false;
        this.setState({
          uploading: false
        });
        this.initIframe();
      }
    },
    startUpload: function startUpload() {
      if (!this.uploading) {
        this.uploading = true;
        this.setState({
          uploading: true
        });
      }
    },
    updateIframeWH: function updateIframeWH() {
      var rootNode = findDOMNode(this);
      var iframeNode = this.getIframeNode();
      iframeNode.style.height = "".concat(rootNode.offsetHeight, "px");
      iframeNode.style.width = "".concat(rootNode.offsetWidth, "px");
    },
    abort: function abort2(file) {
      if (file) {
        var uid2 = file;
        if (file && file.uid) {
          uid2 = file.uid;
        }
        if (uid2 === this.file.uid) {
          this.endUpload();
        }
      } else {
        this.endUpload();
      }
    },
    post: function post2(file) {
      var _this2 = this;
      var formNode = this.getFormNode();
      var dataSpan = this.getFormDataNode();
      var data79 = this.$props.data;
      if (typeof data79 === "function") {
        data79 = data79(file);
      }
      var inputs = document.createDocumentFragment();
      for (var key2 in data79) {
        if (data79.hasOwnProperty(key2)) {
          var input = document.createElement("input");
          input.setAttribute("name", key2);
          input.value = data79[key2];
          inputs.appendChild(input);
        }
      }
      dataSpan.appendChild(inputs);
      new Promise(function(resolve) {
        var action = _this2.action;
        if (typeof action === "function") {
          return resolve(action(file));
        }
        resolve(action);
      }).then(function(action) {
        formNode.setAttribute("action", action);
        formNode.submit();
        dataSpan.innerHTML = "";
        _this2.__emit("start", file);
      });
    }
  },
  mounted: function mounted43() {
    var _this3 = this;
    this.$nextTick(function() {
      _this3.updateIframeWH();
      _this3.initIframe();
    });
  },
  updated: function updated26() {
    var _this4 = this;
    this.$nextTick(function() {
      _this4.updateIframeWH();
    });
  },
  render: function render160() {
    var _classNames, _this5 = this;
    var _this$$props = this.$props, Tag2 = _this$$props.componentTag, disabled = _this$$props.disabled, prefixCls2 = _this$$props.prefixCls;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var iframeStyle = _extends(_extends({}, IFRAME_STYLE), {
      display: this.uploading || disabled ? "none" : ""
    });
    var cls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls2, true), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty(_classNames, className, className), _classNames));
    return createVNode(Tag2, {
      "class": cls,
      "style": _extends({
        position: "relative",
        zIndex: 0
      }, style3)
    }, {
      default: function _default8() {
        return [createVNode("iframe", {
          "ref": "iframeRef",
          "onLoad": _this5.onLoad,
          "style": iframeStyle
        }, null), getSlot(_this5)];
      }
    });
  }
};
var IframeUpload = IframeUploader;
function empty() {
}
var uploadProps = {
  componentTag: PropsTypes.string,
  prefixCls: PropsTypes.string,
  action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  name: PropsTypes.string,
  multipart: PropsTypes.looseBool,
  directory: PropsTypes.looseBool,
  onError: PropsTypes.func,
  onSuccess: PropsTypes.func,
  onProgress: PropsTypes.func,
  onStart: PropsTypes.func,
  data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
  headers: PropsTypes.object,
  accept: PropsTypes.string,
  multiple: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  beforeUpload: PropsTypes.func,
  customRequest: PropsTypes.func,
  onReady: PropsTypes.func,
  withCredentials: PropsTypes.looseBool,
  supportServerRender: PropsTypes.looseBool,
  openFileDialogOnClick: PropsTypes.looseBool,
  method: PropsTypes.string
};
var Upload$1 = defineComponent({
  name: "Upload",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(uploadProps, {
    componentTag: "span",
    prefixCls: "rc-upload",
    data: {},
    headers: {},
    name: "file",
    multipart: false,
    onReady: empty,
    onStart: empty,
    onError: empty,
    onSuccess: empty,
    supportServerRender: false,
    multiple: false,
    beforeUpload: empty,
    withCredentials: false,
    openFileDialogOnClick: true
  }),
  data: function data77() {
    this.Component = null;
    return {};
  },
  mounted: function mounted44() {
    var _this = this;
    this.$nextTick(function() {
      if (_this.supportServerRender) {
        _this.Component = _this.getComponent();
        _this.$forceUpdate();
        nextTick(function() {
          _this.__emit("ready");
        });
      }
    });
  },
  methods: {
    getComponent: function getComponent3() {
      return typeof File !== "undefined" ? AjaxUpload : IframeUpload;
    },
    abort: function abort3(file) {
      this.$refs.uploaderRef.abort(file);
    }
  },
  render: function render161() {
    var _this2 = this;
    var componentProps = _extends(_extends(_extends({}, this.$props), {
      ref: "uploaderRef"
    }), this.$attrs);
    if (this.supportServerRender) {
      var _ComponentUploader = this.Component;
      if (_ComponentUploader) {
        return createVNode(_ComponentUploader, componentProps, {
          default: function _default8() {
            return [getSlot(_this2)];
          }
        });
      }
      return null;
    }
    var ComponentUploader = this.getComponent();
    return createVNode(ComponentUploader, componentProps, {
      default: function _default8() {
        return [getSlot(_this2)];
      }
    });
  }
});
PropsTypes.oneOf(tuple("error", "success", "done", "uploading", "removed"));
function UploadFile(_ref) {
  var uid2 = _ref.uid, name2 = _ref.name;
  if (!uid2 && uid2 !== 0)
    return false;
  if (!["string", "number"].includes(_typeof(uid2)))
    return false;
  if (name2 === "" || typeof name2 !== "string")
    return false;
  return true;
}
({
  file: PropsTypes.custom(UploadFile),
  fileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  event: PropsTypes.object
});
var ShowUploadListInterface = PropsTypes.shape({
  showRemoveIcon: PropsTypes.looseBool,
  showPreviewIcon: PropsTypes.looseBool
}).loose;
var UploadLocale = PropsTypes.shape({
  uploading: PropsTypes.string,
  removeFile: PropsTypes.string,
  downloadFile: PropsTypes.string,
  uploadError: PropsTypes.string,
  previewFile: PropsTypes.string
}).loose;
var UploadProps = {
  type: PropsTypes.oneOf(tuple("drag", "select")),
  name: PropsTypes.string,
  defaultFileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  fileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  directory: PropsTypes.looseBool,
  data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
  method: PropsTypes.oneOf(tuple("POST", "PUT", "PATCH", "post", "put", "patch")),
  headers: PropsTypes.object,
  showUploadList: PropsTypes.oneOfType([PropsTypes.looseBool, ShowUploadListInterface]),
  multiple: PropsTypes.looseBool,
  accept: PropsTypes.string,
  beforeUpload: PropsTypes.func,
  listType: PropsTypes.oneOf(tuple("text", "picture", "picture-card")),
  remove: PropsTypes.func,
  supportServerRender: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  customRequest: PropsTypes.func,
  withCredentials: PropsTypes.looseBool,
  openFileDialogOnClick: PropsTypes.looseBool,
  locale: UploadLocale,
  height: PropsTypes.number,
  id: PropsTypes.string,
  previewFile: PropsTypes.func,
  transformFile: PropsTypes.func,
  onChange: PropsTypes.func,
  onPreview: PropsTypes.func,
  onRemove: PropsTypes.func,
  onDownload: PropsTypes.func,
  "onUpdate:fileList": PropsTypes.func
};
({
  fileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  dragState: PropsTypes.string
});
var UploadListProps = {
  listType: PropsTypes.oneOf(tuple("text", "picture", "picture-card")),
  items: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  progressAttr: PropsTypes.object,
  prefixCls: PropsTypes.string,
  showRemoveIcon: PropsTypes.looseBool,
  showDownloadIcon: PropsTypes.looseBool,
  showPreviewIcon: PropsTypes.looseBool,
  locale: UploadLocale,
  previewFile: PropsTypes.func,
  onPreview: PropsTypes.func,
  onRemove: PropsTypes.func,
  onDownload: PropsTypes.func
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Dragger = defineComponent({
  name: "AUploadDragger",
  inheritAttrs: false,
  props: UploadProps,
  render: function render162() {
    var _this = this;
    var props2 = getOptionProps(this);
    var height = props2.height, restProps = __rest(props2, ["height"]);
    var _a = this.$attrs, style3 = _a.style, restAttrs = __rest(_a, ["style"]);
    var draggerProps = _extends(_extends(_extends({}, restProps), restAttrs), {
      type: "drag",
      style: _extends(_extends({}, style3), {
        height
      })
    });
    return createVNode(Upload, draggerProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
function T() {
  return true;
}
function fileToObject(file) {
  return _extends(_extends({}, file), {
    lastModified: file.lastModified,
    lastModifiedDate: file.lastModifiedDate,
    name: file.name,
    size: file.size,
    type: file.type,
    uid: file.uid,
    percent: 0,
    originFileObj: file
  });
}
function genPercentAdd() {
  var k = 0.1;
  var i = 0.01;
  var end = 0.98;
  return function(s) {
    var start = s;
    if (start >= end) {
      return start;
    }
    start += k;
    k = k - i;
    if (k < 1e-3) {
      k = 1e-3;
    }
    return start;
  };
}
function getFileItem(file, fileList2) {
  var matchKey = file.uid !== void 0 ? "uid" : "name";
  return fileList2.filter(function(item) {
    return item[matchKey] === file[matchKey];
  })[0];
}
function removeFileItem(file, fileList2) {
  var matchKey = file.uid !== void 0 ? "uid" : "name";
  var removed = fileList2.filter(function(item) {
    return item[matchKey] !== file[matchKey];
  });
  if (removed.length === fileList2.length) {
    return null;
  }
  return removed;
}
var extname = function extname2() {
  var url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var temp = url.split("/");
  var filename = temp[temp.length - 1];
  var filenameWithoutSuffix = filename.split(/#|\?/)[0];
  return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [""])[0];
};
var isImageFileType = function isImageFileType2(type2) {
  return !!type2 && type2.indexOf("image/") === 0;
};
var isImageUrl = function isImageUrl2(file) {
  if (isImageFileType(file.type)) {
    return true;
  }
  var url = file.thumbUrl || file.url;
  var extension = extname(url);
  if (/^data:image\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i.test(extension)) {
    return true;
  }
  if (/^data:/.test(url)) {
    return false;
  }
  if (extension) {
    return false;
  }
  return true;
};
var MEASURE_SIZE = 200;
function previewImage(file) {
  return new Promise(function(resolve) {
    if (!isImageFileType(file.type)) {
      resolve("");
      return;
    }
    var canvas = document.createElement("canvas");
    canvas.width = MEASURE_SIZE;
    canvas.height = MEASURE_SIZE;
    canvas.style.cssText = "position: fixed; left: 0; top: 0; width: ".concat(MEASURE_SIZE, "px; height: ").concat(MEASURE_SIZE, "px; z-index: 9999; display: none;");
    document.body.appendChild(canvas);
    var ctx = canvas.getContext("2d");
    var img = new Image();
    img.onload = function() {
      var width = img.width, height = img.height;
      var drawWidth = MEASURE_SIZE;
      var drawHeight = MEASURE_SIZE;
      var offsetX = 0;
      var offsetY = 0;
      if (width < height) {
        drawHeight = height * (MEASURE_SIZE / width);
        offsetY = -(drawHeight - drawWidth) / 2;
      } else {
        drawWidth = width * (MEASURE_SIZE / height);
        offsetX = -(drawWidth - drawHeight) / 2;
      }
      ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      var dataURL = canvas.toDataURL();
      document.body.removeChild(canvas);
      resolve(dataURL);
    };
    img.src = window.URL.createObjectURL(file);
  });
}
var UploadList = defineComponent({
  name: "AUploadList",
  mixins: [BaseMixin],
  props: initDefaultProps$2(UploadListProps, {
    listType: "text",
    progressAttr: {
      strokeWidth: 2,
      showInfo: false
    },
    showRemoveIcon: true,
    showDownloadIcon: false,
    showPreviewIcon: true,
    previewFile: previewImage
  }),
  setup: function setup159() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  updated: function updated27() {
    var _this = this;
    nextTick(function() {
      var _this$$props = _this.$props, listType = _this$$props.listType, items = _this$$props.items, previewFile = _this$$props.previewFile;
      if (listType !== "picture" && listType !== "picture-card") {
        return;
      }
      (items || []).forEach(function(file) {
        if (typeof document === "undefined" || typeof window === "undefined" || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== void 0) {
          return;
        }
        file.thumbUrl = "";
        if (previewFile) {
          previewFile(file.originFileObj).then(function(previewDataUrl) {
            file.thumbUrl = previewDataUrl || "";
            _this.$forceUpdate();
          });
        }
      });
    });
  },
  methods: {
    handlePreview: function handlePreview(file, e) {
      var onPreview = this.$props.onPreview;
      if (!onPreview) {
        return;
      }
      e.preventDefault();
      return this.$emit("preview", file);
    },
    handleDownload: function handleDownload(file) {
      var onDownload = this.$props.onDownload;
      if (typeof onDownload === "function") {
        this.$emit("download", file);
      } else if (file.url) {
        window.open(file.url);
      }
    },
    handleClose: function handleClose(file) {
      this.$emit("remove", file);
    }
  },
  render: function render163() {
    var _this2 = this, _classNames4;
    var _getOptionProps = getOptionProps(this), customizePrefixCls = _getOptionProps.prefixCls, _getOptionProps$items = _getOptionProps.items, items = _getOptionProps$items === void 0 ? [] : _getOptionProps$items, listType = _getOptionProps.listType, showPreviewIcon = _getOptionProps.showPreviewIcon, showRemoveIcon = _getOptionProps.showRemoveIcon, showDownloadIcon = _getOptionProps.showDownloadIcon, locale2 = _getOptionProps.locale, progressAttr = _getOptionProps.progressAttr;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("upload", customizePrefixCls);
    var list = items.map(function(file) {
      var _classNames, _classNames2;
      var progress;
      var icon = file.status === "uploading" ? createVNode(LoadingOutlined, null, null) : createVNode(PaperClipOutlined, null, null);
      if (listType === "picture" || listType === "picture-card") {
        if (listType === "picture-card" && file.status === "uploading") {
          icon = createVNode("div", {
            "class": "".concat(prefixCls2, "-list-item-uploading-text")
          }, [locale2.uploading]);
        } else if (!file.thumbUrl && !file.url) {
          icon = createVNode(PictureTwoTone, {
            "class": "".concat(prefixCls2, "-list-item-thumbnail")
          }, null);
        } else {
          var thumbnail = isImageUrl(file) ? createVNode("img", {
            "src": file.thumbUrl || file.url,
            "alt": file.name,
            "class": "".concat(prefixCls2, "-list-item-image")
          }, null) : createVNode(FileTwoTone, {
            "class": "".concat(prefixCls2, "-list-item-icon")
          }, null);
          icon = createVNode("a", {
            "class": "".concat(prefixCls2, "-list-item-thumbnail"),
            "onClick": function onClick7(e) {
              return _this2.handlePreview(file, e);
            },
            "href": file.url || file.thumbUrl,
            "target": "_blank",
            "rel": "noopener noreferrer"
          }, [thumbnail]);
        }
      }
      if (file.status === "uploading") {
        var progressProps = _extends(_extends({}, progressAttr), {
          type: "line",
          percent: file.percent
        });
        var loadingProgress = "percent" in file ? createVNode(Progress, progressProps, null) : null;
        progress = createVNode("div", {
          "class": "".concat(prefixCls2, "-list-item-progress"),
          "key": "progress"
        }, [loadingProgress]);
      }
      var infoUploadingClass = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-list-item"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-list-item-").concat(file.status), true), _defineProperty(_classNames, "".concat(prefixCls2, "-list-item-list-type-").concat(listType), true), _classNames));
      var linkProps = typeof file.linkProps === "string" ? JSON.parse(file.linkProps) : file.linkProps;
      var removeIcon = showRemoveIcon ? createVNode(DeleteOutlined, {
        "title": locale2.removeFile,
        "onClick": function onClick7() {
          return _this2.handleClose(file);
        }
      }, null) : null;
      var downloadIcon = showDownloadIcon && file.status === "done" ? createVNode(DownloadOutlined, {
        "title": locale2.downloadFile,
        "onClick": function onClick7() {
          return _this2.handleDownload(file);
        }
      }, null) : null;
      var downloadOrDelete = listType !== "picture-card" && createVNode("span", {
        "key": "download-delete",
        "class": "".concat(prefixCls2, "-list-item-card-actions ").concat(listType === "picture" ? "picture" : "")
      }, [downloadIcon && createVNode("a", {
        "title": locale2.downloadFile
      }, [downloadIcon]), removeIcon && createVNode("a", {
        "title": locale2.removeFile
      }, [removeIcon])]);
      var listItemNameClass = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-list-item-name"), true), _defineProperty(_classNames2, "".concat(prefixCls2, "-list-item-name-icon-count-").concat([downloadIcon, removeIcon].filter(function(x) {
        return x;
      }).length), true), _classNames2));
      var preview = file.url ? [createVNode("a", _objectSpread2(_objectSpread2({
        "target": "_blank",
        "rel": "noopener noreferrer",
        "class": listItemNameClass,
        "title": file.name
      }, linkProps), {}, {
        "href": file.url,
        "onClick": function onClick7(e) {
          return _this2.handlePreview(file, e);
        }
      }), [file.name]), downloadOrDelete] : [createVNode("span", {
        "key": "view",
        "class": "".concat(prefixCls2, "-list-item-name"),
        "onClick": function onClick7(e) {
          return _this2.handlePreview(file, e);
        },
        "title": file.name
      }, [file.name]), downloadOrDelete];
      var style3 = file.url || file.thumbUrl ? void 0 : {
        pointerEvents: "none",
        opacity: 0.5
      };
      var previewIcon = showPreviewIcon ? createVNode("a", {
        "href": file.url || file.thumbUrl,
        "target": "_blank",
        "rel": "noopener noreferrer",
        "style": style3,
        "onClick": function onClick7(e) {
          return _this2.handlePreview(file, e);
        },
        "title": locale2.previewFile
      }, [createVNode(EyeOutlined, null, null)]) : null;
      var actions = listType === "picture-card" && file.status !== "uploading" && createVNode("span", {
        "class": "".concat(prefixCls2, "-list-item-actions")
      }, [previewIcon, file.status === "done" && downloadIcon, removeIcon]);
      var message2;
      if (file.response && typeof file.response === "string") {
        message2 = file.response;
      } else {
        message2 = file.error && file.error.statusText || locale2.uploadError;
      }
      var iconAndPreview = createVNode("span", null, [icon, preview]);
      var transitionProps = getTransitionProps("fade");
      var dom = createVNode("div", {
        "class": infoUploadingClass,
        "key": file.uid
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-list-item-info")
      }, [iconAndPreview]), actions, createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [progress];
        }
      })]);
      var listContainerNameClass = classNames(_defineProperty({}, "".concat(prefixCls2, "-list-picture-card-container"), listType === "picture-card"));
      return createVNode("div", {
        "key": file.uid,
        "class": listContainerNameClass
      }, [file.status === "error" ? createVNode(Tooltip, {
        "title": message2
      }, {
        default: function _default8() {
          return [dom];
        }
      }) : createVNode("span", null, [dom])]);
    });
    var listClassNames = classNames((_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls2, "-list"), true), _defineProperty(_classNames4, "".concat(prefixCls2, "-list-").concat(listType), true), _classNames4));
    var animationDirection = listType === "picture-card" ? "animate-inline" : "animate";
    var transitionGroupProps = _extends(_extends({}, getTransitionGroupProps("".concat(prefixCls2, "-").concat(animationDirection))), {
      class: listClassNames
    });
    return createVNode(TransitionGroup, _objectSpread2(_objectSpread2({}, transitionGroupProps), {}, {
      "tag": "div"
    }), {
      default: function _default8() {
        return [list];
      }
    });
  }
});
var Upload = defineComponent({
  name: "AUpload",
  mixins: [BaseMixin],
  inheritAttrs: false,
  Dragger,
  props: initDefaultProps$1(UploadProps, {
    type: "select",
    multiple: false,
    action: "",
    data: {},
    accept: "",
    beforeUpload: T,
    showUploadList: true,
    listType: "text",
    disabled: false,
    supportServerRender: true
  }),
  setup: function setup160() {
    return {
      upload: null,
      progressTimer: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data78() {
    return {
      sFileList: this.fileList || this.defaultFileList || [],
      dragState: "drop"
    };
  },
  watch: {
    fileList: function fileList(val) {
      this.sFileList = val || [];
    }
  },
  beforeUnmount: function beforeUnmount31() {
    this.clearProgressTimer();
  },
  methods: {
    onStart: function onStart3(file) {
      var targetItem = fileToObject(file);
      targetItem.status = "uploading";
      var nextFileList = this.sFileList.concat();
      var fileIndex = findIndex(nextFileList, function(_ref) {
        var uid2 = _ref.uid;
        return uid2 === targetItem.uid;
      });
      if (fileIndex === -1) {
        nextFileList.push(targetItem);
      } else {
        nextFileList[fileIndex] = targetItem;
      }
      this.handleChange({
        file: targetItem,
        fileList: nextFileList
      });
      if (!window.File || (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && {}.TEST_IE) {
        this.autoUpdateProgress(0, targetItem);
      }
    },
    onSuccess: function onSuccess(response, file, xhr) {
      this.clearProgressTimer();
      try {
        if (typeof response === "string") {
          response = JSON.parse(response);
        }
      } catch (e) {
      }
      var fileList2 = this.sFileList;
      var targetItem = getFileItem(file, fileList2);
      if (!targetItem) {
        return;
      }
      targetItem.status = "done";
      targetItem.response = response;
      targetItem.xhr = xhr;
      this.handleChange({
        file: _extends({}, targetItem),
        fileList: fileList2
      });
    },
    onProgress: function onProgress(e, file) {
      var fileList2 = this.sFileList;
      var targetItem = getFileItem(file, fileList2);
      if (!targetItem) {
        return;
      }
      targetItem.percent = e.percent;
      this.handleChange({
        event: e,
        file: _extends({}, targetItem),
        fileList: this.sFileList
      });
    },
    onError: function onError(error3, response, file) {
      this.clearProgressTimer();
      var fileList2 = this.sFileList;
      var targetItem = getFileItem(file, fileList2);
      if (!targetItem) {
        return;
      }
      targetItem.error = error3;
      targetItem.response = response;
      targetItem.status = "error";
      this.handleChange({
        file: _extends({}, targetItem),
        fileList: fileList2
      });
    },
    onReject: function onReject(fileList2) {
      this.$emit("reject", fileList2);
    },
    handleRemove: function handleRemove(file) {
      var _this = this;
      var onRemove2 = this.remove;
      var fileList2 = this.$data.sFileList;
      Promise.resolve(typeof onRemove2 === "function" ? onRemove2(file) : onRemove2).then(function(ret) {
        if (ret === false) {
          return;
        }
        var removedFileList = removeFileItem(file, fileList2);
        if (removedFileList) {
          file.status = "removed";
          if (_this.upload) {
            _this.upload.abort(file);
          }
          _this.handleChange({
            file,
            fileList: removedFileList
          });
        }
      });
    },
    handleManualRemove: function handleManualRemove(file) {
      if (this.$refs.uploadRef) {
        this.$refs.uploadRef.abort(file);
      }
      this.handleRemove(file);
    },
    handleChange: function handleChange21(info3) {
      if (!hasProp(this, "fileList")) {
        this.setState({
          sFileList: info3.fileList
        });
      }
      this.$emit("update:fileList", info3.fileList);
      this.$emit("change", info3);
    },
    onFileDrop: function onFileDrop2(e) {
      this.setState({
        dragState: e.type
      });
    },
    reBeforeUpload: function reBeforeUpload(file, fileList2) {
      var beforeUpload = this.$props.beforeUpload;
      var stateFileList = this.$data.sFileList;
      if (!beforeUpload) {
        return true;
      }
      var result = beforeUpload(file, fileList2);
      if (result === false) {
        this.handleChange({
          file,
          fileList: uniqBy(stateFileList.concat(fileList2.map(fileToObject)), function(item) {
            return item.uid;
          })
        });
        return false;
      }
      if (result && result.then) {
        return result;
      }
      return true;
    },
    clearProgressTimer: function clearProgressTimer() {
      clearInterval(this.progressTimer);
    },
    autoUpdateProgress: function autoUpdateProgress(_, file) {
      var _this2 = this;
      var getPercent = genPercentAdd();
      var curPercent = 0;
      this.clearProgressTimer();
      this.progressTimer = setInterval(function() {
        curPercent = getPercent(curPercent);
        _this2.onProgress({
          percent: curPercent * 100
        }, file);
      }, 200);
    },
    renderUploadList: function renderUploadList(locale2) {
      var _getOptionProps = getOptionProps(this), _getOptionProps$showU = _getOptionProps.showUploadList, showUploadList = _getOptionProps$showU === void 0 ? {} : _getOptionProps$showU, listType = _getOptionProps.listType, previewFile = _getOptionProps.previewFile, disabled = _getOptionProps.disabled, propLocale = _getOptionProps.locale;
      var showRemoveIcon = showUploadList.showRemoveIcon, showPreviewIcon = showUploadList.showPreviewIcon, showDownloadIcon = showUploadList.showDownloadIcon;
      var fileList2 = this.$data.sFileList;
      var _this$$props = this.$props, onDownload = _this$$props.onDownload, onPreview = _this$$props.onPreview;
      var uploadListProps = {
        listType,
        items: fileList2,
        previewFile,
        showRemoveIcon: !disabled && showRemoveIcon,
        showPreviewIcon,
        showDownloadIcon,
        locale: _extends(_extends({}, locale2), propLocale),
        onRemove: this.handleManualRemove,
        onDownload,
        onPreview
      };
      return createVNode(UploadList, uploadListProps, null);
    }
  },
  render: function render164() {
    var _classNames2;
    var _getOptionProps2 = getOptionProps(this), customizePrefixCls = _getOptionProps2.prefixCls, showUploadList = _getOptionProps2.showUploadList, listType = _getOptionProps2.listType, type2 = _getOptionProps2.type, disabled = _getOptionProps2.disabled;
    var _this$$data = this.$data, fileList2 = _this$$data.sFileList, dragState = _this$$data.dragState;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("upload", customizePrefixCls);
    var vcUploadProps = _extends(_extends({}, this.$props), {
      prefixCls: prefixCls2,
      beforeUpload: this.reBeforeUpload,
      onStart: this.onStart,
      onError: this.onError,
      onProgress: this.onProgress,
      onSuccess: this.onSuccess,
      onReject: this.onReject,
      ref: "uploadRef"
    });
    var uploadList = showUploadList ? createVNode(LocaleReceiver, {
      "componentName": "Upload",
      "defaultLocale": defaultLocale.Upload,
      "children": this.renderUploadList
    }, null) : null;
    var children = getSlot(this);
    if (type2 === "drag") {
      var _classNames;
      var dragCls = classNames(prefixCls2, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls2, "-drag"), true), _defineProperty(_classNames, "".concat(prefixCls2, "-drag-uploading"), fileList2.some(function(file) {
        return file.status === "uploading";
      })), _defineProperty(_classNames, "".concat(prefixCls2, "-drag-hover"), dragState === "dragover"), _defineProperty(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames));
      return createVNode("span", _objectSpread2({
        "class": className
      }, getDataAndAria(this.$attrs)), [createVNode("div", {
        "class": dragCls,
        "onDrop": this.onFileDrop,
        "onDragover": this.onFileDrop,
        "onDragleave": this.onFileDrop,
        "style": style3
      }, [createVNode(Upload$1, _objectSpread2(_objectSpread2({}, vcUploadProps), {}, {
        "class": "".concat(prefixCls2, "-btn")
      }), {
        default: function _default8() {
          return [createVNode("div", {
            "class": "".concat(prefixCls2, "-drag-container")
          }, [children])];
        }
      })]), uploadList]);
    }
    var uploadButtonCls = classNames(prefixCls2, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls2, "-select"), true), _defineProperty(_classNames2, "".concat(prefixCls2, "-select-").concat(listType), true), _defineProperty(_classNames2, "".concat(prefixCls2, "-disabled"), disabled), _classNames2));
    if (!children.length || disabled) {
      delete vcUploadProps.id;
    }
    var uploadButton = createVNode("div", {
      "class": uploadButtonCls,
      "style": children.length ? void 0 : {
        display: "none"
      }
    }, [createVNode(Upload$1, vcUploadProps, {
      default: function _default8() {
        return [children];
      }
    })]);
    if (listType === "picture-card") {
      return createVNode("span", {
        "class": classNames("".concat(prefixCls2, "-picture-card-wrapper"), className)
      }, [uploadList, uploadButton]);
    }
    return createVNode("span", {
      "class": className
    }, [uploadButton, uploadList]);
  }
});
Upload.Dragger = Dragger;
Upload.install = function(app) {
  app.component(Upload.name, Upload);
  app.component(Dragger.name, Dragger);
  return app;
};
var UploadDragger = Dragger;
var components2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  Affix: Affix$1,
  Anchor,
  AnchorLink,
  AutoComplete: AutoComplete$1,
  AutoCompleteOptGroup,
  AutoCompleteOption,
  Alert: index$i,
  Avatar: Avatar$1,
  AvatarGroup: Group$3,
  BackTop: index$h,
  Badge,
  BadgeRibbon: Ribbon,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbSeparator,
  Button: Button$1,
  ButtonGroup: ButtonGroup$1,
  Calendar: index$g,
  Card: Card$1,
  CardGrid: Grid,
  CardMeta: Meta,
  Collapse,
  CollapsePanel,
  Carousel: index$e,
  Cascader: index$d,
  Checkbox,
  CheckboxGroup,
  Col,
  Comment: index$c,
  ConfigProvider: index$j,
  DatePicker: DatePicker$1,
  RangePicker: WrappedRangePicker,
  MonthPicker,
  WeekPicker: WrappedWeekPicker,
  Descriptions: Descriptions$1,
  DescriptionsItem,
  Divider: index$a,
  Dropdown: Dropdown$1,
  DropdownButton,
  Drawer: index$9,
  Empty: Empty$1,
  Form: Form$1,
  FormItem,
  Grid: index$f,
  Input,
  InputGroup: Group$4,
  InputPassword: Password,
  InputSearch: Search$1,
  Textarea: TextArea,
  Image: Image$2,
  ImagePreviewGroup: PreviewGroup,
  InputNumber: index$8,
  Layout: Layout$1,
  LayoutHeader,
  LayoutSider,
  LayoutFooter,
  LayoutContent,
  List: List$2,
  ListItem: Item2,
  ListItemMeta: ItemMeta,
  message,
  Menu,
  MenuDivider: Divider$1,
  MenuItem,
  MenuItemGroup: ItemGroup,
  SubMenu,
  Mentions: Mentions$1,
  MentionsOption,
  Modal,
  Statistic,
  StatisticCountdown,
  notification,
  PageHeader: index$7,
  Pagination,
  Popconfirm: index$6,
  Popover: Popover$1,
  Progress,
  Radio,
  RadioButton: Button,
  RadioGroup: Group$1,
  Rate: index$5,
  Result: Result$1,
  Row: Row$2,
  Select: VcSelect,
  SelectOptGroup,
  SelectOption,
  Skeleton: Skeleton$1,
  SkeletonButton: SkeletonButton$1,
  SkeletonAvatar: SkeletonAvatar$1,
  SkeletonInput: SkeletonInput$1,
  SkeletonImage: SkeletonImage$1,
  Slider: index$4,
  Space: index$3,
  Spin,
  Steps: Steps$1,
  Step,
  Switch: index$2,
  Table: Table$1,
  TableColumn,
  TableColumnGroup,
  Transfer: index$1,
  Tree,
  TreeNode: TreeNode$2,
  DirectoryTree,
  TreeSelect: TreeSelect$1,
  TreeSelectNode,
  Tabs,
  TabPane: TabPane$1,
  TabContent,
  Tag: Tag$1,
  CheckableTag: CheckableTag$1,
  TimePicker: index$b,
  Timeline,
  TimelineItem,
  Tooltip,
  Typography: Typography$1,
  TypographyLink: Link$1,
  TypographyParagraph: Paragraph$1,
  TypographyText: Text$1,
  TypographyTitle: Title$1,
  Upload,
  UploadDragger,
  LocaleProvider: LocaleProvider$1
});
const _args = [
  [
    "ant-design-vue@2.2.8",
    "D:\\github\\vue-vite-admin-ts"
  ]
];
const _from = "ant-design-vue@2.2.8";
const _id = "ant-design-vue@2.2.8";
const _inBundle = false;
const _integrity = "sha1-+ofPaELY7poNivOT/0CZ7MQHLys=";
const _location = "/ant-design-vue";
const _phantomChildren = {};
const _requested = {
  type: "version",
  registry: true,
  raw: "ant-design-vue@2.2.8",
  name: "ant-design-vue",
  escapedName: "ant-design-vue",
  rawSpec: "2.2.8",
  saveSpec: null,
  fetchSpec: "2.2.8"
};
const _requiredBy = [
  "/"
];
const _resolved = "https://registry.npmmirror.com/ant-design-vue/download/ant-design-vue-2.2.8.tgz?cache=0&sync_timestamp=1633658431217&other_urls=https%3A%2F%2Fregistry.npmmirror.com%2Fant-design-vue%2Fdownload%2Fant-design-vue-2.2.8.tgz";
const _spec = "2.2.8";
const _where = "D:\\github\\vue-vite-admin-ts";
const bugs = {
  url: "https://github.com/vueComponent/ant-design-vue/issues"
};
const dependencies = {
  "@ant-design/icons-vue": "^6.0.0",
  "@babel/runtime": "^7.10.5",
  "@simonwep/pickr": "~1.8.0",
  "array-tree-filter": "^2.1.0",
  "async-validator": "^3.3.0",
  "dom-align": "^1.12.1",
  "dom-scroll-into-view": "^2.0.0",
  lodash: "^4.17.21",
  "lodash-es": "^4.17.15",
  moment: "^2.27.0",
  "omit.js": "^2.0.0",
  "resize-observer-polyfill": "^1.5.1",
  "scroll-into-view-if-needed": "^2.2.25",
  "shallow-equal": "^1.0.0",
  "vue-types": "^3.0.0",
  warning: "^4.0.0"
};
const description = "An enterprise-class UI design language and Vue-based implementation";
const devDependencies = {
  "@babel/cli": "^7.8.4",
  "@babel/core": "^7.10.5",
  "@babel/plugin-proposal-class-properties": "^7.8.3",
  "@babel/plugin-proposal-export-default-from": "^7.8.3",
  "@babel/plugin-proposal-export-namespace-from": "^7.12.1",
  "@babel/plugin-proposal-object-rest-spread": "^7.9.6",
  "@babel/plugin-proposal-optional-chaining": "^7.10.1",
  "@babel/plugin-syntax-dynamic-import": "^7.8.3",
  "@babel/plugin-transform-member-expression-literals": "^7.8.3",
  "@babel/plugin-transform-object-assign": "^7.8.3",
  "@babel/plugin-transform-property-literals": "^7.8.3",
  "@babel/plugin-transform-runtime": "^7.10.5",
  "@babel/plugin-transform-template-literals": "^7.8.3",
  "@babel/plugin-transform-typescript": "^7.12.1",
  "@babel/polyfill": "^7.8.7",
  "@babel/preset-env": "^7.9.6",
  "@babel/preset-typescript": "^7.10.4",
  "@commitlint/cli": "^12.0.0",
  "@commitlint/config-conventional": "^12.0.0",
  "@octokit/rest": "^18.0.0",
  "@types/fs-extra": "^9.0.8",
  "@types/lodash-es": "^4.17.3",
  "@types/raf": "^3.4.0",
  "@typescript-eslint/eslint-plugin": "^4.1.0",
  "@typescript-eslint/parser": "^4.1.0",
  "@vue/babel-plugin-jsx": "^1.0.0",
  "@vue/cli-plugin-eslint": "^5.0.0-0",
  "@vue/compiler-sfc": "^3.1.0",
  "@vue/eslint-config-prettier": "^6.0.0",
  "@vue/eslint-config-typescript": "^7.0.0",
  "@vue/test-utils": "^2.0.0-0",
  "@webpack-cli/serve": "^1.3.1",
  acorn: "^8.0.0",
  autoprefixer: "^10.2.0",
  axios: "^0.21.0",
  "babel-eslint": "^10.0.1",
  "babel-jest": "^26.1.0",
  "babel-loader": "^8.0.0",
  "babel-plugin-import": "^1.1.1",
  "babel-plugin-inline-import-data-uri": "^1.0.1",
  "babel-plugin-istanbul": "^6.0.0",
  "case-sensitive-paths-webpack-plugin": "^2.1.2",
  chalk: "^4.1.0",
  cheerio: "^1.0.0-rc.2",
  codecov: "^3.0.0",
  colorful: "^2.1.0",
  commander: "^7.2.0",
  "compare-versions": "^3.3.0",
  "cross-env": "^7.0.0",
  "css-loader": "^5.0.0",
  "css-minimizer-webpack-plugin": "^3.0.0",
  "deep-assign": "^3.0.0",
  "docsearch.js": "^2.6.3",
  "enquire-js": "^0.2.1",
  eslint: "^7.25.0",
  "eslint-config-prettier": "^8.0.0",
  "eslint-plugin-html": "^6.0.0",
  "eslint-plugin-jest": "^24.3.6",
  "eslint-plugin-markdown": "^2.0.0-alpha.0",
  "eslint-plugin-prettier": "^3.1.4",
  "eslint-plugin-vue": "^7.1.0",
  "fetch-jsonp": "^1.1.3",
  "fs-extra": "^10.0.0",
  glob: "^7.1.2",
  gulp: "^4.0.1",
  "gulp-babel": "^8.0.0",
  "gulp-strip-code": "^0.1.4",
  "gulp-typescript": "^6.0.0-alpha.1",
  "html-webpack-plugin": "^5.3.1",
  husky: "^4.0.0",
  "ignore-emit-webpack-plugin": "^2.0.6",
  jest: "^26.0.0",
  "jest-environment-jsdom-fifteen": "^1.0.2",
  "jest-serializer-vue": "^2.0.0",
  "jest-transform-stub": "^2.0.0",
  "js-base64": "^3.0.0",
  "json-templater": "^1.2.0",
  jsonp: "^0.2.1",
  less: "^4.0.0",
  "less-loader": "^10.0.0",
  "less-plugin-npm-import": "^2.1.0",
  "less-vars-to-js": "^1.3.0",
  "lint-staged": "^11.0.0",
  marked: "0.3.18",
  merge2: "^1.2.1",
  "mini-css-extract-plugin": "^1.5.0",
  minimist: "^1.2.0",
  mkdirp: "^0.5.1",
  mockdate: "^2.0.2",
  nprogress: "^0.2.0",
  "object-assign": "^4.1.1",
  postcss: "^8.2.12",
  "postcss-loader": "^6.0.0",
  prettier: "^2.2.0",
  "pretty-quick": "^3.0.0",
  prismjs: "^1.20.0",
  querystring: "^0.2.0",
  "raw-loader": "^4.0.2",
  reqwest: "^2.0.5",
  rimraf: "^3.0.0",
  "rucksack-css": "^1.0.2",
  "selenium-server": "^3.0.1",
  semver: "^7.0.0",
  "style-loader": "^3.0.0",
  stylelint: "^13.0.0",
  "stylelint-config-prettier": "^8.0.0",
  "stylelint-config-rational-order": "^0.1.2",
  "stylelint-config-standard": "^22.0.0",
  "stylelint-declaration-block-no-ignored-properties": "^2.1.0",
  "stylelint-order": "^4.0.0",
  "terser-webpack-plugin": "^5.1.1",
  through2: "^3.0.0",
  "ts-jest": "^26.4.1",
  "ts-loader": "^9.1.0",
  typescript: "~4.3.5",
  "umi-mock-middleware": "^1.0.0",
  "umi-request": "^1.3.5",
  "url-loader": "^3.0.0",
  vue: "^3.1.0",
  "vue-antd-md-loader": "^1.2.1-beta.1",
  "vue-clipboard2": "0.3.1",
  "vue-draggable-resizable": "^2.1.0",
  "vue-eslint-parser": "^7.0.0",
  "vue-i18n": "^9.1.7",
  "vue-infinite-scroll": "^2.0.2",
  "vue-jest": "^5.0.0-alpha.3",
  "vue-loader": "^16.1.1",
  "vue-request": "^1.0.2",
  "vue-router": "^4.0.0",
  "vue-server-renderer": "^2.6.11",
  "vue-style-loader": "^4.1.2",
  vuex: "^4.0.0-beta.2",
  webpack: "^5.0.0",
  "webpack-bundle-analyzer": "^4.0.0",
  "webpack-cli": "^4.6.0",
  "webpack-dev-server": "^4.0.0",
  "webpack-merge": "^5.0.0",
  webpackbar: "^5.0.0-3",
  "xhr-mock": "^2.5.1"
};
const files = [
  "dist",
  "lib",
  "es",
  "scripts",
  "vetur"
];
const funding = {
  type: "opencollective",
  url: "https://opencollective.com/ant-design-vue"
};
const homepage = "https://www.antdv.com/";
const keywords = [
  "vue",
  "vue3",
  "ant",
  "design",
  "antd",
  "vueComponent",
  "component",
  "components",
  "ui",
  "framework",
  "frontend"
];
const license = "MIT";
const main = "lib/index.js";
const module = "es/index.js";
const name = "ant-design-vue";
const peerDependencies = {
  "@vue/compiler-sfc": ">=3.1.0",
  vue: ">=3.1.0"
};
const repository = {
  type: "git",
  url: "git+https://github.com/vueComponent/ant-design-vue.git"
};
const scripts = {
  codecov: "codecov",
  compile: "node antd-tools/cli/run.js compile",
  dev: "webpack serve",
  dist: "node --max_old_space_size=8192 antd-tools/cli/run.js dist",
  "generator-webtypes": "tsc -p antd-tools/generator-types/tsconfig.json && node antd-tools/generator-types/index.js",
  lint: "eslint -c ./.eslintrc --fix --ext .jsx,.js,.vue,.ts,.tsx ./components",
  "lint:style": 'stylelint "{site,components}/**/*.less" --syntax less',
  "pre-publish": "node ./scripts/prepub && npm run generator-webtypes",
  prepublishOnly: "node antd-tools/cli/run.js guard",
  prettier: "prettier -c --write '**/*'",
  "pretty-quick": "pretty-quick",
  pub: "node --max_old_space_size=8192 antd-tools/cli/run.js pub",
  "pub-with-ci": "node antd-tools/cli/run.js pub-with-ci",
  test: "cross-env NODE_ENV=test WORKFLOW=true jest --config .jest.js",
  "test:dev": "cross-env NODE_ENV=test jest --config .jest.js"
};
const sideEffects = [
  "site/*",
  "components/style.ts",
  "components/**/style/*",
  "*.vue",
  "*.md",
  "dist/*",
  "es/**/style/*",
  "lib/**/style/*",
  "*.less"
];
const title = "Ant Design Vue";
const typings = "lib/index.d.ts";
const unpkg = "dist/antd.min.js";
const version$2 = "2.2.8";
const vetur = {
  tags: "vetur/tags.json",
  attributes: "vetur/attributes.json"
};
var pkg = {
  _args,
  _from,
  _id,
  _inBundle,
  _integrity,
  _location,
  _phantomChildren,
  _requested,
  _requiredBy,
  _resolved,
  _spec,
  _where,
  bugs,
  dependencies,
  description,
  devDependencies,
  files,
  funding,
  homepage,
  keywords,
  license,
  main,
  module,
  name,
  peerDependencies,
  repository,
  scripts,
  sideEffects,
  title,
  typings,
  unpkg,
  version: version$2,
  vetur,
  "web-types": "vetur/web-types.json"
};
var version = pkg.version;
var version$1 = version;
var install = function install2(app) {
  Object.keys(components2).forEach(function(key2) {
    var component = components2[key2];
    if (component.install) {
      app.use(component);
    }
  });
  app.config.globalProperties.$message = message;
  app.config.globalProperties.$notification = notification;
  app.config.globalProperties.$info = Modal.info;
  app.config.globalProperties.$success = Modal.success;
  app.config.globalProperties.$error = Modal.error;
  app.config.globalProperties.$warning = Modal.warning;
  app.config.globalProperties.$confirm = Modal.confirm;
  app.config.globalProperties.$destroyAll = Modal.destroyAll;
  return app;
};
var Antd = {
  version: version$1,
  install
};
var antd = "";
export { Antd as A, message as m, notification as n };
